Michael KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode #58, recorded December 19, 2017. I’m Michael Kennedy.
Brian OKKEN: And I’m Brian Okken.
KENNEDY: We have a bunch of awesome stuff to share with you. First, I want to say this episode is brought to you by DigitalOcean, so thank you, DigitalOcean.
OKKEN: Yeah, thanks, DigitalOcean.
KENNEDY: Indeed. Love their stuff. We’ll talk a little bit more about that later. Let’s start with monkeying around a bit.
OKKEN: There’s so much monkey, I’m not sure why, in Python.
KENNEDY: There’s a lot of monkeying, you’re right.
OKKEN: Yeah, we’ve got Monkey Patching and stuff. But this is MonkeyType from Instagram. In Episode #54, we talked about PyAnnotate, which is a way to add type annotations to your code while it’s running. It’s from Dropbox, but it was only Python 2 at the moment. This one is a similar sort of thing but it’s from Instagram and it’s Python 3 only. It doesn’t do the comments, it does the Python 3 style type annotations, so I’m really excited to try this out.
KENNEDY: Yeah, that sounds really cool. You know, I’m definitely heartened to see a lot of people who have large code bases – Dropbox, Instagram and so on – making these tools. They’re going to bring everybody along to Modern Python really nicely.
OKKEN: It’s very good and I like the way that types are moving. I was kind of lukewarm at types for Python at first, but using it to try to solidify the quality of your code base for large code bases makes total sense, and I like what they’re doing with it.
KENNEDY: I really like adding the type hints, just in a couple places where the autocomplete falls down. Last week, we talked about MongoEngine. You do a query for MongoEngine and as far as the tooling, it’s just like, that’s a random thing that came back. It has no idea what it is. But if you add just a few type hints, the rest of your application can automatically… Well, Editor can detect the rest of your applications working with one of these concrete types. So, just a little type hints here and there goes a long way. I guess that’s probably for new code, right? But for older code, you want to switch to Python 3 from Python 2, having that as a solid foundation so you really know what you’re working with as you move it around. That’s even really valuable right there on its own.
OKKEN: The article I linked to, one of the things it talks about is, what happens is that you’re actually running code and it pays attention to which types are going through different parts of your code. You can run it through while you’re running tests but it did have a note – which I thought was interesting – to say if you have the style of testing where you’re using a lot of mock objects, the types are going to be all messed up. So, be aware of that; you may want to generate your types some other way.
KENNEDY: Oh, right, because it will see the mock and think that’s what suppose to go there, not the thing it is mocking.
OKKEN: Yeah, exactly.
KENNEDY: Interesting. Cool.
So, sometimes you can make your code fast by optimizing it. Maybe it talks to a database and you’re going to put the right kind of indexes in there and of course, it should be fast. Other times, you’re working with things that are out of your control. You need to call a web service, some kind of stock quote or whatever, and it can only be as fast as that web service. Unless, you’re willing to hang onto it for a little bit and do some caching, right?
OKKEN: Yeah.
KENNEDY: So, Python, I don’t know how many people know, but there’s something called Funk Tools in Python and in there there’s a decorator called lru_cache. And you can put that on to any function and it will look at the arguments going in there and if it sees that argument series again, multiple arguments, if it sees arguments it’s seen before, it will just return that value instantly. That’s pretty cool, right?
OKKEN: I did not know that. That is cool.
KENNEDY: Yeah. Suppose I’m calling a weather API and I’m doing it from my website and I’ve got all these different people come in and calling it and it turns out to be slow, I can actually throw that onto it. And it would say if two people ask for the same zip code, potentially it’s just going to return that instantly, just out of memory. So, that’s really cool, but it only works in certain ways. For example, if that method takes a list, lists are uncacheable; lru_cache decorator requires all the things it’s going to hold to be cacheable, for example. So, it’s cool but it’s kind of limited in a certain way.
So, there’s this other project that’s kind of inspired by this idea and it goes much further and has a lot more options, called cachetools. I’m guessing you probably haven’t heard of cachetools if you haven’t heard of lru_cache.
OKKEN: I have not.
KENNEDY: So, this is a project that has a bunch of different cache implementations, as well as a more flexible decorator. Actually, a couple decorators you can use in exactly the same way. So, it defines a basic cache, a LFUCache, Least Frequently Used, because eventually your cache may get full and run out of memory and you can say, ‘Only hold 100 items.’ Well, when you get to 101, which one do you throw away? Well, you can use the LFUCache and throw away the one that was least frequently used, an LRUCache, or one that was Least Recently Used, or have what’s called a TTLCache, which is a time-to-live. Cache everything for five minutes. I’m sure we have memory for this. How could that be bad, right?
OKKEN: (Laughs) Yeah.
KENNEDY: And then you get that call in the middle of the night. ‘Server’s down.’ (Laughs)
OKKEN: The TTLCache, that seems like… Your example of grabbing some weather data or something, you could hold onto the weather data for at least a few minutes before refreshing that.
KENNEDY: Right. What’s really cool about the TTL one is it naturally expires the data in a way that you can predict and might understand. So, if you’re like, ‘Look, the weather’s not going to change that much in ten minutes. Cache everything for ten minutes.’ It will automatically go get a new one after the eleventh minute. That’s a really nice way to do it.
So, these are cache implementations. Then there is what’s called a memoizing – so memoization is this concept that we’ve been talking about – memoizing decorators, cachetools.cached, which is the other one we talked about before. But you can plug in all sorts of stuff. You can plug in any of the cache implementations we’ve talked about or even a straight dictionary. It takes a function that will generate the hash, so it can cache non-hashable things. You can generate some kind of indicator like an ID out of a database object or something. You can pass interesting things like a weak value, a weakref.WeakValueDictionary, so you don’t actually hold onto the memory of the things, which is pretty cool. It even has a locking object that you can pass for thread safety, if you have to recreate stuff in the hash. So, really, it’s like the idea of the LRUCache and Funk Tools, but way more flexible and configurable.
OKKEN: Wow, this is nice.
KENNEDY: It’s insanely easy to use them. You just throw a decorator on a slow function and now it’s a fast function. Just make sure you understand what that
means.
OKKEN: Yeah, so definitely in conjunction with safe measure before you prematurely optimize.
KENNEDY: Yeah, it’s cool though. Speaking of going fast…
OKKEN: Yeah, speaking of going fast, one of the things that people often start with with a new project is for a database, instead of deciding which one they’re going to use down the road, they’ll throw SQLite in. But since it’s built into Python and you don’t have to install anything extra – I guess Python calls it SQLite 3 – I don’t know, were there two of them before that?
KENNEDY: I guess so.
OKKEN: That’s something folks use and they sometimes migrate to something else, and sometimes there’s a lot of applications that stick with it. There’s an article called, “Going Fast with SQLite and Python.” It talks about some of the ways this fellow came up with to make it quickly. (Laughs) Make it run faster.
KENNEDY: Yeah, that’s great. So, SQLite is an embedded database, it ships with Python, you don’t have to do anything to have it, you just have it. It runs in process, so there’s zero latency over the network overhead or anything like that. It’s actually really powerful if you’re to have an in process database.
OKKEN: Yeah, and I had the impression that it was simpler than it is. But it does quite a bit of cool things as I was reading through this. I didn’t know you could do user defined functions and you’ve got control over transactions and autocommits and things like that.
KENNEDY: It’s gotten to be pretty feature rich. It’s cool.
OKKEN: It’s a pretty dense article but I think it’s a good to throw yourself into the deep end, if you want to jump into SQLite 3.
KENNEDY: Yeah, it’s definitely cool. Certainly a good way to get started so you don’t have to worry about extra servers and network connectivity and keep that safe, and all that. Pretty cool.
So, before we get onto the next item, I want to talk quickly about DigitalOcean. This website that hosts the podcast, delivers the podcast feed and a lot of the other stuff that I’m doing online, runs on DigitalOcean. Very, very nice experience. They’ve got incredibly fast, reliable and cheap servers. Five, ten dollars, you can have servers based on SSDs, up and running in 30 seconds. You just SSH in, get them all set up and ready to roll. If you want nice, fast servers, check them out. DigitalOcean.com. Let them know that we sent you their way.
OKKEN: They’ve been really good about sponsoring the show. We really appreciate that.
KENNEDY: Yeah, definitely. Thank you, DigitalOcean.
One thing, I think, many people got their first programming experience on is a graphing calculator. Remember back when you were in middle school or something and you had a TI (Texas Instruments) whatever, and you could make it do dumb things?
OKKEN: Well, yeah. I even started programming my HP (Hewlett Packard) calculator and it didn’t even graph. I was programming that.
KENNEDY: Yeah, so HP or TI or whatever. So, one of the really cool finds that we’ve dug up recently is this graphing calculator by this company called Numworks. You might think, ‘Okay, why is this graphing calculator very interesting?’ Well, the way that you program it is you program it in Python.
OKKEN: Yeah, that’s cool.
KENNEDY: It’s really cool. The programming language literally is Python and it will do visual math. It’s got even a free emulator, so that you can run it on your Mac or your PC. Check it out there. It does graphing, all kind of stuff. It even has a way for you to work with the hardware. It gives you some stats on 3D printing and things like that, if you want to do more hardware-oriented things. But definitely, this concept of a full-blown graphing calculator, where you program it in Python, that’s awesome.
OKKEN: And hackable. And yet, it’s supposedly going to be okay for use on the SAT even, in August of next year.
KENNEDY: Yeah, that’s actually a big deal. I know some of the graphing calculators are banned because people use them to cheat or they do too much or whatever. At least for now, until they figure out pip install SAT helper.
OKKEN: Yeah, exactly.
KENNEDY: That’s pretty fun, check that out. It’s nice to see that showing up in the calculator space because that is the first programmable thing kids have to interact with.
OKKEN: We don’t really see it too much anymore in consumer things but in test and measurement we see some programmable features show up in different sorts of devices. Having the programmable language be Python in more places is good.
KENNEDY: Yeah, definitely. We talked about last week having Python be the programming language of Excel, for example. It seems like a really great choice. If you want to add a little programmability to whatever is its you’re doing, Python seems like a great choice for that language, so it’s nice to see it here as well.
OKKEN: It’s nice.
KENNEDY: One of the problems you might have with the data science base if you’re working with a Jupyter Notebook and you just have access to the notebook, but you need a library that’s not on the server, what are you going to do?
OKKEN: I didn’t know this was a problem, actually. I haven’t been using Jupyter Notebooks enough to run into this issue. A lot of people get their Python in Jupyter from installing a conda package or some other bundled thing and you can’t just go off and pip install. I didn’t know you couldn’t. But Jake VanderPlas wrote an article on installing Python packages and there’s a couple – I’m not even going to try to write this – but I pulled out some of the cheats for pip and conda and on how to install from within it. There’s some magical incantations. But the article also goes through about all the different reasons why you have to do this.
KENNEDY: Yeah, they’re not obvious at all. I would have never figured those out.
OKKEN: Yeah, so it’s good that somebody figured it out.
KENNEDY: Yes, that you Jake. (Laughs) That’s awesome. If you’re doing data science on Jupyter Notebooks, this is really cool.
So, last thing I want to share for us is the videos from PyConDE, as in Deutschland, are online. Miroslav (@euromiro) let us know on Twitter about this and there are a ton of interesting talks over here. Quite a bunch of cool talks. I’m not sure how many but I’d guess 50 or so.
OKKEN: Are they all in German?
KENNEDY: Here’s the thing, as far as I can tell, I’ve only seen English ones and I looked through a bunch of them. There’s a cool talk called, “Technical Lessons from Pythonic Refracturing at Yelp” by a woman named Yeni Chung, and a bunch of other ones. It’s kind of hard to read all the titles right here but I looked through and I’m definitely filling up my playlist with stuff that I need to start watching because there’s a lot of cool stuff here. Yves Hilpisch, who is on my podcast, talks about how Python has taken over in finance, for example, and we don’t even have it in Excel yet. So, there’s lots of cool stuff here. It was in Karlsruhe in Germany, which is a lovely place. I wish I could have gone to the conference but the second best thing is to watch it online.
OKKEN: I’m really glad that we have this. Can’t wait.
KENNEDY: Yeah, all the PyCons do such a good job of getting their content online straight away, within a day or two of the presentation, so it really makes a big difference. Especially since they sell out.
OKKEN: Yeah, definitely.
KENNEDY: We’re definitely going to be at the one in Cleveland, PyCon US. Are you going to make it?
OKKEN: Yeah, I think so. That’s the plan.
KENNEDY: That’s the plan. It’s going to be fun. But for now we’ll enjoy the ones in Germany.
Any news? End of the year?
OKKEN: End of the year, yeah. I’m trying to come up with some fun Python projects to work on in my free time.
KENNEDY: Get a Raspberry Pi and do something with it. Maybe plug it in to home assistant, things like that. But I haven’t done anything.
OKKEN: Me either. I’ve got two of them sitting there.
KENNEDY: (Laughs) If you could just put some code on them and make it do something cool. Right on.
Well, Brian, thanks again for sharing the news with everyone. It’s great to chat with you as always.
OKKEN: Thank you.
KENNEDY: Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues. <|endoftext|>
Michael KENNEDY: Hello and welcome to Python Bytes. It’s Episode #24 and we are going to deliver Python news and headlines directly to earbuds. This episode was recorded on May 2, 2017 and is brought to you by Rollbar. I'm Michael Kennedy.
Brian OKKEN: I'm Brian Okken. 
KENNEDY: We're here to bring you a bunch of Python news, but this time it's little different. Normally, we’re broadcasting from two secret locations in Portland, Oregon. But this time, Brian, you're dialing from slightly further away. 
OKKEN: Yeah, I'm just southeast of Munich today. 
KENNEDY: Alright. Well, welcome to Europe. Let's start with Learning Python out of Munich. 
OKKEN: Yes, so this is one of the, I think, a listener of the show contacted us and said he wrote a Learning Python series, but he wrote it for a group called, Robotics And Beyond and it’s a STEM educational space which really looks cool. I think it looks like a nice tutorial He is publishing it on Dan Baders’ site, dbader.org and the first in the series is “Let's Program with Python: Statements, Variables and Loops”. I think he's coming at it from a space of, just really getting started/haven't done much. He's even goes through, ‘What is programming?’ assuming people haven't done programming before. It's telling people how you're telling the computer how to do steps. It's hard for me to put my head back in the space of “new to programming” but I think this looks like something that might be good for – I don't know what age group – but it would be good. 
KENNEDY: Yeah, well, we can talk about a lot of different age groups. Way to go, Doug. That's awesome. It's really hard to you don't get rid of the curse of knowledge once you've learned a thing, it's really hard to see it with fresh eyes and understand the challenges and stuff. But that's really cool. Don't you wish something like Robotics and Beyond existed when you were a kid?
OKKEN: Yeah, I do. One of the things that I like also about having lots of different people tackle the new-to-programming space is that everybody learns differently. You might look at one series and go, ‘Man, I just don't get it.’ And then look at somebody else’s and it just clicks. This one uses Turtle Graphics and stuff. I haven't seen people use Turtle Graphics very much recently, so that's kind of fun. 
KENNEDY: Oh, yeah, very cool. Nice. That's great one, so check that out. If people ask you for how to get started programming, right, maybe kids, the there's a lot of good options here. Here’s one more. 
So, speaking of learning to program, I picked one that is an actual academic paper but I felt it was pretty interesting. This was done by Philip Guo. I've had him on Talk Python a few times. In this one he's talking about helping older adults learn to become programmers or become more proficient in programming. So, like what you were just talking about, there's a lot of, ‘Hey, you're a young kid. Do you want to get started with robots and programming? Here's how you do it. We’ll get you going to watch your career and stuff.’ But Philip said that so many of these resources are focused on the young, teenage to early-20s group, starting their careers. But how much do we really know about people who are sixty to eighty-five years old, who are just learning to program? He actually wrote a proper academic paper and did a bunch of research on those guys. 
OKKEN: Wow, I think that's cool. 
KENNEDY: It is really cool. 
OKKEN: The age group, I guess, I wouldn't expect people with from the age group you've listed. Sixty to eighty-five, was that the age group of the respondents? 
KENNEDY: That was the age group of the respondents, yeah. If you were outside of that age range, or mostly younger, than you were sort of not included. It was really focused on people who are basically either about to retire or who were retired. It looked at a couple of different aspects like, why are they interested in learning a program? What challenges do they have that they share with everyone that is learning a program? Like, ‘What's a variable? What's a pointer?’ Everybody suffers that, but there's also specific challenges for that age group. Also, what are they using to learn, and some of the lessons on how we can make the whole environment better for those guys, as well. 
OKKEN: I think that's great. 
KENNEDY: Yeah, I do too. I think it's interesting to look at what some of the reasons why people in this age group were learning to program. Some of them just said, ‘Look, I'm now retiring and I've always wanted to learn to program. Maybe I did something technical, like maybe I was a scientist, but I never really got around to learning programming.’ That might be one reason. Another was connected with grandchildren. A lot of these folks have children who are maybe taking this Robotics And Beyond-type course and they’re like, ‘Hey, I would love to do that with my grandchild, but I got to learn Python myself, right?’ Another big opportunity here is, there is a pretty big gap between people who can do programming and people who are teaching kids. So, people in this age group also have a lot of time, if they’re retired, to maybe donate an hour or two a week at some place mentoring or something like that. Maybe they could fill in, like sort of help teachers at high schools and middle schools with actually teaching programming, and not just like the coding class teaches HTML, right? Something like that. As well as just keeping mentally active and pursuing hobbies. Like, their hobby is airplanes and they are going to create something that works with airplanes somehow. 
OKKEN: I could see probably the maker space getting into that and people trying to program Raspberry Pi and stuff like that. 
KENNEDY: Yeah, absolutely. There’s a lot of cool stuff, a lot of cool tie-ins with like the MicroPython-type stuff, as well. So, if you are interested in this, check this out. I’m also planning on doing a full, proper Talk Python episode with Philip in a few weeks, so we'll catch up on that and go deeper on that show. 
OKKEN: Okay, great. 
So, next up I've got something that we talked about, I can’t even remember what episode; I was looking for a good way to have a local PyPI server just so you can sort of not have to go out on to PyPI all the time. Especially on the plane trip when I was flying over here, I knew I wouldn't have an internet connection, so I wanted to make sure I had a cache of all of the packages I needed while I was programming on the plane. I don't know when this crept in, but there's pip has download now and I don't think it used to always have. I've got the just the few lines of code you need in our show notes. It's just, you go to a directory you want, and you type pip download and <some package> and it downloads that package and all of its dependencies, and doesn't install it. It just stores the wheels in that directory. 
KENNEDY: Yeah, that's super cool. So, you can basically create an offline version of PyPI. 
OKKEN: And it's really quick. You can even list multiple packages on the line. I just I knew like, the ten or twelve that I needed and didn't know what their dependencies were, and just filled up a directory in like ten minutes or less. Then I was ready to go. You just have to use the – when you're doing the install – you do the --no-index-- and --find-links-- and point it to your directory. Then the rest is the same, you just give it a package. 
This includes version numbers, so you can you can have multiple versions in there, as well. Just wanted to share that with everybody. 
KENNEDY: Do you know if I can give it like, a requirements txt and say, ‘Download that’? Will it download the results of that? I suspect you can, right? Probably pip download -r requirements.txt, I bet.
OKKEN: Probably. I don't usually work with requirements files. 
KENNEDY: Nice. 
Okay, this is a cool thing. So, if you maybe were going to be stuck on an airplane and trains and other places for like, eighteen hours straight, you might want to take packages with you, right?
OKKEN: Yes. 
KENNEDY: That's awesome. So, that's a really cool tip there. I know there's like the devpi and the actual local, proper PyPI servers that you can set up and just point at the URL, but I didn't know about this local download option. This is great. 
OKKEN: All those other little PyPI servers, I know that the setup says that they're really easy but I haven't been able to get it to work for me. I don't know what I'm doing wrong, but this is easy. 
KENNEDY: Yeah, definitely. Everybody has a directory, so they can do it.  (Laughing) You don't have to have the right infrastructure to run it. It’s cool. 
Aright, before we get on to the next item which is about adding features to the Python language itself, I wanted to say thanks, Rollbar. 
You guys hear me talk about Rollbar a lot, you know that I use Rollbar on my web site and I really like Rollbar. Basically, all you have to do is pip install Rollbar, maybe include a line or two in the config or set up for your Python web app and it is tracking all these errors and sending reports and notifications with lots of details, any time it happens. So, these guys are going to have a booth at PyCon. They're going to be just like us, Brian. We're all going to have booths at PyCon. 
OKKEN: Yeah. I'm going to have to get a Rollbar sticker. 
KENNEDY: Yeah, definitely get a Rollbar sticker, maybe a Rollbar shirt. I don't know what kind of swag they are bringing to the show, but they want to make sure that you know there's a booth for Rollbar at PyCon. Drop by and they’ll give you a demo and give you some kind of swag to go with it. 
OKKEN: Awesome.
KENNEDY: So, just check them out. Rollbar.com/pythonbytes. Get the boot strap plan for free, which is a hundred thousand events and one hundred and eighty days of retention. Hopefully, you don't use up that many errors, but if you do they got you covered. 
Alright. So, you know what would be cool? If we could have increment and decrement operators in Python. We can do (plus equals one) +=1, but think of all the characters we’re wasting there. What if we could just do (plus plus) ++. Do you know why Python doesn't have increment and decrement operators? I have a theory but I don't actually know. 
OKKEN: I don't know? Do you? 
KENNEDY: Certainly, the language was created after C and C++, so it's not like it wasn't known as a possibility. I suspect it was to keep it more explicit. You know one of the challenges of (plus plus) ++ and (minus minus) - -  and those types of things is that a lot of languages that support them support like two variations, + variable and variable ++. It's always like, ‘Okay, well, that increments it, then returns the incremented value versus returns original value…  It's kind of confusing. Like, why is like increment confusing? I suspect GUI does just like it simple. 
OKKEN: It's also like, in C++, it matters which side the assignment operator is on to, if it's an L value or an R value.
KENNEDY: Yes, all these things. So, it doesn't have one, but friend of the show, Anthony Shaw said, ‘Let's see what it would be like if we tried to add one.’ I think this is cool because his article on Medium takes you through, step by step, what it is you need to do to add a new feature to the Python language. Basically, he writes an article that adds ++ and -- to see Python. 
OKKEN: I like where he’s going with it and also teaching people how to do this. It’s kind of neat.
KENNEDY: It certainly takes some of the mystery of like, ‘How would you even start out of this?’ He says, ‘Look, there's basically five or six levels.’ You're going to start by doing a pep to get agreement on what the language features going to be. Then there's a grammar file that describes what the statements in Python are. You don't want to just cram it into CPython, the execution engine, because things like PyPy and other implementations you want those to stay consistent. So, there's this grammar file they all share. He talks about how to add them and it turns out it's like, super easy to add these new things. Then there's the lexer that parses it. Lexer that goes through and turns it to tokens. In the parser take the tokens to abstract syntax trees and then there's a compiler actually compiles it to instructions.
He goes for all the steps and shows you how it works and even has his attempt to add this feature to Python itself, out on GitHub if you want to check it out. He's got a working version with ++. 
OKKEN: That’s pretty cool. Maybe we could get him to add begin and end to blocks. (Laughing)
KENNEDY: Hopefully, no. And curly braces, we all love the curly braces. No, just kidding. 
Okay, that's awesome. 
Another thing that you brought up that I like is colorful. I think so many of the apps we create in Python are terminal level or CLI-type apps. People really could do more to make them pretty, right? 
OKKEN: Yeah, so I've been working a lot with Pytest lately and one of the great benefits of it is the color in the terminal window. Working with terminal colors is often not very fun, but this colorful project has actually got a syntax that's pretty darn readable. Once you've figured out what colors and what different parts of your command line interface you want different colors, I don't think you're going to have to muck with it too much using colorful. It even has things like piping colors to strings and different + and & operators that make sense with colors. I like what they're doing with this. 
KENNEDY: Yeah, that's cool. I do, as well. A couple of things that really stood out as nice to me, one is the syntax is pretty straightforward on how you use it. The fact that you can use hexadecimal, so you can just (hash) - fa fa fa for a grey or whatever. You can you can take sort of web colors and plug them in, which is really cool. They even have themes, like you can set up general themes. You can use context managers, so in a with block you can set a color, things like that. 
OKKEN: That’s neat. 
KENNEDY: Yeah, pretty sweet. I might start using it. I've looked at Colorama and some of the other ones, and they’re fine but, I don't know. It’s painful to say, ‘Take this enumerated text value and concatenated with my string to make it a color.’ I think colorful is a little nicer. 
OKKEN: I wonder if it's built on top of Colorama. 
KENNEDY: We’ll have to look inside.
Speaking of packages, everybody who works on making a Python package, they want to add a nice bit of bling. Make it fancy looking, right? 
OKKEN: Yeah, all the extra little blips and stuff. 
KENNEDY: Yeah, so there's a lot of things that make a package look professional or not professional. There's this article called, “Five Steps to Add the Bling Factor to your Python Package” and I thought it was pretty cool. It’s certainly not exhaustive. I don’t think it's overly prescriptive, but it does talk about a few things that you can do that are pretty sweet. 
I'll just run through the five steps real quick. Step one, you can host your documentation on readthedocs. That's nice, right? Proper documentation in somewhere with search and all that kind of stuff. Set up continuous integration with Travis Ci or maybe AppVeyor or whatever. But if you're going to set it up, some kind of continuous integration. If you're going to run unit test, you probably want to know what your code coverage is, so you can show your code coverage with Codecov. Obviously, if you're going to have a package, if it doesn't live on PyPI, it’s almost not real. Unless there's some weird requirement about like, it really has to be set up in some bizarre way that it can't be installed from there, it really should be on PyPI. Add it up there and it talks about how to do it. It is surprisingly easy to get your package onto PyPI. 
Finally, if you have all these things, you would have badges, right? This thing supports these versions of Python. Its tests are currently passing or not passing. It has this little code coverage. All those things, right? 
OKKEN: Yeah. One of the things that this highlights, that I guess I always knew but I don't think about it very much, is all these different services for open source projects, they're free. 
KENNEDY: Yeah. Everyone of those. 
OKKEN: But it's not free for them to run it, but that's cool that all that stuff is just there for open source projects. 
KENNEDY: Yeah, it is really great. Readthedocs is free. They do have ads on there. I'm not sure how targeted the ads are, they're pretty relevant to Python developers. I do think it's a challenge. I know they readthedocs guys are doing interesting and crave things to fund it, but it's non-trivial to run it for free for the world. 
OKKEN: I had talked with Josh Kalderimis from Travis Ci. They started out as open source stuff to start with. They were doing it in their hobby time and the commercial side is now how they're doing it full time and they have jobs. The reason why they maintain the free for open sources because they got their careers from open source and they want to give back. 
KENNEDY: That's really cool. So, if I had like a private GitHub repo, I’d have to pay to get Ci on it, but if I have a public one its free?
OKKEN: Yeah, they have an enterprise drive with Ci that you can use for private repos. 
KENNEDY: So, what I thought was cool about this is none of those things are hard. None of those things are major, but they all make it. It shows that you care about what you're building so you’re more likely to get contributors, people are more likely to adopt your package, things like that. 
OKKEN: It’s also nice to have all these together because I can imagine if I wanted to do any of these, I’d probably spend an hour or so trying to figure out each little bit. 
KENNEDY: Yeah, there's little tips for each one, which is cool. 
Alright, well that's our news for the week, Brian. Anything besides the fact you're just tooling around Germany? 
OKKEN: Well, I’m doing management training, so maybe I'll finally learn how to become a manager after doing it for many years. But I was working furiously on the book, on the plane trip over. We’re still barely on target for a beta for PyCon. 
KENNEDY: I just looked. PyCon is two weeks away. I cannot believe it. 
OKKEN: There’s not very much time. I still have to order stickers.
KENNEDY: It’s gonna be so fun, though. You’ve still got time, but not a lot of time.
OKKEN: Not a lot of time. 
KENNEDY: It's going to be tons of fun. I'm looking forward to meeting a bunch of listeners there and hanging out with you and everyone else. 
OKKEN: How about you? Anything up with you? 
KENNEDY: Not too much. Just thinking about PyCon makes me think I gotta get a bunch of stuff ready for the conference, for our booth and things like that. Yeah, it should be a lot of fun. 
OKKEN: Yeah, I can't wait. 
KENNEDY: Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbyes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.  <|endoftext|>
00:00:00 KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds, this is episode 75, recorded April 25th, 2018. I'm Michael Kennedy.
 
00:00:10 OKKEN: I'm Brian Okken.
 
00:00:11 KENNEDY: We've got a bunch of awesome stuff lined up for you like always, but before we get to it I'm going to say thank you to Datadog. They're sponsoring this episode like they have many and they're a big part of why the show keeps going so thank you, Datadog. Brian, people often refer to the thing that runs your Python code when you type Python as the interpreter, but only sometimes does it actually interpret. Sometimes it compiles, sometimes it JIT compiles depending on what underlying thing you're using to run it, right? PyPy versus CPython, say, Python.net.
 
00:00:46 OKKEN: Correct.
 
00:00:47 KENNEDY: You found an interesting- for one like that, for this week, right?
 
00:00:49 OKKEN: I had to go look it up, I was surprised we hadn't covered it yet. There's a package called Numba, and it's built on top of NumPy, but it's a fairly easy way to speed up a bunch of your code by adding a just-in-time compiler to it. I've also linked to the library itself, and also to an introduction article that I found, that it's pretty nice. It's pretty easy to use and this article that we're linking to has some speed-up tests where you just put the little JIT decorator on a function that you want to speed up and there's a bunch of flags to it, you can try to do it ahead of time or not but it'll compile down some of your code to C code as good as it can, and you can specify data types too, if you want to even allow it to be even faster. I'm pretty blown away how trivial it is to add some of this stuff to your code and speed it up. Some of the speedups are like 78 times faster and stuff, depending on your algorithm.
 
00:01:53 KENNEDY: That is really awesome, and this thing lives in such an interesting place, like when I set the stage, it's not CPython, but it's also not a full compiler. It's not a JIT compiler either, it doesn't attempt to do what would be a general solution, anything; like PyPy is a general purpose JIT compiler, trying to make all of your Python fast, so they say that this is a compiler for Python arrays and numerical functions period. That's pretty awesome, right?
 
00:02:25 OKKEN: There's a lot of people working with that sort of stuff that, a lot of the code doesn't have to be really fast, but they've got a big blob of data they've got to deal with and run some algorithm over it, and in those cases with a big array, that's a great place to apply this.
 
00:02:40 KENNEDY: Yeah, it's really cool, and so if you have tight loops that are slow because of some NumPy thing or arrays, or other numerical operation, slap a decorator on it, make it go fast, pretty sweet.
 
00:02:52 OKKEN: Yeah and we had a comment from somebody that didn't know whether or not we talked about libraries, they thought we just talked about articles and stuff, and I do want to include libraries, so I've been trying to make sure going back and some of the ones that people really ought to know about if they don't know already, we'll try to get those in here and there. It's good.
 
00:03:10 KENNEDY: Yeah, I'm sure, absolutely. If we haven't talked about it, it's definitely game for being covered on the show. Speaking of libraries that people care about, what's the most common way to get them?
 
00:03:19 OKKEN: Pip install.
 
00:03:19 KENNEDY: Pip install. Well, as of recently, a couple days ago, now you pip install with pip 10, so if you haven't yet, you should install pip install --upgrade pip. Maybe put a pip 3 on the front, depending on what OS you're on. There's your brand new version of pip. And a major version as well, that's pretty cool right?
 
00:03:39 OKKEN: Yeah so we do we get new, do you know?
 
00:03:41 KENNEDY: Yeah, so we no longer have Python 2.6 support, it is out, so if you're living way way in the past, like 2006, it was good enough for me, it was good enough for my code, then you should stick on pip 9, because it's no longer supported. It supports this new feature that's described by pep 5.18, which allows you to to specify what packages are required to build from source, so that's kind of cool. You can say these are the requirements to build from source and these are other requirements, it improves Unicode on windows, it has a pip config command. I've never used pip config, have you?
 
00:04:20 OKKEN: I don't think so.
 
00:04:21 KENNEDY: I think it's new. Apparently you can set up default behaviors and stuff like that and it can be based on virtual environments, or it can be based on users or it can be based on machines, so this is probably going to be a a nice handy thing to dig into. Maybe we should do a whole section on just leveraging pip config. Also if you pip install --upgrade a thing that used to try to upgrade all the dependencies if I remember correctly, now the default upgrade strategy will be only to upgrade dependencies if needed. If the thing says I require docopt 6 and you have docopt 4, it'll upgrade it. But if it doesn't say it requires that version, then it'll just leave it alone. So that could be for better or worse, not sure. And then a bunch of bug fixes.
 
00:05:00 OKKEN: Okay, neat.
 
00:05:01 KENNEDY: Yeah, so if you're out there and you're not living super far in the past, be sure to upgrade your pip. It's nice there's even been a point-release since then.
 
00:05:08 OKKEN: One of the things I really like in pip 10, this is a minor thing, is that when you type pip list it lists your packages and it used to, in pip 9 it would give you a warning that there's table configuration and you could do the old style or the new style and that's gone. In pip 10 it just gives you the table, and I like that.
 
00:05:29 KENNEDY: Yeah, that's really awesome. I didn't like that warning there, because if you're doing like screen casts or videos it looked like something was wrong, but it wasn't actually wrong, it was just like Hey, we're changing how this works, so I'm glad that that's over. When I Have functions that just have a bunch of positional arguments, right? It's like true, true, false, true. What the heck does that mean? Who the heck knows, right? You've got a nice way to fix that that's a modern Python only thing, right?
 
00:05:58 OKKEN: I'm chuckling because I'm just leaving Michael hanging on the transition between articles today but I'll try to work on that.
 
00:06:05 KENNEDY: It's alright, I got it.
 
00:06:06 OKKEN: This is actually pretty awesome, I don't know how I missed this. There's an article from Trey Hunner called Keyword Named Arguments in Python and How to Use Them, and basically, I think he's right. I was talking to him earlier and a lot of people looked at this article and went, Yeah, I know how to use keyword arguments, so keyword arguments are very useful. They're things, you always have to name your variables that are your argument names for a function, that and the caller of the function can use those, you can specify them and if you don't specify them you have to send them in order, but if you do specify them you can rearrange the order if you want you can also, one of the things that's often used, how they're often used is you've got a whole bunch of default values for arguments and a caller just needs to override like one or two, you can just name it that way. But one of the things in Python 3 is the different use of the asterisks in all of this, and there's a way to kind of separate your positional arguments from your named only arguments, and if you stick a star (*) in as one of the variables it forces everything to the right to be only named, so a caller has to provide those with names, and I didn't know, that's something I completely missed and that's pretty cool, I like it.
 
00:07:23 KENNEDY: I really like this feature and I implore people who are using **kwargs just, that's what you pass to the function and maybe a star thrown in their for additional pain and suffering, to look at this and think about how you might be able to restructure your code. A lot of things, you'll have a function and you want to take a variable amount of things and so the way they do it is they say **kwargs. You look at that signature and you're like, What do I do here, I have no idea. I sure hope the documentation tells me because the function says I take anything, you make up a name, I'll take it. But there's usually a handful of things it actually takes? Right, there's a bounded set of these are the five things you can pass, but not all required, put them in as keyword arguments. But if it's **kwargs, you're just saying to everybody good luck, go hunting, hopefully I documented this, right? Or you find something on , so you could say *, and then the argument name equals a default value. Argument name equals a default value. And then it has exactly the same behavior except you can see, both in your tooling editor as well as looking at the function what it takes. And you call it exactly the same way. I really love this feature.
 
00:08:40 OKKEN: I love it too. I like your explanation of other reasons to use it. I'm with you, the **kwargs, it just makes it so the user of that function has no idea what they're supposed to pass in.
 
00:08:53 KENNEDY: The worst offender of this is the AWS API, it's super frustrating, sometimes its dictionary is as dictionary, sometimes they're not. Don't get me started. And the documentation doesn't cover it, right? The documentation will say well, this sub-part is its name, but it's this type which is really a dictionary, but there's no mention or description of what goes in that sub-dictionary. It's just, it can be totally avoided by doing cool stuff like this, which has the same effect. Other stuff that's cool, by the way, is Datadog, so if you have an app that spans multiple processes, maybe is using different services to piece together a larger app, you should definitely check out Datadog, it's a monitoring solution for providing deep visibility and it tracks down issues across distributed Python apps. It's pretty awesome. Within just a few minutes you'll be able to investigate bottlenecks in your code by exploring graphs and rich stash boards, so if you want to check that out if you think having better insight into how your overall app is working, visualize your Python performance today, get started with Datadog, do a free trial, and they'll give you a free Datadog tee-shirt, it's very cute, and gray and white, and I like it. Check it out over at Pythonbytes.fm/datadog.
 
00:10:06 OKKEN: One of the things that we haven't talked about for a while is how to install packages.
 
00:10:12 KENNEDY: There's a really great new way with pip 10 to pip install them, but there's more to it than that, it's not just pip install the thing and the client side behavior is different, for the first time in a very long time, ever maybe? I don't know, it goes back farther back than I know the history of it. That means something different on the server side, so finally, finally, finally, PyPI.org officially launches,
 
00:10:39 OKKEN: Yay!
 
00:10:39 KENNEDY: More importantly legacy PyPI, the one at pypi.python.org/pypi. That one is now over at legacy.pypi.org and that's like an old stick-around version and they're actually shutting it down, so the pypi.python.org will redirect over to what's called Warehouse, that's the codename for the new implementation running at pypi.org.
 
00:11:05 OKKEN: That's nice, I like it.
 
00:11:07 KENNEDY: Yeah, it's super awesome, this is no longer based on sort of prototype code that grew before the web frameworks even existed. This is based on pyramid, it's based on a lot of the common programming APIs and styles that we know today, it even uses kubernetes and docker, and all sorts of amazing stuff. It uses Elasticsearch, maybe PostgreSQL I'm not entirely sure about that. If people are thinking about adding features to PyPI but they've thought oh, this is some pretty gnarly code I'm not going into there, well the new version is the official version, it's much easier to add features to.
 
00:11:42 OKKEN: You talked to some of the people involved with this, right?
 
00:11:45 KENNEDY: I did.  I talked with three of the folks that worked on it, and we talked about a lot of the stories and when it launched and stuff, and that's coming out on Talk Python this week. So it's a race, does Python Bytes beat Talk Python episode 159, I'm not sure but one of them is going to be just about the same time. So if you're interested in this, go listen to it. You'll gear a lot of interesting stories. Like, Brian do you remember when it used to be there was PyPI.io? You remember that, in the early days? And later it became PyPI.org. I figured out the story behind that. I thought it was indecision, right? Oh we'll do .io; no we should make it more organizational, we'll do .org, right? It turned out what had happened was PyPI.org was owned by someone else. The PSF didn't own it, and they had to try to get ahold of it, so in the meantime they used PyPI.io, but their ultimate goal was always to have PyPI.org. It just took them a while to acquire the domain. If stories like that interest you we've got a whole hour of it on Talk Python. So people will check that out. So packages, in Python. Tell me about 'em.
 
00:12:52 OKKEN: We got a theme going on here.
 
00:12:53 KENNEDY: I think we do have a theme. We've got one more package after this by the way.
 
00:12:57 OKKEN: One of the things I've forgotten about was when you're kind of coming into, there's a lot of people that, as we know, come into Python from other languages. And they'll rush in and figure out how to do something quickly, and they'll think yeah, I'm a Python expert because I wrote a script. It isn't because people are trying to become experts or anything but one of the things that tripped me up right at first is getting my head around what is a module, what is a package, really how do users make those? And dealing with dunder inits and __init__ files, and where do they go, and that stuff. And so, there's a nice tutorial now, I think it's a real Python modules and packages introduction. And I just really liked this, it's a good rundown, it's pretty simple, and this is something that I'm bookmarking so a lot of the people that I work with that are new to Python and trying to figure this stuff out, I can point them to this. And it's a good introduction.
 
00:13:56 KENNEDY: Yeah, it's a great introduction, and it's definitely that kind of stuff, that when you're new it's a little bit weird to figure out the difference, right? Use packages and modules are kind of the same, but they're not the same, what's the story? And especially learning how to package up your project to make it accessible to other programs is tricky.
 
00:14:14 OKKEN: This isn't going into packaging itself, which is a bummer that we have those as two different aims. Really this is talking about a directory with a dunder init in it and sub-directories and stuff, we're talking packages and sub-packages. But it is the initial part. Once you have this down, you can jump into packaging and distributing code to share. But this is a good starter, so, it's a good learning place.
 
00:14:41 KENNEDY: Yeah, it's definitely a good learning place. Remember last week we spoke about the joint project that the Pyterm team and the Python Software Foundation did with their 2017 Python survey?
 
00:14:55 OKKEN: Yeah!
 
00:14:55 KENNEDY: Right. One of the interesting pieces of data there was the people who are data scientists do more Python 3, modern Python that is, as a percentage of their projects than say web developers or other types of Python developers. That's partly because they're starting from scratch, it's like a more new type of thing so why start with the old, right? Well the big news today is that Pandas, one of the major, most important foundational data science libraries, is going modern Python only at the end of the year.
 
00:15:30 OKKEN: That's a big thing, yeah. Definitely.
 
00:15:32 KENNEDY: Yeah I would say this is as big of news as Django 2 going Python 3 only on similar time scales. Well they're already out with their new stuff, so I guess just in terms of the old support ones. So that's pretty cool, right? One more major, major building block, that it used to be, Well, if I move to Python 3 I won't be able to get my libraries. Now the story is, If you don't move to Python 3, you don't get the best, newest libraries, so, pretty awesome.
 
00:15:58 OKKEN: It isn't just getting the newest it's also security updates and things like that.
 
00:16:02 KENNEDY: Yeah, part of their announcement said, December 31st 2017, Pandas will drop support for Python 2.7, presumably, stuff before that's not even supported. This includes no back ports, or security, or bug fixes period. They are open to letting somebody take that, to become their job. They're like, we're not doing that. So, we're moving on.
 
00:16:22 OKKEN: Is Pandas a volunteer thing? Is it open-source, just run by open-source people, do you know?
 
00:16:27 KENNEDY: I think so. I think it might be part of this...
 
00:16:32 OKKEN: Part of the support thing is, you can kind of expect some companies to have back security and bug fixes on old releases for a while, but open-source projects, these are just people volunteering their time. I think it's completely reasonable for people to say, hey, we're done trying to support 2.7, let's move on.
 
00:16:51 KENNEDY: Yeah, it makes sense. So, I looked while you were talking. Pandas is a numFOCUS sponsored project, so I think it's sort of donation supported, but through a more formal science organization. But, still, most people are contributing features that can either focus on bug fixes in making Python 2 stuff work or just moving forward and getting the latest, greatest stuff coming. That's pretty cool.
 
00:17:16 OKKEN: Yeah, it's a good focus.
 
00:17:17 KENNEDY: Brian, that's it for this week for our items, got anything in particular you want to talk about?
 
00:17:23 OKKEN: I've got a couple episodes coming out on Talk Python, and I'm getting ready for PyCon, I'm looking forward to that.
 
00:17:31 KENNEDY: Yeah, you have a talk going there, right? That's going to be pretty awesome.
 
00:17:34 OKKEN: Yeah, I'm getting a little nervous for that, but it'll go really--
 
00:17:37 KENNEDY: Don't worry, it's not like it's recorded, and then also there's a bunch of people there. Oh yeah it's going to be forever. No stress, just kidding.
 
00:17:43 OKKEN: Yeah, no stress. Thanks for that.
 
00:17:47 KENNEDY: No, I'm just teasing you because I know you'll do great. We also have a booth there, you and I and a few others, so people can come visit us at the booth like last year.
 
00:17:54 OKKEN: I'd like people to try to reach out if they want to just come on, and there's something they want to record, I think I'm going to take some recording equipment so we can do some short recordings there.
 
00:18:04 KENNEDY: Oh, that'd be awesome. Yeah, I'm definitely bringing my mic, I'm going to do some stuff like that as well.
 
00:18:09 OKKEN: What's up with you?
 
00:18:10 KENNEDY: Well, you remember the last time Matt Harrison was on the show and we were joking about trying to get some course or something or other done?
 
00:18:15 OKKEN: Yeah!
 
00:18:16 KENNEDY: Well, it's taken me a ton of work the past seven days, but nonetheless we now have a brand new course to announce, Python 3, an illustrated tour.
 
00:18:24 OKKEN: Nice!
 
00:18:25 KENNEDY: So the idea is, it basically only covers the features that were new to Python as of Python 3. So says here are a couple of peps that talk about type annotations and here's some graphics and other sort of walk-through of what that means for you. So if you feel like you are not using all of the features of Python 3, or you're coming especially from Python 2, and you're like, I need a quick show-me-the-new-stuff sort of, in a practical way then check out Python 3, an illustrated tour. That's done by Matt Harrison and it came out really well. So check it out at talkpython.fm/illustrated.
 
00:19:00 OKKEN: Okay, I'll check that out.
 
00:19:01 KENNEDY: Yeah, yeah. I learned a lot, it's really fun. We keep learning things. For example, you talked about the star at the beginning of function arguments, that kind of stuff is in there. I didn't know about that till too recently either.
 
00:19:12 OKKEN: Okay, cool.
 
00:19:12 KENNEDY: Alright.
 
00:19:13 OKKEN: It's been a good talk today, thanks.
 
00:19:14 KENNEDY: Yeah, you bet. Very nice one, we really dug into the packages this time, didn't we?
 
00:19:18 OKKEN: And we don't plan this, it just happens.
 
00:19:20 KENNEDY: It just happens, that's right. Alright, well, thanks Brian, and talk to you all later.
 
00:19:24 OKKEN: Bye.
 
00:19:26 KENNEDY: Thank you for listening to Python Bytes. Follow the show on twitter via @PythonBytes, Python Bytes as in B-Y-T-E-S. Get the full show notes at Pythonbytes.fm. If you have a news item you want featured, just visit Pythonbytes.fm and send it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.
 
 <|endoftext|>
Michael KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode #63, recorded January 31st, 2018. I’m Michael Kennedy.
Brian OKKEN: And I’m Brian Okken.
KENNEDY: And as always, we’ve got a bunch of stuff lined up for you. Before we get to it let’s quickly say thank you to DigitalOcean for making this show possible. Thank you, DigitalOcean. If you want to check out what they’re offering, do.co/python. I’ll tell you more about them later.
Right now, I want to hear a little bit about what’s coming in Python, Brian.
OKKEN: We’ve already talked about data classes coming up in Python 3.7 already. I was curious about exactly what that means to how it will be to work with them and stuff. Anthony Shaw put together a tour of how they work and it’s a pretty quick read. It’s a pretty thorough understanding of it. It’s called, “A Brief Tour of Python 3.7 Data Classes” and there’s some exciting things. One of the things is, a lot of the default magic methods put in place like _init_ and _repr_ and _str_ (dunder stir) and _eq_ (dunder equal). The _eq_ (equal) one I think is really cool. It’s going to compare all the attributes in order. If all of the elements of your data class are equal to another object with the same elements, they will be equal. That’s not something that’s normal by default. So, that’s good.
KENNEDY: Yeah, actually that's really cool. There’s a couple things that are interesting to me. One is the default value stuff, the way you configure the fields, the fact that there’s type annotations coming. Are those required? It looks like they might be required, not just optional.
OKKEN: They are required. If you don’t know what a type will be, there’s still in the types an ‘any’ type that you can use.
KENNEDY: Yeah, so basically that’s like the void star. (Laughs) ‘I have no idea what this is. It’s just a thing.’
OKKEN: Yeah, this is Python, so a lot of times you want it to be generic. You don’t know what the type’s going to be.
KENNEDY: It’s pretty interesting. I do like these. The other thought I had about these, looking through this is, I wonder if this means the namedtuple is less cool these days.
OKKEN: What do you mean?
KENNEDY: Well, one of the things that I think is nice about the namedtuple is you can basically create a type and you say it has these fields. And then you have typed access to it in the editors. You hit dot and you get a drop down of all the available elements of that thing. You can make it read-only, which is potentially nice. It has a nice string representation, a nice hash and equals operator, all those types of things. Every one of those comes in data classes. And if you put a frozen on the data class attribute to say, ‘This is read-only,’ then it also implements the hashing and it has the immutability feature. Once it is created it looks like it is the equivalent of a namedtuple, but it’s richer in a sense that you can have default-generated values. It just seems a little richer than a namedtuple but its usage is pretty much the same.
OKKEN: I think in my case, I probably will use it or try to use it more to see how I like it. But right now, I use namedtuples quite a bit and they’re very terse. A couple lines of code and you’ve got a new type.
KENNEDY: Yeah, the one thing I do see here is with namedtuples, you can literally on one line have a type that it takes six arguments. Whereas this one, it’s certainly more verbose. Once it's defined, I feel like basically, the use case is this a super set of namedtuples, unless I’m missing something.
OKKEN: Definitely in the use case, a lot of places where namedtuples are being used, data classes will be used instead.
KENNEDY: It’d be interesting to see if there’s any different performance for data classes versus regular classes. I think you can say use slots. Is that possible? I think that might be a thing.
OKKEN: That I’m not sure.
KENNEDY: Anyway, if you can do that, that would have a really interesting impact as well because it would probably use less memory than namedtuples. At least my testing has shown that it does.
OKKEN: I'm sure there will be somebody that goes out and does performance analysis to give us that answer.
KENNEDY: Yeah. It’s a call to the audience, indeed. So, these are coming and that’s pretty neat.
I have another piece of news for you, related to this.
OKKEN: Okay.
KENNEDY: So, Python 3.7, development on it is sort of frozen in the sense that it’s now out for testing and for usage, but no new features are being added to it. So, it’s kind of frozen. And Python 3.8 development started yesterday.
OKKEN: Wow. I haven’t started testing with 3.7 yet, or doing any of that. Have you used it at all yet?
KENNEDY: No, I’ve thought about it, but I haven’t done it.
OKKEN: Yeah, it’s definitely something I want to get started on here pretty soon because I think it’s due to drop in June, or something like that.
KENNEDY: Yeah, it’s in a trial period to make sure the world doesn’t break when it gets released. (Laughs) Could you imagine the pressure? But yeah, it’s supposed to officially come out in June, but it got into its testing mode, which is pretty cool.
So, if I ask you what was the most popular database in terms of deployments, what database would you guess?
OKKEN: Well, I’ve fallen for this before. I’m going to answer Excel.
KENNEDY: Excel. You know, I don’t know. This one that I’m about to say, it was very likely to give even Excel a run for the money. So, everybody who has Python has SQLite, right? It’s baked in. There’s a whole bunch of things that are interesting about SQLite. It’s like an in-process database. If you wanted to do something relational with SQLAlchemy or something, but you just want to ship some little app. You don’t want to deal with a client server model, SQLite is so super nice for that, right, you just have a little data file. I think we maybe talked about this before on a couple shows back.
But one of the listeners sent in this thing, this series from Carnegie Mellon University called, “The Databaseology Lectures.” So, there’s a bunch of databases covered there and there are actually quite a few interesting ones. The idea is these are an hour, hour and a half long academic lectures by creators of various databases, about the internals of how they work. I think it’s more like a CS (Computer Science) sort of speaker series or actually a course, I’m not sure. But they got a bunch of luminary folks to come and speak about it. It’s pretty cool.
OKKEN: That sounds like an exciting date night.
KENNEDY: Oh yeah, my wife was pretty excited when I suggested that. (Laughs) No. So, there’s WiredTiger of the storage engine of MongoDB. They had that before it became part of Mongo.
The one that I wanted to call out is the one by Richard Hip, who is the creator of SQLite. It’s like this deep look inside the architecture, trade offs and design decisions of SQLite. So, if you’re interested in databases and you’re interested in how SQLite works, there’s a bunch of optimizations and trade offs you can make, like durability versus performance. There’s a deep dive into here, so I thought that was pretty cool to highlight.
OKKEN: I’ll definitely check that out. I also noticed that they’ve got even SAP and Oracle. That’s interesting.
KENNEDY: Yeah, something to do with Berkeley DB in there as well. Yeah, it’s quite cool. There’s so much I’m not sure I want to cover it, but if you want to look inside at how do the B trees mapped disk and how do they deal with power failure transactional durability and all that kind of stuff. You want to see a deep look inside of databases in general and SQLite in particular, check it out there. I guess one as a teaser, on interesting fact that came out of there is SQLIte is shipped as a single C file.
OKKEN: Yeah, that’s cool.
KENNEDY: I don’t know how many, like two million lines? Some insane number of lines.
OKKEN: They don’t develop it as a single.
KENNEDY: No, there’s some process, some mechanism that detangles all the clued statements and the various compiled orders and all of that stuff, and generates this one huge file with no dependencies. It’s pretty wild to think that such a program was created that way.
OKKEN: It’s interesting that it’s intentionally no dependencies.
KENNEDY: The whole thing is a little bit unusual, the way that the guy has created it and runs it. He was like, ‘Well, Open Source is good, but I just want to make it this thing that is in the world.’ So, he put it out there in common domain or what’s that called? Anyway, he just said, ‘It belongs to the world. I relinquish all ownership of this thing. It’s now public domain.’ So, it’s pretty interesting.
OKKEN: Yeah, it is. Do you know what else is interesting?
KENNEDY: Testing your code before you take down the system? Or charge a credit card and you didn’t want to?
OKKEN: (Laughs) Yeah. Did we get this from a listener?
KENNEDY: Yeah, this came from a listener. I can’t remember who; I’ll pull that up while you’re having a look.
OKKEN: Okay, well, this is a project called, “Dryable: A Useful Dry-Run Decorator for Python.” The idea is that there is sometimes you want to run your entire application but there’s pieces of it that you don’t want to run all the time. In their example, they’ve got you’re accessing an outside database with Requests or something like that. You turn that off during your dry-runs. I really like how generic this is. Basically, you put a decorator – it’s a Dryable decorator – you put on top of a function. And then when you set the Dryable state to true in your code, those functions just don’t do anything.
They also have the option of specifying a default return value, so if during your dry-runs, if the function that you’re turning off is suppose to return something, or else the rest of your code is just going to break, you can specify that there. For testing certain systems, I think this is an awesome idea. It’s pretty easy to start.
KENNEDY: It’s almost like if I wanted to set up the mocking story for my code by using decorators and I could run it just even outside of a test framework, what would that look like? It looks like this Dryable thing, right?
OKKEN: The intent, I think, is to be able to just leave this stuff in your code. So, it’s a very minimal impact. And then if you want, you can just leave it there. You can always be able to do dry-runs of something.
KENNEDY: Yeah, in your test codes you just say dryable.(dot) set true and it just goes into it. So, one of the things that I was wondering about when I saw this – I agree that it’s cool and I definitely like it – we have mocking and these other mechanisms for stubbing out stuff. Where do you see this fitting in versus not?
OKKEN: I agree, mocking and monkey patching is often used for testing stuff. For example, we were doing different GUI applications, we were showing the other day. If you wanted to attach a GUI to a database system, you could have a mocked up database set to let people play with user interface. That’s not really a testing thing, it’s you’re just using something with some data in the backend. Something like that.
KENNEDY: I see. Maybe if you’re trying to build out the UI and you don’t have the data yet, it would be really nice to just go, ‘And here’s some data to work with until we get there.’
OKKEN: Yeah, definitely.
KENNEDY: Yeah, okay. That’s pretty cool.
So, I told you about DigitalOcean at the top of the show and I’ll give you more details. They actually had some super exciting news, maybe a week, week and half ago. But I actually spent a bunch of time upgrading a bunch of servers, because DigitalOcean is awesome. The actually went and said, ‘You know what? All that money that you’re paying for the servers? We’re just going to double all the things. You have one gig of RAM and you’re paying us ten dollars a month? Alright, now you get two gigs of RAM.’ ‘You have one CPU and you’re paying us a certain amount. Now you get two CPUs. Or two to four.’ So, they basically – not everything, CPUs not quite as much but certainly disc size with SSDs, RAM extent, the CPUs – they’re doubling everything they offer. Now you can get a server with a gig of RAM and a CPU and 50 gigs of SSD for five dollars a month. How insane is that?
OKKEN: Wow.
KENNEDY: Yeah, exactly. (Laughs) It’s really cool, the new pricing they put out. Drop over to do/co.python and check that out, because if you thought it was good before the literally doubled most of the things for most of the tiers.
OKKEN: That’s great.
KENNEDY: Yeah, really nice. Now Python Bytes delivers itself just a tiny bit faster and has a few more gig of RAM to do it with.
OKKEN: Well, that’s good because our listeners are going up.
KENNEDY: Right, we’ve got to keep up with the demand. Thank you, everyone.
Speaking of demand, we got a lot of listener feedback for this show and I think that is really great. Please keep the recommendations coming on Twitter, email and so on.
Have you noticed I’ve been in this GUI kick lately, Brian? (Laughs)
OKKEN: We kind of knew this was going to happen. You claimed that there weren’t any good solutions, then people told us.
KENNEDY: Yeah, and I still mostly stand by that. But there are people doing really cool things and I just want to highlight them. So, a guy named Victor Domingos said, ‘Hey, look, I’m not really much of a programmer. I kind of engineer something.’ He was doing something else but he needed to do some program to build thing thing. But I disagree with that. I think he’s quite a programmer to build these things. He sent us three examples, some apps that he built in Python. Click those and pull them up, Brian. Can you see the pictures?
OKKEN: I’m trying to pull up one.
KENNEDY: Yeah, so it’s really nice. It’s all screenshots which, by the way, if you have a UI framework and you want people to admire your UI framework: Screenshots. Pictures please. Just describing how awesome it is in text doesn’t make it awesome.
But these look like rich, interesting applications. I definitely think what he’s doing here is quite neat, especially the first and the second on that we’ve linked. We’ve linked to three.
OKKEN: This is crazy. PT-Tracking, it’s got both the desktop application, which looks nice…
KENNEDY: And an iPhone version…
OKKEN: And an iPhone version.
KENNEDY: (Laughs) Yeah, it’s pretty interesting. Like I said, this guy built some really powerful stuff, right?
OKKEN: Yeah, it looks great.
KENNEDY: What’s even better is that it’s Open Source. It’s TKInter code. He’s like, ‘Look, you’re giving TKInter a bad rap. This could be more nice looking, if it’s built the right way. And by the way, here’s three Open Source apps I built that you can check out.’ With screenshots, by the way, which is very nice.
So I just want to highlight that and say thank you, Victor, for sending these in and share the links because they are pretty inspiring and they’re working examples.
OKKEN: I did not know you could make an iPhone app with TKInter.
KENNEDY: I still don’t even know how that works.
OKKEN: I don’t either. Maybe I’ll try this out.
KENNEDY: Maybe there’s some kind of PEP for it. Like PEP 7225, ‘Make Python Mobile Apps on iPhone.’ Is that what it is? What if there was a way that you can figure this out that we could settle this debate.’
OKKEN: There’s PEP Explorer and it is by Anthony, again, Anthony Shaw. We gave him credit on the first article that we talked about. But, “PEP Explorer - Explore Python Enhancement Proposals” with a web interface. It’s got a search function and you can look at all sorts of stuff. There’s even the status – I don’t quite get all the status ones – but there’s an April Fool’s status, which I didn’t know about.
KENNEDY: That’s pretty awesome.
OKKEN: In 2009, they pretended that BDFL was retiring.
KENNEDY: THey probably just scared people, actually. That’s really what happened. Not only do you find the PEPs that were accepted, but you can search and say, ‘Show me the ones that were either deferred or rejected.’ You probably will learn a lot of interesting stuff by seeing what is rejected and why.
OKKEN: Yeah, and then the ones that are still in draft form and everything. I’d already picked this and I was playing with it, because the data classes we talked about earlier, I cannot find on this cool, little tool here. I’m not sure what’s going on with the 3.7 stuff. Maybe 3.7 just isn’t in here yet.
KENNEDY: Yeah, maybe. This is a search engine sort of thing with data backed on GitHub. So, if anyone wants to say, ‘Oh, you’re missing this one.’ PR.
OKKEN: So, nice people fix it and do a PR. I’m just going to call them out on Python Bytes.
KENNEDY: (Laughs) This one doesn’t work because it’s not there. And I can’t do a PR because I’m recording a podcast. Yeah. Nice work, Anthony. Enough to get a double feature.
So, I want to round this out with just a little bit more UI stuff. If I’m going to show you all those pictures of cool apps that Victor built, the other thing I want to pair with that is a TKInter Tutorial that we got on Twitter as well, from @likegeeks. It’s basically, ‘Here’s how you go through TKInter and create your first GUI application.’ You don't really build anything too complicated or too advanced. It’s more like, ‘Let’s put some labels and buttons and combo boxes and progress bars and see what that looks like.’ It’s still a decent distance from what Victor had built. But if you are inspired by topic four, maybe topic six can help you take some steps in that direction.
OKKEN: Yeah, okay.
KENNEDY: It’s pretty comprehensive. It really covers most of the widgets and how to use them and stuff like that in Python. Pretty cool. This may be the final thing we say about it, or maybe my own news will cover one more GUI thing.
OKKEN: I think we’ll probably hear some more GUI things coming up in the future. I’m okay with that.
KENNEDY: I am, too. I think this is great and I think the other area that’s looking really strong the more that I talk to people about this is wxPython. What I didn’t realize is wxPython has a project called wxPython Phoenix, where is was reborn from the ashes of wxPython. There’s two versions of it. There’s a more modern version that I conflated with the older version.
OKKEN: Oh, okay. I didn’t know about that.
KENNEDY: Yeah, I didn’t either. But the thing I’ll tell you about in a second… How about you? Any personal news going on, anything cool?
OKKEN: Not right now.
KENNEDY: Nice. For me, this is the week of the recording. I’m recording six podcasts, Talk Python, Python Bytes, I was a guest on a podcast. Also, a webcast. I did an hour and a half webcast, where I rebuilt PyPI in MongoDB, which was really fun. (Laughs)
OKKEN: Wow.
KENNEDY: It was really cool. I even created this fake database with hundreds of thousands of records to make to make it act real. It took like 15 minutes to program to actually generate the database, but that’s okay. It was still good. That was fun; I’ll put a link in there.
This weekend some friends were over and they’re like, ‘Hey, I’m trying to build this little script and it’s almost working. Can you help me?’ And I’m like, ‘Oh, this is a cool little CLI. But you know what would be better if it was a GUI.’ (Laughs) He’s like, ‘I know but you can’t do that in Python, can you?’ And I’m like, ‘Yeah. Hold on. Let’s pip install Gooey.’ That thing we already talked about. That thing is slick, let me tell you. Basically, you create one of these argument parser things from Gooey and you say, ‘It takes these parameters.’ Then you say, ‘Get the parameters’ and that actually shows the UI with all the widgets filled out and the names and types. Like, ‘This one is a combo box. It has these three items.’ That’s your argument and then it becomes just a combo box. It really is just a few lines of code. It’s awesome.
OKKEN: We’ve been getting a lot of people that have been using Gooey show us their screenshots of something they made with it and that’s pretty awesome.
KENNEDY: I really think the bang for the buck is quite high on Gooey right now. And that’s wxPython, by the way.
Also, a quick announcement on the courses. I have a bunch of courses coming up and more of them are getting planned all the time. It’s really fun. But I just launched a business option, team purchase page. So, all the bundles and the courses and stuff on Talk Python Training now have a ‘Buy This For Your Team’ and if you pick however many people are on your team, it will automatically apply enterprise discounts and all that kind of stuff. So, if you want to go there and say, ‘Buy this for ten people,’ it’s all self-serve now.
OKKEN: Wow, that’s great.
KENNEDY: I’m trying to make it easy for more people to get that Python knowledge.
OKKEN: Neat.
KENNEDY: Alright, well, thanks, Brian, for finding all these things and sharing then with me.
OKKEN: Yeah, thank you.
KENNEDY: Bye.
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues. <|endoftext|>
00:00:00 KENNEDY: Hello, and welcome to Python Bytes, where we deliver python news and headlines directly to your earbuds. This is Episode 151, recorded October 2, 2019. I'm Michael Kennedy.
 
00:00:10 OKKEN: And I'm Brian Okken.
 
00:00:11 KENNEDY: And this episode is brought to you by DigitalOcean. Check them out at pythonbytes.fm/digitalocean, get $50 credit for new users. More on that later. Brian, how you doing?
 
00:00:19 OKKEN: I am really good.
 
00:00:20 KENNEDY: Super, we are on PDX Python Meetup West, PDX West Python Meetup, whatever you're calling it's, eve, aren't we?
 
00:00:29 OKKEN: Yeah, it's just right around the corner. Although, it'll probably already have happened by the time this comes out.
 
00:00:36 KENNEDY: Yeah, it may, it's going to be tight. So, well I'm sure it went wonderfully. So, got all those speakers lined up and everything. I'm really excited to have that as part of our community around here, who knows, maybe we can put it online somehow, but no plans for that it sounds like. You know, I hear a lot about containers and, when I first heard of Docker, and things like that, I thought Docker was, I thought they had created containers, like they had come up with this idea of this other kind of isolation, relative to, say, a virtual machine and, looking in to it, it turns out that's not the only option and they actually didn't even come up with it, they just bundled it up and packaged it nicely.
 
00:01:14 OKKEN: I think what Docker has done is very cool, but I have yet to find a use case where I needed it, so far, and there are other options, and one of our friend of the show, Matt Layman, has written a article called "Python Alternative to Docker". The article uses a tool called Shiv from LinkedIn, which is a hilarious name. We actually did mention it briefly on Episode 114, but I didn't know much about it and so this is kind of a neat article. It talks about that Shiv uses zipapp, and I think we've talked about that before, that you can, and then I think there's a few tools that utilize that, that...
 
00:01:52 KENNEDY: Right, things like Pex and stuff, yeah.
 
00:01:54 OKKEN: Yeah. You can zip up a Python application with all its dependencies and I don't think that, at that point, it includes Python, does it?
 
00:02:03 KENNEDY: I don't think so, and that was actually super disappointing to me, that it didn't just deliver a thing that ran, you still have to have Python, but it's like, you don't have to install the app, long as you have Python, you can run it, was my understanding.
 
00:02:15 OKKEN: This article is talking about, and this totally makes sense, you've got a continuous integration build pipeline where you're making changes, and maybe you're updating dependencies, but, on the deployment machine, you're not deploying, you don't have to update Python all the time, you're just updating the thing that you package. And that's kind of a neat thing about Shiv, is all your dependencies, maybe you're updating dependencies or maybe you're updating your own application or fixing bugs or whatever, that can all be put together and tested as one deliverable unit, and then just that can be updated to a server machine. But then, all the steps of, okay, that sounds, in concept, that sounds great, but what are all the steps I have to go through to actually get that done? And Matt has done that, he just basically walked through all the steps to try to get that done, and I thought it was really great. He does talk about packaging a little bit, because you kind of have to talk about packaging when you're talking about deployment, so this is kind of fun. He does do a shout out to, if you didn't use Shiv or Docker, what would you do? What are all the little steps you'd have to do? Which just makes it sound like something new to either hire somebody else to do.
 
00:03:27 KENNEDY: Like, that's not, I'm not doin' that.
 
00:03:29 OKKEN: Yeah, but he also does shout out to platform as a service, things like Heroku and PythonAnywhere. And I think that's cool that, there's other options, if you want to just throw money at it, you just use one of these. And these actually aren't that expensive if you're trying to just save time, that's a fine trade-off but, if you want to do this, this is a neat idea. Also, Docker's a big hammer. I mean, a lot of people love it and that's great, but bringing up with a lot of people that you want to try to deploy with Docker and, if it's a thing like this, like you're just deploying an application, that might be overkill.
 
00:04:04 KENNEDY: It seems like it's a middle ground, like I'm packaging up, not just my Python code, but my Python dependencies and a lot of the setup around that. You still have to have Python there but, beyond that, it's not really much to it. If you need to depend on other things, like, 'I need Redis running on this port and I need Postgres like that, and then I also want this other thing in Linux doing something,' you're like, all the sudden, then you've outgrown bundling Python more cleverly, but if you don't need that it sounds like a pretty cool way to do it.
 
00:04:34 OKKEN: Yeah, like in this example, the example Matt gives is a Django application that uses Gunicorn or Gunicorn, and so that, all those dependencies are bundled together. It's not a special kind of Django app with a huge back-end that's necessary, but, although, I mean Django uses a database, so I'm not sure.
 
00:04:53 KENNEDY: Yeah, yeah, interesting. While you're talking about Docker, I'm a fan of Docker in general but, kind of like you, I don't do a ton with it day to day, I just, the stuff I do is just not that complicated. But, I recently read an article in ZDNet, that site actually still exists, apparently, and... It actually says, this is surprising to me, sort of, kind of like I was surprised when GitHub got acquired, I realized afterwards, 'Oh, they're actually financially in deep trouble and maybe this is good rather than just going away.' The article says Docker is indeed in trouble, a leaked internal memo, the Docker CEO reveals that the troubled company is looking for more money, and they talk about pushing through with perseverance despite lack of clarity on the future and stuff like that, so, anyway just something to think about.
 
00:05:40 OKKEN: Definitely, and I read that, and I forgot that Docker was a company.
 
00:05:43 KENNEDY: Yeah, exactly. And I don't even know if it matters if Docker as a company goes away, I mean there are parts of Docker that are important like the registry and stuff like that, but you could totally use Docker if you just had the tools, but, still, it's... Always interesting to see these, how this is playing out, and something you want to consider if you're going to bet your project on it, right?
 
00:06:04 OKKEN: Yeah, definitely.
 
00:06:04 KENNEDY: So, I have a bit of a theme for this week as well, and it has to do with helping a scientist do Python stuff a little bit better. So this first thing I want to talk about is an article that's kind of a how-to from this woman named Anna Nowogrodzki, I'm going to go with that, sorry if I messed up your name, Anna. And it comes to us by a recommendation from a listener named Jason Thomas, thanks Jason. And the title is "How To Support Open-Source Software and Stay Sane".
 
00:06:34 OKKEN: Nice.
 
00:06:35 KENNEDY: And this is referring to scientists who develop libraries like NumPy, or some form of scikit-learn, or something like that, and then they release it to the world and then, all the sudden, they've got all this software development work and have a hundred GitHub issues they got to review and they're like, "I was just trying to give back a little bit, what just happened?" So, the article has some interesting quotes, so I'm going to do a little bit of quoting from it because I think it's pretty revealing. Anyway, it says, "The premise to the article is that releasing lab-built open-source software involves mountains of unforeseen work for the developers." You think you're done when you release it and it kind of starts. But it opens up saying, "On the 10th of April, astrophysicists announced that they had captured the first ever image of a black hole. This was exhilarating news, but none of the giddy headlines, other than us, mention that the image would not have been possible without open-source software." And the image was created by Matplotlib, a Python library for graphing data as well as other components of the open-source Python ecosystem. Here's where it gets interesting, just five days later, the US National Science Foundation, the NSF, rejected a grant proposal to support that ecosystem, saying that the software lacked sufficient impact.
 
00:07:50 OKKEN: What even?
 
00:07:52 KENNEDY: What even, right? So, like I said, it's kind of a how-to, it talks about where you're, as a scientist, if you're creating software like Matplotlib or something, where do you go to get funding? Where have people been turned down? What has worked? And so on. It also talks a lot about using some software development, software engineering techniques for having successful open-source projects that grow without killing you. It's pretty good, it talks about the challenges of not knowing, as a scientist, how you might not have fluency with git, you might not have a continuous integration. Unit testing might not be a thing that you are super skilled in, and it mentions places like the eScience Institute at the University of Washington, the Software Carpentry workshops, places like that where folks can go get that training. And then, also talks a little bit about when do you keep your software going, and when do you decide it's absolutely, we're not going to work at it anymore, what else are we going to go build? So if you're a scientist out there, or you work with scientists and you want to help them get rolling with Python and releasing their projects in a way that they'll stay sane, check that out, I think it's pretty good.
 
00:09:00 OKKEN: It's a continuous problem.
 
00:09:01 KENNEDY: Yeah, it is, and some of the recommendations are things like: make sure you have continuous integration, make sure you have version control, make sure you have testing, and one that I really liked was that you should focus on code readability over peak performance.
 
00:09:14 OKKEN: Oh, definitely, always.
 
00:09:15 KENNEDY: Right, yeah, 'cause you're going to have to fix bugs and, I had a friend who, soft friend, who had this saying that was really interesting that, "Debugging software is harder than writing software", generally speaking. So, if you write software at the edge of the complexity that you can handle, you probably can't debug it. So you need to step it back a notch, take it a little bit simpler and then when it goes wrong you could still deal with it. I like that saying. So, before we get to the next one, though, let me tell you about DigitalOcean, so, DigitalOcean, all of our infrastructure runs there when you get your MP3s that you hear our voices on, those came through a whole bunch of stuff that's happening over at DigitalOcean, and they have two new services that I've been telling you all about for a little while, but, want to keep telling you about it because they're good. If you want to use MySQL or Redis they now have those as a service, they're just go flip a switch and turn 'em on, that's in addition to Postgres as a service as well. So, definitely comin' along. Speaking of the softwares as a service, over at the DigitalOcean side I'm still a fan of fire me up a VM and install some stuff and let it roar, but, that's all good. Check them out at pythonbytes.fm/digitalocean, get $50 credit for a new user and they're doing good work, so we can recommend them.
 
00:10:28 OKKEN: Nice.
 
00:10:29 KENNEDY: So, you found another license in addition to MIT or GNU?
 
00:10:33 OKKEN: Yes.
 
00:10:33 KENNEDY: GPL?
 
00:10:34 OKKEN: I don't know what to make of this, so I wanted to bring it up just to hear your thoughts as well. So, there's a license, and I can't remember where I ran across it, but I think probably Twitter or something, I spend way too much time on Twitter. It's a license called the Hippocratic License, like that doctors have the Hippocratic Oath.
 
00:10:51 KENNEDY: Right, right, first, promise to do no harm, things like that?
 
00:10:54 OKKEN: Yeah, I mean I know it's way more than that, but that's all average people remember, like me. So this is a interesting, it derives from the MIT License and it adds a restriction, and the restriction reads, "The software may not be used by individuals, corporations, governments or other groups for systems or activities that actively, or knowingly, endanger, harm, or otherwise threaten the physical, mental, economic or general well-being of individuals or groups in violation to the United Nation Universal Declaration of Human Rights." Interesting. That's a interesting thing, and I like, I kind of like it, my first reaction is, wow, that's great. You can say, "I'm going to let everybody use this software, but I don't want it to be used to harm people." Completely fair, but I don't know if anybody, the people that are intentionally harming people, they don't care. Do you really think people that are in this are really going to go, "Oh, yeah we really can't use this software to guide our..." Does this cover military? I don't know.
 
00:11:59 KENNEDY: Also a lot of this has to do with human well-being. That's up for debate, and like a perspective, well, we had to start the war to help people or, obviously if you're on the other side of that, you're not helping us. This is not helping. Thank you, for not, for blowing us up. It's really hard to interpret, and I think you're right that it is very challenging because the folks who are most likely to abuse it, it's like the hackers are like, "Yeah, well I was going to steal that $10 million from the bank, but its got the wrong license." It does still send a message that the person who works on the project cares, and it's not necessarily a negative even if it's not super enforceable. I'm sure that things about the MIT License, people break. I don't even know what you've got to do to break it, but you probably could.
 
00:12:44 OKKEN: I actually think it's an interesting thing to have around. I could definitely see people coming up with different sorts of alternatives to the MIT License, also, not necessarily maybe this plus other stuff. I know people that intentionally would never work for the military, or work for a government or a military contractor. Because of, they don't want to. And I think it'd be completely legitimate for somebody to say, to have a license that said, my open-source software doesn't, I don't want that to work for these people either, so. But I haven't seen that.
 
00:13:19 KENNEDY: Not putting any judgment on those things like working for Boeing or whatever. If you wanted a license like that, I'd think you would have to be more explicit.
 
00:13:29 OKKEN: It's a slippery slope, with the things that I kind of agree with, I'm like, 'Oh, yeah, well that's completely reasonable.'
 
00:13:34 KENNEDY: Yes, I know.
 
00:13:35 OKKEN: But if people released software that said this is okay as long as you don't live in Oregon, because I don't like Oregonians. That would be lame, but, people can do that.
 
00:13:44 KENNEDY: It would definitely be lame. That's why you set up a server in California and you just remote in.
 
00:13:52 OKKEN: I'm vacationing permanently in Oregon.
 
00:13:55 KENNEDY: Exactly, exactly. It's an interesting find. Yeah, so, the next one like I said, I'm on a bit of a theme here and this next one is also about helping scientists do more, but more computational people. So this one is a real Python how-to on why and how to make the switch from MATLAB to Python.
 
00:14:15 OKKEN: Oh, this is great.
 
00:14:16 KENNEDY: Yeah, it's really, really detailed. Like standard, real Python stuff. I'm not entirely sure how many pages it is, but it's quite a few. So, it's a good, thorough, it's almost like a mini book on this, as Dan and his crew are used to doing. So it basically compares the philosophy of MATLAB to Python, closed-source to open-source, things like that. Then it walks people through how to set up Python and then just, you use these computational libraries in MATLAB, here's your Python ones. You did these operations like graphing, here's how you do it in Python. And so, if you're out there working on a team that uses MATLAB, and I know there are a ton of them out there, I've worked with some even around here, a great team who was moving from MATLAB to Python, who I worked with for a few days, like helping to speed that transition and things like that. There's a ton of these science-like groups, data science, not quite, maybe, data science, but on their way toward that world, who I think would really benefit from that. I, long ago, even used MATLAB for a little bit of work at this research lab that spun off in to a company, and did wavelet decomposition of real-time eye measurements. 250 hertz per, you know, 250 samples a second, wavelet decomposition is a way harder Fourier transform. But it's funky stuff. Anyway, to do that, it was fine but the little toolbox, I think its called, the wavelet toolbox that you got, was $2,000 per user. That's a lot of money when you can pip install something that also does that.
 
00:15:57 OKKEN: So there's MATLAB used a lot in our company as well, or there used to be. I don't know what it is now. But similar sorts of things, there's engineering. I'm more familiar with communication algorithms using FFTs and other communication transforms being mocked up in MATLAB before they go to ASICs or something. Yeah, this is very common and I'm really glad to see more and more people moving to Python from MATLAB.
 
00:16:25 KENNEDY: Yeah, absolutely, I think it's just another one of those slices of the technology ecosystem where tons of people are leaving that space and coming over to Python because the great computational support that's developing. Things like JupyterLab and all the NumPy, SciPy type of things. Also, in this article, I learned that there apparently is this thing called GNU Octave, which is a free and open-source clone of MATLAB that looks pretty good, actually.
 
00:16:48 OKKEN: Oh, interesting.
 
00:16:48 KENNEDY: Yeah, not that we want to encourage people to just go do that, they should come do Python, but this is still pretty interesting, I didn't know that exists.
 
00:16:55 OKKEN: Yeah, definitely.
 
00:16:56 KENNEDY: Have we spoken about GUIs? I feel like we should actually cover that sometime.
 
00:17:00 OKKEN: Yeah, so I was almost felt guilty not covering this, but it came up in Episode 143 already, but Nicholas Tollervey has got a project called PyperCard. I mean, I remember HyperCard. I never really used it, back in the day, the dark ages. But PyperCard is kind of this neat little thing and, did you use HyperCard ever?
 
00:17:22 KENNEDY: No, I have some friends who did, but I've never used it.
 
00:17:24 OKKEN: It was a Mac only thing, and it was this thing where you kind of have a whole, it's designed as if there's a whole bunch of different cards, and a GUI window was just a card idea, and then you could print whatever you wanted on the card and then there would possibly be buttons or something on the card, and if you pushed one of the buttons, you go to a different card. And so you can think of an application as a deck of cards. Or a choose your own adventure-type game. And that's where a lot of really complicated choose your own adventure games were made, on HyperCard. And so PyperCard's a similar thing, just in Python and it started out with Adafruit, but it's now gone, Nicholas has made it, you can just run it on your, anywhere. And you can just pip install it. And I was playing with it the other day, and at first I dismissed it, but when I had him on Test &amp; Code on Episode 89 and we talked about it a little bit, and I didn't realize this. So one of the ideas is you have, basically a simple list of what's in the card and then what card to go to next with the different buttons and inputs and stuff like that. But if you, instead of saying which card to go to, you give it a function to go to, you can run any Python code as long as that function returns a string to tell you which card to go to next. So that makes it actually pretty powerful to build up some fairly complex logic very simply. Anyway, it's fun to work with, I was even thinking of some work business uses that I could use this for, and then get it mocked up really quick.
 
00:18:59 KENNEDY: That's cool, looks interesting. It feels a little bit like a visual workflow executor. Like I go down this step, then I do this step, then there's the decision and then I do this step, or that step, and it's all represented by these cards. That's pretty cool.
 
00:19:12 OKKEN: He has an example of a Celsius to Fahrenheit Converter, but it also, I mean there's a lot of little simple conversion math stuff, applications in businesses, that would be a good use for it. And its also uses that user interface thing that I always forget, but it was like, nevermind, I can't remember what it is. It's one that you don't see very many examples of.
 
00:19:34 KENNEDY: Cool, yeah. It looks like a nice project.
 
00:19:36 OKKEN: Cool.
 
00:19:37 KENNEDY: You know, something we don't talk a whole lot about on this show is Node.js.
 
00:19:39 OKKEN: I don't know if we ever have, have we?
 
00:19:41 KENNEDY: You know, I think the extent to which we talked about Node.js was maybe some security issue in npm and how, is it analogous thing over a PyPI. Maybe, like that's the extent of it. So, Node.js, obviously, is a pretty big server-side framework for running JavaScript code on the server, and you know the stories like, hey, if I got to write JavaScript on the front end, I might as well write it in the back end. That's not my philosophy, mine is more like, how do I minimize the amount of JavaScript I write? Let's now also do that on the back end. I mean, not that I hate JavaScript but I don't want to overdo it. Anyway, there's a cool project that brings some integration between Python and Node. So imagine you're working on some project or you're on some team, and they're like, "We've chosen Node." You're like, sigh, sad face. But you still want to use some Python or maybe you want to use some kind of Python library like NumPy or TensorFlow, whatever, something that doesn't have a JavaScript equivalent. So you can use this thing called PyNode and what it does is it's a bridge between Node.js and Python that allow you to call Python code directly from JavaScript.
 
00:20:53 OKKEN: Oh, wow.
 
00:20:54 KENNEDY: So, this is on the server. Like if it was on the client side then, who knows, we'd have to use something like Skulpt or Brython or, and then it would convert the Python to JavaScript, like that's a different thing, this is the CPython interpreter with everything that Python can do on the server, but you can interact with it, call it and get return values from those functions in Node.js. Like you call in to Python and you get your answer back.
 
00:21:18 OKKEN: Nice.
 
00:21:19 KENNEDY: So that's pretty cool, and the API for working with it's not too bad, you have to basically, in Node.js you would require stuff in to, load it up, so you'd require PyNode and then you get your PyNode, you could say start the interpreter, which will, I'm guessing, embed CPython in to the node process and then you just call functions. The way you directly call 'em is kind of crummy, you say pynode.call("add", 1, 2) to call the function add by passing one and two to it, and then you get a call back from that. I think you could do some interesting stuff by wrapping this up in to a JavaScript class. So you just say, create it, and then you just start, it has a .add that takes a 1 and a 2, and you could put like a facade that makes this much simpler, do a little async/await to get rid of the call back, potentially, things like that. But, yeah, it's definitely got some potential there, and if you're working in Node.js space and you're like, 'Ah, I really wish I had Python', well, PyNode.
 
00:22:18 OKKEN: It's great, I mean there's more and more projects where they really aren't one language, you're trying to do lots of different things or you're trying to migrate from one thing to another. Use the language that works the best for wherever you're at.
 
00:22:29 KENNEDY: And similar to the last one that I covered, not trying to send people away to that thing, not to node or to Octave or whatever, just acknowledging, just what you said, that there are these environments where you don't always get to pick Python, here's another environment where you can now blend these together.
 
00:22:45 OKKEN: Yeah, there's lots of languages that are good, none of 'em are as good as Python, but, just sayin'.
 
00:22:51 KENNEDY: That's right, alright, well those are the major topics that we're covering for the week. Do you have anything extra to cover?
 
00:22:56 OKKEN: No, although, putting together a meetup is more work than I expected.
 
00:23:01 KENNEDY: I appreciate you doing that, I'm sure that it is.
 
00:23:02 OKKEN: I did submit that there's like call for proposals out, and I did submit to a couple of conferences, so we'll see.
 
00:23:08 KENNEDY: Awesome, good luck on that. The call for proposals for PyCascades and also, I think, main PyCon, right?
 
00:23:14 OKKEN: Yeah, PyCon's open, Tennessee's open, a couple others are open.
 
00:23:17 KENNEDY: Super. I actually have nothing extra to share. Except for I have a joke.
 
00:23:21 OKKEN: Oh, good, I didn't bring a joke.
 
00:23:22 KENNEDY: It's not exactly a joke, but it's definitely something that's very funny. So have you ever heard the excuse that, 'Ah, man, this works on my machine'?
 
00:23:31 OKKEN: Yeah, it's closing a defect with cannot reproduce.
 
00:23:34 KENNEDY: Exactly, dude, this is working, why does this not work for you? Who knows what it is, it could be the version of some library that's installed, it could be permissions, who knows, but there is a, 'It works on my machine' certification program that I want to tell you about, okay?
 
00:23:49 OKKEN: Okay.
 
00:23:50 KENNEDY: This is a real program, and it has like an honors badge, it says, "Works on my machine", it's kind of golden, you can put that on your wall when you get certified, and they're real steps, so this is not new... Pretty old certification, but I thought it'd be fun and we haven't talked about it before. So there's some specific steps that you got to follow, and the steps here are talking about a compiled language, so maybe it slightly varies with Python, but, still, I think it's funny. So, step one is you have to compile your application. Getting the latest version from any recent, or any recent changes, from other developers, is purely optional and not required for certification, okay? Step two is you launch the application or website that's just been compiled. Step three is you cause, you're going to like this part as a person who's in to pytest and stuff, you cause one code path in the code that you're checking to be executed. The preferred way to do this is with Ad hoc manual testing of the simplest possible case for the feature in question. You may omit this step if the code changed with less than five lines, or if in the developers professional opinion, the code change could not possibly result in an error. And, finally, you now check your code in to version control, congratulation, you're certified. It's nice, right?
 
00:25:05 OKKEN: Yeah.
 
00:25:05 KENNEDY: There's probably a lot of certified people, they just need to claim credit they've done this, I'm sure.
 
00:25:09 OKKEN: Yeah, they just don't know.
 
00:25:12 KENNEDY: Well, they can now get the star and put it on their wall. All right, well, thanks for being here, as always, Brian, and sharing all this news with everyone.
 
00:25:20 OKKEN: Well thank you, bye.
 
00:25:21 KENNEDY: You bet, bye. Thank you for listening to Python Bytes. Follow the show on Twitter via @PythonBytes, that's Python Bytes as in b-y-t-e-s. And get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way, we're always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.
 
 <|endoftext|>
00:00:00 Hello, and welcome to python bytes where we deliver Python news and headlines directly to your earbuds. This is episode 288. Recorded June 14 2020, to Michael Kennedy,

00:00:11 and I am Brian Aachen, Brian, how you doing? I'm excellent today.

00:00:15 I hear you're a little busy.

00:00:17 But it's just, you know, being a parent and having side jobs and stuff like that,

00:00:21 of course, well, it's better than the alternative.

00:00:25 I was talking to somebody this weekend about like their one job and trying to balance job and life and I'm like, I don't even remember what that's like with just one job.

00:00:33 I know, or you have a job where you go to work and you do the work. And then when you go home, you there's no real reason to do the job anymore. So you can just step away from it sounds glorious. And yet, I continue to choose the opposite, which I also love. All right. Well, speaking of stuff people might love. You want to kick us off for the first time?

00:00:50 Yeah, we're going to talk about polar bears. No, not polar bears a project called polars. And actually, it's, it's like super fun and cool. So polars was suggested to us by actually several listeners, we got several people sent in. And I'm sorry, don't have their names. But thank you always send send great stuff our way we love it. But polars is billed as a lightning fast data frame library for rust and Python. And it is it is written in Python. No, it's written in rust. And but they have, they have like they've have a full the full API is, is present in Python. And it's just, it's kind of neat, actually how they've done it. But so we've got up on the screen the splash screen for for for the Polish project. There's a user guide API reference, of course, but one of the things I wanted to talk about is their some of their, their, why you would consider it. So polars is lightning fast data frame library. It uses an in memory query engine and it in the it says it's embarrassingly parallel in execution. And it has a cache cache efficient algorithms and expressive API. And they say it makes it perfect for efficient data wrangling data pipelines, snappy API's, and so much more. But I just also is fun. It's a played with it a little bit, it's Zippy and fun. They have both the ability to do lazy execution and eager execution, whichever you prefer for your use. It's multi threaded, has a has a notion of single single instruction multiple data. I'm not exactly sure what that means, but makes it faster apparently. And the I was looking through the the whole, the introduction of the user's guide is, is actually written like a very well written book. And it looks like the whole guide, as far as I can tell, is, is written for the pen or the Python API. So I think that was part of the intent all along is to write it quickly and rest, expose it to rest users also, but also run it with Python. And it's just really pretty clean. And super fast. One of these benchmark results, performance things was, it's like, spark was taken 332 seconds, and they took 43 seconds. So I know,

00:03:19 it's 100 million rows. Yeah, and seven columns. That's not just like, let's load up a couple of pieces of data or something.

00:03:27 Right. So the, there's a lot of focus on this, making it making sure that it's fast, especially when you don't need everything, like doing lazy evaluation, or making sure you do multiprocessing one of the things I thought was really kind of cool about it, I was looking through the documentation is there's a section on that says it was a section that was talking about paralyzation it says do not kill the parallelisation Because with Python, we know we there is basically there's ways to use polars that can kill parallel processing because of the Gil, if you're if you're using if you don't do it the way they've set it up. You can use it in a way that makes it a little slower, I guess is what I'm saying. But so there's a section on this talking about the polar expressions polars expressions and these are all set up so that you can pass these expressive queries into polars and have it run in the background and just make things really fast with and sort of skirt around the the GIL because you're doing all the work in the Rust part of part of the world and then collecting the data later. So there's like a set up the query and then collect the query. It's kind of cool. So I just thought this is a really looks fun. It's it's just there's nothing to you don't have to do know that it's in rust. You just say pip install polars and It works. So

00:05:01 yeah, that's great. Out in the audience. Rob asks, Why rust did not see maybe maybe an example there is pandas versus this. also probably the person who wrote it just really likes Russ. And I think Russ has a little bit more thread safety than straight C does. I'm not 100% Sure. But this uses threads as you point out, whereas the other one, and as in others, in C, don't.

00:05:24 I also think that we're gonna see a lot more things like this, like, because I think some of the early, faster packages for Python were written in C, because rust wasn't around, or it wasn't mature enough, but I think we're gonna see more people saying, well, I want to, I want it to be closer to the processor for some of this stuff. Why not rust? Because I think I think Rust is a cleaner development environment than Pepsi right now. So

00:05:51 yeah, I agree. Absolutely. It's just a more modern language. Right.

00:05:56 I you know, sees keeping up so isn't isn't isn't is never going to be old? I don't think but yeah.

00:06:01 Yeah. Yeah. I don't mean to say that c is out. Not modern in the sense that people are not using it, but it doesn't embrace in its sort of natural form the most, you know, smart pointers and things like that. Yeah, there's there's C++ maybe but not see their safety features

00:06:15 written built into rust to make sure you don't, that just make it easier to not do dumb things. I guess. Suppose that was

00:06:24 emptied. Alright, well, let's jump on to my first item, which is a follow up from last week Python developer survey. 2021. Yes, you heard that, right. I know, it's 2022. These are the results from the survey that was at the end of last year. So let's I'm gonna kind of skim through this and just hit on some of the main ideas here. There's a ton of information. And I encourage people to go over and scroll through it. This is done in conjunction with the folks over at JetBrains, the PI charm team and all that. So it was collected and analyzed by the JetBrains folks, but put together independently by the PSF. Right. So it's not intended to not be skewed in any way towards them. Alright, so first thing is if you're using Python, is it your main language or your secondary language? 84% of the people say it's their main language with 16%. Taking up the balance of not so much. It's been pretty stable over the last four years. What do you think that's right.

00:07:16 I think that there's a lot of people like me, I think that it, it started out as my secondary language. And now it's my main language.

00:07:25 Yeah, interesting. Yeah. I got sucked in like, yeah, maybe I'll use it to test my stuff. Wait, actually, this is kind of nice. Maybe we'll do more of this. Yeah. There's always the the next question or analysis is always fraught with weird overlaps. But I liked the way they asked us a little bit better than a lot of times it says Python usage with other languages. What other languages do use Python with, rather than maybe a more general one where they ask, well, what is the most popular language? And you'll see weird stuff like, well, most people code and CSS, like, I'm a full stack CSS developer, like, No, you're not just everyone has to use it. Like, what is that? That's a horrible question. Yeah. All right. So this is like if you're doing Python, what other languages do you bring into the mix? And I guess maybe we just hit the top five JavaScript, because you might be doing front end back end HTML, CSS, same reason. bash shell because you're doing automation and build so on sequel, a sequel, I'm surprised there's that much direct sequel, but there it is. And then C and C++. Speaking of that language? Yeah. So to sort of address the thing that I brought up before, Rust is at 6%. Last year, it was at 5%. So it's compared to C 30. And 29. So they both grew by 1%. This year. Okay. Yeah,

00:08:34 I think they both grew. That's interesting. Yeah, exactly.

00:08:37 Another thing that people might want to pay attention to is you'll see year over year stuff all over the place. And these reports, because they've been doing this for a while. So like the top bar, that darker or sorry, brighter is this year, but they always also put last year so for example, people are doing less bash, you can see like, it's lower bar is higher, and they're doing less PHP probably means they love themselves a little bit more. Crying, okay. Let's see languages for web and data science. This is kind of like if you're doing these things. What use more so if you're doing data science, you do more a sequel is your most common thing. If you're doing web surprise, JavaScript in HTML is the most common other thing. Yeah. Let's see. What do you use Python for work and personal 50%. Personal is 29 and work 20%. It's kind of interesting that more people use it for side projects. If they use it for just one or the other of work or personal. As people who know Python at work. They want to go home. They're like, You know what, I could automate my house with us humans do that?

00:09:42 I think that yeah, I would take it like that. I think more. It isn't just even automate your house. It's just playing around with it at home like Yeah, I heard about this, this new web framework, fast API. I want to try it out. Things like that. So

00:09:55 yeah, absolutely. I'm going to skip down here through a bunch of stuff. What do you use Python for the most web development. But that fell year over year, data analysis stayed the same year over year, machine learning fell year over year, and a bunch of stuff. But so sort of the growth areas URI or education, and desktop development, and then other think is pretty also game development doubled,

00:10:19 doubled from one to 2%. A for one to two is probably like,

00:10:23 there was, you know, that might be within the margin of error type of thing, but still a double. But I think just the other, no other didn't grow. There's just I think it's just more spread out. I don't know, because there's still I think similar people using Python. Alright, are you a data scientist? 1/3? Yes, two thirds. No, that's, that fits with my mental model of the Python space 1/3 Data Science 1/3 Web API and 1/3. Massively diverse other, the way I see the ecosystem, python three versus two, I think we're asymptotically as a limit approaching python three only, but year over year, it goes 25% from 2017, then 16% to python two, then 10%, then six, then five. And then they're just there's just huge code bases that are stuck on Python two, like some of the big banks have, like 5000, Python developers working on Python, two code bases that are so specialized and tweaked so that they can't just swap out stuff die, you know, that might represent by person bank usage. I don't know.

00:11:21 I just, I feel bad for you. We're rooting for you, everybody out there. But to stick in approach that

00:11:28 limit Yeah, let's let's divide by n factorial, n for your limit there. Let's go get in there. Alright, um, python three, nine is the most common version 310 being 16%, and three, eight being 27% versus 35. So that's, that's pretty interesting. I feel like this is, hey, this is what comes with my Linux. This is what comes with my Docker. So amusing that, but maybe it's more.

00:11:51 Yeah, it's interesting. Because you and I like, are interesting space, because we're always looking at the new stuff. So I I met, I met 310. And I can't wait to jump to 311. Yeah, and actually switch to 311 for some projects. So. But there's a lot of people is like, man, pythons pretty good. And it's been good for a while. So I don't need a lot of the new features. So

00:12:14 yeah, for sure. I'm going to later talk about something that might shift that Yeah, to the right. I've actually been thinking like, should I maybe install 311 beta? See how stable that is on the servers? We'll see that might be eventually might be a good choice. That's okay. Where do you install Python from 30%. Just download the thing from python.org. And run with that. Yeah, the next most common option is to install it via your OS package manager, apt, homebrew, whatever. Navarro has a great little recommendation out there. For people who are stuck on Python two, there probably is a support group for Python two users.

00:12:54 Hi, my name is Brian and I use Ubuntu.

00:12:58 Hi, Brian. All right. Another one I thought was pretty interesting is the packaging stuff, the isolation stuff. Before we get there really quick web frameworks. Fast API continues to grow. Yeah, pretty strong. Here. We've got flask is now maybe within the margin of error, but just edged ahead of Django. But fast API almost doubled in usage over the last year, it grew nine percentage points, but it was at 12%. Last year. And so now it's at 21%, which is that's a pretty big chunk to take out of established frameworks.

00:13:32 Yeah. Well, it looks like the third is none. I haven't tried that yet.

00:13:38 Yeah, it gets a lot of attribute errors. But it's really efficient, because it doesn't do much work. Yeah. Yeah. People who maybe don't know, fast API, the name would indicate it's only for building API's. But you can build web apps with it as well. And it's pretty good at that.

00:13:52 Especially sickly. Yeah, especially if you check out my courses. He's got like two courses on building web apps with

00:13:59 nest eggs. I do. And I also have some sort of template extensions for it make it easier. All right. Data Science libraries. I don't know how I feel about this one to use NumPy. Well, yes. But if you use other libraries, then you also use NumPy. So

00:14:12 yeah, it's like all of A's are using NumPy. So. Exactly,

00:14:16 exactly. Yeah. A bunch of other stuff like that for unit testing. What is surprising that pi test is winning. No. They just overtook not in this year, didn't it?

00:14:30 Yeah, so

00:14:32 Alright, orams, SQL alchemy is ahead. And then there's Django RM. Django is tied to Django SQL alchemy is broad. So there's, there's that and then kind of the none of the ORM world is raw SQL at 16%. That's pretty interesting. Postgres is the most common database by far at 43%. Then you have SQLite, which is a little bit of a side case, you can use it directly, but it's also used for development, and then MySQL, the MongoDB and then Redis, and Microsoft SQL servers.

00:15:00 though, yeah, actually SQL Server and Oracle are higher than I would have expected, even though you know, but it's okay.

00:15:06 Well, I think what you're gonna find is that there's like certain places, especially in the enterprise, where it's like, we're SQL Server shop, or we're an Oracle shop and our DBAs manage our databases. So here, you put in a file a ticket, and they'll create a database for you.

00:15:21 Yeah. Or there's, there's already an existing database, and you're connecting to it. Yep,

00:15:25 yep. Yep, exactly. Definitely. All right, let's keep going cloud platforms, AWS is at the top, then you got Google Cloud at 50%, then GCP, Google Cloud Platform, then Azure than Heroku, DigitalOcean. Linode. has made it on the list here. So you know, nice, former, or sometimes sponsor the show. It's good for them. And let's see, do you run? How do you run stuff in the cloud? Let's skip over this, I think a bunch of interesting, a few more interesting things. And we'll we'll call it compare to 2020. Linux and Mac OS popularity decreased by 5%, while Windows usage has risen by 10%. Wow. Yeah, we're the windows people now double more than double the Mac OS people in our almost rivaling the Linux people.

00:16:06 That's, um, I think that's just towards the growth of Python. Pythons just making it more into everybody's using it sort of thing.

00:16:16 Yeah. And there's also Windows subsystem for Linux. It's been coming along pretty strong, which makes windows a more viable, more, have had more parity with your cloud targets, right. And it feels like sadly on it's it's because of WsL. Yeah, maybe. Okay. Let's see a few more things. Documentation. It's cool. They're asking about like, what documentation frameworks you use. This one's interesting to me, what's your main editor? VS code or PI charm? I asked this question a lot at the end of talk Python, and it feels like vs. Code vs. Code vs. Code vs. Code is what people are saying all the time, but it's 35% VS code. 31% by charm. And Brian right there for you. 7% Vim, but okay, yeah, I just did you. Yeah.

00:16:56 To be fair, it's both vs. Code. It's all three or top? Yeah, top four for me. But yeah,

00:17:03 yeah, exactly. Well, often, you can probably just use Vim bindings within the other two, right? Yep. Yeah. Let's see. I think also, maybe another interesting breakdown, is that if you look at the use scenarios, or the type of development done with the editors, you get different answers. So like, for data science, you've got more py charm, and for web development, I think Hollinger, I have that right. Oh, interesting. For data science. You have a lot more Vyas code for web development, you have more pi charm, you have a lot less other data science, aka Jupiter. Yeah. Okay. How did you learn about your editor? By first one here is from a friend. So basically, friends like push editors, like drug dealers, like gotta get out? What do you do? And I think getting here

00:17:50 Oh, I think it's like it. If I'm, if I'm watching somebody do something cool. I want to do it also, because it looks Yeah,

00:17:57 exactly. You sit down next year for me, like how did you do that? That's awesome. I want that feature. I think you're probably right. Okay, let's just bust down a few things better. One, do you know or what do you think about the new developer in residence role? This is like a shilling that's going on right now. 77% are like the what? Never heard of it. So maybe like we got it. We got a little more advocate advocacy job to do here. But he's been doing a great job. Really speeding things up and sort of greasing the wheels of open source contributions and whatnot.

00:18:29 i Yeah, I'm gonna take it like design, because if designs done well, nobody knows it's there. And yeah, I think the same thing. I think if he's doing his job really, really well. Most people won't notice things will just work.

00:18:41 Yep. Quick real time follow up Felix that in the eyes because I use Python? Because if Michael.

00:18:50 It should have been one of the options in the survey because of Mike.

00:18:53 Oh, come on. But no. Let's see. There's a bunch of questions about that. And the final thing I want to touch on is Python packaging. Let's see here. Which tools related to Python packaging do you use directly? And we've talked about poetry. We've talked about flit PIP envy, and so on. And 81% of people are like I use PIP for packaging. Compare, as opposed to flutter. So that and then compare sort of parallel to that is for virtual environment. Do you use the what do you use for virtual environments? Basically? Yeah, like 42% is like, I just use the built in one or I use the virtual env wrapper, and then it's like poetry, pipi and V. Talks and so on. There's a few I don't know what this is.

00:19:42 Yeah, well, I'm, I'm glad they included that because the one of the original questions didn't include, like the built in V and V. B. And that's Yeah, I think that's what most people use. So it is

00:19:53 right. Yeah. Yeah, absolutely. All right. Well, I think there's there's more in my progress bar here. This is a super detailed report. Link into it in the show notes. So just go over there and check it out if you want to see all the cool graphs and play with the interactive aspects, but thanks again to the PSF and JetBrains. Putting this together, it's really good to have this insight. And these these projections of where things are going, yeah.

00:20:14 Hey, all right, I'm gonna grab the next one, smoothly this time. Nice. So, Jin config is, is a is, is just jet and actually, but the the project's called Gen config. And it's, it's kind of a neat little thing, it's a different way to think about configuration files. So like you have you have your pipe project or your tomo files, you could have dot ini files, there's a lot of ways to have configuration files, but But Jen takes the perspective of, oh, well, what, what if you just want if you're not really into all that stuff, and you're a machine learning person, and you just have a whole bunch of stuff to configure in your changes stuff a lot, maybe let's make it easier. So I actually came across this because of, because of Vincent, Vincent want warm, Vincent Warmerdam. He's got an excellent intro to gin on his comm code site. And the idea is, you've got this, you just have for a function that you want to in your code, you got some code, and you have, like part of it that you want configurable, you just slap a gin configurable decorator onto it. And then all of the parameters to that function are now something that can show up in a config file. And it's not an ini file, I actually don't know the exact syntax, but it just kind of looks like Python, it's a, you just have names, like in the in this example that I'm showing, there's a, there's a file called simulate. And there's actually a function called simulate and a parameter called in samples. And in your config file, you can just say simulate.in samples equals 100, or something like that.

00:22:02 Oh, wow. And this is like, it basically sets the default parameters for all your functions you're calling. Yeah,

00:22:09 the ones that you want to be configurable, and you can just do that. Now, it's still work, you can still set defaults within your code. And, and just like you normally would, and then, and then you can configure the ones that you want to be different than the defaults. So that's a, that's a possibility. And there's a whole bunch of, I'm gonna expand this a little bit, there's a whole bunch of different things that Vincent goes through, like required settings, you can have, you can specify like a.or Does it GN dot required it as a function, and it makes it so that are as your parameter and then it makes it so that your user has to put it in their config file. That's kind of cool. And then you can also, if you don't want somebody to configure something, you can, you can mark it as, oh, he's got blacklist the in samples. So if you want, like in this example, he's got a simulate function with two parameters, random funk and n samples, you want people to configure the random funk, but you don't want them to touch the n samples, you can, you can say don't do that. So it's kind of a, there's a whole bunch of cool features around it like, like being able to specify different functions. So you can name things and do it. Like, like to say, like, in his example, he's got random functions. And if you, you can specify, you know, one of the other one of the other like a random triangle function, you can specify a function and assign it to that he's got named things. It's a really, it's a interesting way to think about configuration. And the the, the motivation section of the documentation for Jin says that often modern machine learning experiments require just configuring a whole bunch of parameters, and, and then you're tweaking them and stuff. And, and to have that be as easy as possible and as simple as possible. Because it is and you're going to add some and take some away and things like that, because some things you want to configure it and then you decide not to not having to go through a config parser system. And just making it as trivial as possible to add parameters is a really cool idea. So

00:24:24 it is a cool idea. It reminds me of like dependency injection a little bit. Yeah. You know, where you would like configure, say, like, if somebody asked for a function that implements this, or that that goes here, like this is the data access layer to use or here's the ORM. I want you to pick this time. It's not super common in Python, but it's pretty common in a lot of languages. And it feels a little bit like that. Can we configure stuff? So we have these parameters that we might use for testing or something, but it just they get filled in automatically? Yeah, even fast API has that for example. Yeah.

00:24:58 So cool. Somebody the audience's Isn't? Isn't Jen used with go? And I'm not sure about that. But Jen is is not an officially supported Google product. But it's under the Google like GitHub repo group. So maybe,

00:25:15 yeah, maybe. So it does look very Python like, though for the config files, and that's cool. Yeah. Good one. All right. Let me switch back before I swap over. Okay. Here we go. Now, this next one, I think universally, will be well accepted. Although the comments section about it was a little bit rough and tumble. Nonetheless, I think it should be universally exciting to everyone. And this comes to us from Eduardo or Chyna, who sent over this article that said, the so called the Python 311. performance benchmarks are looking fantastic. And oh, boy, are they? We're talking beta code, six months out, right. And still, still, we've got some pretty neat stuff. So this, this blinks over to an article with that same title, by Michael Lara Bell basically says, Look, we took a whole bunch of different performance benchmarks for Python and ran them on Python 311 beta, which this is the thing I was hinting at, like, you might really want to consider this for if you're thinking Should we upgrade from nine to 10? Maybe you want to just go straight to 11. Right? I mean, you know, sort of aside that, Brian, it's an awesome that the one that goes like crazy performance, this one goes to 11. All right, so they show all this stuff that they're testing on like AMD risin, 16, core 32, with hyperthreading, the motherboard, I mean, like down to the motherboard, and the chipset and the memory and all that. So a pretty decent stuff. And then also the build commands and all sorts of things here. So pretty repeatable, I think, rather than just like, hey, I ran it. And here's a graph without without axes, or something like that. So you can kind of click through here and you see some pictures, and it says, All right, well, there's the pie bench, which I think is like the standard, simple one, it says, look at the Python 311 beta is faster than 310, which by the way, was slightly slower than the previous ones. But you know, what is that 10% or something to already? Actually 16%? Better. So that's already pretty awesome. But there's a whole bunch of other ones, they did one called go. I don't know what these benchmarks are, this is I don't think this has anything to do with the language go, just the name of the benchmark, and then there's two to three and chaos. So that one sounds like the funnest, but if you look at this go one. This one is like, almost 50%, faster. 50% faster. That's insane, right? Yeah. Well, he come down to the two to three is, these are all estimates. 25% Faster, see 40% faster. With the chaos one, come down to the float operations, and Python 310 was already better than the others. But this is again, maybe 30% faster. And let's roll into the next page. You can just kind of see this across the board. Better better. Some of them are super better. Some are like a little bit better, like pathlab is better, but not crazy. Ray tracing is like, again, 40% better here and keep going. There's another one or this huge crypto, i e s, some sort of encryption thing. There's just a bunch of a couple of these are there's like this one at the end, you're like, oh, wait, this one went got way worse. Be careful, because it says more is better on this composition, I guess is the result here. Like how much more computing power do you get? Or CPU cycle or whatever? What is that? That's a massive jump, you saw a little bit better improvements from 383939 to 310. But 310 to 11 is like a 40% 41% better on the beta before it's even final. Wow. That's pretty exciting,

00:28:51 right? That's very exciting. And yeah, actually, I think I'm curious what some of these negative comments are. But the interesting thing is to run lots of different metrics and or lots of lots of different benchmarks. And having them all be it's faster, kind of means that I mean, I take it as you know, your mileage may vary, but it's gonna be better. For whatever you're doing, probably,

00:29:16 yeah, yeah, this it feels like this is the thing you could just install and things get better. The negative comments are mostly like, well, if Python was so slow, it could be made this faster than pythons a crappy language. It's pretty much summed up like 65 comments right there. By the way, so I interviewed Guido van Rossum and Mark Shannon a little while ago about this whole project about making Python five times not 40%, but five times faster. And the goal is to make it a little bit faster like this, each release for five releases in a row. And because of compounding, that'll get you to like 5%. So it looks like they're delivering which is awesome. Yeah, this is good. Yeah. Cool. All right. Yeah, I think that's it for all of our items. Yeah, got any extras?

00:30:01 Um, no, I was gonna pull up the the so yeah, the this one goes to 11 If people don't know that that's a spinal tap reference.

00:30:10 This? Yeah, exactly. Alright, I got a few extra to throw out real quick Python 310. Five is out with a bunch of bug fixes, like, what happens if you create an F string that doesn't have a closing curly, and just a bunch of crashes and bug fixes. So if you've been running into issues, you know, maybe there's a decent amount of stuff in the changelog. Here, nice. People can check that out. Also, real quick, people might if they're on a Mac, they might check out raycast, which is a replacement for the Command Space spotlight thing that has like all these developer plugins, so you can do like, interact with your GitHub, repo through Command space and stuff, you can create little macros. And there's a bunch of extensions, like the things pre leased for not for team if you're not on a team, but there's a bunch of different things you can get that are cool, like managing processes, doing searches, VS code, project management, from Command space and whatnot. The one that I set up is I can now do Command space, and then just type pipe pi. And then I'll just search pi pi for whatever I type. Here's an example type in pi pi, then fast API No, like, pull up all the fast API packages. So anyway, people might find that fun to check out.

00:31:18 That's cool. Yeah,

00:31:19 it's pretty neat. All right. Well, I think I'm not talking about my other one. And then joke, shall we close it out with a joke?

00:31:26 Yeah, let's do a joke.

00:31:27 So I think this ties really well back to the PSF survey, we talked about, well, what framework do you use? What data science framework do you use? Or what web framework you want to use Django or flask or fast API? Or what? So here's one, that is a pretty interesting analysis. And the title is, why wouldn't you choose parrot for your next application? Not a framework, but literally, apparently, this is, this is compared to machine learning. So it has like this breakdown of features like a Feature Table, and it has a parent, which literally just has a picture of a pair. And this is machine learning algorithms with a neural network. And then it lists off the features learns random phrases, check check. Does it understand anything about what it learns? Check, check. Occasionally speaks nonsense check check is a cute birdie parrot. Check fail. Why wouldn't you choose this, Brian?

00:32:20 This is funny. I love it. Pretty good. Pretty good stuff. I actually reminds me of like, have to pull up this article. So I was reading about some machine learning stuff to try to get models like even closer and closer to reality. There's a whole bunch of tricks people do. And then and then there's some analysis of like, sometimes it's actually not doing anything more than just a linear regression. So yeah, it simple for an

00:32:47 if statement. Yeah, for sure. So they're using artificial intelligence to make the computer decide now it's an if statement. Like, it's just computers deciding things the old fashioned way. Yeah. Yeah. Awesome. All right. Well, thanks for being here. Thank you, everyone for listening. Bye. Yep. See ya.

 <|endoftext|>
00:00:00 Hello, and welcome to Python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 236. Recorded June 2 2021. I'm Michael Kennedy. And I'm Brian knockin Anastasia. Anastasia, so great to have you here. Nice to have you on the show. Thank you for inviting. Yeah, absolutely. Why don't you tell people a little bit about yourself before we get into the topics. So I'm joining from Germany, Berlin remotely right now. And I have a little one baby dog joining as well. You might hear him on the street. I am originally from Ukraine. I'm not German. I moved to Germany around five years ago, maybe five and a half. And my question is Biden, I used to be a c++ developer, game developer and so many more languages. But the best one, I think, for me is Python. So I decided to stick with it for around eight years now. And I started out doing my professional programming in c++. And I don't know Brian still touches a little bit of C and c++ in his world. So that's cool. Yeah. half my life. Yep. So nice. And what kind of games? Well, they were adapted first. for iPad. There were like two and a half D games. And then later on, it was mostly 3d games with Unreal Engine. Yeah. Cool. Yeah, that. That's awesome. All right. Well, once again, welcome. Welcome. So glad to have you here. Brian, do I have the first item this time around? No, you do? Go for it. Okay.

00:01:30 Um, well, accessibility isn't really some, I probably should think about accessibility more, but I don't really, but I probably should. So I was excited to see there was a tweet recently by Matthew feickert. That said, I need to give some serious praise to a fellow psychic hip dev hands. Them Minsky is excellent monolines tool for interactive simulations of colorblindness. So I check this out. So monolines is this is a Python package, and you can pip install it. And as Matthew said, you can PIP x install it. So you just always have it around, which is nice. And

00:02:10 it just pops up this to this, this really cool window. And you can just, you can just drag it around. And it makes the whatever the windows have over all over your desktop, it just makes it black and white instead of color. So you can see what it looks like in grayscale. So

00:02:32 I one of the things I really liked about this is, is the the example of showing it with with matplotlib. And plots, because plots are really where you're using color to distinguish between the two different sets of data. So you really kind of want that data to look different even if people don't see color. So that's that's an important thing. So that was neat. And then somebody that replied to that and said hey,

00:03:02 I always try to use Si, si masher, smasher. I'm not sure

00:03:07 it is a to make sure they're colorblind friendly. So I'm like, I've never heard of this. So when I checked out smashers in what it what it is, is it's a bunch of color maps. So you don't really have to think about it. So you. So there's all these great named color maps. And they're, they're actually fairly attractive color changes. But the, it shows you what they look like in black and white also. So they this isn't, it's kind of a little demo at the top that we're looking at on the stream. But the code that you have to you just, it's just kind of built into matplotlib already, like it's an extent it's also kind of an extension to matplotlib and other things that use color maps. So you can just say when you're plotting, you can just specify a color map like rain forest or something. And it it automatically is a colorblind

00:04:01 friendly color map. So you can do your plots and have it still look nice everywhere. Oh, yeah, this is really cool. And Matthew, friend of the show, thanks for sending that in.

00:04:12 I never really thought about this and I should have you know, I mean, like maybe I should go over my website and go to they look terrible for people who have, you know, color vision impairments and whatnot. Yeah. So really cool. And it looks like it's this independent thing that we'll just go over. You just move your mouse around and work on anything it doesn't necessarily have to do with Jupiter or matplotlib or something like that. Right? Great. So the mana lens is just a it's just something that works on anything you drag it over even my desktop my background, it showed the showed the picture in black and white so it is cool thing is wait. There's color maps, I can just add to matplotlib that's cool, like race and stuff I don't need. I didn't know you could just do that. So that's a it's kind of a neat

00:05:00 And then you can like for instance, the one of the examples that they have on the C masher README is just just sort of a simple plot and when you're in matplotlib, kind of just picks colors for you unless you specify colors for different plot lines. But you can just you can give it a color map instead of a specific list for each item. So, and that's just kind of nice. That's why I'm doing it. Yeah, why not? Do Anastasia What do you think? Oh, it looks amazing. Really? It's super helpful. Yeah, we have a video game app by be great to use that as well. For sure. When you're doing games. Did you have to think about this kind of stuff? No, actually, we're not that far. At that time. It was around seven years ago. Eight. Yeah. So yeah. The on the on the monolines site, or the examples they show is using. Having one of the plots use some sort of pattern underneath and not just color. And that's, that's I'm not sure how to do that. So people that are great about plotly probably know how to do that really right away. But that's kind of a neat idea. Also to have like one of the one of the graphs has hashes versus stars or slant lines or something like that. Oh, yeah. I have it like some sort of ASCII differentiator. Yeah. Yeah. They're nice. Yeah. This is super helpful. And Matthew, again, thanks for sending in. And joy. Yeah. Welcome to the live stream. Thanks for being here and for the recording. So the next one I want to talk about is something called rapid fuzz.

00:06:37 Yeah, so last time I talked, when we had vincit. On I saw the fuzzy wuzzy fuzzy text matching for that, that chatbot that he was showing off. I thought, oh, Fuzzy Wuzzy is cool. So Miko, honkala, sent in rapid fuzz. And it's very much like Fuzzy Wuzzy. But it turns out to be a whole lot faster. And it uses some of the same ideas. But you know, coming back to the some of the things we were talking about, it is basically written in c++ using the levenstein distance algorithm for words, similarities, but obviously has a Python API that we all work with. And so yeah, it's pretty neat. It's really easy to work with you just again, pip install it. And then you can come out here and do things like buzz dot ratio, and you can give it two sentences. This is a test, or this is a test exclamation mark, and it says that's 96.5%, the same or you have Fuzzy Wuzzy was a bear. I guess these are Fuzzy Wuzzy was a bear guesses are the same. Now, was he fuzzy? Was he fuzzy? Yeah, got it. Gotta be better. Was he fuzzy was a bear versus Fuzzy Wuzzy was a bear. Oh, my goodness, that's 90% the same. Given a bunch of phrases, you can sort them by similarity, you can say, going to use selection, like, you know, to call in, or to call center type of automation, given three choices. And then given some text, you can say find which one you like Atlanta, Falcons, New York Jets, New York, giants and so on. Somebody says, you know, lowercase New York Jets instead of uppercase, it'll say, Well, here's the likelihood that that's a match. But here's another possible match. That's you know, and it gives you the ratios of how good of a match it is, though, if you've got a select set of choices, and you're asking for input on it. You can just say, well give me the closest match. And if it's anywhere close, you can just run with that. So yeah, pretty neat. Right? That's pretty cool. Yeah. And the other thing that's interesting is the performance. And before people tell me that all all benchmarks are broken, and they don't work, you know, sometimes at least they give you a sense. So here's some of the things that they've got in terms of performance, say versus Fuzzy Wuzzy. And the numbers are like 10, or 20 times faster, definitely broken.

00:08:51 It's definitely broken. I think it's a good that's written in c++ instead of Python. At most of its core, you know, probably. But anyway, if you're looking for fuzzy text, matching Fuzzy Wuzzy is a good option. And apparently, thanks to Mikko rapid fuzz is as well. So yeah, pretty neat. We probably should do a segment on benchmarks at some point. No, no, no.

00:09:14 No, we shouldn't do it. But I've written blog posts and stuff on it. And it's just an endless Battle of you're doing it wrong. Your situation is not my situation. And in my situation, it's not as good or it's worse or it's better or you're Yeah, no, I hear you. It would be interesting, but at the same time, yeah. Okay, there we go. We just had a section on bench work. Yeah. I've already just explained like the emotional trauma that I'll go through from receiving all the feedback now.

00:09:39 Anastasia, what do you think about this?

00:09:42 fuzzy text matching? Oh, maybe next time we can organize a butthole between them?

00:09:47 That's right. Yeah. We'll bring some in. Yeah, sure. Do you have any use for this fuzzy text matching string matching stuff? Well, actually, yes, it's work. We have lots of matching algorithms, but we're using

00:10:00 different tools. And I'm not a data scientist person, but I would love to try that actually. looks super cool. Yeah, we use some c++ libraries.

00:10:10 Yeah. Yeah. Robert, out there in the live stream says that we would have to benchmark the episode. If we had episode about benchmarking. You see, it's like recursion. Save that thought for the end of the show. All right, Anastasia, you, you're up next. Struggling login. Tell us about it. Well, a few years ago, I went to meet up and I heard a talk from Marcus halterman, about stripe blog. That's the first time when I heard about this, and I decided to give it a try. And actually, I fell in love with it. And I'm using it since at least two and a half years, maybe you

00:10:45 it's awesome way to bring a bit of structure to your logs to make them more visible and more usable. Because usually how we like it's like just one huge sentence which is readable by humans, but it's not machine readable. And the idea is here, to bring our structure to build some dashboards based on different keys and then values and then see what's actually happening was the system without touching the logs without scrolling through the whole log, and then just reading all bunch of things. And I already used it in production looks pretty well, if you try using JSON format is just fantastic. Oh, how cool. Yeah, you can pass it all these, like processors and type stuff. So you can say render out the print, the stack info, the log level, all those kinds of things. That's neat. We added a bunch of processors like custom made, which were specifically designed for our applications, which made a life of our DevOps, parsing the logs way easier, because they didn't have to write them by hand. And if you use structured logs for all applications, not just one, but for example, microservices, and you pass

00:12:09 the key ID or like trace ID or something that will identify the path which

00:12:16 the lock goes through, then you might see what happened before the bug happened. Or maybe because because if you want to see how the system is working, you also need to be either one of the detectives of the system, or is stripe log. Yeah. It's interesting. When you log out stuff, it looks like you can just do key keyword arguments. And those will add to the log really nicely. So you don't have to create a message that you're going to send that embeds you know, the value equal, you know, variable equals valuable variables value, we just pass them to the log message, and they become part of the message like, that's cool. Yeah. And you can also use the initial message, which is an event like greeted here as some kind of key, which would give more clues where this message is coming from and what type of event happened instead of usual message. Yeah, nice. Very cool. The other thing it says is, if you have color Rama installed, it will automatically render in nice colors. And that's very neat. I love color Rama and I love having colors in, in the code that we look at, it really makes a nice difference. So yeah, you get things like a colored whether it's an info message or an error, and whatnot. Yeah, very neat. I like it. I keep meaning to us this morning. No, I'm glad you brought it up, because I definitely want to try this. Definitely try this. Yeah, yeah, this is a really good one. This is new to me, but uh, quite neat. Alright, not new to me, but also quite neat. Is our sponsor for this episode. So this episode is brought to you by century. Oh, how would you like to remove a little stress from your life? Do you worry that users may be having difficulties and encountering errors with your app right now? Would you even know until they send that support? Email? I mean, yes, maybe using struck log. But are you watching the struggle log? Now? You don't know. Right? So how much you would? How much better would it be if you had that error or performance details immediately sent to you with the call stack and local variables and active user and all that stuff. And with century it's not just possible. It's easy. We use century on all of our web apps, Python, bisetta, fam talk, Python training, all those kinds of things. And we know if there's some kind of problem, unfortunate if someone has a problem, but it's better to know and be able to fix it right away. In fact, one time somebody ran into a problem over a talk Python training, getting a course and I got the message. I could see who was logged in when they had the problem. And I actually fixed the bug and was about to push out the changes and I got an email Hey, I'm having a problem with your your site and like yeah, I know I just fixed it. Try again, please. And they were quite a surprise. So surprise and delight your users today. Create your century account by them by set FM slash century. And please when you're signing up, click that got a promo code redeem

00:15:00 option and enter Python bytes. It's not automatic. So make sure that you enter Python bytes as the promo code Otherwise, they won't rose from us, you'll get a bunch of cool stuff, two free months of the team plan with many more errors and events and other features as well. So check them out at Python bisetta FM slash century. That's pretty awesome. Brian, I guess you should probably also test your code. Maybe before? Yeah, with errors. What do you think? Definitely. And actually, before we go on it, I think I've mentioned this before, but the graphic on that is on the sentry pages. So cool. I don't know I really like it too. Like I love the upset console terminal reading a paper. Yeah. So this is, this is kind of like inside baseball, maybe. But I don't know, maybe three people might care about this. But anyway, I'm one of them. So

00:15:46 x fail now works with bitez sub tests. So that's, it's neat. But I got to explain it a little bit. So some tests are kind of this weird feature of unit tests that came along in Python three, four. And it's a way it's a context manager so that you can have possibly several places where your test might fail. But continue, it doesn't stop. If it fails. And that's a that was within unit test. Pi test had, well, pi test that pi test check the plugin that I wrote, that allows something similar context manager, but then pi test sub tests came out, which was a plug in, in about 2019, that started that, that allowed you to run the unit test sub tests within from pi test. But there's also a PI test style of doing sub tests. Also, they're a bit quirky. So I'm going to we I'm linking to,

00:16:45 to to resources, an article by Paul Ganzel, and episode of testing code where he and I talked about sub tests. And so they're little before you jump in and use them right away, you should know some of the quirks about it. But there's still cool if they work for you. But one of the quirks that was around for a long time was the x fail didn't work. And x fails a way to say, I know my test is gonna fail.

00:17:09 But, you know, and then you get to decide whether or not you want to make market as an X pass or market as a fail if it fails.

00:17:17 And the

00:17:20 this anyway, x field didn't work with sub tests, but it does now as of like, the start of the month. So somebody named maybe sibor, on GitHub,

00:17:31 maybe

00:17:33 merged a fix or submitted a fix as a pull request, and they got merged in it's now in version 050. So x fail if you wanted to use sub tests, fail, no works with them. So that's the good news. Yeah, yeah, that's actually interesting. So the basic ideas, I want to loop over a bunch of scenarios, or whatever it may be, test them all, and then have the test fail, if any of them did, but actually just go through them all before. Yeah. So like, in on the on the sub tests. site, there's a little example. So like, let's say you're looping through a range and you want to, you want to run all of them. Within not not a parameter is just within the test, you're doing, like several things. And you can Yeah, and if something fails, you want to actually report all of the failures. And this is, this is, you know, sort of helpful with loops. But you know, why not just use parameterization. But the the one part where it does really help is if you really are checking, like four or five different things, and you really want to know, like, let's say, you're measuring something, or you're checking

00:18:36 several dimensions of something. And in having all of the failures together, would help you determine what the real problem is. So

00:18:46 it's when you have to have all the information. This is a good idea. Okay, cool. Anastasia, what's the testing story in your world? I would use mostly parameterize testing, because we don't have the sub test need. We don't need to test it multiple times. Maybe in the future? Yeah. When we use parameters works, I'd stick with it.

00:19:08 Yeah, it's definitely good. Alright. Another thing that I think is really neat to talk about, but I feel like it's almost down to the benchmark type of situation is, what do you do with the secrets in your application, there's to get as SSH get, which is always terrifying. If you go here, you can see Oh, here's all the code that we found in this branch of this GitHub repository. For example, here's your, you know, database connection string with username and password right there. Right? So you can see all kinds of issues. If you go over here, like even a live stream. If it doesn't feel bad enough, you'll like watch the live stream. Of all the things that are coming in, like right now, apparently, there's some username and password and a URL and some kind of private key and whatnot. So you don't want that. So what do you do? Well, there's all kinds of things you can do. Do you encrypt?

00:20:00 Those secrets and put them in source code. Well, then where do you store the encryption key? There's some kind of certain types of vaults you can install on your server, kind of like one password. But for servers, you could do that kind of thing. There's just leave it in there and hoping for the best. There's put in an environment environment variables. That's a very, very common one, right? But still, no matter what you pick, you kind of got to get that data back and deal with it. So I want to introduce you to pedantic, Brian, you've heard of identic, right? Yeah. In fact, I didn't know this has anything to do with secrets? Yeah. If you go to identic, right here at the top, I believe there might be

00:20:42 some nice little comment here. Oh, yeah. I thought I thought you were in here. But apparently, I'm in here right now. I think it toggles between us anyway. Yeah, so we've known we, the point is, we really talked about a pedantic a lot, it's a really cool way to create these classes that are kind of like data classes, point them at some data source, and then they validate it and adapt it, right. So if I've got like a JSON document that has a field in it, and that field is a list of something, I could say in my model, this thing has a list of integers. And if it happens to be, quote, a string is a number that has quotes on it, it'll just, you know, automatically do the in pars type of thing to get it fixed. Or it'll tell us that it couldn't figure out what to do with a third value, something like that. It's really fantastic. But what I also didn't know was that it has a built in support for working with these user secrets. So Dennis Roy pointed this out to me. And there's all kinds of things, you can have the dot E and V file, you can have Docker secrets, you can have environment variables, and all of these things as your secrets. And if you just derived from instead of base model you derive from base Settings, then this will automatically determine the any of the fields that are not passed to it from the environment, or from dot CSV files. What do you think? Well, that's cool. Where did the dot E and V files go? and not get up? Okay.

00:22:05 You know, you store them somewhere else, right? You probably what ideally I think you do is you would store like an N v template file that has, you know, put this value and then the real value here, this value, the real value there. And then you of course, ignore Git ignore the other one, the real one, right. So you at least have a structure. But so the idea is you come down here and say, I've got these settings. And we've got like an API key and auth key, we've got a Redis, connection, all those kinds of things. And you can even say, I'm going to put a prefix on it. So in your environment variables is fine if you've got one app and one server, but if you've got 10 apps running, or 10 API's running on your server, what is the API key refer to what is the database connection string with the database name in it refer to which one of those 10 apps, right, so you can put a prefix so you could have like, login app API key, or, you know, logging app API key, you put that in there, and it automatically will just let you access it as if it's API key. So you can sort of configure an environment a little bit better. there's just lots of really neat things that you can do in here to make that work. You can say whether it's case sensitive, let's see, let me pull up, I had to take know some other things I thought were super cool. So it's a regular pedantic model, which means it will do all the conversions and the validation. So if something is missing, that's required from your environment, it'll let you know exactly what's missing. It'll do those conversions. Yeah, all sorts of stuff. It has support for raw sequence files as well, which is like a slightly different way to do it. You can have different Li named E and V files, like a product envy versus una de Nv or whatever, all sorts of settings. So I've always thought pedantic is amazing. And I had no idea it had this built in support for working with this. The other thing that's really cool about this is, if you go back to the top where it describes it, it says it will try to get these values from the environment if you don't pass them over. So if you're in, say, a testing environment, and you want to actually pass values that would control it, you could just explicitly pass them along, instead of, you know, having them come from the environment. So it's really easy to test, you know, set the test values instead of trying to configure a test environment. Nice. We do use it, by the way, based settings, but we didn't use prefixes. Yes. Yeah. Which is a good idea. Yeah, the prefixes are cool. If you have a bunch of apps if you just have one. Like it doesn't really matter, right? Yeah, of course. Cool. You like this? It's working well for you. Yeah, it's working perfectly well. And we are committed on the development version with some damages just to have them around. course, of course. Oh, wow. How neat. Okay, cool. Cool. Well, that's neat. That username. Brian, you got the next one. All right. You've already done No, but I just wanted to mention the wait.

00:24:56 Nevermind, the wrong thing. Oh, oh, here we go.

00:25:00 The quote I think you were looking for was from fast API was not Yes. Yes, of course. Of course. Yeah, it is. I'm over the moon. Yeah. Super excited about Yeah, fast. Thanks. Yeah, we use it.

00:25:14 I love fast API as well. And to me, like pedantic and fast API, they go together, because I learned about them at the same time. I know, they're different people in different projects. But you know, it works like magic. Yeah, absolutely. It is. Yeah. And if it's not magic, maybe you should document it. Or maybe it is magic, you should document it. Definitely. Definitely. Make sure I'm the one who is usually bringing this topic to the team, how to write documentation. And first The question is why to recommendation. Everyone knows that we need documentation. But it's hard. It's time consuming, it's annoying, and how it usually happens, someone leaves the team. And then the last days are about finding our everything. And Gosh, I remember I've had this experience twice at least, right? It's like, Oh, you you said where you said you're going to, you've given me your two weeks. So your next two weeks, your two weeks notice that you're going to leave your next two weeks will be to start writing documentation for everything you've ever worked on. And anything that people might need to do. So your next two weeks are to begin writing documentation that you should have been doing the whole time, in German, you will have in the notice period of three months. So like it's a lot of documentation.

00:26:31 Just kidding. But normally, even if you leave the team like you, for example, move from one team to another, it doesn't mean that you have to leave the company. Still, you have to hand over everything that he worked for, let's say in a year or even the half of the year. And, for example, in my experience, when I started with Python, I didn't know any Python, I had to learn it. And of course, I didn't know about Sphinx or read the Docs or any kind of documentation for Python. And what did I do nothing. I didn't write it. And half a year later, I was wondering who wrote this code. So I did get blame. And of course, it was me. And I was like, what this person.

00:27:11 So yeah, and I suggest to start writing documentation. Now, even if you're not leaving the team. The reason why I'm bringing out the Sphinx and with the docs is that it will allow to have continuous recommendation. And with Sphinx, you can easily

00:27:30 write just some doc strings, which will explain what the function does what the class is doing. Add some input output parameters, and then you will automatically generate it. So there is no need to write it somewhere on conference or any other source. Because if there are too many sources, that's where the recommendation will die, because no one will go and check it. And during the handover. Usually it happens like that you write the condition somewhere where nobody knows where and nobody reads it. Yeah, you pointed out that you've got it in JIRA, and you've got it and get her Yeah, you've got it in all different places. So go dogs, yes, yeah. Yeah. Especially Google dogs. Oh, yes.

00:28:12 And then you share like 10, Google dogs, with different people, and then they lose the links. And people are leaving. It's nice when people are leaving the team. But it's not nice to the people who are leaving the team to another team, because they are getting all the questions for a year

00:28:30 or two find this, how can I get this function? How to get this data? Yeah, yeah, very good advice. You know, for a long time, Sphinx was like synonymous with restructured text. But now we've also got the marks that markdown with the mist parser there. So that's very cool, as well. And also markdown ahead instead. Yeah. And also it supports the Sphinx itself. It's a personal friend. Types of conventions. For example, you can write code reference, then you can go through all the code. And then you can also write extra documentation, like markdown, even README can be included into documentation. And you can also style it. Oh, nice. Yeah. Very cool. Yeah, that's a great themes to do now, it really looks attractive. Yeah, you did recently cover that. Right. Brian, this thing's themes. Yeah. And I'm actually is when the markdown the support came on. And that's when I went back and started looking at Sphinx. So the a lot some of our documentation is done is fix him because because it does markup and you can even make it do it's there's it's not built in, but you can make it read doc strings and and interpret doc strings as markdown. Yeah, very cool. Very cool. Robert, out in the live stream has an interesting addition to continuous integration and continuous delivery. So can we deploy yet only if the documentation is complete? Definitely.

00:29:55 Very cool. All right. Well, that's it for our main topics, Brian, you guys

00:30:00 Anything you want to share any extra stuff you want to throw out there? Mostly I'm, I'm, I'm curious about pi test users. So I'll drop a link in the show notes. But basically, I've got a pinned tweet on my Twitter, or my Twitter. And I'd like to have people tell me where they see

00:30:17 where they they're using pi test. So I've got some examples. And then I kind of went I my first question was people projects that have switched. But I was looking at just the just the guts of how Python works. And there's some amazing projects that use PI test, like wheel Pip, set up tools, warehouse, let's all use PI test. That's pretty cool. Wow. How interesting. Yeah. And they're sort of almost inside of Python, which is interesting. Because Yeah, using unit tests, right. Yeah. So and then I just learned about recently, even if it's proprietary, that'd be interesting. I just learned that stripe and Lyft went through a PI test conversion recently. So that's gonna be Oh, that's cool. Yeah, very cool. Anastasia, anything else you want to throw out there? Let people know about while we're here. Oh, yeah. Maybe using exceptions? Don't use base exception. Yeah, create custom exceptions for your app? Or I'm certainly absolutely I definitely sick.

00:31:14 All right, this, Brian, this was in danger of almost being an extra extra extra, extra extra here all about it. So I'll just go quick.

00:31:23 to Matthew fica is getting a couple of shout outs on the show. So he also pointed out that Whoa, super cool PIP x, which we've talked about on the show before, it lets you install Python tools kind of like homebrew or apt. They're not part of a project. But you want to have them managed and installed in their own isolated environment. So you PIP x instead of pip install the thing, which is great. That is now officially part of pi pi, the Python packaging authority there. So yeah, pretty cool. So PIP x is now sort of officially part of Python, not Python distribution, but the group, you know, Next, I will be presenting ish. It's recorded, but then there's like a live q&a afterwards, like Manning is having a conference on developer productivity? I don't honestly remember what my top talk is going to be about? Oh, yes, here it is. It's 10 tips and tools you can adopt in 15 minutes or less to level up your developer productivity. So I'm gonna be speaking on that. All sorts of fun things. So if you want to check that out, it's free to register for it. Later this month, I guess. Here's just a thought I would throw out there for you. I don't expect an answer. But Yikes, cloud bills can pile up. Alex Chan, who is teaching? I guess I don't I couldn't figure out exactly the context of this. But he put out a tweet that said, I have a panicked student in my DMS who accidentally racked up an $8,000. AWS bill. My suggestion I've talked to support is no good. Apparently, they won't issue a billion adjustment. Anyone got ideas out there? How

00:32:51 could you imagine as a student I mean, as a professional, it's still a lot of money. But as a student $8,000 is like a ton of money.

00:33:00 Yeah, it's like a term of bills. It's been depends on Yes, exactly. Yeah, like a semester of studies or something. So maybe other students and basically all people out there, put up billing alerts on, on whatever cloud thing you're doing. on whatever, whatever places I have, including AWS, I get periodically, I get an announcements like your bill is now at $50. Your bill is at $100. Your bill is now at $500. Your bill is now $1,000. And if it goes beyond that, I'm gonna have to start paying a lot of attention to what's going on with my AWS account. So just you know, put these alerts on there, it's usually easy with whatever platform you're on. Anyway, don't be that poor student. Alright, what's next? Ah, Brian skin, shout it out, hey, this might not be a total new item, but maybe we can mention it. Maybe it's interesting. developed a flare mentioned a flake a didn't develop it. unbeliev, a flake eight plugin for fast API. So if you're doing fast API, there's different ways to do things like routes and whatnot. And there's like the natural way, and there's sort of a clumsy way. And so here's a flake eight thing to make sure you're doing fast API. Nice. Interesting. Yep. And I think, yeah, and I think this is my last one. It is my last one here. So, uh, Sal, Shannon Brooke, tweeted, duper lab three will have localization. So localization means like the menus and the help text, and the button hover tips and all that kind of stuff are localized for different languages. So Jupiter, lab three will have localization making it more approachable for people who don't want to work in an English UI. And they're crowdsourcing translations. So if you wanted to contribute to Jupiter, and you were good at programming, and in a language that's not English, because it's already done in English. You know, go check that out. That would be kind of cool. But if anybody just messes with people and like, does wrong translations, just for fun? I'm so afraid of that. Yeah. I think they do. They do. I bet they do. And maybe not really obvious. Maybe in real

00:35:00 Not always. Yeah, yeah. Yeah. Nevermind. Don't don't don't.

00:35:05 Don't give people ideas is not.

00:35:07 That's a good one.

00:35:10 All right, well, that's all the extra bits as well. So how about a joke? Yeah. Okay. So imagine you're learning programming, you're learning Python, take one of these computer science courses where they talk about weird things like recursion. So recursion is idea that the function calls itself with different parameters, right? Like a really common example would be factorial. So if I'm going to calculate a factorial, it's just n times n minus one times n minus two. So that's just n times factorial of the smaller number, you can just like work your way back, right? But there should be an exit condition. Like if n equals one return, don't keep recursing. So here's a nice little graphic. under the banner of only programmers would understand and it's got the Foursquare's is kind of like screen sharing, we got that infinite view, says learn to program and one corner, next quarter make recursive function. Third quarter, no exit condition. And then it just repeats and repeats and repeats down to smaller, smaller, smaller. I love it.

00:36:08 This is bad.

00:36:10 This is good. That's how you learn. That's right. No, yeah, exactly. It's like when you share your screen in zoom, or, or maybe Google me, but you stick out the window up or something like that. But it's about recursion. It's beautiful. And then you silence base exceptions, and you cannot exit the program. Yes, that's right. Do you know if? Yeah, he knows Python has a tail recursion optimization. thinking I'm thinking No, like, so the whole point is here, Brian, that we would run out of a call stack space really quickly. And that's usually the error Stack Overflow error if you recurse too deep type of thing. But with tail recursion, you basically becomes an infinite loop. So you've run out of time instead of memory. Okay. So by doing so, that would be the advantage of tail recursion. I have no idea if it is it or not. Yeah, I mean, there's some languages that do the optimization. So they don't they don't generate a new cluster, because there's nothing to save. So yeah. Yeah, I don't know. I'm sure we will find out before next week. Yeah. One of the reasons why I like asking open ended questions on the podcast. Yeah, that's awesome. Yep. Well, Brian, thank you is always an Anastasia. Thank you for being here. It was great to have you as a guest. Thank you for inviting Thank you. Yep. Bye

 <|endoftext|>
Brian OKKEN: Hello and welcome to Python Bytes, where we deliver Python news and headlines  directly to your earbuds. This is Episode #39, recorded August 14th, 2017. I’m Brian Okken and again, Michael (Kennedy) is on vacation. We have a guest host and this week we have Mahmoud Hashemi. Hey, Mahmoud.
Mahmoud HASHEMI: Hi there. Good to be here.
OKKEN: You’ve been on Testing Code and you’ve been on Talk Python a couple of times.
HASHEMI: Yeah, a couple of my faves for sure.
OKKEN: When I was looking up Talk Python, I noticed that you were on Episodes #4 and #54.
HASHEMI: Yeah, and when Guido (van Rossum) was on, Michael was kind enough to ask my question and I did like, a panel thing. It’s really nice to have repeat appearances. People recognize me by my voice now. It’s kind of strange. I’m very appreciative at the same time.
OKKEN: That’s great. So, thanks a lot for helping to do this today.
HASHEMI: Hopefully I can do Michael right, taking his spot here.
OKKEN: Well, let’s just jump right in. I’m really excited about your first topic.
HASHEMI: Oh, sure. Let’s see, first up. One thing that’s been on my radar, I’m not sure if you guys have talked about this before. Sometimes I’m listening to Python Bytes and it’s a little bit garbled or something. Have you guys tried calling decode? I’m kind of curious why it’s not ‘Python Stirs’.
One thing that’s been on my radar is, “The New PyPI”. If you haven’t been on distutils-sig you may have not seen that there’s a new PyPI, pypi.org. This is going to be the new package index going forward.
OKKEN: So, this is what we’ve been calling Warehouse before, is that right?
HASHEMI: Warehouse if the software that runs PyPI. So, it’s a package index. It’s going to be where all of your wheels and STS live. Basically, a lot of development is happening here. My friend Donald Stuft is doing an amazing job with his team. We’re up to 114,598 projects at the moment. This even lists the number of files. Almost a million files with 230,000 users.
I would definitely check out this PyPI.org for yourself. But for the most part, I wanted to talk about how they’re deprecating the old PyPI. PyPI.Python.org is now basically just a read-only interface. If you’ve tried to upload a package recently then you may have seen an error, HTTP: 410, which is like a 404, but this is 410, meaning it was here but now it’s gone. Make sure to use a new version of setuptools and it will automatically start using the new one, as long as your configs don’t state otherwise. You might have to update a config. This is a tremendous leap forward in a lot of ways. They need some help doing it, too. It’s all Open Source on GitHub, there are issues. I’m working on one right now. It’s got a lot of cool features.
Have you taken a look, Brian?
OKKEN: I’ve looked around a little bit. One of the things I noticed right off the bat is, it says up at the top, there’s a big red bar.
HASHEMI: I know, it’s kind of scary.
OKKEN: I’m guessing at some point the other interface will just redirect to here.
HASHEMI: Cool URLs don’t change. Personally, in my view I’d like it if they just kept it up and put the red bar over there as an archived version of PyPI. But for now all those URLs are still working. If you ask me, pypi.org has been in use for so long because actually, if you paid close attention, a lot of your downloads, pip is downloading from the new one. It’s been in production a long time. They just hit, I think, a petabyte a month in bandwidth downloads. Just for a sense of cost there, I think it’s in the tens of thousands, like $30,000 to $40,000 a month to host PyPI and that’s kindly donated by the Fastly CDN. Should they stop feeling so generous, you know… We’ve got to support our community somehow. There’s a donate button, but I think that right now, what they need most is people to work on cool features. One that I saw that’s being worked on that I’m very excited for, not strictly pypi.org but same team, the Python Packaging Authority, they are working on making a dependency graph between all packages. So, if you’ve ever wondered what depends on what ahead of time, then this would enable that.
OKKEN: How do I start working on it? Do I go to the GitHub page?
HASHEMI: Yes. I think it’s github.com/pypa/warehouse. Donald has been very candid about the areas that need development. He’s been working very hard. He’s at Amazon now. He spends some time working in stuff there.
One last thing, there’s an email list called distutils-sig, which stands for ‘special interest group’. So, distutils-sig, you can just go join the listserve, read the archive and see the conversations they’re having. If you care about packaging, you’re probably already on there, but if you aren’t, definitely subscribe.
OKKEN: I didn’t know about it. We’ll drop a link in the show notes.
Okay, well, that’s really cool.
HASHEMI: Pretty good for a first topic?
OKKEN: Yeah, definitely. One thing I want to add is I know that Donald has been vocal before about how awful the previous code was.
HASHEMI: Yeah, it’s pretty old code. It may not predate Whiskey, but it’s pretty old.
OKKEN: Have you looked at the new code?
HASHEMI: I’ve looked at the new code. I can talk about the new code if we have a second. So, I’ve looked at it, I’ve used it. It’s got 100% coverage. It’s got a lot of CI stuff set up. It uses Docker. I had a little bit of trouble with the make-based approached to running the thing but it’s pretty complex. It runs in an elasticsearch and all this stuff.
OKKEN: Nice. People shouldn’t be afraid to help out just because they’ve heard bad things about the old code.
HASHEMI: No, the new code is pretty idiomatic, I think. If you’re familiar with SQLAlchemy and I think it uses maybe Pyramid.
OKKEN: And it looks like the tests are in pytest too.
HASHEMI: Yeah, the test is definitely in pytest, which is frankly the only way I have heard and also found myself. So, yeah, it’s been good.
OKKEN: I could talk about this for a long time but let’s move on to the next topic.
I just read about this yesterday. I read about this on the Make: website (makezine.com). It’s “CircuitPython Snakes its Way onto Adafruit Hardware”.
HASHEMI: It’s great news for hardware hackers and also tinkerers like myself.
OKKEN: We’ll put a link in the show notes to the Make: article. I had heard Adafruit announced CircuitPython in January. It’s Open Source. It’s based on MicroPython, which is also Open Source, so I’m not sure how they differ but they’ve added some things to make it easier to control hardware. They already had two devices, Metro M0 and Feather M0 Express versions, that support CircuitPython right off the bat. I guess they’re working on a Circuit Playground Express.
All of these look like really fun things, but the thing that really caught my attention was Gemm M0, that was announced at the end of July. And this thing is like the size of a quarter, it’s a little small thing that you can make wearable software projects with, like LEDs and whatever. You just plug it into your computer and instantly it’s like an extra drive. You can see a main.py and you can just start programming Python right away.
HASHEMI: So, basically it functions like a USB drive and there’s a single, main entry point and you can just modify it. You don’t need to install anything or anything like that.
OKKEN: Yeah, there’s no loading. Apparently it does support Arduinos, but right off the bat you don’t have to install anything, you just start programming. Right now they’re currently out of stock but they get new stuff in pretty quick. But it’s under $10 to start programming some wearable programming. I definitely have to get one of these.
HASHEMI: I can’t wait to start wearing some running Python. That’d be taking it to the next level. (Laughs)
OKKEN: I’m also going to link to what I thought was great. They are encouraging people to use Python when they can for programming hardware, but they realize that a lot of people are new to the Python community, so there’s a page called, “Creating and Sharing a CircuitPython Library”. It’s got a whole bunch of great links telling people when we say library, we mean a package or a module with a setup file and doing it all right. And there’s little intros to GitHub and ReadTheDocs and Travis.
HASHEMI: When you say package or module, is this their own format or is this Python Packages, Wheels, that sort of thing?
OKKEN: Yeah, it’s Python stuff but it’s just really quick tutorials to get people up-to-speed fast.
HASHEMI: Sure, so it’s got like an end-to-end thing, it doesn’t just send you left and
right to other sites?
OKKEN: Yeah, it’s really telling you everything. They’re pretty condensed. Actually, they did a pretty good job condensing all that information.
HASHEMI: Yeah, you don’t need the whole context and history of Python Packaging. We’ve come along way since Eggs and that sort of stuff.
OKKEN: Yeah and one of the things that is kind of interesting is they have a concept of bundles. Really, all a bundle is, is a bunch of installable Python Packages that are zipped up into a bundle.
HASHEMI: Hm, sure.
OKKEN: We don’t normally care about that because on a larger computer it’s not that big of a deal. But these little tiny devices, you have to care about how big it is. You might want to get everything somebody cool has made, but you don’t need it all. You just need the little part that blinks the LED for you or whatever.
HASHEMI: Sure, so it sort of freezes it all together. These embedded applications are interesting. So, I maintain this one library called Hyperlink and I guess it’s pretty widely used because Twisted depends on it. So, I’ve gotten some interesting feedback on a few things. One code-review I went through – I promise this is related – basically, I’m using pytest and I’m writing my assert statements. I love that pytest rewriting, the great error messages and so forth. But I got a comment on my code review that these tests are not runnable in an embedded environment, because they will run with -00 which elides all of those assert statements. I’m like, you’re kind of running the tests wrong if you’re not using pytest. But in these embedded environments, I don’t know, maybe the convention is different.
So, when you get yours, definitely test it out. Maybe you’ll have to put a caveat on your pytest recommendation if that’s not what we can do on hardware. I don’t know.
OKKEN: Oh, that’s interesting. I’ll definitely have to check that out. I didn’t want the hardware people to not buy my book. (Laughs) That would be terrible.
HASHEMI: That’s the thing, with something like Hyperlink, which is for URLs, I’m 99.9% sure it’s going to run exactly the same everywhere. So, I’m confident that if it runs on my machine, it runs on Travis CI, it runs on AppVeyor, it will be fine. But at the same time, hardware people can be sticklers, as I’m sure you know. I respect that.
OKKEN: Yeah, neat. Well, what do we have next, Mahmoud?
HASHEMI: Oh, right, it’s back to me. So, I spend a lot of my time pretty deep into development of all sorts of infrastructural sorts. I find myself subscribed to Python-Dev, Python-Ideas, distutils-sig. And you know, you can’t read everything there and still have a life, so only a few things catch my eye. But this thing in particular caught my eye because my friend Hynek (Schlawack) has this great library called attrs. If you haven’t heard of it, my other friend Glyph (Lefkowitz) has a whole blogpost that tells you why you have to use this library.
It’s basically class decorators that make writing high-level classes very easy. It derives from this sort of tradition of named tuples. Raymond Hettinger had this great idea to make named tuples, which let us define a class like a structured thing within just one line. But the problem with named tuples is if you want to add methods to it, then you have to inherit from it, and they’re immutable by default. And they don’t really generate a dunder in it for you, they don’t do a whole heck of a lot of validation. So, attrs comes along to solve these things and a bunch of other cool functionalities. It does it with class decorators. It doesn’t pollute your final object with anything you don’t want because you don’t inherit from anything. So, you just inherit from object.
After Glyph’s post took off, or something, the core Python devs sat up, took some notice of this and said, ‘Maybe we have been neglecting a higher-level interface for quickly defining classes. You know, you just want to have four or five fields all sort of batched together and you don’t want to have a lot of functions that everywhere have to define 15 arguments. So, how can we quickly, in a nice, concise Pythonic way, define a Python class?’ And they came up with this new thing, which is still, I guess, kind of deep underground. There’s this GitHub that Eric V. Smith – who is a Python core dev – has called Dataclasses. And the issues of this have been really interesting to watch because Hynek and a bunch of core devs have been debating like, ‘Should we just use attrs? If attrs is getting so popular, should it just be part of core Python? People seem to like it, why make something that’s so close to it.’ That sort of thing.
There’s sort of a draft PEP inside of the Dataclasses repo, and there’s some examples of how it’s used. It has some semantic differences, it has some syntactic differences. I think that it’s pretty interesting to watch and they seem to be encouraging more experimentation in this area. Even though I like attrs, they seem to want even more options, at least from themselves.
I had a good time reading the issues. Maybe other people will enjoy it, too.
OKKEN: Yeah, so it’s similar to attrs then?
HASHEMI: It’s pretty similar to attrs. The differences are fine enough that you have to look closely. Basically, I think that what it is is like, there’s actually an issue called, ‘Why not just attrs?’ And they explain that they want to use the new, I think, type hints syntax.
OKKEN: Okay.
HASHEMI: Other people said, ‘Maybe naming-wise, Dataclasses is a little bit clearer than attrs, because someone who is a new Python programmer doesn’t know that attrs is an attribute.’ Or something like that. So, it has some syntactic differences.
OKKEN: There are some big names in this discussion.
HASHEMI: There are. That’s what I mean. It’s like the inner circle, right? This is the kind of stuff I have to follow from beyond the edge here.
OKKEN: That’s awesome.
HASHEMI: It happened kind of behind the scenes, but I really do encourage people to join these email lists if you want to see the action happening, you know. You son’t have to be a spectator. You don’t have to sit in the nosebleed section of the arena on Open Source, right? You can get up close and get the front row seats and before you know it, you’ll actually get involved. It will be fun.
OKKEN: Yeah, that’s great. Thanks for bringing that up. That’s cool.
Well, speaking of trying to get involved, unless you’ve had your head under a rock, data science is a thing.
HASHEMI: (Laughs) Is it, really?
OKKEN: It isn’t something that I have to use on a daily basis, but it’s definitely something I want to pay attention to. There’s a lot of books and tutorials that are huge because it’s a huge topic. I ran across an article called, “Pandas in a Nutshell”. I like it because it’s a Jupyter Notebook-style post, so you can just see the code working. It’s mostly tutorial by example with just a little bit of code for explanation. The big part of it is really just talking about a couple data structures. Talking about the Series data structure, which is a one-dimensional array with indexes, so like a vector. And then, the Dataframe, which is like a two-dimensional array.
All the common things that you need to do with it, like specifying a custom index or combining two series or with matrix stuff – adding columns, adding a column that’s based on another column. Then this stuff sort of seems like Excel.
HASHEMI: Yeah, a spreadsheet. I think for a lot of people, that is the natural next step when they want to get into programming. It’s either going to be doing basic script of some sort in some kind of Excel, or maybe move into Python.
OKKEN: Yeah, I guess that’s one of the things I like about this Nutshell article is if somebody’s already doing something in spreadsheets and they want to switch to working with Pandas, this might be a pretty good stepping point to get things going. And I’m going to grab some of the concepts in here to try to deal with some of the large amounts of data that I deal with on a daily basis, as well.
HASHEMI: Oh, for sure.
OKKEN: I bring this up because I’m just starting. I’m trying to use Pandas on a daily basis now.
HASHEMI: I’ve actually faced a lot of the same challenges. Just because it’s Python doesn’t mean that it doesn’t require some sort of paradigm shift in your thought. Like, thinking about Dataframes is very different than thinking about lists in Python, or dictionaries in Python. It’s somewhere between Python and full-blown relational databases. So, you do have to change the way you think about how to approach a problem. Especially if you want to get some performance out of the thing, because it has this great broadcasting logic that it can perform but it’s not going to work if you’re just going to iterate over over four loops.
OKKEN: Yeah, I guess that's where the Dataframes and Series stuff comes in because you’re going to do some computation on everything and searching on stuff. This is kind of like a combination of an in-memory database and something else.
HASHEMI: Where I work, some of our data scientists are coming from an R background and the Dataframe is based on a R construct, I believe. They find it quite natural and the Python is what they sort of struggle with and they come to me for that. But a Python person will want to ramp up on the Dataframe itself, so this notebook seems like a great option to do that quickly.
OKKEN: Yeah, so that was just a quickie. That’s it. Your last topic.
HASHEMI: Already? So, basically, just yesterday I was at this conference, PyBay 2017, it’s the Bay Area/Silicon Valley regional Python conference. Only the second annual one. It’s surprising how long it took to spin up here, meanwhile PyOhio’s been going on for who knows how long. But it was a great conference. Almost 500 developers, pretty good turnout and a lot of great topics covered. I gave a packaging talk.
But the thing I want to talk about today is the opening panel was on static typing. It was quite an interesting mix. First of all, it was very international. They had people from Germany, Russia, Poland, USA and the Netherlands. It seems like Europeans are big fans of static typing for whatever reason, Guido included. So, they had people from, I think, PyCharm, University of California at Berkeley, then also Qora, Google, and I think another guy, too. It was a really nice cross section of the industry and also the world. And they talked about the state of static typing.
Right now, I want to bring you up-to-date. I’m not sure how recently you covered this stuff on the podcast. There are currently three or four static type checkers, so in Python 3 you can specify your types however you’d like. Built into the language, it’s not going to do a lot of complaining in case types don’t match. First of all, at runtime nothing is checked. So, if you want to check it, it would be at a compile time step.The annotations are still there at runtime and then you have a static type checker, the most popular of which is mypy, run over that and check it. Kind of like a linter, or any other static analysis tool.
So, there are other ones too. Google has one that is not super-well documented but they use it internally. Then PyCharm has this functionality as well, which is also kind of built from scratch. They made a pretty good case why you would want one built into PyCharm, which is that basically it can do incremental checking. So, while you’re still writing it can do partial checks, maybe a little bit better than mypy.
Oh, right. The last person on the panel, Lukasz Langa from Facebook, he also comes to my meetup. So, he’s very opinionated about types, but we’ll get to that in a second. One that wasn’t talked about was PyLint, so I was actually blown away. I updated my Emacs config recently and I sort of integrated some more linking stuff. The default PyLint these days can do an amazing amount of inference. It will tell you if you have the wrong number of arguments, it will tell you like, ‘Oh, the default doesn’t match that type.’ It will tell you so many different things, in addition to its standard, very opinionated idea of how many arguments a function should even have, and that sort of thing.
So, those are the four type inference engines and they all are slightly different. But everyone seemed to get along pretty well on stage and they talked about potentially, in the future, actually merging these things and making a PEP that would allow them all to comply together, maybe even turn into a single project. So, that was really nice to see. And one of the most interesting questions was basically from the audience. They said, ‘Well, what is the real point behind the static typing? What is the biggest benefit that you see?’ And there was a little bit of divergence on this.Some people like it for the strictness of it all, being the kind of dictator of your own code base, right? But everyone else seemed to be pretty much on the same page, that this is for human readability. This is a sort of documentation that can then be checked automatically on a rather large scale. It’s attached to the function but it’s more than a doc test. So, the interesting side effect of this is that even though they all work on static typing stuff, they have a pretty nuanced view of how much static typing you should apply. They say that maybe a list of a certain type, but actually defining a completely recursive type is 1) not supported and 2) maybe not even that desirable
because you don’t want your function’s signatures to get super, super complex.
Yeah. It was interesting that the thought the human side of this was the most important part, as opposed to say, a Haskell program or something, where they want the mathematical correctness of it all.
OKKEN: I would have liked to have listened to the discussion of how much you should use of it.
HASHEMI: Well, it was at LinkedIn. I think that they recorded it and it should go up pretty soon. It was only a couple days ago. Once the video is available, I’ll send it to you and you could add it to the show notes.
There’s some interesting side effects to this, by the way. Like, somethings to consider.Cython does not support new Python-type syntax. Even though all these guys are kind of on the same page and buddy-buddy. For us people who really like Cython and have used it to achieve a lot of performance and type correctness to some degree, we’re a little bit out of luck at the moment. I think that people are working on making a pull request to it that would add support to it, but it’s such a big change to the syntax. Python has its own type syntax, which is less focused on semantic types as this is, and more focused on being in line with C types, which allows you to have more compact memory usage. The people on the panel were actually pretty clear that static type advantage is not in performance. So, a project like PyPy which actually can use types to achieve higher performance, they find that the JIT is faster without taking hints from the users not the code. It just disregards this stuff.
OKKEN: Oh, interesting.
HASHEMI: Because the JIT has the actual types.
So, just a real quick thought experiment. Imagine I say I’m going to pass you a list of integers. That list is three integers long, I can just check them, 1,2,3. All integers good to go, no type error, right? But if I pass you a list of 20,000 integers, every time I pass that to you I have to check that every single one is an integer, other I’m going to have a type error. That sort of thing is going against the spirit of Python and being practical and duck-type-y and what not.
So, a friend of mine from Intel was sitting next to me and he was saying how he came to Python so he wouldn’t have to type everything. But thankfully you don't have to type everything. In a standard library itself, for instance, is all the type definitions that are available in this joint type shed repo all of these static type people built together, and I’ll link to that in the show notes, for sure.
OKKEN: My favorite use so far that I came across for my own work is putting type hints in interface areas like an API module. That’s how you interact with the package. So, those are great places for type hints.
HASHEMI: Oh, for sure. And there’s this old thing that they’re trying to get rid of. Basically, Python has these stub files, these interface files. People call them the Heather Files for Python. I think it’s a .pi file, .pyi.
OKKEN: I was thinking about a package that has a whole bunch of internal codes, that has an API module that people interact with from the outside world. That’s a great place for pretty much any interfaces that’s not you that’s going to use it, that somebody else is going to use it. Those are great places to put type hints, if it matters.
HASHEMI: Oh, definitely. Cool.
OKKEN: But I’m pretty new to it so, thanks for bringing that up. That was very interesting.
HASHEMI: I think that they’re still changing this stuff quite a bit. Early adopters go nuts, but for the rest of us who like a little bit more boring technologies, I’m going to go ahead and let the auto inference of PyLint figure things out for me. I’m not going to jump on the bandwagon so quickly.
OKKEN: I’m glad you brought PyLint up. I’ve been sort of dismissing it because I’ve been using Flake8, but I’ll have to take a look at PyLint again.
HASHEMI: Oh, yeah. They’ve definitely ramped up development on that again. For me anyway, I just blacklist a lot of the errors because I kind of don’t agree with every single thing that they test for. But they make it pretty easy to do, You just change it in an .INI file. No big deal.
OKKEN: The last topic, again, comes back to me finally getting my head out of thinking about pytest 24 hours a day. One of the things I want to start looking at is some of the web frameworks, like Django and Flask. I haven't played with them much personally. And there’s a bunch of personal projects and work projects I’d like to do with them. And also, quite a few people that listen to Testing Code are web people, so just to kind of get more understanding of that, trying to learn more frameworks.
One of the things that I’ve had a hard time getting my head around is ORMs, or Object-relational mappers. Luckily, I ran across an article on FullStack Python, which is Matt Makai’s site.
HASHEMI: Amazing site.
OKKEN: I think it’s just called, “Object-relational mappers (ORMS)”. It goes through what they are. An ORM is code that automates the beta transfer of data from your internal Python objects and classes to database tables. And they’re useful so that you can write Python code instead of writing SQL queries. It talks about that and also talks about why you need them and some downsides.
The downsides actually were interesting. I didn't think anybody would talk about what’s wrong with using ORMs.
HASHEMI: Realistically, there are some definite engineering trade offs. So, what did he say?
OKKEN: Some of the few things are “impedance mismatch”. Coming from electrical world, I was like, ‘Impedance mismatch? That’s like 50 ohms to 75 ohms.’ But it’s basically the way a developer is using the object can be different from how the data is stored and joined in the tables in your database. Especially if you’ve set up the tables in a way that’s not like contradictory to how it’s being used all the time. It might be slow and maybe reshaping your data might speed that up.
And then “potential for reduced performance”. This isn’t surprising to me. If you stick some code in the middle, it’s not free.
Also, “shifting complexity from database into the application code. This is something that I didn’t quite understand right off the bat, but if you think about it, it’s not too bad. Databases are complex pieces of software that have stored procedures and a whole bunch of fancy joined math and stuff that might not be supported by an ORM. If you have to do that stuff you’re going to have to do it in your application instead. It’s using a database in a simpler way, but that complexity has to go somewhere. It can go in your application code.
HASHEMI: But until you get database specialists, then it makes it a little bit easier for you as a sole developer, for instance.
OKKEN: So, I punted it first and used the document database because I didn't want to think about ORMs right off the bat.
HASHEMI: But the thing is, you’re correct, a database is an advanced tool but a lot of advance-ness and complexity you retain even when using an ORM. For instance, live document databases don’t have great transaction models, don’t have great multi-version concurrency models. So, when they put all that work into post GRASS or MariaDB or something like that, just by using an ORM it seems almost as simple as a document database but you get that operational feature.
OKKEN: Yeah, I’ve definitely heard of SQLAlchemy but I hadn’t heard of a couple of the others that he listed here. Peewee and Pony and SQLObject. Have you used any of these?
HASHEMI: Yeah. SQLAlchemy is definitely my go-to, and I’ll talk about why in a second but yeah. I’ve used Django’s ORM because I did the Django tutorial and one of the first things they teach you is Django has a serviceable ORM, but there’s some issues with it that SQLAlchemy actually does a much better job with. I have used Peewee, in fact. I like Peewee. It’s sort of like a simplified version of Django. In my opinion it basically says, look, if you’re not going to be SQLAlchemy then you can just be plain and simple. And it does a pretty good job. But these days, SQLAlchemy has gotten so good that I just reach for that every single time I work with a relational database in Python.
OKKEN: Okay.
HASHEMI: One thing that SQLAlchemy has is this working copy of all the models, and they end up being kind of like singletons within a given process space. So, with Django, you can actually get two copies of the thing from the database within the same request or the same process. That means that basically, concurrently somewhere is in your program, it could change something, save it. And then when you change the request handler you’re actually trying to work on, that will overwrite the previous change. Like if you change column A in one thread and column B in another thread, whichever thread that saves first is going to overwrite the other unchanged value. So, there’s setting that’s off by default, I think, in Django called Atomic Requests and you have to enable that to prevent that sort of situation.
But Django is not alone in this. I think Rails, for a very long time, did this same thing. And Django, of course, is sort of Python’s response to Rails.
OKKEN: Does SQLAlchemy not have this problem?
HASHEMI: So SQLAlchemy doesn’t have this problem because you only get one copy of that thing in your system. It has a local index of primary key to the object version of that row that you’re representing, for instance. So, yeah. SQLAlchemy adds a lot of machinery. It makes SQLAlchemy a little more complex but, I had a friend who spent days tracking down this issue with Django and with SQLAlchemy it never would have happened. You pay some upfront costs with SQLAlchemy, but I think it’s definitely worth it.
When it comes to this sort of ORM thing, like if I can provide some general advice, ORMs are the tools of applications. If you want to form a real opinion of Object-relational Mappers, you should compare applications. I spent a fair amount of time reading Reddit source code, which, I think, uses SQLAlchemy. And I think it uses it without the declarative object mapper, it uses it with the legacy, or lower level SQLAlchemy tools. But you still get a real sense for where they use an ORM or where they don’t. And SQLAlchemy also makes it very easy to pass through normal SQL texts. That's another thing I really like about ORMS are an abstraction that’s useful 90% of the time. For that last 10%, you really want the full power of the driver or the database itself.
OKKEN: Cool. I don’t have any opinion on these extra couple links I put in here, but Matt has some dedicated pages from SQLAlchemy and Peewee. One of the things I like about Matt’s site anyway, FullStack Python, is he gives his opinion and information when he has it and when somebody else has already explained it well enough or better, he just links to their stuff and says, ‘Go read that.’
HASHEMI: Absolutely, he’s a real team player in that regard. I also have to give a shout-out to him. He so consistently adds to the site, it’s become such a tremendous resource for someone who wants to develop an application. I’m sure the listeners of this podcast are, for the most part, already aware of it, but definitely check it out.
OKKEN: Definitely. Well, that’s all of our topics. We didn’t address what you’re up to lately, other than helping out with podcasts.
HASHEMI: (Laughs) It’s funny, I’m also prepping for another podcast as well, partially examined life I guess. What am I up to lately? Well, I gave a talk at PyBay and because it was based on a blog post I thought it would be easy to put together slides, it still took – full-disclosure here - it still took another 40 to 50 hours to make slides from that blog post. But it seemed really well received, so I’m very relieved right now. I’ve got some nice life events coming through. My parents are coming to town, keeping me real busy. I also am working on this Hyperlink library, like I mentioned earlier, URLs in Python and it’s used by Twisted and some other big projects. Fixing bugs in there is always kind of a contentious, which is why I got a lot of support for people who work on things like setup tools, which is even more widely used. Beyond this, let’s see, writing blog posts, I think my drafts count is up to like a hundred now. Maybe more conferences, more talks. I don’t know why I keep signing up for these things but it’s great meeting people out there. People out there should relax look into PyBay and regional conferences, meetups. I run a meetup, too. The Pyninsula Meetup, the hottest new meetup in the Bay Area, Silicon Valley.
OKKEN: Pyninsula? That’s a terrible pun.
HASHEMI: (Laughs) Eh, this is programming, man. It’s all about the terrible puns. (Laughs) So, Pyninsula. I think we even have the site now, Pyninsula.org, and we’re on Twitter and so forth. I do my best to record the talks, but for people who want to break into this type of speaking and that sort of thing, look no further than your local meetup. Go make a 15 minute, 30 minute talk, see how it goes. Iterate on it. Have a brown bag at your company, just keep iterating on it. Something will stick and you can submit to something like PyCon or whatever.
OKKEN: That’s a great idea. I think a lot of people think that you just have to work really hard on a talk and give it once and then it’s done, but a lot of people give them several times.
HASHEMI: Yeah and also, if there’s not a meetup in your area, maybe start one. I think programmers are literally everywhere. Even though there’s a South Bay Python meetup, it’s more toward Sunnyvale, south of Mountain View area. And there’s this SF Python meetup, which is up in San Francisco. We put one right in the middle and I guess California traffic’s bad enough we have a captive audience, literally. But we’ll get, I think when Guido came there was almost a hundred people at the meetup, and normally we get like 50. But it’s great. Everyone can socialize and something a little more intimate. It’s a little less stressful when you’re giving the talk yourself, too.
OKKEN: So, it wouldn’t be a Python Bytes episode if I didn’t plug my book.
HASHEMI: By all means.
OKKEN: One of the things I want to bring up is that Python Testing with pytest has a nice discussion forum. It’s kind of built-in to what Pragmatic offers for all the books. But if you ever ask a question on there, it pings me and emails and says there’s a question. Just this morning I answered a question. Somebody got on and said that the book is helping them understand testing better and I love comments like that. But he had a questions about Monkeypatch versus Mock and I’m not going to get into it too much here, but I did reply to him and it’s all up there for everybody else to read, too. So, I’ll have a link in the show notes to that.
HASHEMI: That’s great. Those sorts of comments really keep you going. I wish that my O’Reilly thing has such a discussion forum. Instead I got my feedback through reviews for awhile. (Laughs) Emails, too. People email and I appreciate it.
OKKEN: Yeah, I get it from all over the place. I get it through the discussion forum, I get it from Twitter and we’ve got a Slack channel and people come and tell me what’s wrong in the Slack.
HASHEMI: I’ve been really into riot.im, which is a Python-based, Open Source Slack sort of thing. There’s also Zulip which is everywhere these days. They’re doing an amazing job.
OKKEN: What’s the first one?
HASHEMI: So, riot.im. It runs a protocol called Matrix and it’s a very large thing. It's basically like you can have an encrypted chats with people who are on it. I use it because it’s an IRC bridge. I guess if you want to be in this sort of inner circle and see the goings on, IRC is still very much alive. So, you’ve got your listservs and IRC and so forth. Riot makes that pretty easy to get into. There’s a free node bridge and you just join a free thing and you can look at IRC through your browser while having encrypted chats with your other friends. It also has peer-to-peer video chat that works really well because it’s just the webRTC Open Source protocol. It works great in Firefox.
OKKEN: I’m going to cut you off because we’re running long.
HASHEMI: Oh, wow, we’re way long.
OKKEN: I think this is an awesome topic. I think you should come onto Testing Code and we can talk about IRC and communication channels. That’d be fun.
HASHEMI: That’s actually a great idea. Yeah, for sure. I’m always coming up short for topics, but here we are just chatting. That’s a great idea.
OKKEN: Again, thank you so much for coming on. I love having new voices on here.
HASHEMI: It’s been my pleasure and thank Michael. When he gets back I’ll send him an email. This has been great.
OKKEN: Keep in touch.
Thank you for listen tin to Python Bytes. Follow the show on Twitter via @pythonbytes. Get the full show notes including links at pythonbytes.fm. If you have a news story you’d like featured, visit pythonbytes.fm and send it our way. We’re always on the lookout for sharing something cool. This is Brian Okken. On behalf of myself and Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues. <|endoftext|>
00:00:00 KENNEDY: Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 109, recorded December 10th, 2018. I'm Michael Kennedy.
 
00:00:11 OKKEN: And I'm Brian Okken.
 
00:00:12 KENNEDY: And this episode is brought to you by DigitalOcean. Thank you, thank you, DigitalOcean. Tell you more about them later. Right now, Brian, how is everything going?
 
00:00:19 OKKEN: It's going really well, how about you?
 
00:00:21 KENNEDY: Oh, it's super, I'm starting to think of year in review, like what was the most amazing Python stories of the year and things like that. So looking forward to sharing those with everyone actually.
 
00:00:33 OKKEN: Yeah, that'd be great.
 
00:00:34 KENNEDY: Yeah, so you and I actually did an episode along with Dan Bader on Talk Python, which we'll drop here on this channel as well for the Year in Review in Python News, which is like this but more stuff and more depth. So that'll be a good thing for all those people traveling for the holidays, right?
 
00:00:49 OKKEN: Yeah, give 'em something to listen to.
 
00:00:51 KENNEDY: Right, they may be stuck in an ice storm in Chicago O'Hare, but they can listen to some good Python news. That's right, speaking of good Python news, what do you got to kick us off this time?
 
00:01:00 OKKEN: I have a Python descripper. I have Python descriptors are magical creatures.
 
00:01:06 KENNEDY: That sounds awesome.
 
00:01:07 OKKEN: Yeah, this is actually kind of a neat, approach to this article thinking yeah, I know what descriptors are, and stuff, and properties, it's talking about properties, of object properties in Python. But this is a really great article. So this is an article by Pablo Arias, and it talks about how you can add getters and setters and properties to objects. So you can have like, instead of calling a function like get_version(), you can just have version, and you can use object.version, and you can assign to that, and that'll call the setter. And if you read from it, that'll call the getter and you can have custom functions for that. It's one of the cool things about Python, and one that I'm glad that it's been highlighted, because some people forget this is around, especially if you come from a language that doesn't have this sort of thing.
 
00:01:58 KENNEDY: C, Java, that kind of stuff, right?
 
00:02:00 OKKEN: Yeah, these are pretty neat and they make it look like, like an attribute of the object, but it's actually a function that gets called. And it's a way you can actually migrate, you can start a system where it really is just data that's sitting there, and if you want to intercept it and say you know, actually when somebody assigns to this I want to do some work, or I don't want to really store this data, I want to calculate it on the fly, you can turn those into getters and setters and the calling code doesn't need to know.
 
00:02:29 KENNEDY: Yeah, I really like this because often the API makes the most sense as sort of fields, just setting the attributes like user.name, user.firstname or something like that. But what if you want validation, right? Like the name can't contain white spaces or other weird stuff. You want to strip that off or you know user names always lowercase and things like that so properties are perfect for that, right? You can validate it. You can raise an exception that says you can't have a None value here. It has to be a non-empty string, all kinds of good stuff. But the consumer doesn't care. They don't have to know.
 
00:03:01 OKKEN: Yeah, and I personally have actually used get and set methods before but the getters and setters, but there's a deleter also and I don't think I use that very much and it's kind of probably a neat thing to stick in place if you're doing this any way to make sure if it's invalid for somebody to try to delete an attribute. You may want to intercept that.
 
00:03:23 KENNEDY: Yeah, you're like no, you always have a name. You can't delete it.
 
00:03:27 OKKEN: Yeah, but this is a good general introduction to how to use these and so people can clean up their cut a little bit and make it look a little less Java-y.
 
00:03:35 KENNEDY: Yep, I totally agree. So the next one is I want to talk about a survey. So we've talked about the JetBrains Python survey and that data science featured heavily in it, but they also did a separate data science survey for just data scientists and asked data science-y questions only. So they polled about 1600 people who are data scientists based in the US, China, Europe, and Japan, and to figure out what's the story, what's the zen, and how are people feeling in the data science space right now. And so it wasn't just for Python, it was just for data scientists. But you can imagine that there are many Python things happening in the data science world, right? So one of the key takeaways was that most people assume or currently most people use Python and then they assume that Python will remain the primary programming language at least for five years.
 
00:04:28 OKKEN: Yeah, and that's essentially forever in computer time.
 
00:04:31 KENNEDY: That's right, like if you're planning past five years, you've got either a lot of faith in where things are going or you're doing it wrong. Those actually could be the same thing. They also talked about what are the main tools people are using for like machine learning stuff and they said Keras is the main one for professional developers whereas if you're an amateur data scientist, you're more likely to use Azure, Microsoft Azure Machine Learning Services rather than libraries. So you're like just make this a model. Teach it stuff. Figure that out later. Whereas the pros in quote are actually doing the straight API stuff.
 
00:05:08 OKKEN: Remind me what Keras is.
 
00:05:10 KENNEDY: Keras is a machine learning framework. Yeah, so it's sort of comparable to Azure ML, but Azure ML is a service like machine learning's a service. I would never use it though. So let's see, main program languages, obviously there are other languages and if you look back just a couple of years, R was a machine learning and data science-y language that was more popular than Python was for data science. But now it's Python is 57%, R is only 15%. Some people say Julia is the next big language for data scientists. So they asked about Julia of these 1600 people and the number of people using it was 0% so that's not super compelling for Julia I guess.
 
00:05:52 OKKEN: At least amongst this statistical set.
 
00:05:56 KENNEDY: Yeah, yeah, yeah, and honestly I forgot how they found this set of people, so I'm sure they talk about it in the write up. Then finally when you talk about IDEs and editors, there's really, there were three standout main things people use. Obviously Jupyter, Jupyter Notebook, Jupyter Lab was 43%. PyCharm was 38% and RStudio was 23%. So that's pretty interesting. Alright, so if you're in the data science space, maybe this will help you keep your pulse on, keep the pulse of what's going on there.
 
00:06:27 OKKEN: I want to highlight a little tool. So like where I talked about properties just as a nice technique that people should make sure they understand how those work, another thing, I've ran across memoization. Not memorization, but memoization with no r. And this is a technique to if you've got a function or something, some work that you need to do is dependent on input data, only dependent on the input parameters, but to get your answer, you have to, it's computationally intensive. And you often also get a lot of the same types of information coming in, same type of parameters. Memoization is a technique that basically just store, you know save the data, calculate it once, and if you find, if you get past the same arguments again, just return the answer that you've already calculated.
 
00:07:22 KENNEDY: This technique can make your code incredibly fast. Like if you have some function that you're calling with relatively bounded set of inputs and that's at all computationally expensive or goes to a service and it gets an answer back. But like you said if the input is the only thing that drives it, it's not like well what's the weather at the zip code 'cause that could always change, but it's like what's the limit of this integral when passing in this lower bound, you know like discrete integral or something. Alright, it's always going to give you the same answer back. So you can actually go to the function. Even with the func tools built into Python, you can say I want this function if it gets the same arguments to not run again. Just give the answer back. Just kind of store it in memory or somewhere, right. And that only works in process.
 
00:08:04 OKKEN: Yeah. One of the things I want to highlight is a project called cache.py that saves all this stuff off to a file. This would be helpful especially if you've got like a command line tool that gets called lots of times, it isn't going to be able to store everything in memory. So being able to save it in a file might be helpful. The interface is just a decorator. Just say hey, this function you can cache the results so you throw a decorator on it, it's just cache.cache, add a decorator onto your function and it just works. And there's a whole bunch of customization you can do. You can say how long the cache is good for or where the files should be and things like that. But the default just kind of works pretty good too.
 
00:08:46 KENNEDY: Yeah, I really like this. So the thing is the built in stuff only works in memory and so once the process is done, it's done. But like you said, if this is a command line tool you're stringing together, you want it to keep that data for a certain amount of time or just always keep it so that it's like well if you pass me seven, the answer's always going to be this, right. Yeah, it's great that that'll keep it on the file system. And it uses Pickle, right?
 
00:09:11 OKKEN: I'm not sure.
 
00:09:12 KENNEDY: Yeah, let's see. Yeah, it currently uses Pickle and Inspect under the hood making it not portable. So you can't like take your cache file and move it to Windows when you ran it on Linux or something I believe. 'Cause of the memory structure and different versions of Python and so on.
 
00:09:28 OKKEN: So what, remind me what was the builtin one that works in memory?
 
00:09:31 KENNEDY: It's on functools and it's at lru_cache I believe.
 
00:09:35 OKKEN: Okay, that's cool.
 
00:09:36 KENNEDY: functools.lru_cache, yeah.
 
00:09:38 OKKEN: Yeah, I brought this up also mostly because I know a lot of people teach them, learn on the job or teach themselves to program. I'm not bragging that I have a computer science degree, but this is one of those topics that you probably don't come up with on your own. It's a clever thing and a nice useful tool for your toolbox, but it's not something that's obvious. It wasn't obvious to me until I learned about it.
 
00:10:01 KENNEDY: Yeah, same here. I think the first time I learned about this was when I started studying design patterns and stuff like that and somehow it came up and then I went oh, that's pretty clever. When you are working with code and it's slow, to me it seems like there's two things that are really really powerful that can just go oh well now it's 100 times faster, that's cool. That was like one line of code. You know, one is using the wrong kind of data structure like if you're using a list but you really should use a set 'cause you're text from membership on a big set, something like that, or dictionaries or whatever. The other one is this kind of caching, right? Like if you're doing something and it takes a long time, even if it's going out to the internet and calling a service, like if you think that data changes once a day, it'd be totally great to put like a one minute cache on that if you're calling it a bunch of times.
 
00:10:44 OKKEN: Yeah, and it can, like you said, it can make a massive improvement in speed up. And it's like sort of an obvious, you know like after you see it, you're like well duh, I didn't even think of that.
 
00:10:54 KENNEDY: Absolutely. So I really think this is a cool one because it takes that idea and it just makes it easy to carry it across different processes. Or different runs of the same process. Okay, so before we go on to the next one, let me just tell you all about DigitalOcean. They're doing all sorts of cool stuff. Our infrastructure runs on it, really really nice and reliable. One of the things I want to highlight this time is their work with Kubernetes, Docker, and coordinating Docker, orchestrating Docker stuff. With Kubernetes is a big deal these days and so they're launching a new Kubernetes cluster over at DigitalOcean. So a really nice way to manage and deploy your container workloads in the cloud. And if you go to pythonbytes.fm.digitalocean, and you're a new user, you get $100 credit to Kubernetes all the way if you want. You can run a lot of Kubernetes for 100 bucks on the cloud. So that's pretty awesome.
 
00:11:44 OKKEN: That's yeah very cool.
 
00:11:45 KENNEDY: Yeah, so check them out, pythonbytes.fm/digitalocean. They're big supporters of the show and they keep us going strong each week, don't they?
 
00:11:51 OKKEN: Yeah, I'm very grateful for them.
 
00:11:53 KENNEDY: Yeah, the next one I want to tell you about is a really short video. Last week I covered an hour and a half video about being an expert on Python. How about we cut this down to like a four minute one? So, I think this one is really good for people who are getting into data science and they have a little bit of a challenge. If you're an expert, this is definitely not the video for you, but this is called Setting Up the Data Science Tools. And so it's part of a larger video series, but it basically shows you how to set up the Anaconda distribution, TensorFlow, Keras, Jupyter, all those things. And it actually talks about using Conda, Conda Virtual Environments, creating notebooks and switching between virtual environments. So if you've been mostly working pip or you've seen examples in pip and you want to do more Anaconda stuff, this is a great video, and especially if you want to install some of these tools and get going. And if you're kind of new, this is a great way to get going.
 
00:12:43 OKKEN: That's awesome, yeah, cool.
 
00:12:44 KENNEDY: Yeah, it's great. I was just talking to somebody who was really new to Python, is super eager to get going, but he was having a problem because he was working on a computer that he didn't have admin access to. And so when he would try to pip install something, it would try to put it in the systemwide thing which you'd have to to make that happen. You shouldn't, but if you wanted it to happen, for sure you could use sudo, but he wasn't allowed to you know basically run his admin to do that. So I'm like oh, you just need to use a virtual environment. Then you can do whatever you want to on your machine. And he was like, oh, wonderful. So I think it might sound like old hat to folks that have been doing it for a long time, but when you're new to it, like that's not obvious. Like my Python won't install. Well, if you had a virtual environment it would. Or if you did these other steps, it would, right?
 
00:13:28 OKKEN: Right, and also it's somebody like, somebody like me that is used to virtual environments, it's still not obvious how to do that in Anaconda and Conda environment.
 
00:13:39 KENNEDY: Exactly, I have to look it up every time because I'm all about pip and I'm just like, wait a minute, it's a different way to activate. It's a global activate command. Where's the list? How do I know what exists at? It's different, so, I'm sure I could actually use this as well. Beginner means beginner to Anaconda and data science tools, right? Awesome, alright speaking of data science, I bet data scientists draw a lot of graphs, right?
 
00:14:01 OKKEN: Well lots of people draw a lot of graphs. Last time I tried to use Bokeh, or Bokeh, I keep saying that wrong. You don't need to email me that I'm saying it wrong. I know it's Bokeh. That's B-O-K-E-H. It is a very powerful charting tool. I believe it's not the most simplest interface to figure out as a newbie. And it's not like Matplotlib is super easy either, but a lot of people know about it. But Bokeh, it's not bad, it's just if you're a beginner, maybe there's an easier way. And this is the easier way or one of the easier ways, this a package called Chartify that simplifies a lot of the defaults and it's built on top of Bokeh. So if you've got some data and you want to throw it into a chart, this is a nice way to do it. It fills out a whole bunch of the defaults to where it starts out fairly pretty to start with. So simplifying the API for the newbies into Bokeh.
 
00:14:56 KENNEDY: Oh, that's great. I do find it a little overwhelming because you can do everything, right? You can specify so much detail and I'm like sometimes I'm just like, you know I could just use like a histogram. Wouldn't that that would be awesome. Can we just do a histogram?
 
00:15:07 OKKEN: Yeah, and if I got a bunch of different, you know I want to be able to pick the colors fairly easily and I don't really care, but I just want it to look nice.
 
00:15:16 KENNEDY: They also have a bunch of nice examples, example notebooks and stuff that walk you through using it. So yeah, it's a great little resource. Speaking of Jupyter and examples and notebooks and stuff, I want to stick with that for the last one here and it's called the CPython Bytecode Explorer. Most people probably know this at least at some level, but I'm sure not everyone does. When you run your Python code, it loads it up and it compiles it to byte code and you're like what? Python's interpreted, it's not compiled. So it compiles your source code into byte code and those Byte codes are interpreted on top of the CPython like a big loop that just runs. Okay, what's the next byte code, let's do that. So understanding what those byte codes are. How complex is something? Is it an atomic operation or does it take multiple steps? All of those things, you might wonder about. So this was sent to us by Anton Helm. And it's created by this guy named Jeremy Tuloop, and what it is is it's a plugin for Jupyter Lab, not Jupyter Notebooks but the more full-featured Jupyter Lab. And what it does is it lets you look at the byte code of various things that you're, various operations that you're working on. So if you pull that, I think Brian, the link there, you can see there's a little animated gif that shows you what's happening. So it's creating like an a, b, and a c = a + b. And there's just on the right as you type, it just shows you the byte code of those. So I think this is a great way to explore working with Python if you want to understand more of this low level byte code thing.
 
00:16:52 OKKEN: Yeah, this would be awesome, just in teaching, like especially if you're going to talk about like how names work in Python. This would be kind of fun to use to see how it all links to the same thing and what not.
 
00:17:07 KENNEDY: Yeah, another example that's cool, if you go to the very bottom, there's a bunch of little animated gifs here. And the very bottom one shows two operations, the looping over just the numbers 0 to 9, and you can either do this by while loop, you create the while loop and you have i &lt; 10, i += 1, or you could just say for i in range(0, 10). And they show it side by side, comparing the disassembled byte code of both of them, and surprise surprise, the for in loop is a lot fewer byte codes operations. So it's probably faster.
 
00:17:42 OKKEN: That's cool. There's even a demo that it shows that you can see how the Python 3.6 and Python 3.7 running side by side.
 
00:17:50 KENNEDY: Yeah, in the same Jupyter lab view, you can have different versions of Python with the same code to understand how byte codes have evolved over time.
 
00:17:58 OKKEN: That's trippy, yeah.
 
00:18:00 KENNEDY: I know. So if you want to understand byte codes, this is a pretty trippy here. So yeah, like you said, if you're teaching people about this kind of stuff, I think this would be an awesome resource.
 
00:18:10 OKKEN: Yeah, nice.
 
00:18:11 KENNEDY: Really good to just dig in and understand it. That's it for our six items this week Brian. But I was wondering how is you know the internet made? Is it like factory? Is it like internet trees?
 
00:18:25 OKKEN: Yeah, I was contemplating whether or not to bring this up.
 
00:18:28 KENNEDY: It's too late now.
 
00:18:30 OKKEN: Yeah, I saw on, I'm a little addicted to twitter, somebody passed around this little video called How the Internet was Made. And we're going to put a link to it and it's hard to describe, but it's just this complete silliness of these like old time videos of how things are made and stuff. It gets shipped from here to there and gets rolled across the field of barrels and stuff, and it's bizarre. But it made me laugh so hard.
 
00:18:57 KENNEDY: It's like an old timey silent movie with subtitles. It's like a documentary on how the internet is made. So it starts out, it has lots of gears and cambers and things. Then eventually, it's put into wheelbarrows. If I understand this correct. And it starts in Austria I believe. So the internet is mined in Austria and it's put into a special internet wheelbarrow which is pretty trippy. It's like a hovercraft. It's mixed up into like a gray goo and it's shipped off all in these pipes. Anyway, it's a good joke. Go and check it out. But it's much more visual.
 
00:19:30 OKKEN: It does reference both Austria and Ireland even though, I think it's Ireland, even though the map always points to Italy.
 
00:19:40 KENNEDY: I did notice that. This is so off. Pretty awesome, so people if you need a good laugh, you know click on that link. It's silent so it's not going to upset folks at work. It's all about just the visuals. Well I think it was a good one Brian and I'm glad I forced you to put it in there.
 
00:19:57 OKKEN: So next week we've got to kind of a year in review thing that you're putting in, right?
 
00:20:02 KENNEDY: Yeah, absolutely, so you and I have recorded a Talk Python Year in Review Top 10 Python Stories of the year not just of the week, and that's coming out next time. So be sure to check that out and it'll be a lot of fun.
 
00:20:14 OKKEN: Yeah, nice, okay.
 
00:20:15 KENNEDY: Alright, well, thank you for doing all of this this year with me Brian.
 
00:20:19 OKKEN: Yeah, thank you.
 
00:20:19 KENNEDY: You bet, bye.
 
00:20:20 OKKEN: Bye.
 
00:20:21 KENNEDY: Thank you for listening to Python Bytes. Follow the show on Twitter via at Python Bytes. That's Python Bytes as in B-Y-T-E-S. And get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.
 
 <|endoftext|>
00:00:00 KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode 108 recorded December 10, 2018. I'm Michael Kennedy.
 
00:00:12 OKKEN: And I'm Brian Okken.
 
00:00:13 KENNEDY: And this episode is brought to you by DigitalOcean. Check them out at pythonbytes.fm/digitalocean. Tell you more about that later. Right now I want to know how you doing, Brian?
 
00:00:20 OKKEN: I'm doing great.
 
00:00:21 KENNEDY: Yeah? Do you find that sometimes you end up with messy data, so you got to clean it up? You're like oh gosh, not again.
 
00:00:30 OKKEN: Yeah, I've got, you know, empty spots and bad stuff. Yeah, anyway, data.
 
00:00:36 KENNEDY: Yeah, somebody spilled a stray word where a number was supposed to go. Maybe there is something you can do.
 
00:00:40 OKKEN: Yeah, you can get a janitor.
 
00:00:42 KENNEDY: A pyjanitor.
 
00:00:43 OKKEN: Clean up your janitor, yeah. First project we're going to talk about is pyjanitor. It's a package for cleaning up your data. And this has a history in, originally it was a port of an R package called Janitor, but now it's grown from that. It's both for cleanliness of data, but also just a really clean interface in convenient routines. So, it's kind of a, for anybody working with data that can be, can have problems with it. There's a whole bunch of stuff involved with this. So, some of the functionality includes cleaning up column names, which I'm not sure why you would have bad column names in the first place, but if you're pulling it from somewhere else.
 
00:01:24 KENNEDY: Yeah, like a lot of times people load CSVs into pandas DataFrames and things like that, I think.
 
00:01:29 OKKEN: Yeah, okay. So, cleaning those out. Removing empty rows and columns and identifying duplicate entries. There's some stuff that can just happen with data like that, but it has a whole bunch of other cool things like telling your system how to deal with empty values, and expanding columns, and coalescing multiple columns into a same column, and a whole bunch of stuff like that. That's part of it, is dealing with messy data, but the other thing is to try to keep your code clean. So, on the other side of it it has a more of a functional programming style of using it, and not going to try to really talk about this too much, but we have, a code snip it in our show notes where it shows kind of how you would deal with DataFrames and doing things like dropping columns and stuff within pandas, and then how that would look in pyjanitor code. And it just makes it a lot, I think it's more maintainable.
 
00:02:21 KENNEDY: Sweet. Yeah, yeah. I really like this. It looks super handy. It's like a set of utilities on top of pandas which is great. And I like how they described this feature you just talked about. It's like a cleaner, method chaining, verb-based API for common pandas routines, otherwise known as a fluent interface. If you're looking for one word there. But, that's great. So, yeah, I think it's a really nice way to work with it. It looks really approachable, and I do like the fluent interface, like I really, really wish more things like that operated that way.
 
00:02:53 OKKEN: Yeah, for instance, a lot of the functions return DataFrames, so that you can just keep on in the new function to do multiple stages of a workflow.
 
00:03:02 KENNEDY: Now, this is all around pandas, so if your doing not just regular data cleaning, but you got to be working with pandas. But I think a lot of people who do that kind of work probably are, so it seems really helpful. So, would you consider yourself an expert at Python?
 
00:03:15 OKKEN: No, I know enough to know that, what I don't know.
 
00:03:17 KENNEDY: Yeah, I think this is one of the things where it's like your never really ... There's always stuff that you don't know, so you don't ever necessarily feel like an expert.
 
00:03:25 OKKEN: Well, especially in this field, when we're like, I'm always researching stuff that know more about, more than me about cool places. But, all in all I think I am, yeah.
 
00:03:33 KENNEDY: I would say that you are. So, I think there's a really interesting presentation done by James Powell. This was recommended to us by one of our listeners. I just don't remember who, so I can't give them credit. But thank you, for whoever sent this in. And this is a presentation at PyData 2017 by James Powell, and it's a YouTube video. And it's not just a little light here's my quick rundown of the five things. It's like an hour and a half sort of deep dive into what it takes to be an expert. So, basically James says, Hey, look, it's pretty easy to be competent with Python. Right? You can learn the couple of things and whatever other programming language you use, you can kind of make Python do that. But, to really understand it properly and take full advantage of it, write Pythonic code, things like that, is a whole lot harder. So, he runs through some of the things that he thinks people should know, and it's really focused at the maybe advanced beginner/early intermediate type of developer who can do stuff with Python but maybe stopped learning about the language and the features when they got whatever they were trying to make work, work.
 
00:04:40 OKKEN: Oh, good.
 
00:04:41 KENNEDY: Yeah, so it covers things like the Python data model, you know otherwise known as the magic methods or dunder methods, Metaclasses, a bunch of other stuff, and it's really nicely done. You know, I'm not a fan of presentations that are like, hey, here's seven slides and me talking about it, like woo hoo. You know, he just fires up an editor and says, "I have no slides. The editor is going to be the presentation. Let's start talking about these things." And just does it from scratch, which I think is a real genuine way to do it. So, well done.
 
00:05:07 OKKEN: I'm going to have to check that out myself.
 
00:05:08 KENNEDY: Yeah, yeah. I watched some of it, I haven't watched all of it. I've only watched like maybe half, but definitely watched enough to recommend it to folks. If you feel like your in this stage, like "Am I an expert? I'm not sure." Watch this and you'll probably get some things reinforced and others maybe be like, yeah, I knew that, that's great. Yeah. I would even say it was awesome.
 
00:05:27 OKKEN: That's very awesome. There's a lot of awesomeness in Python, and there's quite a few, there's quite a few different awesome lists. And so, that's what I wanted to talk about today, is another awesome list. And this one is called the Isosceles triangles. No, it's called Awesome Python Applications. It's kind of just a way for you to try to highlight a bunch of different cool applications, because if you're looking for packages to base your own project on, you can look at PyPI. But, that's not as easy to do with applications 'cause they don't exist in PyPI, so that's one of the, why this has been created. There's quite a few categories already and Mahmoud Hashemi has started it and he wants people to help him out, fill this in, because it's kind of hard to find applications sometimes. So, these are all applications written in Python that are open-sourced, that you can look at how they're doing things.
 
00:06:23 KENNEDY: Yeah, I really like this because so often people say, well, I'd like to use Python for this project but to sell this to my teammates and my manager, or my company, it would be great to say, well, YouTube is written in Python and I know you think Python doesn't scale, but I'm sure we're doing less than a million requests a second, so we'll probably be okay, also. Yeah, having the examples for those kinds of comparisons are really great, so this is a little bit like that. There's a bunch of stuff for like biology, you know, and like cell profilers and things like that, right?
 
00:06:55 OKKEN: Yeah, and even like I had to look this one up. ERPs, Enterprise Resource Planning. No, I don't need one of those, but cool, it's there. But a lot of these, one of the things I like about this is there's a lot of custom applications that people end up writing and they know that their problem space is very specific. And instead of writing everything from scratch, you could take one of these open-source projects and fork it or customize it for your own need. I mean, that's one of the benefits of open-source, of course, but good starting point.
 
00:07:26 KENNEDY: Yeah, that's awesome. I really like this. Again, well done, Mahmoud. And it's just cool to have these examples out there, you know?
 
00:07:33 OKKEN: Yeah, do you know what else is cool?
 
00:07:34 KENNEDY: I do and if I had a cool application, I would like to put my application there in DigitalOcean. Absolutely. So, DigitalOcean is sponsoring the show. They've been sponsoring most the episodes of Python Bytes and they're big supporters of it, so thank you to them. We use them for some of our infrastructure and it's working out great. One thing I want to highlight this time around is their early access Kubernetes project. So, if you're doing anything with Docker and Kubernetes and things like that, they have some special tools for deploying and managing your containers in the Cloud. So, just go over to pythonbytes.fm/digitalocean, you can sign up there or go over to the products and just pick Kubernetes and get started on that. There's tons of other stuff that you could do as well, but Kubernetes work they're doing is quite cool.
 
00:08:23 OKKEN: Very cool, nice.
 
00:08:24 KENNEDY: Indeed. So, the next one I want to talk about is something we haven't covered a ton on the show, but I think has some interesting shadows and parallels with Python itself. That is some governance around Django itself. So, there's an article called Django: Core no more by James Bennett. So, this is not the core as in some library, this is core as in core developers. So, Django's been around for a long time, 2005 onward, I believe. It's obviously a very polished, professional web framework, one of the most, if not the most. You know, it's in there fighting with Flask for that title, but one of the most popular Python frameworks, lots of amazing apps are built on it. But what they're finding is they actually, Django as a open-source project is not recruiting enough active contributors. That's surprising, right?
 
00:09:17 OKKEN: Yeah, it is.
 
00:09:18 KENNEDY: They say one of the reasons they think this is not working so well is they feel like there's these people called Django core developers, and then there's everyone else. And if you're not a core developer, well, you probably don't have any business messing around with Django or submitting any fixes or anything. Maybe you'll tell a core developer and they can go do it. Right? But not do it themselves. So, the proposal in summary is more or less to abolish this concept of a core developer all together. Okay. So, that when people come to look at Django they don't go, oh, there's a special group of selected core developers and then everyone else. So, instead what they found was in practice these core developers all had this straight commit bit. They could just commit straight to the repo and to have stuff happen, but no one was doing that. They were all creating pull requests and having a conversation around their changes anyway. And that's how somebody would make a contribution to Django from the outside. So, they said let's have a more democratic, not democratic, a more spread out, even way of talking about people who contribute to Django so that people are more likely to come and make contributions.
 
00:10:30 OKKEN: Okay. So, they still have, they'll still have some sort of process for deciding on which pull requests to do, right?
 
00:10:36 KENNEDY: Yeah, so now they're going to have two different groups of people who are formalizing the stuff. There's mergers and releasers, who would, respectively, merge PRs and then package it up and release it. So, these are more bureaucratic roles like sort of finalizing it, right? But the idea is to have PRs and open discussions around issues and PRs, and then these folks kind of say, yeah, okay, we're all good with this.
 
00:11:00 OKKEN: Interesting.
 
00:11:02 KENNEDY: So, it's a little bit of a parallel of Guido stepping back and saying, "Okay, everybody, you guys got to spread out some of this decision-making and not just, you know, leave it all on my back."
 
00:11:11 OKKEN: Yeah, I like what they're doing. I also like doing a lot of this stuff in the open and having the governance models be sort of an open discussion, so that different groups can learn from it. Like, for instance, I was listening to your interview about Sanic and they're talking about basically still figuring out how to govern the Sanic project. And so, doing all this in the open and having everybody be able to give feedback and stuff, it's cool.
 
00:11:38 KENNEDY: Yeah, it's definitely cool. Now, I don't believe this is the way that things are. This is a proposal for the way that James wants this to be. So, kind of take it in that sense, right? This is not an official decision as far as I know, but this is the proposal.
 
00:11:52 OKKEN: Okay, neat.
 
00:11:53 KENNEDY: Yeah, cool. Speaking of Django, what do you got? What's next?
 
00:11:56 OKKEN: Yeah, well, to shoo this in. I think somebody mentioned this on Twitter, again, I can't remember who. Sorry, but thanks for everybody for giving us tips on things. There is a Django template that is called the wemake-django-template. I think, actually, I don't really know who wemake is. I think wemake is a group that does like customer websites and stuff.
 
00:12:18 KENNEDY: Let me just say really quick. This is not templates as in Django templates, or Jinja2, or Chameleon. This is like I'm making a project from scratch. It generates the project structure, like a project template, not a web HTML template, right?
 
00:12:31 OKKEN: Right. I guess it should be called a Cookiecutter because it is based on Cookiecutter.
 
00:12:36 KENNEDY: More or less.
 
00:12:37 OKKEN: Yeah, so it's based on Cookiecutter, so you can use if you, I'm sure everybody's familiar with Cookiecutter. You use it to start a project and it pulls stuff off of GitHub and initializes your project, and then asks you a bunch of questions. But it has a whole bunch of really cool things that you might not actually think to do right away in a Django project. They're saying that it's more for larger projects, but I'm sure that a lot of these you could do 'em for smaller projects too. But it uses a system called Dependabot.
 
00:13:08 KENNEDY: That's an interesting one.
 
00:13:09 OKKEN: Which I haven't heard of before. But it's one of those systems to keep your dependencies up to date. It's got Poetry for package management, which is kind of neat.
 
00:13:16 KENNEDY: Mm-hmm.
 
00:13:18 OKKEN: Pytest for testing, of course, that's awesome. One of the reasons why I think this is neat because Django doesn't do pytest automatically, so having somebody initialize that and set it up for you is cool. And then, there's some of the other things. There are mypy for static typing, pre-commit-hooks already setup, Flake8, and an extension to the style guide already built in so you can use that as a template to use your own style guide. And a whole bunch of other cool things like Docker integration already, GitLab CI for building and testing. And then, something that I hadn't heard of before which is Caddy, which is, I going to probably get this wrong, but I think it's something to do with secure websockets or something, I don't know. Https, whatever that is.
 
00:14:06 KENNEDY: Sounds good. Yeah, I don't know what Caddy is either. I should check it out, but looks pretty cool. And, yeah, I think if you're creating Django projects, I think, or any form of web project, there's some for Flask, there's some for Pyramid, there's some for Django. I think looking at these more full featured, more structured, starter Cookiecutters are really valuable. And I think actually the biggest value comes to people using Flask. By the way. The reason I say that is, Django already has a structure. Right? There's a lot of structure like static files go here, whatever, a lot of stuff is set up when you create a site with Django. Same thing with Pyramid, you already use Cookiecutter templates. But Flask is like, well, you create a file, and then you're on your own. You know, so like with all that structure is like not anywhere to be seen, but it's still going to have to exist on real apps eventually. And so, having some projects that you can follow, I think it's really great.
 
00:14:54 OKKEN: Yeah, so that's a good segue. Not a segue into the next one, but I would love it if people would share with us some of their, some of their favorite Flask/Cookiecutter starter projects.
 
00:15:05 KENNEDY: Yeah, for sure. We can give them a little shout out in the extra section or something. So, you want to make it just a straight three of a kind for Django, in a row here? Let's just wrap it up with Django.
 
00:15:14 OKKEN: Sure, whatever.
 
00:15:15 KENNEDY: Yeah, we're already here. So, you've gone and you've created your project with one of these Django templates. You've got it working, you've done some testing. Maybe something wasn't working, so you flipped it into debug mode, that's cool. Maybe set some other stuff. And then, you know, all right, ready to push it out. It has like this template you told me about here. It already has integrated deploy steps into the CI build. So, that's pretty cool. You just type deploy and, boom, off you go. And then, a little bit later something starts happening to your AWS account or your database records that is not so good. That might be because you've left the debug mode, or some other setting on, that exposes all sorts of information. So, there are ways to run Django that is helpful for development, but then you obviously don't want to share that information with everyone else. So, there's this project called django-hunter, and it looks for insecure Djangos. So, if you deploy your app, you point this thing at it and ask it what's the status of this thing here. So, the person who wrote it said, "Why did we create this?" Well, it's a tool to help identify incorrectly configured Django apps that are exposing sensitive information. For example, in March 2018, there was 28,165, that's a weird way to write it. It says 28,165 thousand Django servers. Is that 28 million? I'm just going to say there's a lot of Django servers that are exposed on the internet showing off things like their AWS keys, their database passwords, and connection strings, et cetera. That you don't want.
 
00:16:47 OKKEN: Right.
 
00:16:48 KENNEDY: So, there's this cool tool called django-hunter and you can basically point it at your projects and it will tell you if something's going wrong with them.
 
00:16:55 OKKEN: That's cool. I love projects like this because Python's so easy to get started on things. You can, I guess, jump into the deep end before your quite ready and having tools like this to help you jump in safely, with the... It's good.
 
00:17:09 KENNEDY: Absolutely. So, you know, it's easy for people to say, "Well, that was sure stupid." You got hacked because you didn't, you know, set the debug mode to false. Well, if you're struggling to figure out like what does deployment mean, like I can't even barely get this thing to run on a Web server, and I'm trying to understand Linux, and databases, and firewalls. It's pretty easy to overlook that kind of stuff when you're struggling to just make the thing work. Right? There's a lot of these settings that you're like I just want to test this out and show it to somebody. I'm not, you know what, I haven't been running Django for ten years. So, there was actually a conversation, either on Twitter or on Reddit, about this. Somebody said, yeah, this is great. This guy jumped in and said, "Hey, I'm probably one of those 28,000 servers that are among my early projects that's out on Heroku. I accidentally exposed my AWS password and all hell broke loose." The problem is as a beginner, it's not obvious how to separate development and production settings and keep that stuff out of your public repo. The other thought was somebody said, you know, "There's a reasonable argument to be made that debug should be set to false by default." If you turn it on then maybe you know about it, so you know to turn it off. But if you never turn it on, how do you know? Right? There's a setting, there's a huge comment right by where the setting is that says never put this in production with debug=true. But it's like in a settings file you might not ever open.
 
00:18:30 OKKEN: Right.
 
00:18:31 KENNEDY: So, if you don't look at it, you know, that's bad. So, anyway, there's some interesting maybe thoughts around what to do to Django to make it better, but certainly having a tool to tell you if something is wrong is good.
 
00:18:42 OKKEN: Yeah, okay.
 
00:18:43 KENNEDY: All right, so django-hunters for those Django developers, or DevOps running Django, people running Django servers. That was good and that was all of our items. I want to first give a quick shout out to you, Brian, in our extras section. Thanks for having me on your show. And I blogged about that, so I put a link to the blog. But we had a great time talking about what it takes to be a good podcast guest and how to prepare for that, which is more broad than just go podcast guest, I guess.
 
00:19:09 OKKEN: Yeah, and I've actually already gotten a whole bunch of positive feedback on that episode, so I'm glad we did it.
 
00:19:15 KENNEDY: Yeah, great.
 
00:19:16 OKKEN: Anything else extra?
 
00:19:16 KENNEDY: You know, I was just thinking Christmas is coming up. Just a... You know, at least in the United States, there's this weird tradition, but it is a thing, where in shopping malls, a Santa will be hired, a Santa Claus, and will sit there and there's typically photographers around. And parents are bringing their children to the Santa and the purpose is the child sits on the lap of the Santa, asks for something probably totally unreasonable, and they take pictures of it. Of the whole situation, and hopefully the kid doesn't cry and get afraid of Santa. So, you have a good version of this, right?
 
00:19:51 OKKEN: Yeah, I'm going to read it out loud because it's a comic, but it's hilarious. And it was posted by Changelog on Twitter. This little girl is sittin' on Santa's lap and she says, "For Christmas I want a dragon." Of course, Santa says, "Be realistic." "Okay, I want enough donations to support my open-source work." With a response of, "What color do you want your dragon?"
 
00:20:16 KENNEDY: That's so awesome. I really love it. It's sad that it's true, but yeah, it's pretty awesome. Be realistic. What color you want your dragon to be? All right, well, I thought I'd throw one in here for you as well. It has nothing to do with any seasonal stuff, so this is good year round. Okay. Has more to do with race conditions, deadlocks, and that sort of weird timing problems you run into with multi-threading, yeah? So, you've heard the joke 'Why did the chicken cross the road', which has all sorts of weird answers but sometimes just to get to the other side, right? Why did the multi-threaded chicken cross the road?
 
00:20:47 OKKEN: I don't know, why?
 
00:20:47 KENNEDY: Road the side get to the other of the to. Ask me again.
 
00:20:51 OKKEN: Why did the multi-threaded chicken cross the road?
 
00:20:54 KENNEDY: The side of to the road other get. It's always scrambled, it's always different.
 
00:21:00 OKKEN: I love it.
 
00:21:01 KENNEDY: That concludes the joke section, I suppose.
 
00:21:03 OKKEN: Yeah, so yeah, we'd also, like we're both sort of silly people and would like to have some feedback as well from people to see whether or not we should keep a joke or two in the episodes or actually just whether or not we should. So, that'd be great.
 
00:21:19 KENNEDY: Yeah, sounds good. And if you have good jokes.
 
00:21:20 OKKEN: Yeah, send 'em.
 
00:21:21 KENNEDY: Send 'em. All right, well, Brian, thank you for doing this and everyone, thank you for listening.
 
00:21:25 OKKEN: Thank you.
 
00:21:26 KENNEDY: Mm-hmm, bye.
 
00:21:27 OKKEN: Thank you for listening to Python Bytes. Follow the show on Twitter via @Pythonbytes. That's Python Bytes as in b-y-t-e-s. And get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.
 
 <|endoftext|>
00:00:00 Hello and welcome to Python bytes where we deliver Python news and headlines directly to your ear buds. This is Episode 183. Recorded may 19 2020. I'm Michael Kennedy. And I'm Brian Akin. And Brian. We have a special guest Calvin Hendricks. Parker. Welcome, Calvin. Hey, guys, how you doing? I'm doing super well.

00:00:18 Great to have you here. Yeah, awesome. Well, I'm excited to be on this my first time, you know, being on one of your podcasts. And so like, I'm all giddy with excitement. I'm very giddy as well. It's great to have you here. It's always nice to have a third person with a fresh perspective. Because Brian and I, we've given our perspective 183 times and people are probably able to guess, the most far what we're gonna say. But not the jokes. The jokes are always original. Okay. Now, before we move on, I do want to say this episode's brought to you by Digital Ocean, check them out of Python by setup slash Digital Ocean get $100 credit for new users tell you more about that later. Brian, why don't you kick us off with something completely from 2001? I like blogging like blogging. Yeah. So one of the things that we thought maybe there weren't enough ways to blog right now, there's actually tons of ways to blog. But this is kind of a neat thing. This is called the fast pages. And it comes from fast AI. And it's a blogging platform that this it's an easy to use blogging platform with enhanced support for Jupiter notebooks. It's kind of put together it's a you know, where you write in Jupiter notebooks. And then you can also write markdown files. And for some reason, you can also write like Word doc files. But why would you do that? I blog in Word baby.

00:01:31 Weird has support for it anyway. And you can form your pages and posts and whatever and push it up to GitHub uses GitHub app actions to publish everything it use. I think it uses Jekyll on the back end, to publish to GitHub Pages. But it's all set up so that it's really fast to start. You can do things like

00:01:52 Altair interactive visualizations. And you can have code that you can code cells that you can hide and show or closed by default, if you want to. You can even do metadata, like the title and summary, they go and special markdown cells. But you can even embed Twitter cards and YouTube videos and tech support and all that jazz. It actually looks pretty slick To tell you the truth. If you want to publish something like a blog, but you're going to use Jupiter notebooks on a daily basis anyway, this might be a good thing to check out. Yeah, Jupiter is nice, but it's not quite all the way there, right? It's still like, the code is still shown on all the cells and they're not like collapse like this. This is a really nice presentation format, I think, in the fact that you're not really running on your own platform, right? Like, there's so many things. We're like, Oh, I'm gonna write my own blog. And then now I have to run servers and patches and like, wait a minute, why am I patching servers? Like what have I gotten myself into? Where is this just runs on GitHub Pages? That's pretty cool. I like the Altair interactive visualizations, right? Because it's one thing to take a screenshot or static image and put it up there. But if you've got live code and live interactions, that's pretty awesome, actually. So yeah, this kind of appeals to me. I'm not switching because I just I don't have the energy for one more thing that I put in a lot of focus on like a blog. I do blog, but not that much. But nonetheless, this looks really cool. If you're, especially if you're in the Jupiter world, man. Now you got to maintain your code on your blog page. Make sure it always runs. If That's right. That's right. Oh, you write tests for it. It'll be fun. Yeah, there we go. Okay. Yeah, exactly. Yeah, no, I looked at this. And I, I think this is a nice fresh take on like interactive code demonstrations in your blog. And to me, it's way better than just static code there with static pictures. Yeah. And it definitely, like I said, I think it's a the best for, for people that are spending their day in Jupiter notebooks anyway, then it's going to be a natural, natural place for them to be to, to write a blog with it. Yeah, absolutely. So yeah. Now this next one that I want to cover, I doubt heard of, and I discovered it from a Mahmoud Hashemi, who didn't realize that he had shared it with me, but he had like favorited it on GitHub. I'm like, Well, wait, that looks cool. What, you know, just that little activity stream of people you following Get up, or whatever is happening. So one of the things that I find lacking a lot of times is how you work with databases as sort of an admin side of things, right? Like if using Django, there's some kind of admin back end, you can put a point at it. But if you're using like, just SQL lite, and you don't have some web app to work with it, like, how do you work with it? I know there's a command line for working with it. You're right, DDL data, definition or description, language, whatever that is. I don't want to do that. That doesn't sound fun at all to me. So what I want is a nice visual thing. There's like a history of my most common searches, things like that. So there's this thing called beekeeper studio. Have you guys heard of this? I'm not No, no, I hadn't either. But if you go to their website, it is super polished. It certainly passes the Michael and Brian test have many screenshots and little animations because hey, it's a UI thing. And what it is, is it's a really polished free and open source, SQL editor and database manager. It checks so many

00:05:00 boxes, it talks to MySQL, Postgres, SQL lite, Microsoft SQL Server, it runs on all the things Windows, Linux, Mac OS, it has a bunch of cool features like it has built in support for connecting to your database server over SSH tunnels, which is really nice. Because you typically don't want to have your database out in, you know, digitalocean or wherever. Listen on the internet, that's just asking to be in the headlines of, Oh, yeah, company X has lost all their data, and is now you know, you now get, everyone gets free credit monitoring for a year. Thanks, right, you don't want that. So you can have like, the database lock down, but still SSH over to the server, and then just tunnel. But this has like built in stuff for that cool tabbed interface. It has autocomplete for your SQL queries, which is really nice. So like, your table schema. So you know, you could pull up table name, dot and it'll drop down all the columns in like your where clauses or your SELECT clause, which I think is super nice. It has kind of an Excel view, where you can just pull up the data in a table and like filter it and sort it by clicking on the column. So you don't have to be super good at knowing that by default as a dark theme. That's pretty cool. Yeah, so you know, it's first series programmers. Yeah, it's legit, baby. It is totally legit. Because it's default, you have a dark theme, for sure. That's right. That's right. So there's just a bunch of cool things like you can save your most common queries. There's like a favorites queries section on the left, that you can just pull up your common queries and like rerun them. If you got to do a report or something you always have to ask about, like, you can run that which I know this seems like a really nice tool. And I'm telling you, it is worth every penny, you pay for it. Is it free? It's pretty as you know, for tours, I installed it and I connected it, some little sequel light toy things, projects from my courses that I was working on, and it came out great. So how do we keep them in business felt like we need to keep them in business somehow. I know we don't want this to go away. But yeah, it's nice. You know, we're on GitHub, they've got quite a few stars. 1.4 thousand. So it's, it's pretty new. I'm not sure how long they've been around. But I'm excited to see him here. It's great. Well, then people. Alright, Calvin, what do you got for your first item here. So my first item on the docket is the second annual Python web conference, which I'm actually one of the CO organizers of this web conference. So I'm excited to come on here and tell you all about this amazing event that's coming up. We did this last year. And we thought it was a pretty good success. And so we wanted to actually continue that tradition. And it seemed to fall perfectly within all these conferences, converting to virtual conferences, we are a virtual first conference, this was not a planned change to virtual, we're really doing this for real as a virtual conference. Just to be clear, you guys did this last year, when it was a Yeah, not required to be right, when it was not hip and cool to be a virtual remote conference. So at least a year ahead of your time. We are, I like to think I'm a trailblazer when it comes to some of these things. But I'm only taking credit for the amazing work done by the people who are certainly behind me doing all the real work. But we're basically putting on the work. We're calling the most in depth Python conference for web developers. I know if you all been to pike on, there seems to be a lack of web and production level talks going on there these days. Well, it kind of goes back a long ways. And so we felt like this was a gap in the Python ecosystem for folks to come and talk about production use of Python, Python, in on the web now. So we're going to do talks on Django flask twisted, lots of testing talks, so maybe they'll draw certain folks from this audience in who like testing, sequel, alchemy, containers, deployment, like tons of stuff like that. So it's gonna be a bunch of cool web talks in just a little kind of three tracks. So it's actually gonna be three days, that is June 17, to the 19th. So make sure you mark that on your calendar right now. I would love if you went and bought a ticket right now. But go ahead and mark on your calendar, save the date. There'll be a full day of tutorials. So there'll be six tutorials three in the morning, three in afternoon, two days of talks with three tracks. We've got some awesome keynote speakers. So loreena Mesa from Python Software Foundation is gonna be on our keynotes. We've got henyk Russell, Keith McGee, who gave a keynote at pike on two years ago. 2018. Yeah, I think said it depends if you count this one. Yeah. Right. So he'll be coming back and hopefully giving some more insights into health. I'd love to see what he thinks kind of post Black Swan era, if you remember his talk from pike on at that was a super good talk. Yeah, it was a super good talk. And that's why I'm really, really excited. He decided to kind of join my merry band and go on an adventure with all of us. We'll have some fireside chats. So during lunch, there's going to be I don't feel familiar with Carl Meier. But he's, he works for Instagram. He's in their infrastructure team. And so he's really available to talking about like best practices. So we'll ask all kinds of deep questions. And actually, I've just enjoyed talking to him to no end about how things actually work in the real world for some of these kinds of things. Now, not everyone's doing micro services to the hilt like there are people who are running real things that are just Django monoliths and they still work in a kind of tried and true. So there'll be a 40 presentation 40 plus presentations, so

00:10:00 tutorials, fun will be had by all, hopefully connections will be made, we really work hard at making sure that these kinds of virtual events are maybe overly stimulating, so that you've got lots to do and kind of lost interact with, there will be, you know, kind of virtual cocktail hours afterwards online gaming. So we had a Mario Kart tournament in our last virtual conference. And we're gonna do bring back our board game night. And so actually, as part of the conference registration, you'll be sent a pre swag pack, that'll include something for the board game night. So if you actually want to play one of the games, we're going to give every player every person who attends what they need, actually, you don't need to have that to play but the book and have some specially themed ones made specifically for Python web conference, you point like your webcam at it, and everyone sets it up in the initial state and like keep seeking it, though. Okay, so I'll kind of get a little bit of cat out of the bag, but we're gonna play skull, have you ever played skull, it's a bluffing game. It's a lot of fun. So basically, everyone has four coasters, I mean, look like the coasters, you know what kind of like, you know, just a round circular cardboard coaster. Three of them have flowers, typically, and one has a skull on it. So it's a bluffing game, to see how many flowers you can acquire before you run in somebody's skull or your own skull. So we're going to do a Python themed version of that with a web slant, just to be pretty, pretty cool. Looking forward to that. That sounds fun. Yep. So the tickets are 199 and 99 per students. Now, as a bonus, there is a perfect for every professional ticket purchased, we're going to donate a ticket to an attendee in a developing country. So we want to be able to get people who couldn't normally even make it to a physical conference. At this event, you know, if you're in the middle of Africa, or some far off place, and you couldn't normally get to a conference like this, we want to make sure you can attend and actually connect with the Python web community. So I'm pretty excited about that. And then I do have a discount code for the Python bytes listeners, there'll be a 20% discount code, if you just use the code, Pb 20. And you guys will get Alright, cool at 20% off discount Nice. Yeah, this sounds like a fun conference. I really like that you're taking the like, digitally native approach and the conference, because I feel like there's a lot of attempts at this right now. And we'll see what, what sticks, but everyone's trying to reinvent conferences. And this feels like a pretty good attempt at it. I've attended a couple recently where they they kind of took conference skeuomorphism to an extreme, like you kind of VR style, walked into an expo hall and kind of click to go through a hall and you're sitting in front of a screen like Mystery Science, theater, 3000 style, like, you know, characters sitting in front of you. Yeah, though. The silhouettes of people for a year. That's not the way to go. That's not what this is. I saw I saw some thing where they're like, oh, we'll make it totally real. You've got to get like, go check in with a real person before they'll let you into the virtual conference and stuff like that. Yeah, no, no, no, no, no, no, no, no. Yeah. Yeah. So Microsoft build is running right now. They're, you know, trying to figure out what they're doing there. It didn't look super good to me this morning, the way the experience was going, but yeah, we're doing it for a week. So we'll or three or four days. So I don't know, maybe that'll be an example as well. They do. We assisted their summit. I didn't hear very good things about that, as well, as well. It's a big challenge. And there's a possibility that I might be speaking to this conference. Oh, that's right. I could I forget, we do have if you go look at the speaker's page, I'm super excited. I mean, is a who's who of Python web community, it just kind of speaks to the volumes of like the confidence these people have that we can pull this off that they're here to speak for this conference? Yeah, very cool. All right. Well, I definitely think it's gonna be fun event, people can check it out, obviously, links in the show notes and the discount code. Now, speaking of web and running stuff in the cloud digitalocean, sponsoring the show pretty cool place, they just launched their virtual private cloud, their new trust platform, which makes it easier to run secure code in the cloud with some confidence. So VPC, it's kind of like a virtual private network, but it allows you to create multiple private networks for your whole team, then you can stick your VMs where they need to go to make them to talk to different things. So I recently set up a whole bunch of complex firewall rules for all of our various servers that need to talk to each other. And it would be really nice to just like them in here, but I set those up before this existed, hence, I did it that way. So this is really a nice feature. It can auto generate your private network IP addresses, so you can control them, or you can specify how you want them generated. And you can even configure some of the droplets to behave as Internet gateways to kind of act as a bound area or place for those various private clouds. So that's cool. And then their trust platform is like a micro site with all sorts of information about security and running stuff in the cloud. So check them out at Python bytes at FM slash Digital Ocean, hundred dollar credit for new users. And so go out there and build something awesome and make it a little more secure. Wonderful. Yeah. You mean so I mean, I mean, secure, like real honest data, no fake data and no fake news. None of that fake news. Only there was a fake news generator.

00:14:48 There probably is. So if anybody knows the fake news generator, let us know. be fun. As far as fake goes we're talking about I have no idea how to pronounce this. Anybody want to try it in Miami?

00:15:00 nemesis, nemesis, I've actually used this tool in the past and I, this is a party game I love to play, describe an open source project and you see how everyone will pronounce it. Okay, anyway, maybe mimis is my missus, I think, I don't know. But it's a fake data generator. And I was reading it thinking, do we already have fake generators, there are a handful of other fake data generators around. But this one looks pretty cool. It helps generate fake data in a variety of purposes and variety of languages. It's actually got over 33 locales, so you can get like, you know, Russian names and Spanish names and all sorts of stuff like that. But the localization also goes to things like you can, if you have a addresses and food descriptions, and people names and things like that it can be localized. And that's pretty neat, different phone numbers as well. So there's a whole bunch of different locales you can do. Supposedly, it's super fast, they posted their benchmark of 10,000, full names of Faker versus messes, nemesis. And then they were like 60 times faster, which is pretty cool. The thing I was really impressed with it was one of the features is a data generation by schema. So you describe, describe what kind of the shape of some data and the different types of things like maybe. And we're putting in the show notes, a description of a structure that has a name, and an ID and a version, timestamp and owner information like email and creator name, full name, things like that. And then you can just generate from that schema, you can create a bunch of those. And that's pretty darn neat. I think, I think I could use this really readily. Yeah, we were just talking about building a web apps and stuff. And one of the things that makes that really hard, is you've got all this HTML on these loops in your templates, and all that kind of stuff in CSS that's going to describe, if I had data here, this is how it would look. And often you end up with no data or like just a few letters here or there. So having like legitimate looking data is really nice helping you design your apps. Or if you're trying to anonymize something for some kind of data science things you want to like, I want to randomly put in something here, but I wanted to seem normal, but not be actually tied to the person. So it's really cool, huh? Yeah. especially useful, like in Django projects, when you want to have a fixture to load up some personally identifying information ahead of time for the developers. You don't want to happen. Grab the production data and have that liability sitting on their local disk. Yeah, yeah, exactly. There's interesting, different classes that generate things. So there's obviously like a person, though. It's called person humans like Elysee Yep, person. So it has things like you might expect, like an age and an email and a name. But it also has an avatar, which is a link to a graphic as an academic degree, like whether or not you have a bachelor's degree or master's degree. It has like, nationality, occupation, political view, all these interesting, different things. And then they also take on different locales, right, there's a science one. So in the science one, you can have an atomic number, a chemical element, a DNA sequence, and RNA sequence. There's just a bunch of funky, different types of data you can put on here. Looks pretty cool. Yeah, there's looking through things like software development, things like

00:18:23 operating system, random operating system, random programming language, software license, things like that. That's pretty cool. Right? Like, was it os 32? Or what was it called? oS? Two? Yeah. This is a cool, cool find. And you know, I have a another one that's kind of in that same space, also with a bit of a web slant called schema thesis. So this is good. So the idea is, you've got an API. And the API is documented with something like open API, three, or swagger or something like that, which is bunch of HTTP endpoints, and then descriptions of the data is exchanged, right? Here's the endpoint. Here's the X of the JSON document, or God forbid, XML document. I almost said there. Right. But here's the thing being exchanged, right? And then you would hope that the actual service actually exchange data that looked like it described an exchange, right? So this project basically tests for conformance with the API as you declare it in your own documentation. That's pretty nice. It supports those two formats that I said swagger and open API. And it's built with hypothesis hypothesis, JSON schema, and from Oh, please, pi test. Yeah. So the idea is that read your application schema, and then using hypothesis, it will generate test cases that ensure your application is compliant with its own schema. That's pretty cool. Yeah, and it works in two ways. You can write tests with PI test. Obviously, it's kind of meta, but then write tests with PI tests and write code to talk

00:20:00 To these things, it seems like maybe the predominant way actually to do it is through this command line interface, where you can pointed out a URL at the schema definition, the documentation, and then the actual endpoints. And it'll just go and do all that work, which is pretty cool. Those, yeah, you can also parallelize it, you can pass the number of workers for concurrent test execution. Also, if you're testing something that has an app, as in flask, or a IO, HTTP or something like that, instead of firing up a thing that goes through the network that goes to the whole serialization layer and hit some running thing, it'll actually just load up your app and run it in process. Right as if you're doing unit testing against your flask or aIIow HTTP app, you can give it directly just the basically the package or the module and it'll just run it. Like without the web infrastructure in between, yes, that probably speeds things up quite a bit. Yeah, yeah, at least you don't have to have a server running somewhere. So it's probably also easier for ci CD, because there's not a second thing to be running to then talk to, you just run it straight out of the out of thin air. And then also Calvin, you're talking about being keen on Docker, this c li also can run as a Docker image. So there's like no setup other than just Docker run this live in a dream, living the dream, baby, it's always gonna work to doctor. Anyway, that looks like a pretty cool, cool thing. And there's a little example in here, it's not super clear to me, like how, how to put specific use cases into the code test. So that's why I say I think the CI is kind of the way to go. Like there's always write code and it uses a primer ization through hypothesis. But it's, it's a little bit generic, I guess, on what you would assert for. Anyway, if you've got API's, and they're already documented with swagger or open API, this seems like a cool thing to point at it, just to make sure that it's hanging together. Yeah, very nice. I wanted to give this a try sometime. Yeah. More testing is always better, especially if it's one line. Yeah.

00:22:03 All right. God wants this last one here. All right. So last one up here, there has been a lot of people, combing public code repositories looking for secrets. And a lot of the tools have been disregarding some common places secrets might be stuffed away. So right, so they look at like JSON files. They look Yeah, CLI dot j. s, like it's embedded in code or maybe a dot i&i. Yeah. So they're not looking for maybe byte compiled code. So actually, there's a blog post here by Jesse Lee. And I really enjoyed it, cuz it's finding secrets by decompiling, Python, bytecode. And public repositories. I mean, it's, it's really common for maybe people new to Python, not to realize that those pi c files could contain possibly sensitive information. So a lot common patterns might be put your secrets into files, like settings.pi, or config.pi, or secrets.pi, and then get ignore the PI file. But you could be accidentally still inserting the pi c file, which is the byte compiled version of that file. All right, like Dunder pi cache? Yes. dot p yc, is probably something to go look for. Right? So you should probably leverage whatever tools you're using to make sure you get a stock like Python, get ignore file. So if you're using like pi charm, and you have the Git ignore module installed, like it'll tell you like, do you want to generate the stock get ignores for your type of project, and it'll put a bunch of stuff like right in there for you, you should do that for sure. But if you don't, you might actually be vulnerable to having some of your KYC files contain API keys or using passwords, because that information gets compiled into the bytecode. What I liked about this post was actually handled will crash course on deconstructing Python bytecode. And like understanding what cached source means. So it wasn't just like, Hey, don't do this thing. That's pretty darn cool. It really can give you a quick little lesson and like what a p yc file is, or what's in that pi cache directory. So this post also comes with another game you can play which is kind of cool, a small like Capture the Flag. So there's a little lab in there for you to actually try it out and kind of play with it. So if you're totally in like security stuff and want to like see how this stuff actually works under the covers, like the author like went just kind of above and beyond and gave you like a capture the flag game to actually go explore those files and cache files that are up on on GitHub, which or any other public public repository, which is really cool. I see. That's cool. So the idea is the here some that have this problem. Your job is to go uncover them or something like that. Yeah, go on. Yeah, exactly. Here's a couple of sample stories go and cover this. So the kind of the action items from this post specifically was like if you do have pmic files containing any secrets, you need to make sure you delete them and then go revoke and rotate those secrets. And the other thing was using a standard get ignore for checking, not preventing that to happen all together. And ultimately, I think the best way to handle it I'm been preaching kind of a lot to folks who around me recently about how to store secrets, using tools like vault or one password depending on what your situations are. making it easy to get those secrets into, say environment variables for me is the way to go. Don't even have those secrets sitting on your file system.

00:25:00 in any form whatsoever. So I typically will have a little shell script that uses the command line tool for like one password, or uses vault with a token to actually grab the secrets in real time, stuffed them into an environment variable, either shove them into a container, or as I launch, I grab those out of my environment, and don't even take the risk of putting that stuff on my file system. That's a clever idea. You know, cuz so often, it's kind of a chicken and egg. It's like, Great, so you don't store it in GitHub, to now it's over in this other text file. Right? Like, how much better is that autists? later? I mean, I know it's better. But it's, it's still like not that awesome, right? So having an encrypted is nice, right? One password, and LastPass, and bitkeeper, are keepass all have command line tools that you can script to get data out of them. One password will give you back like JSON. And with Jq, you can basically filter it out and grab the thing and put it into an environment variable on the fly without ever touching your filesystem, which is really nice. Okay, that's interesting. I didn't know about that. I'm a big fan of one password. But I didn't know I did that. Oh, so go check out go grab the OP one password tool, it's got full access, you can just basically grab secrets. Yeah, you can edit secrets. I'm a huge fan of one password as well. And LastPass was nice as well. We used to use LastPass for a long time. But I store for example, like AWS secrets, I'll put those up in one password in the notes field, or I'll create separate special fields that have kind of key value pairs, which are environment variable name, and environment variable value. And then I just have a quick little one liner in my shell that converts those from one password JSON into export those two real variables in my shell. So more than just the secret key, like the region and like what profile to use, which assumed to do like anything is a variable that you put in my environment. I'll put into one password. Okay. Yeah, that's cool. devices. Good. Yeah. Right. Well, that's it for our six items. You guys got any extra stuff that you want to throw out there? Bryce, you got one here? Yeah, I just noticed that. The PSF is looking for volunteers to help migrate issues from bugs python.org, to the GitHub issues, to if you want to help out PSF and do something worthwhile, like this cool thing to volunteer for? Yeah. Yeah. That's cool. That's cool. How about you calm in case you missed it, there is a learn Python, humble bundle that is going on right now that will benefit a couple charities, the book industry Charitable Foundation, and the no starch press foundation. And so those are helping folks who basically need a safety net during times like this, like independent bookstore owners, comic book owners, things like that. For $15, you get like, nearly $400 worth of like, amazing. And no starch press books, at some point in time recommend, and probably almost every one of the books is on that list to folks too, so they can get jumped in both feet, how do I learn Python, I've got three of them sitting on my desk right here. Because they're, they're fun books. You know, there's like stupid Python tricks and automate the boring stuff. And it's really fun books in there. So I'd recommend anybody who's spending time at home and doesn't know what to do with their time, go grab these books for 15 bucks, 15 bucks or pay what you want, the money goes to a good cause. And you get to learn now awesome. Python language. Nice. Yeah, that's called the mission Python book is intriguing to me. That's definitely cool. All right, I got a few quick ones, Python three, nine, beta one is alpha testing. So if you're into that, you know, go check it out. You can run, download, run it and play around with some of the new ideas in there. Also, not beta. But for real Python 383 is also available. That's pretty cool. And then I got a cool message this morning from Jeff Derby Shire. And he sent over something that I thought was just kind of a cool little piece of information. I'll link to the paper in the show notes. So everyone's trying to help out this COVID stuff, some particle physicists put some free time, took some of their free time to design and build a low cost ventilator. It's pretty cool, right? Yeah. And, and they wrote a paper about it, because they're particle physicists. And if you look through it, it says things like, the target computing platform is Raspberry Pi four, as chosen as a trade off between computing power and power consumption and things like that, which is nice. The target programming language is Python three, and the UI is pi Qt five, and then the nvm GUI, and the UI for it is Python three software written with PI cute five, and pretty nice allows you to like steer and monitor the equipment. So anyway, here's a cool, effectively a Python ventilator created by particle physicists. That's like open source now. That's awesome. It's good to go. There's a huge number of names on this paper too. Yeah, it's pretty awesome. Anyway, I'll link to that people can check it out and if they're interested, but you got to do something to keep the these particle physicists off the streets. It's right. Don't just roaming around any old Collider. Alright, so for the joke this week, I thought I grabbed like a couple more. Oh really covers not O'Reilly. And I mean, you already have the Humble Bundle book thing. So we got the oh really ones that I thought we could just easily just do one. I'll talk about the first one here. It's a chameleon, which obviously is the lizard that can change

00:30:00 colors to blend in. Brian, you're like this one. It's called refactoring code without tests. It looks like it's working. No code coverage no problems. it just blends right in. Looks it works on my machine. I try it was written by Sir crash a lot. So cool. All right. Brian went to the next one. Sure. Becoming a manager and listening to people complain all day. Jesus Christ none another budget meeting. So luckily, I and the animal the animals a crab, of course.

00:30:28 I don't have to deal with budget meetings. Luckily. Yeah, yeah, me either. Alright, Calvin, here. This one's a special web one for you. Yeah, it is. I say this is perfect for me. So this is the Z index. Good Lord, how many zeros? I think it's 100 billion. Is it? 100 billion. It's the real world CSS. You've come this far. no going back. Now. That's so true. on so many levels there. I think you're like, the index equals one. No, no, keep going hundred. Fine. Just, it's eventually not going to be behind that thing. I love it.

00:31:00 All right. And then the last one, I'm a big fan of design patterns. So this one is avoid using dark patterns. And it says Do or do not. There's no try. And of course there's a Yoda on it.

00:31:11 Very good. Very good. So yeah, these are all the fun all fun these. These are really good covers. Yeah. Always a nice joke, as well as nice been here with you guys. So right as always, Calvin, thanks for joining us. It was wonderful. Thank you very much for having me. Thank you. You bet. Bye Ron. Do later. Thank you for listening to Python bytes. Follow the show on Twitter via at Python bytes. That's Python bytes as in B yts. And get the full show notes at python bytes.fm. If you have a news item you want featured just visit Python by set FM and send it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian rockin. This is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

 <|endoftext|>
Python Bytes Transcript
Episode #20: Finding Similar but Not Identical Images in 128-Bits Via Python
Michael KENNEDY: Hello and welcome to Python Bytes. This is Episode #20, where we are delivering Python news and headlines directly to your earbuds. I’m Michael Kennedy.
Brian OKKEN: And I’m Brian Okken.
KENNEDY: We’ve for a bunch of stuff lined up for you today. I’m really excited to share – especially this first article which is so clever – that you chose, Brian. 
Before we do, I want to say, ‘Thank you.’ Thank you to Rollbar, who’s back to sponsor a bunch more Python Bytes and we’ll talk more about Rollbar later, but thanks, Rollbar.
OKKEN: That’s awesome.
KENNEDY: Yep. 
So, we were just talking about pictures. I have many gigabytes of pictures. If you ran a website that accepted uploads in large numbers of pictures, how do you deal with all that data? And it’s probably a lot of duplicate data, right?
OKKEN: I’m not sure. This is an interesting article. It’s an article from Jetsetter.com and they’re an invitation-only travel community. The article is, “Duplicate Image Detection with Perceptual Hashing in Python.” 
KENNEDY: ‘Perceptual Hashing.’ That’s awesome.
OKKEN: ‘Perceptual Hashing.’ It’s awesome. The idea is, the site’s got a bunch of different pictures of places around the world and they don’t want pictures that are mostly close to each other. For family photos, you’ve got a ton that are close to each other, but I get that there’s a lot of cases where you don’t want things that are almost the same.
KENNEDY: Right. Like pictures of hotels or pictures of a marina to say, ‘Here’s the view out of the hotel.’ If they’re going to have a listing on some location or some hotel and they ask people to upload them, they don’t need a hundred ones from this one view. And if you check out Jetsetter.com, it is an intensely photo-heavy site. I was pretty impressed with the number of photos on that page. 
OKKEN: The idea of perceptual hashing, I was definitely interested in reading about this. I expected it to be a fairly complicated algorithm, but it’s actually ingenious. They use Python and transfer the image down to just a 9x9 square, of gray values even. I don’t get how that’s enough information, but it is apparently enough to determine whether or not an image is close to another image. They do a delta. Can you explain that much better?
KENNEDY: I can try. When I read, ‘We take a 5-megapixel image and we generate a 128-bit hash,’ and that means a thing’s uniqueness, or actually it means similarity which is more important. I was like, ‘Okay, I have to figure this out. 
I guess what they do is they take a large image and average it down to a 9x9, or they say for larger images like 17x17 image. To determine the similarity – maybe somebody’s off by 5 feet to one side or the other to take a picture of a hotel or view or something – but of you average it down to that 9x9, that’s where the similarities collapse into those grids. And you can run an algorithm on that gray scale grid, right? 
OKKEN: Yeah, and the interesting thing is that, of course, it’s clear to me that you can come up with a hash algorithm for an image, but the difference in the hashes is enough to tell you how close the image is.
KENNEDY: Yeah, and it’s actually the opposite that really blows me away. It’s like, 2 similar images that are not the same generate the same hash. That’s what’s the magic. That totally blows my mind. I could see that hash is different, images are different. Images are similar not the same, hash is the same. That blows me away. 
OKKEN: Yeah, and I like that it’s not that complicated of an algorithm and it’s a fun read.
KENNEDY: Yeah. There’s a couple levels of interesting that you brought up this article. One of them that I think is really interesting is when I had first head that, I thought, ‘This is going to be super hard, super computational. Two, maybe this is like machine learning or something like that.’ Two machines, like 2 images given to an AI like a deep learning URL network or something. These are sufficiently similar in ways that people don’t really understand but magic on GPUs and lots of neurons. It works out somehow. 
But the fact that it’s really a simple algorithm is what I think is special about it. It’s like, ‘Hey, there’s still lots of places to be clever and not just throw AI plus GPUs at a thing. 
OKKEN: Yes, definitely.
KENNEDY: And not only that, you get to take it with you. It’s available on GitHub. 
OKKEN: Yeah, they do have it. What is it, pybktree?
KENNEDY: Pybktree, whatever that means. Okay, awesome. I’m sure it’s part of the algorithm. Excellent.
So, keeping with open source projects that you can find and just grab and do cool things with, one of the listeners pointed us towards Google Open Source. In fact, it was the guy from Google Fire, Python Fire, which we’ll talk more about later. He has one of the projects there. 
On Google Open Source, they’ve basically created a listing directory of all the open source projects. Many of the projects still live on GitHub, but this is a place where you can go search and analyze and discover projects from Google, and what’s cool is you can sort by language. ‘Show me the Python projects,’ ‘Show me the C++ projects,’ whatever. 
So, I grabbed 6 or 7 interesting projects. I just wanted to run them down for you Brian. One of them is “subprocess32: A reliable subprocess module for Python 2.” Apparently, subprocess, the built-in, is not reliable for Python 2. I don’t know, but I didn’t know what either. That’s partly why it’s interesting to me but also there it is. That’s cool.
Grumpy, we’ve talked about Grumpy before. Grumpy is Python on Go, instead of Python on CPython. That’s a good one. 
OKKEN: Python Fire, of course. 
KENNEDY: Python Fire, of course, like I pointed out. That’s a way to take any Python object or module and turn it into a command line interface. 
There’s a Python Client for Google Maps Services. If you want to consume Google Maps from Python, do it. 
There’s Hyou, a Python interface for manipulating Google Spreadsheets. That’s cool, right?
OKKEN: Okay, I’m going to have to try that out. That’s neat. 
KENNEDY: Yeah, I’ve seen the stuff for working with Doc XLSX files, the Microsoft Office ones. I didn’t know about the Google Spreadsheet, so this is cool. 
Another thing that’s always tricky for me is working with OAuth. There’s always this like, ‘I’ve got some app, the app needs to go open a browser window and there’s some sort of funky callback,’ and things happen. One of the places that’s especially challenging, I think, is over a command line interface. Well there’s OAuth2L. It’s a command line tool to get an OAuth token. Just let that sink in for you.  
I want to log in as Google, I can do that through my app. I could, basically, create a shell script that through the CLI, get an OAuth token from the user. That’s pretty interesting. 
And also, I talked about the Google Maps API. That sound like that’s something that’s really hard to unit test, or test at all, without actually going to Google. There’s a mock_maps_api, so a small, little app engine app for testing, basically mocking out Google Maps API. 
And last but not least, TensorFlow, the amazing machine learning stuff. That’s about 50% Python, 50% C++ and a lot of GPUs in the action there. 
OKKEN: I don’t know where I read this but I think that this Google Open Source location is not just all projects, it’s projects they consider still active.
KENNEDY: Okay. Yeah, that’s cool. Obviously, you don’t just want a dumping ground, right? Everything on there looked pretty neat and fresh.
OKKEN: It’s a fairly neat interface, too, with wood panels and stuff.
KENNEDY: Yeah, it’s worth checking out. 
OKKEN: What do we have next? Oh, next is me.
KENNEDY: More machine learning-type stuff. 
OKKEN: So, there’s an article from Jason Brownlee called, “How to Handle Missing Data with Python”. This is something that I definitely deal with, measurement values, that I deal with at work. The gist of it is a lot of times you’re dealing with a lot of large or small data sets and some of the values are missing. There’s a whole bunch of different ways you can deal with missing data but the few of them that he talks about are replacing, you know, you have to know what the magic number is. Some data collection will fill in a zero maybe, if there’s no data or some other known number but all your math is going to get messed up if you actually just leave that there. 
So, there’s a couple ways to get around it. One of the ways he lists is using magic not-a-number values. I think Pandas can deal with that correctly and not average those in. 
KENNEDY: I think the thing that’s really nice about it is I can be given a CSV file or some sort of data thing, set of data. I can work my way through it and maybe find the bad data and fill it in potentially, but his fixes are like, ‘You run this one line in Pandas and magic happens.’ And it’s better, right? The fixes are so much better than the fixes that I would come up with.
OKKEN: Yeah, and I do like that he’s talking about different ways to deal with it with NumPy, even without Pandas also, because you might not be using Pandas. One of the ways you would do it with any math package really, would be to… I guess I don’t know how to do that. Never mind. 
You somehow have to find all of the values anyway, and fill them in. One of the ways is if you’re calculating an average, calculate the average of everything else and fill in the blanks with the average number.
KENNEDY: Right, I guess it depends on what you’re going to do. Are you going to average it? Are you going to max in a minute? You could push that through, right?
OKKEN: Yeah.
KENNEDY: Interesting. 
OKKEN: The best solution I think is using the not-a-number and letting the libraries take care of it for you. I wanted to bring this up, partly because anybody that’s working with data collection and doing math with that has to deal with the fact that sometimes there’s not numbers there and you have to deal with it.
KENNEDY: Okay. Awesome. He’s from machinelearningmastery.com, I think. He’s got just a ton of cool stuff going on over there, it’s not just this one article. If you’re into these kinds of things, definitely check it out. 
So, what’s up next is the Hug REST framework. But before we get to that, I want to give Rollbar a hug.
Rollbar is awesome. As people know, I’ve been using them for a long time on the websites and the websites are getting more and more traffic. I recently – I’m not sure whether it was a wide decision or not because I’m really busy with other stuff – I just got really frustrated with the way my servers are working, the way I could move them around and performance and stuff. So, one day I woke up and said, ‘That’s it. I’m converting it all to MongoDB.’ That was last week. That took 3 days of rewriting all my sites to Mongo. I really think Mongo is the right choice and I just love the way it’s working right now, but that was a pretty serious take the guts out of all my web apps and stick in a new set of guts that are similar but not entirely compatible. I spent a little time with Rollbar and they helped me out. Found a few problems where maybe types used to be strings and I could compare them where one was no longer a string. They didn’t compare the same so I got weird errors. Rollbar made it super easy to track that down. 
If you want to have reliability and most importantly, awareness of the state of your apps, plug in Rollbar to your web apps. You can use it in Pyramid, Flask, Django, whatever. Just plug it in and you’ll get notifications right away. 
Be sure to visit Rollbar.com/pythonbytes and you’ll get a special offer to get started there. 
OKKEN: I bet that you definitely noticed those messages, but I didn’t even notice you were mucking with these things and I’m pretty sure that nobody else did; very few people did either. 
KENNEDY: Thank you for saying that, but I actually know how many people ran into problems. There was a couple. I got an email from a couple people saying, ‘Hey, I had this problem with your app.’ I’m like, ‘I know but I didn’t know your email address. I know what your problem was and it’s already fixed.’ I just couldn’t contact them because they hadn’t actually created an account yet. It was really nice to be able to say, ‘The problem you’re telling me about is already fixed. I couldn’t communicate that back to you. Really sorry about that.’
OKKEN: You seem like a big team then, because of that. 
KENNEDY: Yeah, definitely. All the folks here in the cubicle farm were busy. (Laughs)
One of the next things that I want to do is build some nice APIs. I think it’s really an interesting time for the web and Python. There’s a lot of flowers blooming, if you will. We’ve got Pyramid, Django, Flask; those guys are all doing super stuff. Most of my stuff is Pyramid. We’ve got Japronto coming along, Sanic, and another one that I just learned about is called Hug. Hug.Rest. How’s that for a name and a domain?
So, Hug is a Python web framework, just specifically for building restful documented, documentable, versionable APIs. It’s built both for super simplicity and flexibility, as well as performance. I started looking and thought, ‘Wow. This is quite interesting.’
The idea is you can create what an API wants and you can consume it in all these different ways. You can import it as a module or a package into your project and the API that way. You can communicate, obviously, over HTTP as a restful API. Or it also has a command line interface way to expose that. If you write some kind of web app or functionality you want to expose over an API and you also want to call it locally, it’s the same code. 
It’s also written in Python 3. It uses Cython all over the place so it’s super-fast; it’s one of the fastest frameworks out there for these kinds of things. At least the non-Async version, let’s say. 
OKKEN: It’s got a decorator model so the code looks really clean.
KENNEDY: Yeah, and the decorator model is cool because the decorator model will do version-management. You can have Version 1 and Version 2 of the API and have different data formats and it can just co-exist. You get automatic documentation based on that. It will do type annotations and then use the type annotations as part of the documentation and things like that. It’s a pretty cool, simple, little framework. So, hug for those guys. Nice job.
OKKEN: Definitely. 
Speaking of CLIs, I had an example that I’m running with the PyTest book that I’m working on. For the front end of it, I was punting before and not using putting a front end on the application but I wanted to at least put a command line interface in. My first attempt was to go down ArgParse and the particular quirks of this application I needed subcommands and the tutorials I found were out of date and didn’t work. I was having a little bit of difficulty so I went ahead and tried Click. I’d heard of Click before and hadn’t tried it. A tutorial from like, 3 years ago, was about that I needed and it works right away. Half a page a code and my command line interface is done.
KENNEDY: That’s really cool. That’s also decorator-heavy, right? 
OKKEN: In my sublime editor, it’s colored nicely and my wife walked by and said, ‘That’s such beautiful code.’ 
KENNEDY Lovely. Take that on many levels, that’s awesome. 
That’s by Armin Ronacher, the guy from Flask. 
OKKEN: Oh, did he do Click?
KENNEDY: I think so. Click is cool. I’ve done a little bit of work with it and I’ve liked what I’ve seen. 
OKKEN: I also want to try adding a different CLI interface to it as well. 
KENNEDY: Cool.
So, the last one that I chose for us kind of a refresher, back to the fundamentals-type thing. “Python Instance, Class, and Static Methods Demystified”. So, this one is on realpython.com. I went over there and checked it out. I thought, ‘Realpython.com, that’s cool.’ I didn’t realize this is from Dan Bader. We seem to be covering a lot of Dan’s stuff over here and I have more to say about Dan later. 
This was a guest post Dan did for them and I didn’t realize that until I started getting into it. The idea was to demystify what’s behind class methods, static methods and regular instance methods. If you learn classes and inheritance and programming only through Python, this will be obvious to you. But if you come from other languages like C++ or Java or C Sharp or JavaScript, there’s differences to the way Python classes and inheritance works. It worth kind of a compare and contrast. So, he comes up with a class and it’s got a regular method, a class method so an @classmethod decorator and takes a CLS parameter and a static method with an @staticmethod decorator and basically compares and contrasts how they work. 
Some of the things that I think are not obvious when you’re first getting started is like, instance classes, those are pretty straight forward. You call them on instances on all other languages. But the fact that I can call static methods or class methods on instances, that’s a little bit funky. That seems a little bit weird. 
The other one, the main one I think, is why are there 2 things like static method and class method? They seem the same. Why are there 2? When would I use one versus the other? The class method takes a CLS method which is literally the type that it’s on and the static method just doesn’t. But other than that, they seem the same, right? So, if you’re going to, say, interact with a class during the class method. If you’re going to create an instance of the class, you can use the CLS parameter to support inheritance and stuff. 
So, if I got, let’s say a vehicle class – a Tesla car class – that static method could say, ‘Allocate a CLS’ whatever that is, if you called it on a Tesla-static-ish function class method, it would actually change the thing, the type that it knows it is, where the static method is just a grouping. I thought that was interesting.
OKKEN: Does the class method follow, then, the hierarchy? If I declare a base method on a base class, is it available to a subclass? 
KENNEDY: Yes, always. And it’s always true for static methods but the difference is the static method doesn’t really know what pipe it’s being called on, whereas the class method is given the type. So, if you call if farther down on the inheritance chain, whatever level you’re at, that type is communicated to it so you’re told where you are in the hierarchy of the class method. Whereas in static, it’s just a method.
OKKEN: I don’t think I’ve ever used static methods. 
KENNEDY: They’re out there hanging out with their friend, class methods. 
So, I have a quick follow-up from the last show. David Bieber from Google, the guy who works on Python Fire sent us a note. 
You said something to the effect of, ‘Look, Python Fire is awesome but iPython is a serious dependency to take if I just want a CLI.’ I think that’s fair. But he said, ‘Hey, one of our primary plans is to remove iPython as a dependency, we’re just not there yet. 
So, if anybody in the audience wants to help those guys move forward, they’re totally working on that. Python Fire from Google is definitely getting some interesting thinning out and it will be very nice. 
OKKEN: I like to hear that, that they’re working on eventually getting rid of that dependency. That’s pretty cool. It’s something I had mentioned when we talked about Python Fire. Your development time is important, too and putting an interface together with that is pretty fast. So, keep that in mind. 
KENNEDY: It’s not always about optimizing for the machines. 
OKKEN: One more follow up is, we did cover pdir2 or pdir a couple of episodes ago, with the dir colors it prints out. One of the complaints I had was that it didn’t look that great on my black terminal.
KENNEDY: I had the same problem. I like darker stuff and I’m like, ‘Wait, where’s all the words?’
OKKEN: They just updated yesterday (April 4, 2017), I think, and it does have color configuration now. You can drop a .pdir2config file in your home directory. I set my background color to magenta so it was visible for docs and on both black and white and now it looks great. 
KENNEDY: Pdir2 now has themes. Love it.
How’s the book coming? I heard there’s a spotting.
OKKEN: Yeah, so on Twitter the other day a guy named Jacob Jarosz noticed that it was listed on the Pragmatic Publishers website, so it’s out there. 
KENNEDY: I love the cover. The rocket is cool. 
OKKEN: Yeah. A ‘50s sci-fi nerd, so…
KENNEDY: It’s perfect. 
OKKEN: How about you?
KENNEDY: It has been a super busy couple of weeks. I’ve been working on a couple of classes, one of them I’m about to release. By the time this recording comes out, it will be out, so tomorrow basically. A course called, “Using and Mastering Cookiecutter”. A really deep dive into what is Cookiecutter and how you create and manage projects with Cookiecutter. I think it’s going to be a really fun course. 
And also, just a few hours ago, I launched, “Managing Python Dependencies with pip and Virtual Environments”, which Dan Bader came over to join me in writing a class for us over here and we’re shipping that as well. I took that course and I actually learned quite a bit from it. It’s not just like, ‘Pip install. Done.’ It’s, ‘What is the process you use to manage your dependencies?’ ‘What is the thinking and workflow you use to evaluate if a package is worth taking a dependency on?’ And all sorts of cool stuff like that. A bunch of best practices.
I launched both of those and I started selling course bundles on Talk Python training as well. They sort of go along with those. Lots of stuff.
OKKEN: That’s pretty exciting. I’ve got to check out that Cookiecutter thing. 
KENNEDY: It will be out tomorrow morning. For everyone listening, that’s today. But for you Brian, that’s tomorrow morning. The magic of time travel.
Thanks so much for finding all these great items. That was fun as always, Brian. 
OKKEN: It was fun for me, too. Thanks to everybody for all your feedback that you sent. 
KENNEDY: Thanks, everyone and thanks, Rollbar for supporting the show.
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbyes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.  <|endoftext|>
00:00:00 Hey there. Thanks for listening. Before we jump into this episode, I just want to remind you that this episode is brought to you by us over at talk Python training, and Brian through his pi test book. So if you want to get hands on and learn something with Python, be sure to consider our courses over at talk Python training, visit them via Python bytes FM slash courses. And if you're looking to do testing and get better with PI tests, check out Brian's book at Python bytes.fm slash pi test. Enjoy the episode. Hello, and welcome to Python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 248. Recorded September 1 2021. gasp is summer over. I'm Michael Kennedy. I'm Brian I can I'm Paul Everett. Yay, Paul over here. Yay. Welcome, Paul. joy to be here. Longtime listener first time caller. Yeah, I think you made a appearance in the previous show in the live chat. But now you're Oh, yes. The lot. Yeah, trip. Possibly. I talked Python. I can't remember. It all blurs together as prepared as this one. No, now. Now you're on the big stage. So thank you for being here. You know, tell people about the things that you've been up to or what you're doing or who you are. Before we jump into our first topic. I'm a developer advocate at JetBrains for Python and web, which means pi charm or WebStorm. What a great gig. I love my job. I always joke that they should be I should be paying them. But don't tell them. I said that. And how I'm just embarrassed that. Here I am Python bytes. And I didn't get a haircut in time. I know this is a podcast, but there's a video version. And that's right. Looking at Brian rock and the do I feel like I should have been better prepared. Yeah, Brian and I have alternate philosophies. I guess I've got like the night Sneed hair, and Brian's just embracing it. And yeah, I would do that too. Except for mine just looks like a giant, Goofy thing on top my head. It doesn't look cool. So yeah, not so much. Oh, I want to see that. Yeah, it's amazingly bad. Yeah. I've tried to automate. Alright, but you probably have something amazing to tell us about how right? Well, I do I actually. So this is an interesting article. I want to talk about both adders. And pedantic because we've talked about both of them on the show. And they're both great libraries, I think. And so there's this article that I came across called why I use adders instead of pedantic. And there's actually a lot more in here than just that. So it was a it was an interesting read. starts out right off the bat, talking about basically one of the things that a lot of people think about with that, with the attars is don't have data classes do we need that anymore.

00:02:41 And the students are talking about not talking about pedantic but talking about data classes. And that data classes really came about as a subset of the adders functionality. So it's really pretty easy to go back to using adders. If you're if you're familiar with data classes, it should be easy. And actually, there's a lot of reasons to use adders instead. For one, they're just faster, which I didn't know that they were faster. But there's some examples about a lot of the boilerplate and stuff that goes into data classes that we don't really think about, but the adders is pretty, pretty tight.

00:03:20 Also, address has more features and has some validation code that isn't, isn't around for data classes. So that's interesting. So then then getting into talking about pedantic. So that the, we think of adders as kind of like data classes, but it does more. So adders. This, this author summarized, adders is a library for generating the boring parts of writing classes. And like, gosh, the equals and not equals that kind of stuff, right? Yeah, property and also, like thrown into validation if you want so you can opt in. So putting in some validation, you can set that up.

00:04:01 There's and there's a lot of stuff that adders does. I mean, it's a lot more than that. It's a it's a pretty full library also. But what you get with pedantic is you get that with the classes that byte antic provides, but you also have the validation library and structuring and and structuring and conversion to and from like from from a different type, like say Jason, into

00:04:26 into a pedantic class. And all these components really are with adders. You can do all of that. You just you you opt in instead of instead of having to opt out of it. And it's kind of a really interesting take on that. And I, I thought of it as kind of like, you know, I've got a lot of I've got a great screwdriver. I've got great knives. But I don't think of my Swiss Army Knife as a great anything. It's just that it has everything. I don't think it was that harsh of a comparison but we also think about

00:05:00 With like Jango and flask where flask is kind of build up your own framework, and Django has a lot of built ins already. There was, it isn't even that simple. There's also some, there was an example of

00:05:13 some of the validation that's just that is built into to pedantic that just seems wrong. Like the example was, if you've got a list of 1000 integers, do you really want by dantec to go and you pass in a list of integers? You want to make sure it's passing in a list. But do you want to want it to go through and make sure absolutely all 1000 elements is an integer? You might, in which case, you're in luck, because that's what it does. But if you don't want it to do that, because it's that's just too much time. You're out of luck. The other Well, you also got to remember the the origins of pedantic were about accepting input from arbitrary things on the internet. Oh, yeah. Well, and when your your goal is like, I'm accepting unstructured data from random endpoint on a random, like, a different level as described Tegrity. I loaded this off of a JSON file, and I know the act. When I first read it, what was it last week? Right? It's gonna be something interesting as well, right? At least that part, maybe when you scroll down, it'll show some results of the class generation, which and how the adders generates a lot less magic than the pedantic generates. Yeah, yeah. So that's the that's the generated, yeah, errors class and the generated by antic class. So it's, it's around validation.

00:06:37 Yeah, it is interesting. The other other aspect is making sure that that data is validated when it's set, not just when it's created. And I think I got lost here. But I mean, correct me if I'm wrong, but I think it's that pedantic, only validates on creation, whereas you can set adders to be validating on setting values as well. But I could be wrong. I believe you're right, I went and looked up a ticket in pedantic

00:07:07 I didn't read the whole thing about it. But these are hard conversations. There's no free lunch. And this article, I thought was a fair treatment about the topic. Yeah, the conversion bit was a little interesting, like for instance, um, take conversion. So if you pass in daytime, two pinup model, pedantic already has daytime conversions built in, so a lot of medically converted. But if you are using like pendulum, which is a subclass, that class is a subclass of daytime, you're going to get a wrong conversion, it's just going to do it wrong. Because it'll, it'll assume it's a date time and not a pendulum object. So that's interesting.

00:07:51 Yeah, anyway, definitely. Something to think about of the build your own versus having it all in one. But, but I definitely think there's places for both, like Michael said, especially with input validation on the, on the web, if you know what you're doing. Definitely, I think maybe you could roll your own or use all these adders and other tools. But if you're just sort of playing it, and you're just getting started, then why not try and paint into bits? It's a great place for that. Yeah. The other thing is about the open API specification stuff with the Titanic, where if you just use them, and you just say, I'm using this, it'll like, automatically generate the documentation, which is a big bonus. It's interesting with the release a sequel model, it's like you can kind of feel like pedantic is its own little mini framework dispatcher thing you with Hook points that you can plug into, and almost treat almost treat as its own little API surface for gluing things together. Yeah, yeah. It's the data exchange. But pretty interesting. Brandon brainer out in the live stream says I think it comes down to the using the right tool for the right job, which is, yeah. Can you open it up? Right, Brian? Yeah. All right. So we all work with the terminal, every now and then right? Or every day, you might be working with the command prompt if you're on Windows, but I strongly encourage you not to do that, you should, you should be switching over to the new Microsoft terminal with like, Oh, my posh shell and then you'll be you'll be in the terminal world as well. So Dunder Dan on Twitter, send us a recommendation, which I want to cover called MK fly, which I love the name. So what is it it is a bit of rust code that extension for your terminal, super easy to install? Like you can brew install it and other types of install it. And basically what it does is it lets you fly through your shell history. Okay, so depending on the show you use, you may use this a lot or you may use this a little you can hit Ctrl r in your terminal, and it brings up a reverse history search. So like if you knew that you type something to do with guests.

00:10:00 It had to do with this repo, you could hit Ctrl R and like type part of the repo name, and that would start to autocomplete those commands. There's a couple of things that are kind of a bummer about that, though. One is, maybe the biggest one is you only see one of those at a time, right? So if I go say, show me my history, I get a line. And then that is the closest most recent match to what I type. Well, what I often might want is like, I, it's kind of like a git clone, but which one was it and I want to see which ones of those are that like, that UI is not fantastic. So imagine if you could type, say git clone, and then hit Ctrl R, and it gave you like a UI in the terminal, that you could scroll through and pick, and then you can see what else to type a little bit more. That's McFly. So it's pretty awesome in that regard. But it also uses a little bit of AI, if you will, a little neural network and some context awareness to help build your in order that I guess price sort is probably the biggest thing is it'll say, Well, what, you know, we're searching for this. But usually when you're in this folder, you're often using this, this version of that command. But if you're in a different folder, you're doing a different version of get. And so it'll try to filter your history based on the context of where you are, what you all think. I think, I think it looks pretty cool. I was, luckily, I don't know why anybody would use the built in Windows command prompt. So I'm even on Windows, I'm using bash. But on my PowerShell Plus py PowerShell is pretty sweet in the new terminal. Carry on, carry on sorry, I don't mean don't derail it. Anyway. Searching history with the VI mode is pretty easy in bash. But I was glad to see that this. This isn't just for for your command prompt, or PowerShell, or anything you can use. You can use this with a Z shell and fish and bash too. So yeah, it works in a lot of them. And so I found it to be quite neat. So let's see, I'll run through some of the features. So you just rebounds Ctrl R, which is kind of nice. But one of the things, it'll store your history in a little local SQL database, so it can do more queries and more interesting stuff, have richer information on it. But it also, like injects the commands that it sees into your regular shell history. So if you stop using it, your shell history for say, z shell is still totally good. That's pretty nice. I will say that. I know you had Brett on recently. And so the rest ification of Python bytes appears to be complete. At this point. You can't go anywhere without bumping into rust. I know you keep bumping into it. It is quite interesting here. And my other comment is that I hate to say but I think the three of us where we've been around so long we were pair programming with Moses in the idea that I really needed a small neural network for my shell.

00:12:52 That's a tough one. Yeah, it's interesting, right? Yeah, I do think I mean, I do think it adds quite a bit of interesting

00:12:59 extensions for this stuff. Like, it's a really cool way to do, you know, I use, oh, my z shell. So if I wanted, like SSH, or I could type SSH and just start hitting up arrow, and it's like a beautiful history map. Like I never use Ctrl. R, because there's a better one, I got to make one of the Yeah, it's, it's so good. But sometimes I don't remember exactly what it is, or there's like a lot of them. And so with this one, it'll give you that drop down list that fills the whole screen. So you can jump through them. You could also delete your like this one I did once, but I never want to actually don't even want it my history, you can delete it from your history, which is kind of nice.

00:13:36 And then also, let's go through some of the other things. So yeah, so for in terms of prioritization, you know, that little neural says it takes into consideration the directory where you ran the command, what you typed before the command. So if you did a git branch, and then a checkout, I don't know, maybe that means something or I don't know, whatever. But like the series of commands that preceded it influence what it suggests and how it orders it, how often you run it when you last ran it, the what you selected in it as it's dropped down. And also its exit status. So if you ran a command, but the command bailed, like it won't auto suggest that command again, because that one's the broken one. You know, I mean, things like that. There's a lot of cool stuff. Let's go. And then I got one for you, Brian down here. So it's easy to install this, you'd like brew install, or where's the opening, apt get install or something? Anyway, if I go down here, there's all sorts of ways to install it. By but here we are. vim key bindings, Brian, yes. Okay. So okay, so you have vim key bindings, which is by default, it uses Emacs. It definitely reminded me of like just firing up Emacs, but for the shell, which is kind of nice. The other thing that I like about it I haven't turned this on yet, is fuzzy searching. So sometimes I'll be like, hey, there's this command. I think it was this but if you get it wrong, and then it's like you get zero help right if you get one character wrong, but this one

00:15:00 And as you get close, when you get close, it will give you some autocomplete on that. That's pretty cool. Yeah, that's great. Because you might like be searching for a file name or something like that, or. Yeah, exactly, exactly. Or if you see that there was an XKCD, I think, or some other comic of somebody. Now it's a different one. But somebody's scrolling through their history for like, an hour to get LS.

00:15:25 No, I'm definitely gonna try this out. This is pretty good. Can you scroll? Yeah. Yeah, go on the XKCD. Now, sorry. Scroll up to the comments. Number of commits. Yeah. 350. Yeah. This has the look of a project that's been refined. Yeah. Yeah, it does. I don't know quite how long it's been around. But yeah, it looks like the oldest, super obvious one is 14 months. Yeah. It's continuous integration was last configured 14 months ago, let's say But yeah, there's no it's the docks. The docks. were two years ago. Okay. There you go. I think this is nice. I wasn't sure I wouldn't want to use it. I'm like, Oh, that's interesting. And then I installed it. Oh, my God, this is this is pretty cool. I like it. You know, all the cool stuff. I like in Python, like pi and PIP x and things like that. They all have a section about using this with fish. You know, and so I I'm always taunted with my lack of boo when it comes to terminals. Yeah, yeah, I made the switch to z shell. And oh, my z shell and not looking back. Love it. Alright, Patrick OBO out in the live stream says, McFly seems really interesting. I'm using z shell for a month now and always thought that control our search lacks features compared to other plugins for sure. Absolutely. And then David pooch on out there says you covered that LS joke in the show. Yeah, that's beautiful. I love that. It's been a couple years, I think, but it was a good one. Well, we don't have a joke history command. So yeah. Oh, laugh who's writing?

00:16:56 Something we never show is textual. So why don't you tell us about that, Paul? Sure. Uh, switching over to me. Yep. We got me. Um, I think it was Episode 241 when you had Brett on, and Brian lead with Wilma Coogan talking about rich. And I'll quote Brian, because it was funny that and it's funny now, how can I not have heard of it. I'm a fan of the podcast. And Brian loves this tool. So I'm going to go back to the well with the thing that was spun out of rich at that time textual, which has been covered. But I want to talk about a particular aspect of it. It was kind of interesting to me as a pattern. And then our little debate where the two of you tell me that I'm wrong.

00:17:41 It really ancient about this. So I've traditionally been against the convention over configuration camp in the world of Python, I come out of kind of the zope tradition, the pyramid tradition. pyramid is like, Oh, yeah, well, here's a configurator object, and it does 15 trillion things that you really ought to care about. But don't, because Christmas, Donna has really great design sense kind of Goldilocks knows exactly what to put in leave out. And I just that whole worldview fits into my head. And so I have this dislike about magic names, magic filenames, magic variable names, can autocomplete on can't refactor can't navigate. If you can't memorize it, and keep it all in your head, you know, in Python is explicit over implicit, blah, blah, blah. I prefer like actual symbols that smart editors can operate on and not have, like, his little bit is going on with data classes right now, each individual tool having to wire out special support for that template language or that this that or the other thing to look for these magic and waves. But we'll have this thread. And actually, I should bring the thread up, we'll have this thread on Twitter, which made me feel a like I was a little bit wrong. And be like he had solved some of the issues that I had with it. So what he wanted to do was remove some boilerplate. And in this, he gave some examples about before and after.

00:19:18 Here's the screenshot of it. So that's before and you see like in here, watch how much this changes. When you go to this, the kind of the noise, the ceremony, a lot of the stuff was reduced. Okay? Now, anybody can look at this and say, well, that's great. If you're optimizing for writing code, if you're optimizing for reading code, and you want to walk back up to this later and know that there are some special semantics that you know, then if the name starts with these three things, then the next thing is kind of a thing that is etc. And so I worry about I worry about that.

00:20:00 Those kinds of things. But he had done it in a way where my PI would still help you SOP and one of the innovations he had that I felt like,

00:20:10 let's see, do you see? Do you see me on Twitter? No, you don't? Because I'm in the wrong window. Sorry about that. Okay, my apologies. So in the screenshot, you see a before and after, Brian, you see that? Yeah. All right, good. before and after. And so he's talking about boiler plate removal in this thread. And some of the decisions such as like this, for any of you that do type annotations, type hints, you'll look at this. And you will say, Oh, goodness, the type hint went away. This is actually a perfect example. And you look at this, and you think I just lost the typing information. And I believe in type hunting? Well, not really, because it can be inferred from it can be deduced. Right? So the example is you've got like a variable colon type, oh, yells, sorry, yes, this is a instantiate the type versus just drop the the type annotation. But when you're when you're allocating up the object right there, like all the editors in my pirate, like, you know what thing equals new object? That's right. It could be that object. Yeah. And in these, like, Titanic battles about type pinning, we forget that, well, you don't have to do all that typing all the time, Python and type checker static analysis can figure this kind of stuff out. So I looked at that I was pretty good. I was probably kind of seduced by that. But let me ask the two of you, maybe the audience as well. Do you think that three months from now, if you walked up to your textual application, would you be able to remember that he had done these things, and that the right hand side was telling you about the left hand side? In order to save a little bit of typing? Did I lose a little bit down the road and have to load up my future self? What do you think about that? Right?

00:22:02 Well, I'll tell you what I'll say what I think, is there a separation of where this happens, like on the example that you're showing here, like object or variable equals new object, I never need help with that, I get super clear what that type is all the time. where it becomes not so obvious to me is where I've got like, a class or something, it's got a field and then I'm, I'm creating that object and passing it in. If my PI gets still telling me, oh, this, this thing is one of these because the only time you ever use it, it's always passing this type. But that's a separate file. And I'm not looking at it side by side, then to me that like starts to add additional work for me to keep track of in my mind, the other one I would say, is the autocomplete test. If I'm working with thing, I say variable dot and it goes through, there's a list of things, there's a good chance I don't care about anything else, right? Like, did it autocomplete the thing? And did it tell me if I put the wrong property field whatever on it? Because it knows what that list is? Right? The Magic name changes later, will I get a red squiggle? Yes, exactly. will, will the editor know that it was broken? And well, it helped me write it. So I don't have to look at the docs, I don't have to go to the source. I just use variable dot and I just keep rockin until I really need to understand something. Yeah, I would say that that's where I come down on it. The third thing is, if this is not relevant here, necessarily, but if you're doing something like SQL alchemy, or Mongo engine, or Django ORM show often what they do is they have like two flavors of the thing. I'm creating a class, the class has a field, it's called email. Oh, wait, no, what is it? It's been set to a new Mongo engine field of type string that has a regular expression on it? Wait, that's not what, that's not what I get what at runtime at runtime, I get a string at code time I get this. So for those, I will say, field, colon type is string equals Mongo field is a Mongo string or whatever, or SQL alchemy column of type string, because I want it, I want it to be explicit that it's not really what it says there. Because often the editors will like give you like Column Information, which doesn't make any sense. Anyway, that's a long answer, but I gave Brian some time to think about his position here. Um, I'm actually just, I'm very impressed with wills design decisions. Yeah. A lot of things. And I am, like I, there may be some magic hidden in there. But I would rather have the less code to look at. So

00:24:36 let's go to look at means less things to get wrong. As far as I'm concerned. I am coming down with you on this one. I've been working for a long time on kind of a long project about static analysis and Python templating. That is driven by type hints and looking at what he's done has made me step back and think wow, there is some there's some

00:25:00 Some things you can do without throwing out type pinning them improves the readability and removes the boilerplate while keeping people on the rails back to what you said about wills design decisions. Looking inside the code of textual is really fascinating to me. Fascinating enough that first today will announced that he is changing his job status so that he can work for the next three months on open source completely rather than at night, and is looking to meet a target for GitHub sponsorship. So let's all go out there and sponsor him so we can get these delicious looking treats that he keeps giving to us. But second, I'm interested enough that I want to join the freakin project and learn from him. I mean, a reactive system. He's got one. Yeah, I wouldn't even know how to write a test for it. And he's got that too. So I'm with you on that. I love the way he writes his code, the way he talks about his thinking in public while being a gentle and encouraging public figure. Yeah.

00:26:06 Absolutely. Well, very, very cool stuff. There's a lot of neat things out there. And I think a lot of people's reactions are like astonishment. Like, wait, that's a terminal. That's insane that it does that.

00:26:17 Yeah. Ah, on to the next. Speaking of testing,

00:26:23 either. Have you ever used doc test? Paul? Yes, I have. So I way back when when I started, started blogging about testing, I thought I thought it'd be fun to compare

00:26:37 test frameworks, because I wrote my own wasn't fun. So I, I looked at unit test, I looked at doc tests, I looked at pi test, and nos, also.

00:26:47 And I actually thought, you know, maybe just I didn't think it would go very far. But I tried to use doc test as a as a

00:26:58 end to end test tool.

00:27:00 It was difficult. And there's still some cool things about doc tests. So if people are unclear what doc test is, Doc test is a package that's built into Python that you can write, you can use it by saying Python dash m doc test and pointed at a file, one of your source files. And within your doc strings, if you've got things that are like the three, see if I've got it here so that the three arrows are something like the prompt, python repple. And you can type some examples in there. And doctors makes sure that the output really matches what you said. So doctors will go through and make sure your code examples within your code actually work. This is a cool idea. In principle, in practice, it's very painful. And a lot of the pain points come around, well, I forgot to import anything. So you have to, you have to include the imports in there, or I forgot to, there's a lot of stuff that can go wrong.

00:28:01 Now pi test, add some things you can run doc test from pi test, it's pretty cool. What we're talking about now is a new project or a project new to me called the x doc test, and x doc test. It's got a whole bunch of cool features. One of the things is doc test is a regex played based thing it like pulls out the string finds the code runs, it looks at the output makes sure they match. x doc test uses a

00:28:30 whenever the source tree thing. abstract syntax tree. That's that's it abstract syntax tree.

00:28:38 Yeah, so it's actually parsing it better. And there's a whole bunch of cool stuff you get with that. The thing that I read, there's, there's some highlights in there. Like one of the things is continuous string continuation was paint painful, because you had to include the angle bracket things, you don't have to do that with x doc test. The thing that I love the most, though, is one of the defaults

00:29:02 in doc test is it does not do string normals that whitespace normalization, you can turn it on, but it doesn't do it by default. x doc test by default does whitespace normalization. What that means is, if in my code, I cut and pasted stuff and added like a tab or a space at the end of my string doc test will fail that because it like oh that's that string is not the same as whitespace at the end, that I don't care about the whitespace at the end. So one of the things that dar x doc test is just fixes that right off the bat. So it's gonna be way more pleasant just to work with but there's a whole bunch of other cool features of this that that they brought in it has a more sane skip syntax, although they kind of had to read it for a while you have to save plus skip to to start the skipping and then minus skip to turn it off. Yeah, anyway, but it's pretty, pretty neat and flexible. And I think if you're gonna

00:30:00 Start out trying to do doc test stuff, I would totally use x doc test. Plus it has a built in pytest support. So if you have it installed, you can say pi test dash dash x doc test and run it on your code. Run fine. Yeah, I'm very nice, Paul, you're two for two on dictating or what I was going to talk about. But what I really want to hear you do is say abstract syntax tree in a Daffy Duck voice

00:30:28 you know way that'll be in the bonus track. Brett cannon made a sing a song from like, Ren and Stimpy or something like that?

00:30:38 Oh, yeah. Was it that it was? No, it was pinky in the brain. That's what the brain Yeah. Yeah, it's all from the same general genre era. We should do a Ren and Stimpy. skit sometime. That'd be fun. God Ren and Stimpy was awesome.

00:30:53 The peak of civilization? Yeah, the red button. Okay. Don't press it. Alright.

00:31:00 What's next? I'm next with this. But okay. But I want to start with some code, and then tell you more about it. I want to tell you the code and then you can think about how complicated is it? And then what does this accomplish? So here's some Python code it creates a little LED is for like some embedded thing. It imports the LED imports time and approach random it says led equals led number 17. While true, led on sleep one second led off sleep for between 45 and 60 minutes. That's the entire bit of code. What does it do? This is how I automated my standing desk with a Raspberry Pi.

00:31:36 Pretty awesome, right? Yes. So this one comes to us from Joe Ridley Riley. Thank you, Joe. And this is by David Kong. It's apparently he's into sort of hacking his productivity and all sorts of ways. So we got a stand up desk. And he said, I have this cool automated standup desk and push a button for up push a button for down you have presets of like where you like the up where you like the down. But he didn't press it very often. So he's like, Well, why am I not pressing it? Because I am lazy. I don't want to stand up. And then so we put reminders on his phones as you want to stand out because No, I don't want to stand up right now. And then he said, Well, what if it just did it? And I had to like adjust to it right? So long, Andy there's like a couple of buttons, little programmable bits. And he just pried the faceplate off of the control surface of his automatic desk, you know, it was works desk. So whatever. If it breaks, I guess, Brian, pry that off. And he just has a few little like pins in the back. And if you push the button down, it completes the circuit. And he's like, well, really, all I needed to do was stand up, I can push the sit down button when I'm tired of standing up again. And so went through by how do I do this, I just need to connect something that will trigger electrical current on one of these these bits here. So say, well, maybe I could do some little like super micro things, some small things that you know what, actually for five bucks, I can get a Raspberry Pi Zero. And you know, go crazy, you get a case and an SD card and all that from Adafruit for five bucks, and just write some Python code. And then you connect these little, these little pin areas number 17 for example, to circuit and instead of turning on the LED, it just sends a current over to that little thing on the desk and then we'll make it go. Isn't that awesome? That's That's great. I want to do that. Yeah, he is standing desk first though. I know you're I am saying we'll who is in the audience has magic method names. How do I know how can I tab complete? And this thing's like hook it up to terminal 17.

00:33:38 Right, exactly. It's it's pretty janky No, but that's great. That is I've got your a sandy desk stand up desk, it had a different brand, but it looks like the exact same panel and well stay tuned to one of the things is like I don't really need a UI but maybe just a terminal and how do I talk to the Raspberry Pi so um, David goes on to talk about well how he set up an SSH shell over to his Raspberry Pi from his MacBook using a USB cable because he's it's on the desk anyway. And then just writes this little bit of code that I talked about move desktop pi and off it goes so I soldered a few things together and then just taped it to the bottom of the desk. And now you have it going I would contend there's a few minor upgrades that should be added here. Maybe a time check like you may freak a custodial person out

00:34:32 if they come overnight and they go to get the

00:34:36 loan already has been activated. Exactly we get empty like the trash bin under your desk and it goes wrong Jacob Do you would man I would run for it. But if that were me, but you know so maybe like a web service call the check the time or just check the time it goes really just do this during work hours. Like honestly, this was a pre COVID thing, but randomly raises and lowers it or Yes, that's between

00:35:00 45 and 60 minutes on the hour. Okay, that is fabulous. Yeah. If you look at the comments here, this is where you got to hang tight, Paul. So people are digging it. Someone down here a little bit further says I have something called a very desk. But it turns out when I peeled the front off of my very desk, it had exactly the same control board on the inside.

00:35:23 Yeah, so Paul, you if it looks the same, it may well be the same because someone else claims that they did. Now my desk is going to be smarter than me. I mean, I've gotten my watch being smarter than me, but it will just have more willpower than you because you're like, I don't really want to walk here anymore. I got to stand up Fox and the hedgehog. Yeah, exactly. All right. Well, that's all but I thought it was a, I'm always thinking of like, we have these super cool devices that cost like five bucks. And it's they're so easy to program, but I just I don't usually have anything cool to do with them. And this seems entirely attainable. Yeah. Yeah. I think maybe hooking up a height adjustment with with random adjustment to my webcam would be cool. So I could just have different angles throughout the day. What if there's like a pulley system that if that after a moment Yanks the chair, and if you don't get up, it's just gonna dump you like, a little bit more or at work? Exactly. Or squirt gun if he finds you're still sitting, puts my coffee slightly farther away. Exactly.

00:36:23 Alright, Paul, what's your last one? This was a really interesting one for me. I was on vacation in heaven in August. And two things I did was when I was at the beach, I had the beta of Brian's book. And when I was back at my mother in law's house, I was taking my six related Python projects and teleporting them into the future, using the hypermodern, Python cookie cutter. And what do I mean by that? Well, if you're doing a Python package, a library or something that you're going to distribute on pi pi, you know, I thought developments gotten the bar has been raised, let's put it that way on quality control and tooling and things like that. And my good friend Brian Aachen long ago, then minutes mentioned about x doc test, which is also on here, I believe, yeah, x doc test, along with 57. Other things you might want to do like the panda bot, and flake eight, and pre commit, and my PI and black and get home actions and all these other things. And individually, they're achievable. Collectively, they are a go on vacation in heaven, delete your repository and start over. That's what I did. I deleted all my repositories and started over

00:37:48 with poetry and things like that. This cookie cutter isn't just great, because it's a cookie cutter that gets you in the ballpark out of the box. It is a user guide that explains all the decisions made, including the why it's like teaching you how to become a modern Python packager, programmer, someone who's going to distribute stuff. And in fact, there was a blog, a series of blog articles before he did this. Let's see if I can find that. Yeah, so often, you'll see these articles of what you should do. And then you just have to go do it. And this is like, here's what you should do. And then you run this command, and then it's done. But now you know why, indeed, and in fact, I found the part you just described to be more valuable than the cookie cutter. Yeah. Okay, so the last thing I wanted was to be teleported into 57 things I didn't understand. Yeah. And so just for the two of you, if you could look through that list, maybe anybody in the audience, look through that list. How many of these are things? Brian, you've been distributing packages recently? How many are these? How many of these things are in your list of guilt that you're not doing? Yeah, no, a lot of these. A lot of these are great. Some of these, I'd like to add, like, I'm not doing much type checking. I'd like to do more type checking. Sure. I don't some of the choices. I just don't agree with the choices. So I was actually considering doing a fork of this with the choices that I would have made like I Knox is a cool project. But I've got first one. Yes, I knew you would say that. I agree with you. I would I would change that. And I know you said you like poetry. I know a lot of a lot of people love poetry. It just doesn't fit my brain. So I don't use poetry, but that's only 5050 on it. I'm fighting it. But there's a whole bunch of other stuff like you said things that maybe you didn't consider, like black and prettier. I don't think I use both. So I don't know what started here gives me the Black doesn't JavaScript in markdown the things like that JSON files non Python. Okay. Don't know what unreleased drafter is. That looks nice.

00:40:00 Whole release drafter thing I don't know if either of you have ever looked at release note automation and Python, but there's a number of packages semi dead. And most of them result in this dance of if you push before this thing runs, you can't get your notes on the tag. Yeah. So this is hooked up with a GitHub action, which makes a draft of your release notes for you as part of the merging a pull request to bump the version number process. It's just fascinating. I would have never figured this out, man ever. Okay, we got some cool comments. One here. It's not as from x. Excellent. Yeah, it's a good point. It's not as hyper monitors, the title suggests it's often pretty solid advice. I'm not sure if what he means is, by solid is a is a compliment or an insult. I think what he means is hypermodern, at least when I read, I was like, the last thing on earth I want is bleeding edge on this stuff. And then I think also List of guilt would be a good title for this. So yes.

00:41:09 One of the things I want to point out the article series. So at the top of this, what we're going to link to there's links to hypermodern Python, it's a list of articles. The artwork in this is a amazing, so he's using some some freely available. Nice, really clunky thing. So yeah, well said. Did you read any of the articles? Oh, well, I read all of them when they when they first came here, but looks like there's some newer articles that I haven't read yet. So yeah, yeah. So the kloudio

00:41:40 Mega kudoz. That's another project I should join. Because there's a couple I would like to teleport him from Sphinx restructured text to Sphinx, markdown. Oh, yeah, definitely, which is what I've done to my, my, each time I did this, I did a commit immediately to replace it. And it's a little bit of work. And so it's a contribution I could actually make. Yeah, Sphinx markdown is the reason why I use Sphinx though. Very good. Very good. So one last thing I'll close with on the X doc test, Brian. I was using it from hypermodern cookie cutter. And I switched to this from Chris withers scible

00:42:21 is Chris is an old time so pizza. And so what he does is he lets you This is not about dot strings in your code. This is about blocks in your snakes blocks of code in your spanks and testing them. But you wind up with this doing something pi testy. And this lets you have fixtures and all these other things available in your doc test blocks. Cool. We'll check it out. Yeah, yeah, super, super cool. And actually on said solid was intended as a compliment. They're very nice. Alright, Brian, you got any extras? To wrap it up? I don't other than just an apology. Sorry. About the solid content. Oh, I know. That was good.

00:43:07 Anything else? Yeah, I had a chance.

00:43:12 I guess at the end of last week.

00:43:15 If you've been to pi con before, you'll know the some of the folks in the PSF Bessie wall shell ski who is been with the PSF forever and ever was with O'Reilly before that. She is now with OSI, the open society.

00:43:34 Say that open source Institute I spent 10 years on a project with the Open Society Institute the other OSI and she is working with OSI on their messaging and fundraising and things like that. And it's a very interesting problem for us in the Python community that similar to the problem we had with the PSF getting people to pay for the comments, if that makes sense. Now, the comments for the world of open source is a lot squishier. and the value proposition is a lot more indirect relative to the world of Python. But I feel like there is a big there there, that the world of open source is still relevant and still has important next problems. There is a commons, there are things that will need to be done and we need a neutral agency that is an advocate for the commons, to to work on things like that. So she and I discussed what's next for the commons, things going on at OSI. If any of you around in the beginning of the words open source, you know, the problems that were being solved then they feel like salt problems now, but that's an open question and sometimes problem

00:45:00 don't have a way of staying salt. So keep an eye on OSI. Keep an eye on what Betsy and Stefan or when others are doing. Keep an eye on open source itself and maybe share some thoughts in the show notes or anything like that. What do you think? Is the big mission for open source? Yeah, maybe you reply to the Twitter thread announcing this episode, which will be out shortly? Probably the best place or the youtube youtube livestream chat would be good, good places for that. How about you, Michael? Jeremy, extra bits? You know, I do.

00:45:36 First of all, I want to just really quickly on the hypermodern thing throughout, remember, we talked about readme.so? Oh, gosh, and this is README as a service. This is good to generate your README and then you can use the release note thing to keep it going. So yeah, I just want to give another shout out to that because idea of README as a service blew my mind. Does it do badges? patches are so hard, I know if it doesn't do badges it better. That'd be an awesome upgrade. Okay, a couple of quick things I want to throw a shout out to these are the bottom of the show notes, active states, you know, they're one of the packagers, distributors have more full featured holistic sort of prepackaged Python distributions. They are running a survey called the supply software supply chain security survey to know supply chain security of like PIP vulnerabilities.

00:46:25 ipi package pollution vulnerabilities and stuff like that are big deals to they're interested in running survey. So I thought I'd give a shout out about that people can fill that out. Python 397, and three 812 are out with I think 397 might have some very minor new things. And three, eight is just a security update. So bug fixes, but the 391 didn't speak to me as anything super major, but you might check it out. There's a few security things in there about like if you pass this to like the IP class or something like that, it could be an issue, but I don't really think there's anything super important there. But no, Brian, this one, I'll be read the little description for you. This one here comes from Shlomi lanton is, Brian, you talked about having a history of all the files and a GitHub repo. And finding out how long the oldest one like we were just looking around, like how old is this project, maybe two years looks like lasting change. So he wrote a thing called grandpa. And the ideas, simply find the oldest modified files in the repo. So you can run it standalone, you can make it a GitHub action, and so on. So it just goes through and finds the oldest files. Last week I talked about wake pi, which will let you keep a process awake. Now keep your computer awake while you're processing your Python processes running. Do you do like a context manager you know, with keep awake, do the stuff you don't want the computer to go asleep during and then when you leave, the computer can go back to sleep. And I said that there was a problem on Mac OS a PR is accepted that things back to good. So thank you for that. Really quick shout out to some. Oh my z shell now my z shell. Oh, my posh shell Look at all that good stuff. Brian. That's, that could be your that could be your PowerShell on Windows. Does it have bi key bindings? If not, I can't use it. Just I honestly don't know.

00:48:16 Anyway, I think it's pretty cool. But people it's not just for PowerShell it just happens to be one of these really nice extensions that also works for PowerShell. Oh, really? Yeah. All right. took me forever to know what posh meant. I'm like posh. What? What shell is that? posh is PowerShell. Right? I probably is actually yeah, I probably it sounds cooler than PowerShell though. Okay. Cool. Cool. All right. I think that's it for for those all y'all ready for a joke? Yes. All right, here we go. So here's a tweet from monkey user, at his monkey user. And they have a mess. They have like this sort of planning diagram here like a flowchart, if he will remember flowcharts. But there's like real high level. And it's about trying to find meaning and as a software developer, so the person enters to the workflow quit question mark? Yes or no? Yes. Do you pay time off?

00:49:11 Then what you can do is you can go in and you change your Java, there's I think it's JavaScript change your JavaScript framework, then you acquire new skills. Are you burnt out? No, you go back, you change your JavaScript framework again, it will starve. Have you changed your JavaScript framework in the last two two months? If no, then you need to change it again. Or on burns? Yeah, you've got some some backlog here. It goes to in progress and that gets shipped it gets done. You get paid. Do you have burnout? Yes. Are you dead? Whoops, not yet. Do you have paid time off? You can change your gyroscope framework again? No. Then you ask how has it changed in two months? If no, then you change it again. Otherwise, you got the backlog? And I thought this part right here right. And you might particularly like is it ready for Qa? Nothing goes to that.

00:50:00 This is like an orphaned input box right there. This should be this should be the logo for HTML. Yes, it actually should. Yeah, this would be awesome. Because it really, it just tells you the churn at the another person walks up and says, Hey, are you trying to find a new workflow for how we're working with? No, I'm trying to figure out why I'm still doing this. Well, there's there's no way to go back to quit.

00:50:27 And there's Yeah, yeah. And you found the easter egg. Yeah. Well, so why is there still a separate QA department, but I love the leveraging of paid time off.

00:50:40 Yeah. backlog. backlogs like an afterthought. If there's nothing else you can do, maybe you can work on the backlog? Yeah, exactly.

00:50:50 Nice. Awesome. Well, thanks. That's it. Yeah. That's it for our show. Brian, thank you, as always great to have you here. And Paul, thanks for joining us. Thanks for having me. Love the show. Love everything the two of you have been doing for the last few years and hope to tell you this in person soon. Probably. Yeah.

00:51:09 Just you said to for me to interrupt you and tell you and your wrong. Mind forgot to so Okay, great.

00:51:16 happy thoughts. Do you promise not to cut your hair until we see each other? Yes.

00:51:22 I wanted to be I want to be cousin it by next year this time.

00:51:28 Alright, love it. All right. Bye. Bye, guys. Thanks for listening to Python bytes. Follow the show on Twitter via at Python bytes. Bent Python bytes as in BYT s. Get the full show notes over at Python by sarafem. If you have a news item we should cover just visit Python by sarafem and click Submit in the nav bar. We're always on the lookout for sharing something cool. If you want to join us for the live recording. Just visit the website and click live stream to get notified of when our next episode goes live. That's usually happening at noon Pacific on Wednesdays over at YouTube. On behalf of myself and Brian Aachen, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

 <|endoftext|>
00:00:00 Hello, and welcome to Python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 200. I can't believe it recorded September 16 2020. I'm Brian knockin and i Michael Kennedy 200. Can you believe it? I actually cannot believe it. That is a ton of podcasting. And everyone's been super supportive. And it's been great to do 200 episodes with you. I don't think we've actually done 200 episodes, because there's a few times you couldn't make it or I couldn't make it or we did some live thing to probably like 195 together. But that's still a ton of podcasting together. Yeah, yeah. This is pretty exciting. I've had a blast. Absolutely. I hope people are finding this helpful.

00:00:40 Oh, I think they will find it help.

00:00:43 We're really good at transitions, because we've been doing it so long. Yeah, did transition into the next topic, actually, the first, that shelter wrote a cool article, this is great on how to be helpful online. And this is the advice that for that he's giving is targeted towards people that are trying to help other people online. So if you answering a question on Stack Overflow, or just even an email question, somebody sends your Twitter or whatever. These are good advice. Actually, it's a pretty long article. There's a lot of ice there. So I want to highlight a handful of them. One of them is answer the question first, there may be other problems with their code that they're not asking about, and you want to get to the point of just helping them with their answer all the rest of the problems on their code. Actually, I think that's a really good, I've seen that people violate that all the time. The second point that he brings up is no third rails. And I don't even know where that term came from. I don't, that doesn't make any sense to me. But going off the rails, I've heard of that. He gives an example of it should be okay for someone to ask for help with a program using sockets, for example, and not have to defend their use of sockets, especially if this specific question has nothing to do with sockets. And he says things like, it's not sockets, it might be pickle, or threads, or Global's or a singleton or something, you might have really strong opinions about some design pattern or some some code that they're using or different libraries. That's not really what they're asking about, you know, don't attack them for their design choices. Just maybe answer the questions to know dogpiling. I think that self explanatory. Once somebody already answered your question, you don't have to answer it slightly different. If you're very different. And you think you're adding to the conversation, of course, speak up, meet their level, this is a difficult one, try to determine what they know and give them a reasonable next step, not the ultimate solution, a sub optimal solution they understand is better than a gold standard. They can't make use of that makes a lot of sense. Because you know, I think also leads to one of the other ones is your gold standard is encased in your context, and your use case and so on. It's like the you're not Facebook, you're not Google, you're not LinkedIn, probably Yeah, you might not need their gold plated solution that's perfect for that situation. Yeah. And also, odds are if you're answering questions, you're more advanced developer than the person asking, at least in that field. So be gentle. The last one I want to highlight is use more words. IRC and Twitter and other online mediums encourage short responses. But short responses are the exactly the kind of thing that can be easily, easily misinterpreted. So use more words, especially encouraging optimistic words. I think this and, you know, also just, there's a lot of stuff people leave out, but they would say in person, they would say, Oh, it's cool that you're trying this problem. Let's look at it this other way. And let me know if you have any other questions, but they don't put that stuff in text. And so I think it is important to use more words and and be more encouraging online. And there's a whole bunch of other stuff like humility and understanding your motivations and their motivations and trying to, you know, build a community. So great advice from Ned, I encourage the next time that you read a question and your mouth drops open in your eyes. Stare in shock. Maybe read this article before it's right. Yeah, it's a nice article and good advice. Thanks, dad.

00:04:26 I don't know how to transition to Magic Man. Magic is awesome. You know what else is awesome. Black is pretty awesome, right? Yeah, definitely. You know, what is not awesome. crappy code is written in a Jupiter notebook that has no like proper editor support, like I don't need black that much because I use PI charm and I can hit command alt L and it formats it basically like Blackwood, or in VS code. I hit Command Shift P and type format document and it formats it basically like Blackwood. But in notebooks, it's just stuck there and it's like permanent icky.

00:05:00 form. And it's like, well how I want to make this nicer. But I don't want to take the effort of like, developing it nicely. I want the tool to just fix it for me, right. And black is really great for that black super popular. But Jupiter doesn't have black. But magic can add black to Jupiter notebook. So there's a cool package called Black cell magic. And so with black cell magic, you can load this is an extension for Jupiter notebooks. And you just say percent load extension black magic once. And on any cell that you want to reformat, you just say percent black and reran the cell. And then it formats it. Hmm. Nice. Nice. Yeah. And so actually, you type that command at the top of the cell, you rerun it, and then it takes that away, so it doesn't stay there, basically. Yeah, so anyway, you run it once. And you can even give like little command line arguments to the format or when you put that special magic command, the percent percent, I think those are called Magic commands and Jupiter. So percent percent black dash l 79. For like changing the line with the 79 characters instead of 80. By default, or there's you can pass stuff off to black that way. This is cool. Like, yeah, yeah. And if you want to know if you like it, it's for you. You go to the website, go to the link I provided and it has a cool animated GIF, and you can see right away Oh, that's cool. I want that or no, that's looks weird. I don't want that. Yeah, I was watching that while you were talking. Yeah, it's cool, right? So it just, it solves a problem like I need to format my Jupiter notebook. Why? Why is this not built in? Well, now it's kind of a sort of plugin and both not part of the story. But can we go back to the whole command alltel thing? Yeah, that's in PI charm. It reformats your code. So it does. Yeah. Okay. Let's check that out. It's pretty sweet. That only works on Mac and it depends on which bindings You know, there's like multiple keyboard bindings and maybe in the Vemma there's like a different one. But if you go and you go find the menu command for like reformat document, it'll show you what the hotkey is, as you can do better than that. You can actually right click on the project and say reformat the project and it'll like traverse down into all the files in a reformat like everything. So I don't know of a hotkey for that. But you can like right click and say, reformat this tree of stuff. Yeah. But if I'm doing a tree stuff, I'll probably use black. Yeah, exactly. Yeah, I never used that. But generally a Command or Ctrl, Alt L, probably on Windows or Linux will do it. But by Excel magic will add it to Jupiter. Now what's super annoying, is you got to type that command every time on a cell. And it does it one cell at a time. So if you had 100 cells, you got a lot of percent percent black, you're typing. There is a guy named Tobin Jones, who wrote NPM Pat package that will use this overtop of it and reformat all of them. And I linked to the repo. But then when I go to it, it looks like it's archived. So I have no idea whether it even works still or anything. I haven't tried that one. So people can check that out. But it would be nice if this was like leveled up to apply at least to a notebook, even if you run it on demand. Yeah, definitely. It would be cool to be able to black phi a notebook. Yeah. But nonetheless, this is better than what it was before. So it's pretty good to me also is really good. What's that learning? Awesome. Python from talk Python training. That is pretty awesome. Yeah. So this episode is brought to you by us again. And if you're in the market to learn Python, we've got a ton of courses, we're coming up on 200 hours of highly edited courses. So that's a ton of content. And we have a special enterprise plan. So if you're looking for team training and team events that are online, digital, yeah, just shoot me a message. And I'll get you up on that. info about that. And pi test. Yeah, definitely. If you are considering a test, or considering testing your code, please do test that. And I would like to actually highlight I brought up somebody made a nice comment today and wanted to bring it up. Kenyans Clark, this came out a couple days ago, says he picked up my book by Python testing with PI test and start reading it was excited. In just one hour later, he posted another comment and said, I've just finished the first chapter and I can see I've barely scratched the surface. So I was already learning something new and in one chapter. So that's Yeah, that's really cool. Maybe help people test smarter, not harder.

00:09:34 Yeah, well, actually, you know, that is the goal of the book. But I also wanted to highlight an article by Luke plant called test smarter, not harder. And this is not like a huge article. It's a it's some nice opinionated, like opinionated testing articles, good opinions there. There's a lot of great advice, but I wanted to pull out a couple of his suggestions, because I don't think that they're they're talked about much

00:10:00 So the first suggestion that Luke has, or the first one I'm highlighting is, write your test code with the functions or methods or classes that you wish existed, not the ones you've been given. So if an API you want to use doesn't exist yet, you just use it anyway. But then you have to make it exist. So this is actually huge advice, I think, and people don't really, I think they think about it while they're coding that you try to write the code you want the API you want, and then make it if you if it isn't there, but forget to do it while testing and while testing is even more beneficial, I think because you've got to be able to read your test code really fast if and understand it quickly. The other thing I want to highlight with that is, if you are responsible for the API, or the API that you're testing against is something you control, then pay attention to those tendencies to say, I really wish I had an easier API, because that might tell you that maybe that new API should exist. And maybe you should add it to your, your interface. Yeah, I think this is the one of the really big values of testing is that it lets you step back from the code you're writing and look at the API or the classes or library or whatever you're building, look at that from the outside and go Does that make sense? Is that the best way I want to use it, it's sort of your first chance to put it into practice, as a consumer rather than a creator of it. So if you're if you don't, if you're not the person in control the API, and you're just using a different API, you can write a wrapper around that to make it make, you know, just highlight the thing that's important for the test, and not have to, you know, pass it a bunch of stuff that doesn't matter to the test, but you have to pass it anyway, I think those are great suggestions. The next suggestion is only write necessary tests, specifically test tests whose estimated value is greater than their estimated cost. This is a judgment call, of course, but it does mean that at least some of the time you should be saying this test isn't worth it. Now, this is a controversial sort of opinion. But I go by this. And if you have trouble convincing the people that you have to convince the to skip a test, you can just say, I'm prioritizing my tests, and that one's lower on the priority. Maybe we can get to it later. The flip side of this, this is good advice. The flip side is that I think is not initially thought of by a lot of folks is you have to maintain your tests as your code changes. If you're, you've got a static API, and it's just fixed and it's on pi pi, it's fine. But if this is an application you're building, you might dramatically change the way things work. And when you do that, you might have to rewrite your test to correspond with that to recreate objects in some new way or whatever. And the more maintenance burden that your tests carry, the less you're going to like writing tests, and the less you're going to keep them running. And so it's not just Is it the worth the value of creating the test, it's worth the value of creating and like living with that test. Yeah, test code has a maintenance cost or more maintenance cost, then production code, also different parts of your different parts of your workflow. So early on in a project, you're really learning how to do the problem, and you're learning about the code. So write tests that help you with that learning. Don't write tests that solidify the API's. It's hard to change. Right? Yeah, right. The ones that help you learn about your code, while you're putting it together. Very nice. So this podcast is pretty awesome. And for Episode 200, I wanted to get something good. A package that's good to talk about, it might be the greatest package of all time, really? Well, it's self proclaimed. So bit of a grain of salt. It's, it sounds really simple. It has a crazy name. And it actually is really quite useful. So this next one is called us as in the United States, the greatest package in the world. That's literally the name of it.

00:13:53 So this guy, yeah, so Jerry Carvalho reached out to us said, Hey, I created this package, I don't know you think it's useful or not? Like, okay, it's kind of interesting. It's a Python package on bi bi, for working with states, states, zip codes, those types of things in the United States. Right. Okay. It seems like this could be motivation for things like the EU, or, you know, some other place where you want to understand the geography of it, but this is really quite involved. So I envision like, Okay, well, maybe it's got like a list of the states and it's got the abbreviation or something. It's got that it's got all the territories, it has the postal abbreviations. It has a Associated Press style abbreviations, which I don't really know it has FIPS codes. I've no idea what FIPS codes are, but they're like lookup codes, different kinds of lookups. You can do the capitals, the years statehood, the time zones. You can even do phonetic name lookup to like if you can't spell Mississippi but you can make Mississippi sounds with letters, you could put that in there, and it'll go and find it. So like it basically do like lookups on misspellings.

00:15:00 But if you get it like sounding right, you can still find it to maybe you accept typed input or some text field that says the state, but then you can do a look up on that to get a more canonical representation. Whether the state is contiguous, like Oregon, or one thing stuck together, or very nice place like Hawaii that's broken into a bunch of islands, where there's continental or not similar difference there. That's pretty cool. If you want the geographic boundaries of them for like geospatial work, it comes with URLs, a shape files that come out of the US Census, at least they're accurate up to 2010. Okay. Well, so one of the flags is is obsolete, I was wondering if there's obsolete states, there are obsolete states. Yeah. So I think more territories are obsolete. I don't think they're states that are obsolete. But there's territories that are, for example, like the Philippines, I think used to be a US territory, but it's no longer something like that. There's a few examples in the docs. Okay. Cool. Yeah, it's, and they also have an environment variable to indicate whether washington dc becomes a state, you can set a flag that will like trigger that to show up. So it's like future proof a little bit. Okay. It has a c li. So you can type states space MD, for Maryland. And you'll get a big long description of information about it well, with the prefix of the great state of yesterday. That's interesting. So is this more than you expected? out of it? Like when I thought I thought it would just be like a list of states and stuff. But like, all this lookup all this information? This is pretty awesome. Actually. It's pretty in depth. Well, no, it's pretty cool. I just didn't I don't know if I'd say it's the greatest package in the room. Oh, all right. Well, there's always a PR, you could always a pretty good package with respect to state management in the world. Yeah. Okay. Now, actually, if you work with states, this seems super useful, regardless of whether you agree with the name.

00:16:54 Yeah, I've got kids that are at home right now. One that started school, but started school, like, online. So it's a it's sort of a anticlimactic, big beginning to school. Yeah. And we still have like some, a lot of time that they're devoting that I'm glad they're doing this. They're allowing teachers sometime during the during the week to prepare for all of this, which means they've got kids have more free time than they had before. So one of the things I was looking for was good learning, software coding related learning activities for kids that are have some spare time, especially early on in the school year. I can't remember who suggested this, somebody on Twitter suggest this, but there's a video series, that's part of Ted Ed, that's called think like a coder. The title says it's a 10 episode series that will challenge viewers with programming puzzles. As the main character, a girl and her robot companion attempted to save the world that has been plunged into turmoil. So I was trying to evaluate whether or not to highlight this on the show. And I got like four episodes in just this morning. Although it says it's a 10 episode series, but I only count nine it's it's you start counting is zero based. So it's off by 100 off, but it doesn't really teach like, I haven't got at least the first four episodes. It doesn't teach, like actual coding, but it talks about the concepts. And that's what I really like about it. It's an interesting story, the animation is pretty good. But eluned introduced words in terms like loops, for loops, until loops, while loops, conditionals variables, pathologic permutations that had to do searches, tables, and recursion, and even some big O notation, and some other things. But these are like terms that in software, and in programming, we use all the time and just assume everybody knows what we're talking about. One of the things I really like about this is just defining and using those terms and an entertaining story, so that when you really do start learning how to code, it's not going to be surprised.

00:19:02 Highlight with that, I'm also reading to my daughter, a book that I picked up called Girls Who Code, learn to code and change the world. And it's a lot of inspiration. There's actually a Girls Who Code project that does teaching and stuff, but I don't know what they're doing right now during COVID. But the book is great. And it's not, it's not even language specific stuff. I think there is some Python in there. But that's not really the focus of it. The focus really is a teaching a lot of the concepts and just getting people excited about it. So I wanted to highlight these two, that's one of the biggest challenges. It's getting people feeling like this is interesting. And this is for me, and I should pay attention to it. So yeah, that's cool. I also want to throw a shout out to code combat.com. That's another really nice place that sort of has some these ideas go through and do like a little dungeon exploration. It's all solve problems. I think it would be a good follow on to this series. Like you've got that

00:20:00 ideas from the series and then you can go right, like super editor supported Python code to like in a little game world. So that'd be fun. Yeah. Yeah. We'll link to all that in the show lately. So this next one is interesting. I ran across this just a few days ago. And I definitely want to talk about this. Because how many programmers out there have this idea of, I've been building this software for other people, for other companies, and I just want to I have this idea. And it doesn't exist, I don't want to build it and put it out there into the world. Like, surely almost every programmers had this this idea, some in some form or other, right? Yeah, yeah. So there's this project that is a pretty new project that goes along its path, and it, it's called keep the score. So keep the scores like online software for scorekeeping. Basically, if you've got like a soccer tournament, or rock climbing, competition, whatever, like those things probably don't exist anymore. But when we could be around other humans, and when we can, again, this is gonna make a lot of sense. You could have like, a little online scoreboard that the parents could pull up and keep track of, or whatever, something like this, right. That's basically what this app is. It's a Python flask app. And they wrote a blog post called the cost of running a Python web app with 55,000 monthly users. Okay, so this explores like, the infrastructure and how much did it cost to actually put it together, how they're doing it, and so on. So I thought it might be fun to just kind of talk through that a little bit, and then do maybe a little comparison over to some of the talk Python stuff. All right. Yeah. So we can over the thing there sites pretty cool. It's hosted on digitalocean. As is all of our stuff, Python bytes, talk Python, whatnot. So that's a really fair comparison, I'll make and using digitalocean and Firebase, currently have around 55,000 unique visitors. And they have their servers and database over on Digital Ocean. And I think they might be using Postgres as a service on digitalocean rather than hosting their own database server, from what I can tell. They also have Amazon Web Services. Yeah. So for the numbers digitalocean is cost them about $95 a month. There's some AWS metabase stuff running over there. It's $60 a month for like reporting and whatnot. They have Google Cloud for a whopping dollar 32 at Firebase,

00:22:19 DNS hosting and $5. Discuss $10. They said, of course, you have a free one, but they put ads there and they don't like that. So $10 they're paying for that? And they said, Well, okay, that's $171 a month.

00:22:35 Is this worthwhile? Obviously, if you were running shorts, or you're taught Python training, like it would be obviously $171. Like no big deal, right? But this guy points out like, they're this. I'm an indie developer. I have no revenue yet. And I'm just trying to get this thing off the ground, and I'm paying $171 a month. But that's a lot of money for just trying to do something nice for everybody. Yeah, I agree. And it's mostly free. And they're trying to figure out the monetization. And yeah, I think is a cool project actually hope they're successful. And it's cool. They're building with Python. But I don't know, it's an interesting trade off. I feel like so many people, I don't want this to sound at all critical of this guy, like what he's doing is to work with him. And that's, that's great. But I feel like a lot of people just in general, not necessarily this example. they envision a world where like, things are so much bigger and more powerful and more awesome. Or more like there's more users and it's like, more awesome. And they got to be ready for that. Because when they get when they land on like Hacker News, and all the people come, they've got to be ready for like a 50 x traffic and stuff like that. And I don't necessarily think that that's how it goes. Or, you know, if you're in the cloud, or something like that happens, push the make it bigger button, and then it goes like, you'll have to do that beforehand. And actually, one of the things they said they they ran into is they started out with a smaller server and they said oh, we want to make sure we have a bigger server, just in case and they upscaled it and part of the upscaling like changes the I think it was probably the file system got larger, the disk got larger. And once that happens, you can't downscale it again, you're not stuck without unless you recreate it from scratch. You can't downscale it again. And so they have two servers. They're like deploying to one and while they're deploying to one, they take the floating the elastic IP and they switch it over to another one that keeps it running. And then they deploy to the other one, and it switches it over to the like there's like this back and forth swap going on. And that's actually how I do it. I talk Python on trading site and stuff like that as well. Having like two servers. That said, This feels really high to me. I'll give you some stats on top Python, just talk python.fm. The website for the podcast, not the training site is not paid on bytes. The reason I chose talk Python is it's very similar to the numbers that this guy is using on the same infrastructure. So talk Python gets about

00:25:00 40,000 monthly visitors. And it's super hard to talk about unique monthly visitors. Because so many developer, especially the developer space, because so many people have ad blocking turned on, which is how you, you know, like, third party cookies from apps like clicky, or whatever, say you get this many visitors and like 50% of that's blocked or something, right? So anyway, you got to kind of estimate like, well, how much is blocked? Is it 30%? Or who knows? So anyway, it's around similar numbers a little bit smaller, in terms of visitors, but the podcast clients, Oh, my goodness.

00:25:34 The podcast, clients are crazy. They're just pounding the server like all the time asking for the RSS feed. So we get about 3 million requests for the RSS feed monthly, that goes through, it goes through Python, it talks, it does some database stuff, it talks over the database, and it gets back an answer. I could cache that as a file. But then there would be like latency and inconsistent. I just, there's no need did not have that happen. Right. But that that does, right. So that comes through, and that's about 120 k requests. So that's 320 gigs of traffic and 3 million requests. Just to answer the question, can I go download the file, which is much bigger? month, weekly, you know what I mean? So that's a ton of traffic, and the server's back in that I have two servers because I do this flip as well. So there's zero downtime most of the time. One of them is a $5. server. And because I wanted to splurge, the main one is $10. Because Hey, this is my whole business. Like it's worth five extra dollars a month, but it can easily handle it on five on five bucks. So for example, I have it pulled up right now. And it's running at like 8% CPU usage. 6%. You know, it kind of varies, right? Right now, if it was on the the $5. One, it would be like 12%, it would still be fine. And then there's also a dedicated MongoDB server that handles everything, but that's like $10 total cost 25 bucks. Okay. Well, 25 is like it. Okay, devil's advocate here. $25 is way better than 171. But even $25. Yeah, I could do to 20. If I wanted if I if I just went down to the $5 server, which I could, but anything that's 20 a month. That's what $240 a month, a year. Yeah, we're trying to do something nice and free for everybody. Yeah, no, I was really lucky that I don't have to pay for the bandwidth for the stuff going through digitalocean because that would be like another thousand dollars a month at least. But that's included. So it's fine. I feel like you could turn stuff down a lot. Like, for example, I think he's using Postgres as a service, which is probably I don't know, sir, there's probably 50 bucks a month, you could probably put that on a $5 server and just manage Postgres yourself. Okay. Is that worthwhile? I don't know, like, how much of a pain is that to manage yourself? versus like, how do you do backups and all that kind of stuff. But in the really early stages, I think you if you're worried that extra hundred dollars a month is a big deal.

00:27:53 Maybe you do it that way. So though, by the way, my AWS bill is over $1,000 last month, so but that's just video delivery.

00:28:01 That's a different story. That's just bandwidth. That's, and that's because of the training. Yeah, yeah. So I could do it cheaper. I could do it a lot cheaper, but it would be less good for people. And for that, I'm trying to pick the best possible option. So that's how that goes. But anyway, I think it's interesting to sort of think about, like, what does it cost and your point about if I'm doing something nice for everyone? Right? It should cost less? Yeah. Well, I mean, you know, motivation doesn't really get into it. But it's a very real thing. It's a barrier to entry for, for people that maybe the mean, they had to scrape together just to get the laptop in the first place to start out coding. And yeah, if you're not in like a Western democratic place where currency is pretty valuable, or the pay rate is pretty high. All of a sudden, $175 could be 25% of your monthly income, which that's a huge number, right? Yeah. Yeah. So it could definitely vary depending on where you're located. Yeah, anyway, pretty, pretty cool. I think it's worth looking at and digging into, and I wish them the best of luck with this project, because it seems cool. And it's built Python. Finally, if you want to hear like a deep dive into all this stuff that I was talking about, Dan Bader, and I had a long chat about the infrastructure behind talk Python, and some behind real Python over on top python 215. All linked to that as well. That's pretty serious, man. We should do something funny. Yes. Tell me a joke. Okay, so somebody shared this with us on Twitter. It originally netlify posted it. It's a conversation between two people. Oh, no, we lost the hackers. Where did they go? I don't know. They just ran somewhere. Ah, they just ran somewhere. That's so awesome. Because I didn't get that joke reading it. But when you say it like oh, yeah, perfect.

00:29:46 Well, I'm very concerned about making sure that everybody has a happy work environment and that they're safe. And I've had to fill out some contracts and stuff. It's so ridiculous, man. I've had to fill out like vendor stuff for podcasts.

00:30:00 advertising. And they make me go through their stupid vendor onboarding thing at some of these big companies. And I've got to answer like the general vendor information. So what is your information? Like? What is your location? What is your bank account information so we can pay you? What is your OSHA health policy? And is there a chance that somebody is like, Are there dangerous ladders that people could climb? Will it be forklifts? I'm like, Dude, this is podcast advertising. There's no ladders. And there's definitely no forklifts. Why are you sending me this huge 50 page form? I got to fill out like two pages of flattery. Anyway, let's take this and turn it into the programming joke. So you know, you've seen those, like, number of days since serious injury at factory seven are doing great. Nobody hurt this week. So how about this fire programming sign? number of days since I've encountered an array index error, and negative one.

00:31:00 I love this. It's like a joke, right? Yeah.

00:31:05 Negative one.

00:31:07 That's so that's really big. Because you probably well, you don't know how big though, is it a short and unsigned is like a visit short is like negative 32,000. But if it's a long, there's a really huge number. It's like 4.2 billion, 9 billion or whatever the overflow rap is there. They probably just allocated a byte for it. So Oh, yeah. So it's, yeah, it's like 55 or whatever. Yeah. Less than a year.

00:31:34 Awesome. All right. Well, thanks, Brian. Congratulations on 200. Man, thank you. Oh, we overflowed into we're into the 200.

00:31:44 Congratulations, away. Let's just celebrate on 256 Yes, we will. That's gonna be the full cycle. Yeah. Awesome. All right. Well, thanks again. Thank you. Thank you for listening to Python bytes. Follow the show on twitter at Python bytes. That's Python bytes as in be yts and get the full show notes at Python byte set FM. If you have a news item, you want features just visit by thumb bytes.fm and send it our way. We're always on the lookout for sharing something cool. This is Brian Aachen and on behalf of myself and Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.

 <|endoftext|>
Michael KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode #35, recorded July 18th, 2017. I’m Michael Kennedy.
Brian OKKEN: And I’m Brian Okken. 
KENNEDY: We’ve got some really cool stuff to start out with. Do you have any comments maybe, to kick us off with, Brian?
OKKEN: Well, I like to comment on just about everything. But to kick off, we’ve got an article from Philip Trauner, and it’s called, “Python Quirks: Comments”. I kind of like this article. When you’re looking at source code, there’s definitely comments that start with pound (#) which are obviously just comments to other coders. But then also sometimes we have docstrings in there. Some people have learned that you can just put strings or other objects in your code. As long as they’re not referenced by anything else, it just acts like a comment. 
But this is an article taking a look at the Abstract Syntax Tree, and also taking a look at timing them, obviously.
KENNEDY: Yeah, the fundamental question was, ‘Is there a reason to prefer one over the other?’ Is there a performance difference between them? 
OKKEN: Yeah, definitely. I have seen it. I haven’t seen it in a lot of big Open Source projects, but I’ve seen it in just random Python code that I look at from co-workers or whatever. People will comment out. Even commenting out a chunk of code with the three quotes, just to block it out, it’s not good. It actually leaves that object in your code and can slow things down a bit.
KENNEDY: Yes. He did a bunch of testing and the hash or pound comments that actually get out, those literally do not appear in the Abstract Syntax Tree. Once the PYC file is generated, they’re gone; they literally do not appear in the resulting executed code. However, if you have like triple quote for docstrings, then it gets set to the DunderDoc property, I think. But those appear. Those just execute, they get allocated, they immediately get de-referenced and garbage collected. But those steps happen, right? 
OKKEN: Yeah. One of the thing that made me think about it, because I’ve been adding the code examples for the book and I’ve been adding docstrings. I’m curious, I’d like to do a similar test. I’m might take his code example and do a similar test on size of docstrings. If you do a 10-character one liner versus 100 to 200 characters of huge docstring, does it make a difference for performance at all? 
KENNEDY: That’s pretty interesting. I’m definitely a fan of the # (hash) comment; it’s literally 4 docstrings. 
OKKEN: On of the things – and this is outside the article – but I read a comment recently, a discussion about this. It was that docstrings are information for your user, or for the user of a function. The compound or # (hash) comments are information for a future developer. I like that. 
KENNEDY: That’s the, ‘Imagine a psychopath who’s having a bad day 10 years from now, inheriting your code and they know where you live.’ You want to leave them some comments to help them feel happy. (Laughs)
Alright, so do you know what I get if I open up my terminal and I type Python 3-V?
OKKEN: I don’t know, what do you get? 
KENNEDY: I get 3.6.2 because Python 3.6.2 is out, I think today even.
OKKEN: Awesome.
KENNEDY: Very cool, and I was blown away at how much stuff is in here. I think these are mostly fixes. I don’t think there are any new features, that’s coming in 3.7, but – holy moly – there are a lot of changes. It’s pretty interesting. 
I pulled out a few just to highlight and I’m highlighting for a variety of reasons. They broke them into 4 categories here. There’s a few others that I decided not to touch on, like changes to IDLE, don’t care. But security, that I very much care about.
So, the security ones we have these changes and they have a bunch of numbers, you guys can look them up. But prevent environment variables injection into subprocesses on Windows; so, prevent other things from freaking out or taking over what the system looks like for Python. 
Or this one is kind of scary: Upgrade expat copy from 2.2.0 to 2.2.1 to get fixes of multiple security vulnerabilities and all these loops, integer overflow, regressions of other bugs, counter hash flooding. All these things that are probably somewhere in there, there’s a really bad vulnerability. Also, parsing the host, urllib, and things like that. There’s a bunch of security fixes, not just features or whatever.
If you can, you should probably install this. 
OKKEN: Yeah, definitely. From my first glance at it this morning, it just seemed like it’s just better for security and other changes. I’ll definitely install it. But I didn’t see anything that jumped out like, ‘Oh, I was waiting for this. Now I can use it.’ 
KENNEDY: Yeah. I think this is only bug fixes and security fixes. No features until 3.7.
OKKEN: You run a Mac, right? So, maybe I’m just dense. To upgrade you just download the new one and install it. There isn’t a way to just upgrade is there? 
KENNEDY: Well, you can use BRU. I actually installed it off of Python.org. To upgrade that version, I think you’ve got to keep rolling with the next one and run it, that’s fine. If you BRU-install Python 3, then you can BRU-upgrade Python 3. Which is what I’ll maybe do on my next Mac. I’m happy with what I’ve got now. I’m going to try to use Home BRU more. I’m starting to love it. 
OKKEN: So, if you have 3.6.1 and you install 3.6.2, you just have both of them there, right? 
KENNEDY: I think so, but certainly if I type Python 3, now it’s 3.6.2.
OKKEN: Okay. I like having both around anyway for testing multiple versions. 
KENNEDY: Yeah, sure. There’s some tools like Virtual Environment Wrapper, but slightly different that will let you get all the versions and flip between them. It’s pretty cool. 
So, some other ones: Core and Builtin stuff like the parsing of f-strings with backslashes, apparently, was broken. Segmentation faults, when you’re working with dictionaries, those are never used in Python anywhere. When you’re changing them while searching, if Python just goes away, your web app keeps crashing, like all sorts of bad stuff. Ctrl C when your inside of a ‘yield from’ or ‘await call’ gets fixed, and all these different things. 
So, tons of fixes there. The library gets race condition fixes for some signal delivery and wakeup file stuff. The lib2to3 now understands f-strings, race conditions, Windows. This one is awesome. If you work on Windows or you teach people Python who work on Windows, you can cheer for this, this is amazing. Windows now will locate msbuild.exe instead of vcvarsall.bat. That is so much more reliable to find msbuild.exe on Windows, than it is that stupid old vcvarsall.bat thing for the C compilations. So, that means pip install a thing on Windows should get more reliable. 
There’s about 40 more of these types of fixes. I wanted to share the news – how awesome is this – I also wanted to hit on some of those things. Especially the security stuff because we’re coming up quickly on the end of Legacy Python, right?
OKKEN: Yes.
KENNEDY: Legacy Python has to have some of these in there. Like, people discovered these and now here are these problems that are uncovered. In 2020, these problems are going to stay in Python 2. The sooner you can get to Python 3, so that these changes keep coming to you, rather than becoming, ‘Well, that’s a security vulnerability. Sorry you have to live with that.’ Just one more reason to upgrade to Python 3 for those holdouts out there.
OKKEN: Yeah, definitely. And looking at this list, I just have to give a big ‘thank you’ to everybody who worked on all this so that I don’t have to work on things like this. 
KENNEDY: Yes, thank you. It’s awesome. It’s all getting better. Cool.
Alright, speaking of contributing to an Open Source project, a lot of us feel like we’re not good enough or maybe we don’t know enough, or our experience isn’t rich enough, whatever. That’s a huge problem. 
OKKEN: Yeah, I think everybody has gone through that. Definitely everybody that’s now contributing to Open Source has had an initial time where they’ve felt like whether they knew enough about something. So, Adrienne Lowe, who does codingwithknives.com and has spoken at a couple PyCons and other places, she wrote, “Contributing to Open Source Projects: Imposter Syndrome Disclaimer”. Essentially, it’s in places where you have how to contribute to your project. She’d like you to think about adding this little disclaimer to people that maybe don’t think that they’re ready to do it. It’s got great wording. 
“Imposter Syndrome Disclaimer: I want your help. No, really, I do. There might be a little voice inside that tells you you’re not ready; that you need to do one more tutorial, or learn another framework, or write a few more blog posts before you can help me with this project. I assure you, that’s not the case.”
It goes on to tell you to point to your contributing guidelines and then also, to comment about other stuff.
“And you don’t just have to write code. You can help out by writing documentation, tests, or even by giving feedback about this work. (And yes, that includes giving feedback about the contribution guidelines.)”
We talked about this in one of our previous episodes, about the many ways you can contribute to Open Source projects. But I think this is a great idea, to put it right in your contributing guidelines for your project.
KENNEDY: Yeah, really nice work, Adrienne. If you guys were at PyCon, she was the host of the Art Museum dinner. This is really great. She does a bunch for the community and contributes to many projects so I know she’s been on both sides of this. I do think having this on your projects will help. 
OKKEN: She’d like to collect examples, so we’ve got a link in the show notes. Or just get a hold of her and say you taken this and contributing. 
KENNEDY: Yep, sounds good. Nicely done. You can just grab that and just drop that into your project, like a markdown file or something liked that. 
OKKEN: So, Michael, do you have any dark secrets that you want to share?
KENNEDY: I think we all have dark secrets and I don’t really want to talk about it, but it’s time to get it out in the open. So, the next thing I wasn’t to talk about is a pretty deep article from MIT Technology Review called, “The Dark Secret at the Heart of AI”. We’ve touched on this a few times. It’s kind of a nice follow-up from last week.
There’s a huge problem with AI. We’ve had statistical models and we can look at the models and see what it’s predicting. But as we move farther and farther into things like deep learning, the machine doesn’t know why it knows a thing, we don’t know why it knows a thing, but we can teach it a thing and then it does that thing. Even the creators of these deep learning models can’t explain why it makes a decision. You can’t set a breakpoint and go, ‘Oh, this is the F-case, yes of course here.’ There’s none of that. It’s like, ‘I’ve taught it a bunch of stuff and now it somehow knows and then I ask it a question.’ They gave a really interesting example to kick off this article. They said: 
“Last year, an experimental vehicle developed by researchers at the chip maker Nvidia, didn’t look different from other autonomous cars, but it was unlike anything demonstrated by Google, Tesla or General Motors, and it showed the rising power of artificial intelligence. The car didn’t follow a single instruction provided by an engineer or programmer.” 
The basically taught this car how to drive by having it watch humans drive. And then they put it on the road. 
OKKEN: Oh, wow.
KENNEDY: Yeah, and so it was really weird. The results seemed to do what human drivers did, but it did something different. How do you understand it or debug it, or even change it to make those decisions differently? Like, if it crashed into a tree, if it sits at a light or there’s always the hilarious joke that people seem to play on these cars, draw what looks like painted white lines in a circle around it and it can’t get out. (Laughs) But if it does an unexpected thing, how do you debug it or change it? That’ really the secret. Even the developers of AI and AI itself, they don’t know how they work. 
OKKEN: Yeah. When I think about this stuff, I am fairly optimistic about the self-driving cars and I’ll be one of the first to grab one if I can afford one. But there’s always the question of, ‘Okay, if a car comes up to say, decide whether or not to crash you and your family into a tree, or take out a while glob of schoolchildren, what does it do?’ That’s the sort of moral question I don’t know how to deal with, how people are going to debug that.
KENNEDY: For sure. And if you get the AI to do that, how do you know it’s always going to make the right choice? You don’t. It’s probably statistically better than humans, but still it’s an interesting question. They basically say, ‘How do you understand what the system does and why does it make the decision it does?’ You can’t really ask it right now and it’s difficult to design a system so that it can explain what it does. People can’t explain always why they do what they do, precisely. So, it’s interesting.
One of the consequences that might be coming really soon, this is in the E.U., there’s an argument being made that you have to be able to get machines and AIs to tell you why it reached a conclusion as a fundamental legal right. 
OKKEN: Wow. Okay.
KENNEDY: So, if I’m told I have cancer and I go crazy and I burn all my life savings. ‘Oh, sorry. Glitch in the whopper core, you’re fine.’ You want to know why. I’ve I’m denied a loan, if I’m denied the ability to buy a house, if I’m denied a job, these are serious questions.
There’s a lot to cover in this article but the last for us, they said:
“We’ve never before built machines that operate in ways that their creators don’t understand. How well can we expect to communicate – and get along with – intelligent machines that could be unpredictable and inscrutable.”
Crazy, huh?
OKKEN: Yeah. Definitely.
KENNEDY: I’m optimistic with you, as well. But it’s interesting that philosophy and morality is starting to become part of programming. 
OKKEN: We definitely have machines now that I think that more than one person doesn’t understand.
KENNEDY: Yeah, I think the biggest consequence for us is that we are going to have programs that we can’t debug or understand why they do things. That’s going to be a bizarre programming future. 
OKKEN: Before we move on, did you say, the whopper core?
KENNEDY: I did say the whopper core. 
OKKEN: Is there a computer based on a hamburger? 
KENNEDY: No, that’s from War Games. Remember when they had to hack into the whopper core? That machine that they had to teach to play tic-tac-toe. 
OKKEN: Nice reference.
KENNEDY: Thank you.
OKKEN: I always think it’s great that in that movie you can get from Colorado Springs to Bainbridge Island in a helicopter. On like one tank of gas. Not possible.
KENNEDY: (Laughs) Awesome.
Let’s recede safely back to the three A’s of testing pattern and away from this philosophy stuff. 
OKKEN: I loved seeing this. This is an article by James Cooke called, “Arrange Act Assert Pattern for Python Developers”. The Arrange Act Assert pattern is structure for how to set up test cases. This is a fairly gentle, easy introduction basically just telling people to not have big, long spaghetti test code. Your test code should be something structured. This is a decent structure. The arranged part is, ‘Get yourself ready to do whatever you’re going to do’/set-up part. Act is whatever thing your testing and the assert part is where you check. The important thing is try to do as many test cases as you can so that all of the asserts are at the end, so you don’t do more actions and more asserts. 
He wrote a list. There’s other names that people might know it by. ‘Given, When, Then.’ That’s often attributed to behavior-driven development but it’s essentially the same pattern. And I did cover it in a couple of places on pythontesting.net and also Testing Code.
KENNEDY: Yep. The links are both in the show notes for the episode and the article. 
OKKEN: But I’m pleased with more people – more people being one so far – other Python developers writing for targeting developers and teaching people how they should set up their tests. 
KENNEDY: Yeah, and it’s such a simple pattern but I find when I follow up my code, my tests are more focused and a lot less rambly, so I think it’s good.
OKKEN: Yeah, and also you have less chance of something going… a test failing you pretty much know what’s wrong and it might be one of 15 different things.
KENNEDY: For sure. 
So, last thing, I want to cover is to shine a bit of a bright light on the future of Python. Everyone out there listening, you are in a good place let me tell you, in terms of being in Python and working right now. So, there’s another really deep article by the company called source(d). They’re not super Python-focused, I think they do mostly Go stuff. But their mission is to build the first AI that understands code, speaking of AI. It’s pretty interesting.
They wrote this really long blog post. There’s a decent amount of data science and math in there. It’s called, “Analyzing GitHub: How Developers Change Programming Languages Over Time”. We’ve talked before, Brian, about how Python is the #2 most active language on GitHub, for active, non-trivial projects. JavaScript was #1 because everybody has JavaScript in their web apps. 
So, this is a different question but not as similar. What is just the most popular, but how is it changing over time? Where are those trends going to? If people are changing languages, where did they change from? They have these cool Gantt charts. They’ve studied 4.5 million GitHub users, over 393 different languages and 10 terabytes of code. It said, given one of those 4.5 million users, how do you visualize them? How do we think about them? They’ve got a Gantt chart of as they transition from one language to another over time. This is based on an original article by Erik Bernhardsson. He’s at Google and the name of his article is pretty interesting as well, “The Eigenvector of Why We Move from Language X to Language Y”.
OKKEN: I love me a good eigenvector.
KENNEDY: I love me a good eigenvector as well. It tells you where you’re going. 
This is a slightly different approach, more of a data science, less of a statistical approach, I believe. They said, ‘Look, first of all, we’re going to not include JavaScript because JavaScript is spread amongst all these projects.’ My Pyramid project has JavaScript, that Ruby on Rails project has JavaScript. Everything has JavaScript. It’s super hard to make reasonable claims about JavaScript because it’s such a complementary language. They said, ‘We can’t reason about this so put it to the side. Take that for what it’s worth.’ 
They said, ‘We’re going to look at the most popular languages on GitHub’ and they do a whole bunch of work and they come up with this stationary distribution of a Markov Chain, how about that. What they find out is the #1 most stable language at GitHub is Python. And interestingly, its stability level is higher by almost 50% in the amount of code as a percentage of it on GitHub. So, it’s really stable.
OKKEN: What do you mean by stable?
KENNEDY: People, once they get to Python, are least likely to move away from Python. I believe that’s the right interpretation. Then there’s Java, which is also very stable. C and C++. Then PHP, then Ruby and C# and it goes on and on and on. 
They make some claims based on this. They say, ‘Python, at 16.1% appears to be the most attractive language, followed closely by Java. It’s especially interesting since 11.3% of all code on GitHub is written in Python.’ It is more attractive than its level of code would imply. 
They said there are some languages that are repulsive – that’s my wording, not theirs. ‘Although there are 10 times more lines of code in GitHub in PHP rather than Ruby, they have the same level of stationary attractiveness.’ So, much less reason to be attracted to Ruby, but if you’re there, you’re more likely to stick.
They said, ‘What about sticking to a language? Developers coding in one of the 5 most popular languages (Java, C, C++, PHP, Ruby) are most likely to switch to Python, with a 22% chance on average.’ How about that? So, people who like Python are most likely to stay there and people in one of the 5 most popular languages are most likely to move there as well.
OKKEN: I haven’t read this article, but I think it also goes the fact of how easy it is to think of something that you could solve that you could share with somebody else, a project with Python. For instance, I programmed C++ all my career but I never contributed any C++ code to GitHub. 
KENNEDY: Yeah, that’s for sure. It’s a really more Open Source-friendly language as well. 
A few more random stats. They say, ‘Visual Basic developers are very likely to move to C# with a 92% chance of that. People using numerical and statistical environments (Fortan, Matlab or R) are most likely to switch to Python using this measure of analysis, whereas Erik’s original blog was suggesting they might move to C.’ So, pretty interesting little article there about stability and attractiveness of projects.
OKKEN: That correlates with other anecdotal things that we’ve heard, of more people migrating – especially in data science – to Python.
KENNEDY: Yeah, it seems totally believable to me given all the other pieces of information and studies that we’ve seen and talked about.
I think I would say, if you’re thinking about, ‘Where do I bet my career?’ That’s another positive sign that Python’s probably a good sign to hang onto for a long while.
Well, that’s the news. Anything else going on Brian? 
OKKEN: I wasn’t there but EuroPython got wrapped up last week. I did have some Rocket stickers hitch a ride.
KENNEDY: Nice. They blasted all the way over to, where was that, Spain?
OKKEN: Italy, I think. I had a bunch of stickers handed out to promote the book, so that’s fun. I’ve got one more week to finish it and then it will be done.
KENNEDY: You must be looking forward to that. 
OKKEN: Yeah. How about you? What’s going on?
KENNEDY: Awesome. Not too much. I’m really enjoying summer. I’m actually working on some apps, some very interesting apps from my training courses. Not that I’m going to teach but to deliver stuff. More to come on that, right now I’m just writing to see how it comes out in the end. Very fun.
OKKEN: One of the things that you brushed by, I know you talked about it a lot somewhere else maybe, but your “Python for Entrepreneurs” Course? It’s freaking awesome. 
KENNEDY: Thank you, man. Thank you very much.
OKKEN: I think more people should check it out. I don’t think it’s just for entrepreneurs, I think it’s just a good top to bottom Python web, plus front end and back end. It’s a nice thing for people to look at.
KENNEDY: Thank you so much. It’s officially done as of last week. It’s finally ready for the world. Thanks a bunch for the shout out.
OKKEN: Yeah, and Matt McKay helped you with that, I believe.
KENNEDY: Yep, Matt McKay from Full Stack Python. We are happy to be done and we are planning our next thing that we’re going to do. 
OKKEN: You guys did a great job on that. Cool.
KENNEDY: Thanks a bunch. It’s super good to see your book coming out as well. 
OKKEN: Catch up next week.
KENNEDY: Yep, catch you next week and thank you everyone for listening. 
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbyes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.  <|endoftext|>
00:00:00 Hello, and welcome to Python bytes, where we deliver Python news and headlines directly to your earbuds. Or in this case, your eyeballs also, this is Episode 210, recorded November 23 2020. And I'm Brian Aachen.

00:00:14 I'm Michael Kennedy.

00:00:15 Yeah. I'm Jay. Hi,

00:00:16 Jay Miller. Welcome to Python

00:00:18 byte, man. I'm glad to be here. I will say this is hard, because coming up with pics for the show that you normally get all your pics from, is quite the challenge.

00:00:30 I have we pulled the rug out from you like normally you would just listen and then go, here we go. But now it's

00:00:35 not gonna live I went to the search page and typed in like my first three pics. And sure enough, they were taken. No, there's 210 episodes. So we just have been recycling them for like the last four months. We

00:00:46 just started with zero and started over again.

00:00:49 Yeah, if people listen like what do we are on episode 40. Again? Funny, we probably could but you know, anyway, only our best fans would know. And Brian, were live streaming as well. We should tell the non live stream listeners that this might be a thing in the future.

00:01:04 Yeah, this might be a thing. Oh, we're gonna see how it goes. It's kind of fun with live streaming right now. But that's boring for people that are listening to us in the future. But anyway, yeah, we'll

00:01:13 put a link and like a way to know when we're live streaming and stuff like that. So yeah, we'll talk more about that later. Yeah,

00:01:19 well, let's start it off. I want to talk about Kickstarter. So you had a Kickstarter campaign once a long time ago, right? I

00:01:25 did. I've actually done three Kickstarter campaigns, one for a bunch of T shirts, which was a ton of work. It was fun. But I shipping thousand shirts or something was quite the deal. Maybe not that many but many shirts. And I did one to start the training company around the Python jumpstart course, which was awesome. And I did one with Matt MCI for the Python for entrepreneurs course. So yeah, I love Kickstarter.

00:01:48 So I think Kickstarter is a pretty cool thing. And so I was interested to see there was an article called the Kickstarter projects, do they succeed? But yes, the success or failure of them is sort of interesting. I really loved that this was an analysis done with Python data science tools. So it looks like I think it's Aditya it was the author. And it looks like this may have been a university project or something, I'm not quite sure. But I guess it doesn't matter. It's pretty cool article. So he used a kaggle information that went that used all the projects up through 2018 I think. So it's not sort of through today, but that's pretty big data set. There's like 370 plus thousand projects in the data set. So that's neat came from kaggle. And then the article goes through using pandas dataframes to explore the data using describe which is a cool thing that dataframes have to just learn. You can learn quite a bit about your data, just with describe. But then he goes on and he uses matplotlib and Seaborn to analyze the data further. And I really, I kind of really liked that. I've seen articles like this before, I've had to use pandas and stuff and graphics to explore data. But this is data, I actually really kind of cared about learning about Kickstarter, I may want to go back and and use some of the some of the techniques that he talked about in this article to kind of explore it more. I gotta point out, there was an interesting line in there that said the data set goes back has a 1970 listing that said the data from 1970 seems to be bad or insignificant data. I wasn't sure if this was just like a misunderstanding of when Kickstarter started or a joke. But yeah, it wasn't around in 1870.

00:03:33 That's not when the solid kickstart my heart came out, is it? Oh,

00:03:37 I don't know that. That was Motley Crue. I think that was like late 80s.

00:03:40 Yeah,

00:03:41 yeah. Yeah.

00:03:43 The, you know, there's a bunch of punch lines. One of the punch lines is 30. About 35% are successful, although they describe success as meeting the goal. And one of the things

00:03:54 funded, right, yeah, not necessarily shipped, deliver the product, right.

00:03:57 Yeah, well, I'm not sure. But one of the things I love about Kickstarter is the feedback. So I personally think that a failed Kickstarter is also a success, because people, people learn that there's not enough demand to push forward. So that's information. And that's successful, too. But, you know, maybe I'm just an optimist.

00:04:14 There's a lot of research that's been done on like the idea of Kickstarter, and how now Kickstarter is almost 80% marketing and 20% product idea. There have been Kickstarters that have failed that have retried on Kickstarter with the different marketing approach. And like wildly succeeded. So interesting. It would be interesting to see like, out of the ones that did succeed, like how many of them had videos, how many, like how long were their posts, because I think a lot of times people want to jump on these projects, like, hey, fund me, please, please give me money. And it's like, you almost have to do a little bit more work than that. to even get to the bare minimum opportunity of success.

00:04:54 I did a lot of research on Kickstarter success and failure and stuff in the early days and yeah, it's there's a whole thing that you don't see about getting the word out about if you get a high enough growth in the early days Kickstarter will feature you like my first one. When I launched my own training, it became for like, two weeks. My Python course, was the number one software product on Kickstarter. And we got like, 40% of the people who bought the course discovered it on Kickstarter, not because I told them about or someone else told them about it. But the reason it got there is the podcast. The podcast listeners who heard about it all went and quickly funded it. So it Kickstarter saw like this trajectory of going up there. And yeah, it works. Well.

00:05:38 I think that's good information, though. Also, I mean, that's, yes, it's marketing. But yes, selling a product is also marketing. It's also having a platform to tell people about it. It's you can't really sell stuff into a vacuum and expect to make money. So

00:05:53 yeah, one really final interesting thought if people are kind of interested in Kickstarter, there's a fantastic movie, one of my favorite documentaries of all time called capital C, capital, the letter C, the movie, you search for that. It's like, it's in it, and I 2015 following people around who got funded and like when Kickstarter was all the brand new rage, and it's just super cool to see those people go through their It's amazing. Go check it out. But you know, what was not super commonly used back then, at least compared to now is using GPUs for machine learning. And high end computation. Like that's a pretty new thing, right? Not brand new, but it's definitely gaining momentum. Yeah, let's hear about it. All right. So often you hear about Oh, you can just do like pi CUDA, this and CUDA, that and CUDA means Nvidia. CUDA is not a general thing. So when something says, you can do this cool machine learning on GPUs with CUDA, and then I look at my MacBook Pro here, that has an AMD, I don't know, 560, whatever graphics card in it, nope, don't get to do CUDA. No CUDA, I actually do have a gaming sim racing computer that has like a Nvidia card if I really wanted to, but the point is, like, a lot of these laptops and other machines don't have some way to run Nvidia stuff on them. Right. And that's, you know, that takes the wind out of the sails of a lot of data science and computational projects, unless you could bring in the Vulcans. So there's an article which talks about a an open source set of libraries, I guess, articles entitled GPU accelerated Python for machine learning on cross vendor graphics cards. That's pretty cool. Yeah. And so apparently, it uses this project called Vulcan compute the Vulcan compute Python framework. And the idea is that a lot of the modern machine learning libraries like Google, TensorFlow, Facebook's pi torch, a bunch of others, they've all been adopting Vulcan, which is a c++ library as their cross platform GPU SDK. So that means Yeah, I can do it on my computer, or I don't have to have Nvidia or whatever, right. So that's really awesome. However, they say, you know, in order to use this Vulcan library is 500 to 2000 lines of c++ code, just to get like the boilerplate set up. As a Python developer that strikes me as a lot. And how do you feel j? Does that seem like a lot?

00:08:18 Yeah, that's a hard pass.

00:08:20 I'll do my part. Yeah, exactly.

00:08:22 Well, you kind of have like, 1000 lines of code just for a print statement. So Exactly, yeah. Like, that's all the

00:08:28 better files and all. So then there's the compute Python package, which is built on top of the Vulcan SDK using c++ bindings. And that thing is nice and simple. And it's GPU framework, a general purpose graphics processing unit framework, I guess, is the acronym police there. And so if you're interested in building stuff for GPUs, and you don't want to be tied to CUDA cores, then check out this compute Python package. Sounds pretty cool.

00:08:58 Yeah, except for the logo looks like it was like, designed in 1983, or something.

00:09:05 You know, what, maybe I hold on, hold on hold. I think there's a little animation like the Cylon type animation here for the animated GIF with the Python. It has, like ray tracing reflections of the logos. Oh, I kind of dig it, man.

00:09:22 Well, okay. Yeah. Video j split the vote here, come

00:09:25 on, what's it gonna be?

00:09:25 They're probably using all of their GPU power to do something in the background, which is why they couldn't come up with a good logo.

00:09:33 It sounds like a useful framework that people can talk about. And the article talks about, walks you through some examples of using and stuff. I'm not going to go on the details there. But yeah, pretty neat.

00:09:43 I like this is mobile enabled to so you can you can take some of your work on the go.

00:09:48 Yeah, quite cool. I did on your small devices. quite neat. Yeah. Speaking of small devices, day,

00:09:55 oh, you stole my segway. I was gonna say we could use some Vulcan technology to open up a portal. Good, what kind of Portal a PI portal at that? So my pick it we're getting closer to the holiday season, which I can't believe I'm the one that's saying that normally I'm the one that gets angry when people talk about Christmas before Thanksgiving. But yeah, I, I received a little gift from Santa pi. And from there, I thought this would be a great gift for the tinkering. pythonista. It is a PI portal, which I'm actually glad we're live streaming this because I can kind of show it off. Yeah. Nice.

00:10:33 Yeah, do what I think of like circuit Python. And these devices, like it's usually just little chips. And maybe you've got an LED, you can make blink. But that's like a screen. This is like,

00:10:41 all of the little things that we think about when we think of circuit pi on one device. So it has a touchscreen, so not just a regular screen. It's a touchscreen. It has the actual IO that's running right now as a light sensor. So there's a little sensor on the side that if I cover it up, you probably can't see it, but the numbers will actually start changing. There we go. Oh, yeah. And, and of course, since it's running circuit, pi, it is like the easiest thing in the world to to work with. Because at its core foundation, it's just Python. And it's a limited scope of Python. So you kind of have to figure out, you know, what you're importing what you're exporting, but I was able to display my light sensor output in 20 lines of code. And five of those were import statements. So about 15 lines. Awesome. And yeah, I've seen some pretty cool projects with it. So

00:11:37 what's the graphics programming language look like? Is it like draw text? Is it draw pixel?

00:11:44 No, actually, it's object, it's really interesting because of like, they have like actual PI portal module that you can import. And from there, you actually load the screen and you can display full images on. So what you would do is you'll set your background, almost like how the old Atari systems you would come like with these paper backgrounds, and then you would just overlay your actual game data over it, you kind of do that with this like a 2d layered sprite

00:12:10 type thing almost

00:12:12 exactly. You load up like a small bitmap onto the screen. And then you just tell your text where you want it to be placed. And I've seen people do like weather sensors, I actually did a thing with like Twitter lists, so I could check and see like, which Twitter lists that I follow for worker, like having to have the most traffic, you can also throw some audio on there has built in speaker so we played some practical jokes on on relatives by having this having it randomly, every few seconds, just shout names. And they didn't know where it was coming from. So that's always fun. That looks really cool.

00:12:49 Do you know what a cost?

00:12:49 I want to say it's 50 bucks.

00:12:51 Yeah, so not too expensive of a thing. That's a nice one, I like it, I'm still looking for that good use case where I can make some use out of some of these little devices. I think as somebody who does a lot of recording, I really want something I can put on my door. That is have like a sign like recording, please don't open up and yell and ask if I'm recording.

00:13:12 That was the game plan. But I need to get a case for it. And this is actually why Wi Fi enabled. So if you are pulling data in, you can tap into the add a fruit API, and they give you a little dashboard. You can store data there to retrieve later you can pull up data from it, it has its own request library. So you can actually pull stuff down from the web. And that was actually my game plan two was to say, all right, have some little server on my Mac, that whenever I open up, you know zoom or Skype or something like that, it changes the status to now recording and then like, because this is wireless, it would just pick up that signal and change on the door.

00:13:53 Yeah, maybe some serverless function thing where you talk to a database that literally has one entry, recording, not just push it up there, and it's all good to go. Awesome. I'm pretty sure this is gonna exist for at least one of us someday, right? Like, it seems like such a nice thing to have. Yeah, we should do even all this COVID work from home stuff like you've seen those videos of like kids being like crawling in and mom's dragging the kid back out like, okay, so maybe it doesn't work for a two year old. But still, it would be nice. So Brian, I'm not the only one with machine learning here. What do you got?

00:14:22 Well, we've got Yeah, so I guess this is a machine learning stuff. We've got an introduction to linear, an article called introduction to linear algebra for Applied machine learning with Python. Now, I do want to do some machine learning in the future. And definitely, and that's the target for this article, but but you still gotta learn about it. That was bad. was very bad. Actually, I use, we use linear linear algebra is used for communication systems as well. And so I kind of would like to brush up on my linear algebra. I didn't. It was a long time ago when I took it in college. So This article is from Pablo Seras. And it's a big article, he says it's intended as a reference and not a comprehensive review. However, it's a really big reference. This is

00:15:11 a book, it has an epilogue.

00:15:13 Yeah, it is a book. But there's also links, he includes links to both freed and free and paid resources that where he suggests learning linear algebra, including some video classes that are free, which would be neat. But anyway, I think the level that he's got this is really just right for me. And he talks about sets and ordered pairs and relations and functions, then gets into vectors and matrices, and in mappings and matrix decomposition. So it gets pretty deep into the linear algebra. And in some of the examples, he's got diagrams and stuff, which help help me learn the visuals. And he's using NumPy, pandas and Altair for some of the examples. And I think that's pretty cool to show, not only kind of how you do this, how you use linear algebra, are really what it is, and then how to apply those principles with NumPy. And show the examples with Python. It's really kinda nice. So anyway, top is a really useful thing for me. That's

00:16:16 cool. Linear Algebra. It's one of these weird things that like appears in places that you don't expect. It was definitely one of my favorite parts of my math studies. It's the like, advanced linear algebra stuff. But like in 3d computer graphics, the way you rotate, like the viewport and stuff is you just multiply everything by like a rotation matrix. Or if you move something, you multiply it by a matrix, or you make it bigger, smaller, like there's just all these crazy applications of linear algebra. So yeah, it seems pretty neat.

00:16:44 Yeah, a lot of that comes up a lot in, like you said, with, with graphics also, with changing really anything where you've got like massively parallel systems can be described as linear algebra problems. Yeah,

00:16:57 you're nice. Next up, I want to talk about a new notebook framework. We seem to be catering to the data science crowd or scientific computing crowd this this time around. Yeah, but not always. So I recently did a show with Philip gwo. And Sam, and we talked about, I think it was 60 different notebook frameworks. It was Sam Lau and Philip Boyle. Back on episode 268. So you think Jupiter knows there's something else? Oh, there's that Google collab thing? 60.

00:17:29 Well, 60 different wine things, huh?

00:17:32 Yeah. And 61. Now, because there's another one called Deep note. Okay. Jay, have you heard of deep note,

00:17:37 I have actually, I'm kind of upset because this was going to be one of my picks. But I hadn't noticed it yet. I was looking at it for a lightning talk that I gave last week. And I was like, Oh, this is so cool. Too bad. I don't have anyone to collaborate with on this project. Otherwise, I would have tried it. So you beat me to it. I snipe. Yeah,

00:17:59 I got it out of there. Yeah. So deep note is an interesting one. It's Jupiter compatible, like many of the other ones that I sort of indirectly referenced there. But not exactly Jupiter is not like it just runs in Jupiter or Jupiter lab or something. So it, I'm pretty sure like that means import export from Jupiter. And then it runs in the cloud, which is kind of cool. A lot of times it's hosted things, you have to maybe pay for it depending on use it, it's free for individuals. But if you're on a team, when you're in a company, it's going to cost some money. And like Jay was hinting at the main feature of it is real time collaboration, not like just the Jupiter stuff. But you know, let's log in and work on this together and start typing and start reviewing. It has some cool features, like it has code review within the notebook coming. It has built in version control come in, obviously, the real time collaboration that I talked about. And it even has dashboards, kind of like streamlet. I mean, too. And so you can like turn a notebook into an interactive dashboard website.

00:18:57 I'm really excited for the code review stuff. I think that that's something that as Python itself is becoming more and more and more a tool for people outside of the traditional developer space. We still need to have good review tools, and even just a matter of having the ability to do collaboration and say, Hey, can you take a look at this code, and then you could actually see it running instead of just imagining what it's going to do. I think adding version tracking, adding code review. That's just the next step to really teach some of the fundamentals of developer work to skill sets that aren't traditionally designed to work that way.

00:19:38 Yeah. And so much of the Jupiter computation data exploration comes from an individual working on the thing like Jupiter notebooks are not particularly friendly to version control, like GitHub, like every time you make a change, or just the output changes. It clashes in GitHub and things like there's like a merge conflict and all those sorts of things. Do it can be a challenge. So I think you're right, like, moving to a more collaborative, like sort of Google Doc style of world makes a lot of sense. Not for everyone, but for many people.

00:20:07 Yeah. I'm curious if something like this might be useful for, like, say, instructors sort of thing. So yes, you tutor somebody by two people hopping on a on one of these collaborations and working through them. So yeah,

00:20:21 let's cool. J with his last one you got here, you and I've talked a bit about this offline, we have,

00:20:26 this is a tool that I found working on my own blog, it's called image kit. And I'm sure everyone here, you know, listening might or has a good idea of what a CDN is. And the too long didn't read part of it is they also make CDN specifically for images. So you can actually store your images on something like s3 storage, point this CDN to it. And instead of calling that s3, storage, you would just call your CDN URL. And I mean, this is great, because you can do things like compression, you can do responsive types in different sizes. But the thing about image kit that I really liked was that it also does a little bit of machine learning Enos like image magic, behind the scenes. So of course, you can do your own scaling of these images. But you can also do smart cropping. So if you take a picture of your face, and you say, I want the focal point of this image to be my face, you can crop it around your face, and not just around the center of the image, which I think is a really good idea.

00:21:30 Oh, that's cool. That's great. Like, if you had a site where you were accepting, like user profile images, or people were posting stuff you could save, emphasize this, and they don't have to know, how do I crop an image? And why won't it accept a BMP?

00:21:42 Yeah, it's just here, just load this image up to this file storage, and then it's done. It can also do Gaussian blurs, it can do a bunch of the other, you know, little tools, you can overlay text on it, which is like, what I tend to do the most is where I'll take my podcast episodes, add that to the end of the URL for the image. And it creates a smart overlay on top of it grayed out, you know, with the grayed out background and everything, so that I don't have to go into like Photoshop, or, you know, one of those tools, I can just say, here's the URL, here's the text that I want. And of course, because this is Python bytes, it has a Python API, it actually has a ton of API. So like, they have, like, first party API's for most of the primary languages. But if you don't have time to play with the API, you don't have a way to access the API before you render your page. It also has a URL schema. So you can also give all of those commands directly into the URL itself. And it's pretty cheap. I mean, right now, I'm not paying for it at all, just using their free tier. But if you want things like a custom domain name, we can say images dot Python bytes, or something else. That's when you start having to look at it. But I think even then it's not. For an image CDN. It's not too bad.

00:22:58 Yeah, I was cool. And you could put like resizing in there, just like I want the size to be such and such. That's important for like Google PageSpeed, especially on mobile devices. If you want to put like a 2000, whatever, do thousand by whatever picture. You don't want to just show that directly, right. So you can just make it part of the URL even do like responsive design, like use different URLs for different screen media queries and stuff.

00:23:20 It also supports fuzzy or lazy loading, which is really cool to where you can get like a blurred image until it finishes rendering the entire site. And then once it's done the entire site, it'll go back, and then load the high def image. Oh, nice.

00:23:34 Yeah, this is cool. I like it. And you mentioned your podcasts like tell people real quick, your podcast?

00:23:39 Oh, sure. Yeah. So I do a weekly show called The Pit show. Pit is short for productivity in tech. It's been around for a few years. I think, once upon a time, on some RSS feed far, far away. I had Michael Kennedy on on the show. That was fine. I think I'm still trying to get that Brian fell on there as well. But I'm sure we'll make that happen. At some point.

00:24:00 I thought we already did that.

00:24:01 We haven't done that. Never did, but I blamed my schedule. So it's okay. I guess as a developer advocate, now, I get a lot of questions about, you know, hey, what's your journey in tech? How did you do this? Where did you get these things? What's it like, you know, not just for you, but for your family and other things like that. So it's a combination of two things. One, it's my walk through this journey out loud, showing people what I'm going through some of the things that I'm doing some of the things that I'm playing with practicing on, but also interviewing folks from around the internet, from all sorts of disciplines and asking the questions because I can because I have them on my my show for 30 minutes at a time.

00:24:43 That's awesome. Brian, you got to get on there. We got to hear story. So maybe that's, that was the last item so maybe we should just roll into the extras. Jay, you want to keep going you? You said you were a Developer Advocate now. Congratulations. That's an exciting new role you just got right

00:24:58 yeah. Then at that four months now really enjoying it. And of course, because I'm doing this in the middle of the day, I'm gonna take this opportunity to promote to the things that I've been doing a lot, which are our contributor program. I work for elastic, the company behind Elasticsearch, we also are responsible for LogStash and Kibana. I think that was how I got I snuck onto this shows because I messaged Mike, after he said that Elasticsearch wasn't a real database. So, shots fired. But then from there, yeah, if you're doing anything with Elasticsearch, Kibana, LogStash beats, even some of our Python specific clients, we have a contributor program, if you do a blog post video tutorial, let us know, we have a whole platform, there's a link here in the show notes. And if you do enough of it, we actually give you credits to elastic cloud, so you can post some of your projects for free. And then also, we have our YouTube channel, the elastic community YouTube channel where you can see meetup talks, lightning talks, I just the lightning talk I talked about earlier in the show is on there as well. You've got a lot of great folks that are teaching and sharing that information. Here's a single point where you can go and you can watch hours and hours of good information and good content on it. Awesome.

00:26:14 That's really cool. And people are in Elastic Search, they should definitely check that out. Yeah, definitely.

00:26:18 So I think I would just bring up, I've been plugging away at testing code that testing code comm for that's a podcast I do. But I think we're gonna, I'm gonna try to change the direction a little bit. So since um, I really like the short format. As always do it again, but you got to say something so that you get on the video thing. If you like,

00:26:43 testing code, you should totally check out this book. It's called Python testing with PI test. It's by this Brian arkin.

00:26:50 I thought that was how to build rockets with Python.

00:26:53 At first, I was like, man, he needs to talk to those pi torch characters, you know, maybe they can help him, you know, blast off or something. But no, I really, I genuinely say this is probably the most open book that I have, like within reach of me, because I'm always screwing up testing. and nice. Luckily, I don't have to message Brian, every five minutes on how do I do this? I just use his words.

00:27:16 I don't need any extra is more than that. So Thanks, Jay. You Boy, you

00:27:19 said your change your direction, what's your direction,

00:27:21 I kind of want to hear what people would like to do. I was thinking about possibly doing shorter episodes are more focused, like maybe 10 minute episodes about individual topics, but I kind of like to hear from other people about what they'd like to hear. So yeah, just,

00:27:35 I love a podcast only about mocking, cuz that's just the one thing that no one understands. Because nobody should do it.

00:27:44 Hey, how am I gonna fix my dependency inversion, and version control stuff in my Java app without mocking come on? Well,

00:27:52 yeah, Java, you might need it.

00:27:56 Alright, I got a few things. One, my apple, M, one chip, can Apple Mac Mini wait continues. But eventually I will give you all, like mid December. Eventually, I'll give you all of like the state of Python on Apple in one chips. But until I know that I can't share it. So over a talk by on training, we are running, we're participating in the Python Software Foundation fundraiser to close out the year. So because of time travel, that is not announced they're probably not even known yet. But at the time of the release of this, it should be out it starts December 1. So if you visit Python by sarafem, slash PSF 2020. Right, now, it's going to go to a page that says nothing yet. But I'm going to change that redirect to the end on the right place when it goes live. So there's going to be some discounts on some of our courses, half of all the payments will go like half of the revenue, not profits, half the revenue will go to spun the PSF. So I teamed up with the PSF team and a couple other folks like real Python and invader over there and a few others to try to, you know, give some money to the PSF keep them going strong. And last but not least trying something new as podcasters you guys can tell me what you think of this idea. I wanted to give something back to the people that supported the training course the most and the podcast the most. So I launched this thing called talk Python to me pro edition, which basically means it just has no ads. And it has all the history of like back five years worth of shows and the podcast player. So anyway, people can check that out as well at talk python.fm slash Pro. And yeah, anyway, that's kind of fun to put together. And those are all my items, I think, yeah, let's do a joke, man. All right. You asked the question. I'll do the answer.

00:29:45 Okay, why can't SQL and no SQL developers date one another?

00:29:49 I don't know. It's rough. I guess because they don't agree on relationships. so bad. Jay as a professional at a database company. How do you feel about This,

00:30:00 um

00:30:03 I would have said because date time formatting is hard, but I can definitely vouch for this. But even though they can't date, they can still get along. They can still get along, they still have ETL. Come on, to closing this out. Like, I'll post a video of the live stream here. Once it gets recorded and saved, though, maybe we'll do some people can let us know if they think that's a cool idea. If people are wondering why I'm at a weird angle in the dark, it's because of the power of my neighborhood went out. I've been doing this show from my phone. So anyway, nice. If we're always be like that. Good.

00:30:36 Well, thanks a lot. Thanks, Jay. for showing up. I enjoyed having you here.

00:30:39 Thank you. Thank you for having me. No, thanks.

00:30:42 Thanks, Brian. Ever.

00:30:44 Thank you for listening to Python bytes. Follow the show on twitter at Python bytes. That's Python bytes as in be yts and get the full show notes at Python bytes at FM. If you have a news item you want featured just visit by thumb bytes.fm and send it our way. We're always on the lookout for sharing something cool. This is Brian Aachen and on behalf of myself and Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.

 <|endoftext|>
00:00:00 KENNEDY: Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your ear buds. This is Episode 165, recorded January 16th 2020. I'm Michael Kennedy.
 
00:00:12 OKKEN: And I'm Brian Okken.
 
00:00:13 KENNEDY: And this episode is brought to you by DigitalOcean. They're a great supporter of the show. Check them out at pythonbytes.fm/digitalocean. Get $100 credit for new users. More on that later. Brian, we got a lot of stuff to get through. And I want to just let's start iterating through it, man.
 
00:00:27 OKKEN: Okay, let's iterate through it. Also, I can't believe that it's halfway through January, whatever. Okay. So first off, let's talk about iterators. Iterators, generators, and coroutines. So I'm linking to an article. That's pretty much what it's called, by Mark McDonnell. And when I Googled this relationship between coroutines and generators, apparently everybody else knows this is a thing, but I missed out somehow. But this article is a really good introduction to all of this concept and how they all work together. Okay, I've got to start with a beef. It starts out with talking, trying to do a gentle introduction to the iterator protocol with the __iter__ and __next__. I just want people to stop doing that. Okay, muscle through it, but skip that part. It should be an appendix, I think, because people don't do that anymore. Okay, next it talks about generators, which are the same thing as this iterator protocol, sort of, but using the yield function. I know there's differences, but this is how I do it. I use yield for generators.
 
00:01:33 KENNEDY: It's so beautiful because you take the code that's not generator style and then you just throw in yield instead of list append, or set.add, or whatever you're going to do to gather up the results, just replace that with yield. Boom, you're done. It's usually less code. I love it. It's great. I'm a big fan.
 
00:01:50 OKKEN: Like for instance, you just throw things into a loop and put yield in there, or yield the things you have, whatever works. Unbounded generators, it talks about, which means don't convert these to lists, because they don't stop. So it is possible to write a for loop that doesn't stop, and therefore, there's a way to do a generator that doesn't stop.
 
00:02:09 KENNEDY: Right, if you're working on an infinite series, some kind of series, you use a generator for it, it might not stop.
 
00:02:14 OKKEN: Yeah, I mean, there's legitimate reasons to do this. Or maybe it does have an end, but it doesn't fit in memory and stuff like that, so beware. Generator expressions, for some reason I just forget about. They're like list comprehensions, but you put parenthesis instead of brackets, and then it's a generator expression?
 
00:02:33 KENNEDY: They're smooth, right? They don't have the sharp edges of those square braces.
 
00:02:38 OKKEN: Smooth. Oh, wow. That was bad. Okay. The reason why I highlighted this article, really, isn't for this stuff so far. It's a couple things. It talks about the generators can use other generators or nesting generators with a yield from. And this is cool. I didn't know this was a thing. So let's say bar and baz are generators. You can define a new function, foo, that yields from each of these. And it just goes through one and then when it's exhausted, it goes through the other. Really slick. Did you know this was a thing?
 
00:03:11 KENNEDY: Yeah, this was added after the yield keyword was added. So yield was there for a while and then what you would have to do before, if you wanted one of these, you'd have to write a for loop that goes through every item in the sub generator. And then just yield that out. But now you can just say yield from that thing. It's been few versions that it came in. I can't remember exactly when, but yeah, it's a bit of a new feature. Maybe 3.5, maybe 3.4, I can't remember. But yeah, this is great. The place that I've used this most is recursive generators. Right? Your writing a generator and it's going through some data structure, but then you get to the point where you're like, "Well, I need to call it again, but with a different node in a tree." or something like that. Instead of having to loop over that yield, just say yield from, basically, the recursive call. It's beautiful.
 
00:03:56 OKKEN: Oh and break yield from the recursive call, nice. That hurts my head thinking about it.
 
00:04:00 KENNEDY: Yeah, man, think about you know how painful it was to learn recursion? And how funky it is to learn about generators? You mash them together and then the brain explodes. Yeah, it's great.
 
00:04:11 OKKEN: Okay, the article goes on and talks about the relationship between coroutines and generators. Because yield, it's just a thing. It ends up returning a value out of your function. But you can do an assignment, a variable assignment, from a yield. And that's one of the syntax things that works with coroutines. And I got to admit, I got lost at this point. So this is kind of a call-to-action to everybody. I'd really like to have a coroutine tutorial that could show me how to use coroutines for stuff that I really actually might use that isn't async related. And can we skip the iterator protocol?
 
00:04:52 KENNEDY: Or make it an appendix. Like you said.
 
00:04:55 OKKEN: Do you use coroutines? I mean, they look neat. I just don't know how to use 'em.
 
00:04:57 KENNEDY: I use generators all the time and I use async methods, which ultimately are fancy wrappers around coroutines. But I don't use coroutines directly. Not knowingly anyway.
 
00:05:10 OKKEN: Okay, cool. Yeah, I'll have to play with it a little bit.
 
00:05:12 KENNEDY: Yeah, nice. Something that I use a lot is requests. You probably use requests a lot as well.
 
00:05:17 OKKEN: Yeah, lots of people do.
 
00:05:19 KENNEDY: Yeah, and requests is one of these things, you know, last time you spoke about PyPI stats. What's it, pipistats.org or something like that. And requests was certainly right near the top. It was not number one on the list of things being used, but it was near the top. That means it can't take too much change, right? There can't be too many features or changes made to it. So it would be nice to have something that makes working with requests nicer that can change more quickly. So there's this thing that I came across called requests-toolbelt. Yeah, so requests-toolbelt is a tool belt of useful classes and functions to make working with requests easier. And it really does, at the moment, four things. But I think if people are out there and they're like, "I always have to do this with requests." it's these five lines, "I got to make sure I remember to do this right." It would be awesome to just extend this. So this is a small project by someone. I can't remember. I don't think it says really a meaningful name on it. Yeah, no, it's just under request actually. This is not the small project I thinking of, but I think it would be cool to take those ideas, if you see patterns that you're doing with the request library, and fold them in here. So let me give you the run-down on the four things it does. First of all, if you're going to do multi-part form data in coding like, "I have an image file and I want to upload it to the server or to the API." that's annoying, right? It's not super easy. But with this thing it's really easy to go and just basically say, "Here's a file steam." That is field two. It's whatever it is. It's binary, image data, or it's text. And then you just say, "Here's my data, this multi-part form and coder." And boom. It's just uploading files and doing all this stuff it has to do.
 
00:07:02 OKKEN: That's incredible. Just three lines of code.
 
00:07:03 KENNEDY: Yeah, it's really, really nice and you don't have to think about, "How do I do multi-part encoding again?" Just give it a file stream, you're good. The next one is the user agent constructor. So you have to set a header user-agent, but then how do you construct that in a meaningful way? There's a class or a method, I think it's just a method, take some arguments and it will generate the string that is a guess compliant user-agent like your API app or whatever. So that's cool, user-agent instructor? Sometimes you have to, when you're working with other systems, conform to certain SSL protocols, right? We have TLS version 1, 1.2, we have 2, I think, coming a long, but there's different versions of TLS, which is the foundation of SSL, right? So they have an SSL adapter that lets you explicitly set "I want to use TLS 1.2, or 1.0," or something like that if you need to.
 
00:07:56 OKKEN: Oh wow, okay.
 
00:07:56 KENNEDY: That's cool. And then one thing that you can do with requests is you can create a session and then it'll start talking over it probably reuses the connection. I'm not entirely sure of all the things it does, but one of the things the session does is it'll remember cookies and things like that. Well, maybe you want to make a series of requests using a request session that doesn't actually carry the cookies from time, from request one, to two, to three, and so on. So one of the classes in here is a forgetful cookie jar. So if you set the requests session cookies container to the forgetful cookie jar, it implements the protocol, but it always forgets its cookies, obviously. So it's a cool way to clear out, still use sessions, but clear out cookie persistence across calls.
 
00:08:42 OKKEN: Is there a reason to use sessions without cookies?
 
00:08:45 KENNEDY: Well, some websites behave differently if they think they've already seen you or things like that, right?
 
00:08:50 OKKEN: Oh yeah, right.
 
00:08:51 KENNEDY: Maybe I want to test the login function both working and not working and then I want to try it of I forgot my password, but I don't want it to know that I've already actually logged in that sequence. It could be some series that you're testing for or playing with.
 
00:09:08 OKKEN: Okay, so if you're going to log into your session, login is still valid, but you have to go, yeah.
 
00:09:13 KENNEDY: Yeah, or maybe you're going to a place like some sort of pay-walled ad place. And it's like, "Well, you can come here three times, but if you come here more than three times this month, we're going to show you the paywall, you know what I mean? You're like, wow, you're using cookies for that and my cookie jar is forgetful. I don't know. I don't personally have a reason for it, but I can imagine reasons that people might use that for automation or whatnot.
 
00:09:35 OKKEN: I predict that we will hear other people telling us the reasons now.
 
00:09:39 KENNEDY: Yeah, absolutely. They definitely might. So people can visit pythonbytes.fm/165 and down at the bottom they can tell us why do in the comments section. Alright. Speaking of cool, let me tell you about DigitalOcean. They're doing all sorts of good stuff. They're offering $100 credit for new users. So it was $50, it's back to $100, yay. That's great. All of our infrastructure and stuff runs on DigitalOcean and it's been just perfect for years. So that's great. One of the things they recently released is memory-heavy workload droplets. So memory-focused droplets. So you can get up to 8G of RAM for each dedicated CPU and it goes from two CPUs all the way up to, 32. 256G of RAM available on your VM, which is kind of ridiculous if you really need that. But maybe you got a workload that does. So it's really good for high-memory apps like High Performance SQL or NoSQL databases, and memory caches like Reddit's. Maybe some data analysis of lots of data, stuff like that. So check 'em out at pythonbytes.fm/digitalocean. Get $100 credit for new users and support the show. Speaking of data science, what do you got, Brian? What's next?
 
00:10:47 OKKEN: Yeah, speaking of data science, pandas is used by lotS of folks. Not just data science, but I know the data analysis people use pandas quite a bit. And in episode 162, you weren't with us for that, but we covered a project called Bulwark...
 
00:11:03 KENNEDY: Yeah, I listened into that episode as well. And you and Aly did a great job. That was fun.
 
00:11:06 OKKEN: And we had a listener suggestion about another package called pandas-validation. And then I was just looking around to see if there's other projects. One of the others I found was Pandera. So I'll try to briefly talk about these, but pandas-validation, Lance tells us that it lets you create a template for your dataframe, how it should look, and then it validates your entire dataframe against the template. So if you have a dataframe with the first column being string, and second column being dates, and then an address, you can use a mixture built in, validate types to ensure that your data conforms to that. So that looks pretty cool.
 
00:11:46 KENNEDY: Yeah, this is really nice. It's a little bit like, tiny bit like, JSON Schema or something. So you've got these pandas dataframes or time series that it's just full of whatever and then you can throw on top of it cool validation and just it's all at once against the whole collection, right?
 
00:12:00 OKKEN: Yeah. And then Pandera is, I think, a similar project that let you set up types from properties for different columns of a dataframe. And perform validation to make sure, sort of, a schema validation sort of thing also. So they're all kind of solving a similar problem. But I was looking at it and the API and how you use it, between Bulwark, pandas-validation, and Pandera are all very different.
 
00:12:24 KENNEDY: Yeah, they are.
 
00:12:25 OKKEN: I'd really like to hear if there is a common approach or if pandas-validation, dataframe validation, is just not something that's catching on yet, or what people are using. I'd love to hear that.
 
00:12:37 KENNEDY: Yeah, and I just noticed at the bottom of Pandera, they have other data validation libraries and other panda-specific ones like opulent pandas, and panda schema, and pandas validator, and table enforcer, and so on. So apparently, this is a hole you can go down into that I was not even aware of. But I got to say, the Pandera API, where you basically define a column, a data type, and then a lambda function that you give it that does the validation. That's super cool I love that.
 
00:13:04 OKKEN: Yeah, it looks pretty clean.
 
00:13:06 KENNEDY: Yeah, it look incredibly flexible without getting out of control. Speaking of out of control, you know what's a little bit out of control? GUIs for Python.
 
00:13:12 OKKEN: I don't.
 
00:13:14 KENNEDY: Yeah, they're a little bit... And I'm not actually, this time, complaining about their absence or something like that, but one of the best libraries for building GUIs in Python has got to be QT, right? And I was in inspired at the Python Meetup that you're running out in West Portland when we saw Oggy Moore give a presentation. How he used FBS, Fman Build System plus PyInstaller, plus QT, to build nice packaged apps that are GUI apps that he could distribute around. And that was really cool. So one of the things, though, that drives me crazy is we've got PyQt5 we've got PySide2, PyQt4, we have PySide, we have Python4Qt. We have all these different things, right? I think Python4Qt might be the next version of PyQt5 and so on. And I just don't know where to start, right? I'm looking at it going, "Oh, my goodness." You see different examples doing different things. And so I ran across something called QtPy. Q-T-P-Y, QtPy.
 
00:14:22 OKKEN: Yeah, or cutie pie.
 
00:14:24 KENNEDY: I didn't want to say cutie Py, but I don't know. Cutie Py. Cutie Py. So cutie Py, QtPy, actually, one of the things about a lot of these libraries is they're really cool little proof of concepts, but in practice, how real are they? How supportive are they and so on? One thing that seems real and supported is anaconda, the anaconda distribution. And with that comes the Spyder IDE, the whole anaconda continuum data science IDE thing, right? And this QtPy is the foundation of what they're doing to write that. At least it's in their Github repo. So it provides a uniform layer to support all those different libraries that I complained about, with a single uniform API. So it's like an adaptive layer on top of all those things and it figures out what version you're actually running against. And then it just adapts. So you write a code once and then you can run it in all these different ways or against these different examples.
 
00:15:20 OKKEN: Yeah, it's nice.
 
00:15:21 KENNEDY: Yeah, it's cool, right? So this is created by the Spyder development team. And there's not a whole lot to it. Basically, it's like, "Well, here's a simpler way to work with these different libraries because maybe you want a different license or you want to go from PyQt4 to PyQt5." or something like that. 'Cause there's all these different examples built with all these different libraries and they're not exactly compatible. So quite cool I think.
 
00:15:43 OKKEN: Yeah and also, during the presentation at the Meetup, is it Oggy? Mentioned that just he uses that and then if there's a problem with one of these packages, just uninstall it and install one of the other ones. And you don't have to change your code at all.
 
00:15:59 KENNEDY: Yeah, it's cool.
 
00:16:00 OKKEN: This one works. One of the other things that I thought was neat is at the bottom of the ReadMe, they've got sponsors, different sponsors at the bottom. And become a sponsor. I've not seen an opensource project do that before. It's a interesting idea.
 
00:16:13 KENNEDY: Yeah. It is definitely an interesting idea. I haven't seen that either. But quite cool.
 
00:16:18 OKKEN: Maybe I'll try that on my little opensource project.
 
00:16:21 KENNEDY: Well, they also have the GitHub sponsor at the top. Are you using the GitHub sponsor?
 
00:16:25 OKKEN: No.
 
00:16:25 KENNEDY: That's something people can turn on. I think that's really cool that GitHub did that, that people can now sponsor projects through GitHub instead of negotiating some deal separately with everyone.
 
00:16:35 OKKEN: Yeah. Wonder if they're tied together. I'll have to look into it. Anyway.
 
00:16:38 KENNEDY: Yeah, check it out. Alright. So yeah, what's next?
 
00:16:42 OKKEN: Well, I want to shed some light on spreadsheets.
 
00:16:47 KENNEDY: They can be a dark place if you bet sucked down into VBA or too far down there.
 
00:16:52 OKKEN: Yeah. So actually we got a email from Victor Kis, I think it's Victor Kis, K-I-S. He said that he's got his very first opensource project, but it looks darn cool. It's called PyLiteXL and it's on .xls spreadsheet thing that you can read an write spreadsheets with it. So it's a lightweight, zero-dependency, minimal functionality, read, write, or has, other than the standard library, there's no outside dependencies. And you can read and write on modern .xlsx and .xlsm files, and with a very simple interface for getting access to the different sheets inside there and rows and columns and stuff. Actually, it looks pretty cool.
 
00:17:36 KENNEDY: Yeah, it looks totally useful if all you got to do is get in there and get the data. I don't know if it does things like lets you change, say, conditional formatting or other weirdness, but if you just want to open up an Excel worksheet, not a .csv, but a full-on .xls and get the data or the rows or whatever it is you're after, it's quite neat. Well, if you go to the link that you're linking to and just scroll down bit, there's a little animated GIF. And I think it tells you pretty much all you need to know. You just watch it for a second and it's like, "Here's the few steps to go work with this Excel file." It's cool.
 
00:18:09 OKKEN: He's already got documentation up with the API, but I found the most, on the docs, the best way also to get up to speed really quick, is to look at his... He's got a handful of examples for how to do different things and it's like, oh my gosh. If I needed to read Excel from Python, I could get started in a few minutes with this. So it looks pretty cool.
 
00:18:30 KENNEDY: That's very cool. Yep. And no dependencies. That's kind of nice as well.
 
00:18:34 OKKEN: Yeah, I never really thought about why that would be important, but he lists one of the reasons is that if you're going to, a few things, if you're going to compile it into another installer or something using PyInstaller, not having any DLL or other dependencies makes this easier. And then he even says that the library's just a few source files. So if you don't even want to install this as a package, if you just want to copy this stuff into your own source, that that's a option.
 
00:19:04 KENNEDY: Right, yeah, just vendor it and then you don't have dependency either.
 
00:19:07 OKKEN: Yeah. Then you don't get updates, but you know.
 
00:19:09 KENNEDY: Yeah. It's the trade off. Alright, I'm going to tell you about this other thing and at first, it might not sound very exciting, but I'm actually pretty excited about it. I think this is quite cool it's a clever little library. And this suggestion comes to us from Aiden Price. And he told us about some project he's working on using something called Python-Ranges. Okay. So we have range, like the built-in range, and say start equals whatever, end equals whatever, and it goes from the start integer wise up to, but not including the upper bound. But you can't use that range in more meaningful ways. So, for example, if I had a range of 0 to 100, I can't easily ask is x in there, right, if x is a number. Or if I have two ranges and I want to intersect them, how do I do that? But this library takes that kind of basic idea, sort of like series, but with a lot of set operations. You can ask for the intersection of ranges. You can ask for whether or not they're mutually exclusive, things like that. So all the set operations you can do on it. But then it also extends that so you can have a range set, which is a bunch of different ranges or even a range dictionary. So why would you care about that? So what you can do with a range dictionary is you can use ranges as keys. So they example they give, if you have...
 
00:20:34 OKKEN: That's crazy!
 
00:20:35 KENNEDY: I know, but here's the example they give. It's probably abusing the concept of a dictionary, but it's really useful. So if you had an if statement that said if, they use tax or something like that, so let's just say if your income is 0 to 10,000, you're in bracket A. If you're in 10,001 to 20,000, you're in bracket B. And so on. And you have a huge if else, if else, if else, if to test for that condition, you can create a range dictionary where the key is a range 0-10,000. 10,001 to 20,000 and so on. And then some information about it is in the value. And then you can just take a number like 37,215 and get it from the dictionary. Say I want to get that from the dictionary and it'll return. So it'll basically do the test. Is this item in this range as part of the key match of a dictionary?
 
00:21:27 OKKEN: That's brilliant. That's cool.
 
00:21:28 KENNEDY: Isn't that cool? It's got to be abusing the idea of the dictionary, really. But it's pretty cool. Yeah, so it's almost like a switch statement, in a sense. You can take those things, that if else, and replace it with this flat statement of these ranges and then it'll do the comparison in the data structure.
 
00:21:45 OKKEN: Yeah, sweet.
 
00:21:46 KENNEDY: Yes. So there's a bunch of stuff that you can do with these ideas. They got some good examples, but that little example I gave you, I think is probably the simplest one to tell you about because it gives you a good sense of why you might actually use this, right? A lot of times you look for these blocks or these ranges and it's really cool to be able to sort of test in here. You could even do really interesting stuff. I want to know is this thing in any of these five ranges. You could just create one of these range sets or these range dictionaries and just ask is this number in this set. If it is, it's in one of the five ranges that are in there. Right? There's really cool ways to layer these together.
 
00:22:25 OKKEN: Yeah, and especially if you've got that all over the place. For instance, I'm thinking hardware stuff, but...
 
00:22:31 KENNEDY: Yeah, it's got to be in there, a bunch of numbers, and frequencies, and whatnot, right?
 
00:22:34 OKKEN: Right, so if I've got different power levels, for instance, they'll have different attenuators that'll kick in at different power levels, but I don't want those power level numbers to be hard-coded all over my code. So having some central place where I put those in place so that I can just throw in a number and it gets based on that I know what the attenuation is, or something, that'd be great. It's cool.
 
00:22:55 KENNEDY: Yeah, that's cool. It also occurs to me this might be useful for testing, right? Because then your assert statement could have a little bit of ambiguity, right? If there's like, well, long as it's in this range, it's okay, but if it's not it's not. And so maybe that's also an interesting way to simplify testing.
 
00:23:11 OKKEN: Yeah, yeah. Okay, cool.
 
00:23:13 KENNEDY: Cool, well anyway. I think that's a much more interesting project than it just sort of sounds like. 'Cause you're like, well, Python has range built in. Whatever, but it's cool. Yeah, that's it for our main items. What else do you want to tell folks about?
 
00:23:24 OKKEN: Well, I spent some time last night, I think I brought this up, I don't know, last time or the time before, that I have a few opensource projects. Not many, but one of them was lacking some work 'cause it had a bunch of support requests or whatever you call 'em, issues. So pytest-check, I went in last night. I went and cleaned all those up and solved a couple of my inner problems. But one of the things that I ran into that was interesting. I mean, I just kind of wanted to highlight it, is plugin for PyTest. There were other plugins for PyTest. Some of them don't work together very well because of the way they abuse and use PyTest, I'm definitely abusing PyTest hook functions with PyTest check. Intentionally, what it does is it allows you to check certain things within your test, but not fail right away so that you can continue on. And then if any of the checks fail, it actually fails the entire test and tells you all of the failures.
 
00:24:23 KENNEDY: But it fails them at then end, not as it hits the first one, right?
 
00:24:26 OKKEN: Yes, but to get away with that, the only way I could figure out is to hook into the report function, which happens much later after the test completes. Well, so there's a whole bunch of other plugins that allow you to rerun tests if they fail. There's rerun failures, there's flaky, there's retry and there's a handful of others. Most of them are not compatible with pytest-check because of the way, at the time that they're checking to see if something fails, and the time I'm checking. So I guess I just want to point out that if you want that to happen, rerun failures works. Flaky and retry don't.
 
00:25:02 KENNEDY: Nice. That's really cool. I wonder if you could monkey patch flaky or retry to force it to check later or something like that.
 
00:25:10 OKKEN: Maybe, but also I actually commented in the defect report that it doesn't work with flaky. And I said, "Well, I think it should try." And I had a comment from somebody that said, "You're just going to kill yourself off if you think that you're going to try to make it compatible with all the plugins out there." So as long as there is a workaround, it's fine to say, "If you need this to work with something like this, use this other plugin and not my problem." It seems cold, but opensource is a side project, so...
 
00:25:38 KENNEDY: Yeah, absolutely. Cool, well I've got a couple short ones here. Jeremy Shindle sent in just a quick message that pandas is now 1.0. It had been living on the zero ver branch for a long time, but it has migrated over to semantic versioning. It has a couple new cool features. So we were already speaking about pandas earlier. If you're using pandas, or whatever, hey, pandas 1.0 is out. That's a big deal. Probably also means a lot for the stability of the API.
 
00:26:04 OKKEN: Yeah, it's good.
 
00:26:05 KENNEDY: For the PyCharm fans out there, myself included, friend of the show, Anthony Shaw, has created a PyCharm plugin called Python Security. And we'll link to that. And basically, what it does it it goes through, much like when you're working with PyCharm, it automatically tells you, "Oh, you're doing a type mismatch. You're passing an int and it expects a string." Or, "You're calling this function that takes two arguments, but you're giving it three." It does all that checking in realtime. This one is for security. So it checks for unsafe loading of yaml files, remote code execution and flask, man in the middle with a requests or httpx and debug configs and Flask and Django, so that's kind of cool. You want that? Get that and install it.
 
00:26:46 OKKEN: Nice.
 
00:26:48 KENNEDY: Yeah, and then finally, I have my Python for Decision Makers course that talks about whether or not you should and how to position adopting Python at your organization. So I did a webcast on that and that's already passed. It went really well, but the recording of it is out. So I'll link to the recording and if people want to sign up, you got to register for the thing, but then you just watch the recording.
 
00:27:08 OKKEN: Oh, I'll have to check that out, nice.
 
00:27:10 KENNEDY: Yeah, that was fun. Lot of fun. Lot of good conversations there. Alright, I don't know about his joke, but I'm going to do it anyway. You ready? You've heard about optimists and pessimists and a glass, right? A glass is either half full or half empty, depending on which side of that divide you land on, right?
 
00:27:26 OKKEN: Yep.
 
00:27:27 KENNEDY: Well, there's a third angle here. And for the engineer, you don't see the glass as half full or half empty. No, the glass is twice as large as it needs to be.
 
00:27:37 OKKEN: Exactly.
 
00:27:40 KENNEDY: It's all about capacity planning. Come on.
 
00:27:42 OKKEN: Yeah, okay. So I don't have a joke, but I came up with a little bit of a brain teaser this morning.
 
00:27:47 KENNEDY: Okay, nice. Let's have it.
 
00:27:49 OKKEN: So when is 90 greater than 100? Well, there's a couple places. One, which I was informed on Twitter is when you're comparing string literals.
 
00:28:01 KENNEDY: True, yeah, yeah. You're going to say quote 90 less than quote 100, it's false. Yeah, okay.
 
00:28:07 OKKEN: The other one is microwave times. So 100.
 
00:28:12 KENNEDY: Nice.
 
00:28:13 OKKEN: Anyway.
 
00:28:14 KENNEDY: Very good.
 
00:28:15 OKKEN: That's it.
 
00:28:16 KENNEDY: Alright, well, you've left people with something to think about. And yeah, thanks for being here.
 
00:28:20 OKKEN: Thanks, bye.
 
00:28:21 KENNEDY: Yeah, bye. Thank you for listening to PythonBytes. Follow the show on Twitter via @pythonbytes. That's PythonBytes as in B-Y-T-E-S. And get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.
 
 <|endoftext|>
00:00:00 KENNEDY: Hello, and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode 95, recorded September 12th 2018. I'm Michael Kennedy.
 
00:00:09 OKKEN: And I'm Brian Okken.
 
00:00:11 KENNEDY: Hey Brian, how you doing this fine, fine Wednesday?
 
00:00:13 OKKEN: I am excellent.
 
00:00:14 KENNEDY: Nice, it's also excellent that Datadog is sponsoring the show, so before getting further tell them thank you, pythonbytes.fm/datadog. Actually a cool shirt if you go there and follow along. We'll talk more about that later. You know, I feel like summer's coming to an end, and I've been quite lazy all summer. I'm not sure I'm ready to get back into the main swing of things, but it's upon us.
 
00:00:34 OKKEN: Yeah, and do you know who else is lazy? Programmers are lazy.
 
00:00:38 KENNEDY: Productively lazy They put lazy to...
 
00:00:39 OKKEN: Productively.
 
00:00:40 KENNEDY: good use.
 
00:00:42 OKKEN: Yes.
 
00:00:42 KENNEDY: They make lazy a virtue.
 
00:00:44 OKKEN: And so this was our segue from nothing into the first item, which is dataset. And dataset is a Python package that bills itself as databases for lazy people. And this is actually something I totally want to try because it looks fun. Their premise is programmers are lazy. Oh, it says, at first, I'll just read some of the top. Although managing data in relational databases has plenty of benefits, they're rarely used in day-to-day work with small and medium-scale datasets. But why is that? It's because people are lazy and they'll throw it in JSON or CSV instead. Oh, they say, the answer is that programmers are lazy. They'll use the easy solution. And I guess I can't disagree. I've used JSON format as, essentially, a local database before. But this is kind of cool. This is, what it is, is it's built on top of Alchemy. So it's built on top of SQLAlchemy so it can work with any database or a SQL-style database and it's just really easy. It looks kind of like a NoSQL. It's kind of hard to describe, but, of course, over the air, but, it's pretty simple and worth checking out, I think.
 
00:01:57 KENNEDY: Yeah, I like it. It does automatic schema, creation, upserts. It has query helpers like distinct and stuff like that. So, if you were to say, I'm just going to use like an in-memory dictionary or other things like that, it's kind of nice that it helps with some of those things.
 
00:02:11 OKKEN: So you just said a couple terms that I don't even know what those are, so, upsert.
 
00:02:16 KENNEDY: Upsert is, I have a record and I'm going to try to save it to the database. If it does not exist in the database, an update would fail. But if it already exists, an insert would fail 'cause it would be a duplicate key. And upsert says, hey, data access layer, take this thing and save it. If it doesn't exist, put it in there as a new thing. If it does, make an update and set the values to the new one.
 
00:02:38 OKKEN: Okay, and it also deals with sparse stuff. So one of their initial examples is, let's say you've got people or something and in the first person, you give them a name and an age, and you can insert that. The second person comes along and you give them a name, an age and a gender. And then, you can search easily in it. Yeah, like you said, it deals with the schema for you already and you don't have to deal with that.
 
00:03:02 KENNEDY: Yeah, and the example that you have in the show notes here uses SQLite as the back-end database? But it uses the memory connection version. So you can just load it up with data and then query it and work with it and then when your app shuts down, it just goes away. Maybe you output stuff to a JSON file or whatever. So you don't even have to store the database necessarily.
 
00:03:22 OKKEN: Yeah, to be able to use some queries on information. That's interesting. But you can also just play with it this way and then turn it into a file-stored, file-backed database as well even with SQLite or with something else.
 
00:03:34 KENNEDY: Yeah, absolutely. It's a good find. It's quite interesting. I like it. So I have a question for you Brian. Why is NumPy, not this thing that we're going to talk about next, but NumPy itself, faster than regular Python? Do you know?
 
00:03:46 OKKEN: I think 'cause it's got stuff compiled in C.
 
00:03:49 KENNEDY: Exactly, 'cause it's written in C and it can even do parallelism and stuff. It could take advantage of cores. Like my new laptop is ridiculous. It has 12 cores.
 
00:03:57 OKKEN: Nice.
 
00:03:57 KENNEDY: That's a lot, right? So, maybe like we could actually take advantage of that with NumPy. Well, if you have NumPy code, this thing that I'm going to tell you about takes it to another level. It's called CuPy, I think is how you say it, 'cause I think it's based on CUDA, so CuPy is what I'm going to go with. And it's full name is CuPy GPU NumPy. And the idea is, it's a API compatible library with NumPy. So, all the NumPy features that it has, that NumPy has, you can call the same functions on CuPy, I called it, but, instead of running on your six, four, whatever cores you have on you machine, it runs them on the GPU cores, which is insane.
 
00:04:41 OKKEN: Oh, wow! Okay.
 
00:04:42 KENNEDY: Isn't that cool? And I looked. I looked and I did a quick little search, just like, hey, what's like a modern machine-learning or data science-type GPU you might get? So, pretty standard one might be the GeForce GTX 1080 Ti. These things are getting super expensive because of all the Bitcoin miners and stuff but, anyway, you get one of these things, and it has 3,584 cores, 3,000, and you can run your code parallel on all of those.
 
00:05:14 OKKEN: Wow, okay.
 
00:05:14 KENNEDY: So instead of, like, having like, oh my gosh, I can't believe I have 12, no, you have 3,500. And all you have to do, the only line of code you have to change is, instead of import numpy as np, which is the very common thing that people do, you would say, import cupy as np. That's it. And now you're running all these CUDA cores doing GPU-backed data science.
 
00:05:39 OKKEN: Okay, do you remember what CUDA is?
 
00:05:41 KENNEDY: I don't know what CUDA stands for. I bet it's an acronym 'cause it's all capitalized. There's a lot. There's like layers upon layers of acronyms here. I don't actually know what CUDA cores are.
 
00:05:53 OKKEN: Okay, didn't mean to put you on the spot.
 
00:05:55 KENNEDY: It's the mechanism of parallelism on the GPU, basically.
 
00:05:58 OKKEN: Okay, nice.
 
00:06:00 KENNEDY: But I don't actually know more than that. Isn't that cool?
 
00:06:02 OKKEN: I like it.
 
00:06:04 KENNEDY: Yeah, yeah, so it's really cool. It has its compatible API. I threw a little code sample in the show notes there. And if, for some reason, you're like, you know, I actually need to customize how my code runs on the GPU, which is a thing sometimes people do, you can like program against the CUDA cores and CUDA kernels and things like that. You can actually embed in your Python code, C++ code, and CuPy will actually compile that down to a CUDA binary, which is even cooler.
 
00:06:34 OKKEN: Okay, I was just curious. So I'm really not a hardware guy, so bear with me. You said you have 12 cores. Is it on a laptop that you're running?
 
00:06:41 KENNEDY: Yeah, it's the new MacBook Pro. So it's the Intel Core i9 maxed out. It's really six cores that are each hyper-threaded is how it works, but the OS sees them as 12.
 
00:06:52 OKKEN: So, are there GPUs on a normal laptop or on your laptop or is this...
 
00:06:55 KENNEDY: Yes.
 
00:06:57 OKKEN: GPU's just something that, okay.
 
00:06:58 KENNEDY: No, no, no, there's a pretty high-end one on my MacBook. It's not as high-end as this. It's not even close, but, maybe half or something, I would guess, in terms of performance? It's a pretty bad estimate 'cause I don't really know. But, yeah, you could run this on a laptop.
 
00:07:13 OKKEN: Yeah, I'm just curious if the CuPy would speed up things on, just on a laptop or something or if it would...
 
00:07:19 KENNEDY: I would think so. I mean, you got to have an algorithm that's like well-adapted to GPUs. But if you did, then I would think so, yeah.
 
00:07:27 OKKEN: Okay, well this is neat. The people that really care about it, really care about it. So this is cool.
 
00:07:31 KENNEDY: Yeah, absolutely. You can go and get GPU clusters on AWS or on DigitalOcean or things like that.
 
00:07:39 OKKEN: Yeah. Okay.
 
00:07:39 KENNEDY: And so, you could actually ship your code up there even if you don't have one. Final note on this one is, there was a PyCon 2018 presentation on this and so I'm going to link to the presentation as well if people want to watch 30 more minutes of this.
 
00:07:55 OKKEN: I think I would.
 
00:07:55 KENNEDY: Yeah, I actually do too. It looks really interesting.
 
00:07:57 OKKEN: Yeah, all right.
 
00:07:58 KENNEDY: I feel a theme coming on.
 
00:08:00 OKKEN: In Episode 84 we did touch on, somebody called in, called in? We actually don't have phone lines. Somebody contacted us and said, hey, you should cover pre-commit, and we have. We did talk about pre-commit in Episode 84, but we just sort of talked about what it was. But today, I ran across this fairly cool article called The Automated Python Workflow Using Pre-Commits. I like this kind of an article, actually, of, okay, here's these cool tools. Using pre-commit black and flake8 how do I put that in my day-to-day workflow and how does it really work? And, this is from LJ Miranda, so good job LJ. It's got a great graphic at the start with telling you that you've got changes. When you add something you go to git add and you go to staging and then when you do a commit, what happens is the pre-commit will intercept that part and it kicks off whatever pre-commit hooks you've got set up. And, if all of those pass, then it lets the commit happen. And if it doesn't, it kicks it back. And then it shows you how to deal with all of the different configuration that is available with pre-commit. I like this. It's a good starter. If you're still quite not onboard with pre-commit, this is a good article to read.
 
00:09:13 KENNEDY: Yeah, pre-commit's pretty cool and that's a Python package that you install that then manages all the rest, which I think that's great.
 
00:09:20 OKKEN: Yeah, in this article, there's a little video and I think it's a animated GIF or something, a little short demo video that runs. I don't know how they do this. This is neat. So, it shows it in there actually.
 
00:09:32 KENNEDY: Yeah, yeah, that's really cool. I like those little auto play GIFs that'll animate stuff 'cause sometimes it's like, you know, if you could just see it happening, it would be so much more easy to grok with what this little picture's trying to tell me.
 
00:09:44 OKKEN: Yeah, and I also don't mind, something like that is fine if it has like an actual video to play but, don't give me a half-hour video. A little couple-minute video at most is great.
 
00:09:53 KENNEDY: Yeah, a half-hour GIF, probably not the way to go.
 
00:09:56 OKKEN: I don't even know if you can do that.
 
00:09:59 KENNEDY: So, one way to go that is good though, is to check out Datadog. So this episode's sponsored by Datadog, as I said, and I really appreciate them supporting the podcast. Datadog is a monitoring platform that brings metrics, logs, requests, traces, all that kind of stuff, into one place across different systems and computers and all sorts of stuff. So you can use their Trace Search &amp; Analysis, which lets you break down Python application performance using high-cardinality attributes like show me what this customer's done across my application or, show me all the behaviors for this URL and really easy to troubleshoot your app. So, start doing that with your Python apps today with a free trial and Datadog will send you a free t-shirt which has a cute little dog on it. So visit them at pythonbytes.fm/datadog to get started. So, you were talking earlier about that cool little GIF thing and I think you can do it with Camtasia. Like you can record... So I think you can do it with Camtasia. You can record, basically, a screen cast and export it as a GIF, which is already pretty cool.
 
00:11:00 OKKEN: Oh, okay.
 
00:11:00 KENNEDY: But, this next item has a really nice, little animated GIF thing going on as well because it's super good to see it in action. So have you heard about py-spy?
 
00:11:11 OKKEN: I have not.
 
00:11:11 KENNEDY: So py-spy is interesting for a couple of reasons. It's interesting because it's a cool tool that people can use in some places that they could not previously do so. It's a Python profiler. So you can hook it up to your Python application and it'll tell you where your Python app is spending its time, what functions and what it's doing and things like that. And it acts kind of like the Unix top command, which will take over your screen and it'll show you a list that's kind of updating every couple of seconds, what's happening. That's pretty cool. So I can hook up this profiler and it'll, live, show me sort of the equivalent of like a process report, like a CPU usage report. But it'll say, right now you have these various functions that have run recently and here, like, we'll put the most expensive ones on top, things like that.
 
00:11:54 OKKEN: Oh, neat!
 
00:11:54 KENNEDY: And it's cool, right? So you can watch that little graph, that little GIF thing and see it going. This is written by Ben Frederikson and it's just taken off. I think it was started in July or something like that. It's already got 2,000 GitHub stars. What's even cooler though, is it'll let you visualize your Python's app's time without restarting or modifying your code in any way. And it can attach to running processes and then start to profile them.
 
00:12:19 OKKEN: Oh, nice!
 
00:12:19 KENNEDY: So normally, profiling happens by, I run a profiler which runs my code, which does a bunch of stuff, or, maybe, reverse, I'll write some code like import CProfile, and I'll call a function, start profile, save profile, export, et cetera. Right, like, it's really invasive. So if you do it from the outside, the profiler runs your app, it can't do it in production, it makes it slow, all sorts of stuff. If you do it the other way, you're doing all sorts of writing code to change it. This, you just say, hey, there's a random Python program. I'm going to go profile that. And it'll just attach to it.
 
00:12:50 OKKEN: Nice, yeah, you can just give it a process ID.
 
00:12:52 KENNEDY: Yeah, exactly, give it a PID. And what's cool is, because of that, that means you can use it in production. I could log into my web server that's getting pounded on, not responding correctly, or whatever, and I could actually begin to profile it without wrecking my thing or slowing it down or restarting it or whatever. Any long-running process.
 
00:13:13 OKKEN: Like while the problem is happening, you can just attach to it and figure out what's wrong.
 
00:13:18 KENNEDY: That's the key thing 'cause maybe restarting it, and rerunning it, it takes like four hours to get into that weird state. You never know, right?
 
00:13:23 OKKEN: Yeah. Oh, yeah. This is cool, sweet!
 
00:13:25 KENNEDY: It's pretty trick. So it's written in Rust, actually, but it's PIP installable, so all sorts of cool things. And then, he even goes into, then goes into how does it work. So he has a section on how does py-spy work? So I'll just read this and you tell me if this sounds like a program you would have written. It's not what I would have. py-spy works by directly reading the memory of the python program using process_vm_readv system call on Linux or vm_read on OSX or ReadProcessMemory on Windows, and then it just analyzes the memory over and over. That's crazy, right? But he knows enough about Python to go, well that means X and it just, off it goes. So, there's a bunch more details on how he actually makes it work. I'll link to that section as well. It's a pretty cool profiler and I really like the attach to running processes without affecting them. That's pretty unique, I think, and so I wanted to highlight it.
 
00:14:23 OKKEN: Yeah, nice, and it can do icicle graphs, which I don't know why that would be neat but, it looks neat.
 
00:14:29 KENNEDY: Yeah, those are cool. I get, sometimes, just visually, some things are really out-of-whack and you're like, what is that big bar from? Oh, that's array.sort. Why are we calling that a thousand times? Things like that. Let's just sort it once. All right, what do you got for us next?
 
00:14:44 OKKEN: I've got SymPy which is just sort of fun. SymPy is a, it's a, well I'm just going to read the little bit here too. Symbolic computation. So like you're in math class or something. We realized early on with programming that you can, if you punch things into the calculator too fast, it just mucks things up because you have rounding and various things like that. So symbolic computation deals with the computation of mathematical objects symbolically. This means that mathematical objects are represented exactly, not approximately, and math expressions with unevaluated variables are left in symbolic form. SymPy allows you to do that with Python and it's sort of blasted cool. I've got a little example of doing an integration of the sine of X squared over negative infinity to positive infinity and it will tell you what the answer is. And, these sorts of symbolic math manipulations, for a lot of people, boy, if I had to do this by hand, I'd be in trouble. I did not do that well in math. And so, being able to do this programmatically is cool. And the introduction and the website is pretty awesome too. It has a bunch of live. It's got a engine in the back that runs it so, you can try the examples out and pop up a little window and do it interactively. So this is neat.
 
00:16:11 KENNEDY: Yeah, there's a ton of cool stuff that comes out of this. So, for example, you can say, X comma Y equals symbols X and Y, and then, after that, you can do algebraic expressions like truly algebraically. So, like expression equals X plus 2Y, not in quotes or anything, just like as if it were regular math, and then you could like add one to that expression and it'll reform the equation and stuff like that. You can ask it to do integration. Like the example you have in our show notes is to integrate sine of X squared from minus infinity to positive infinity. Instead of giving you the answer of, oh my gosh, what is that, like, 1.5 dot dot dot dot, it just says, that's square root of two pi over two. You know like, the exact answer. That is pretty awesome. You know, we just wrecked the whole math experience for so many of our listeners who are students. They're like, you know what? That calculus class, I just solved that problem.
 
00:17:05 OKKEN: Well, I would have loved this while I was taking calculus.
 
00:17:09 KENNEDY: Yeah, for sure. Yeah, you could totally check your work. Like, there's no answers in the book. Oh yeah? Really? Hold on. They're right here. That's pretty awesome.
 
00:17:19 OKKEN: So if you could take your laptop to your tests, you're set.
 
00:17:22 KENNEDY: Yeah, probably not likely.
 
00:17:24 OKKEN: Probably not.
 
00:17:24 KENNEDY: All right, so this next one that I found, Brian, it's pretty cool. So, something that I've been digging into lately behind the scenes and I'm going to be talking more and more about, probably, in the next few weeks, is async programming in Python. I've really been doing a lot with that lately and we'll have some cool stuff to share pretty soon. But, that means I'm running across all this cool async stuff. So you've heard of WSGI, W-S-G-I, which is the Web Server Gateway Interface. That's like how Pyramid, Flask, Django, all those things, work. None of them do a great job of supporting async programming because, fundamentally, this WSGI interface is synchronous. It can't be made async. So there's this other framework called ASGI, for Async Gateway Interface, I guess, that allows these frameworks to be asynchronous. So, the thing I'm talking about this week is Starlette, which is an ASGI web framework. And, I like its little subtitle, the little ASGI framework that shines.
 
00:18:25 OKKEN: It's cute.
 
00:18:27 KENNEDY: It is cute. So it's basically built, intended to build high-performance asyncio services. So, if you have anything that talks to a database, to caches, to file systems, things like that, you can call its other web services or micro services. Super easy to build. The API is basically Flask, like a Flask-ish API, and you create like a web method. You say, async def regular view method. And you go do a bunch of stuff. And it has cool support for like response types. So you can have a file response object that you just send back to the framework that's based on async, aio files, which is a asyncio file-based thing, and there's a lot of nice integration like that.
 
00:19:10 OKKEN: Okay. You're just interested in this or do you have an application that you're going to try to...
 
00:19:14 KENNEDY: No, I'm building a course on it.
 
00:19:16 OKKEN: Oh, okay.
 
00:19:17 KENNEDY: Trying to make a nice, well-rounded async concurrent programming Python course.
 
00:19:21 OKKEN: Oh, then, well yeah.
 
00:19:22 KENNEDY: So I've been building tons of little apps and stuff. So, here we go, here's one of them.
 
00:19:26 OKKEN: Cool.
 
00:19:26 KENNEDY: If you want to build an app that is way more scalable, 10 times more scalable than regular web apps on the same hardware and whatnot, it's pretty easy to do if, mostly what that web app is doing is waiting. You can just, basically the asyncio web frameworks can just adapt to that more easily 'cause they're not blocking all the wait. I also discovered a couple cool things while looking into this. One is, they say, you should install the UltraJSON package, which the pip install command was ujson, and that is a, basically, a drop and replacement for the JSON built-in that is like between 50% and three times faster. So if you're doing a lot of JSON, you can just use UltraJSON, and that's pretty awesome.
 
00:20:13 OKKEN: Yeah, okay. I'll have to check that out too. Neat.
 
00:20:16 KENNEDY: Yeah, and it's, so all you have to do is, import ujson as json, and that makes your code faster. Of course, it has to be there but, that's pretty sweet. The other thing is, you've maybe heard of Gunicorn for the traditional web frameworks? There's a uvicorn, which is based on uv loop and Gunicorn, which is also pretty awesome for these async web frameworks.
 
00:20:39 OKKEN: Well, it's cool and I get the name, but, eventually, after everybody starts using that, people will forget where that came from and it's just going to be a weird word, uvicorn.
 
00:20:51 KENNEDY: I know, it'll be uvicorn, no, it's u-v-icorn. You got to understand where the name comes from, come on. Get it together. Well that's it for our items. I do have some extra stuff to share. How about you?
 
00:21:02 OKKEN: Just one thing I wanted to point out if I remember it.
 
00:21:04 KENNEDY: Okay, cool, I'll go first and you can think. So, really big news. You and I, we had a good time at PyCon, right?
 
00:21:10 OKKEN: Oh, yeah.
 
00:21:11 KENNEDY: I can tell you when we're going to have a good time again. It's going to be, if we can go to a tutorial, it's May 1st and 2nd. If you want to go to talks, it's May 3rd, 4th and 5th. And if you want to do the sprints, it's May 6, 7, 8 and 9. So, basically, the announcement is that, the PyCon dates are out.
 
00:21:30 OKKEN: Yes, and it's not over, I don't think it's over Mother's Day this year...
 
00:21:35 KENNEDY: I hope it's not.
 
00:21:35 OKKEN: So that's good.
 
00:21:36 KENNEDY: Hope it's not. I also have a quick little follow-up. You talked about the pre-commit package. Also another listener, Matthew Layman, sent in some notes about how his team is using it. And, basically, talked about how they're using pre-commit, the Python package, so that like their flake8 and black and other things that automatically run during continuous integration, also automatically run when people do Git commits so they have fewer failing builds, which is pretty awesome, and he has a couple of nice links. So I threw that in there at the end. And then, finally, you talked about the Gang of Four patterns last week, right? So, John Tocher, I think, is right, sent us a message pointing out another talk from PyCon AU called You don't need that, which is pretty cool. And it basically talks about how if you studied the Gang of Four patterns, a lot of what they were doing was because they were using Smalltalk or Java or C++ and, in Python, here's a new way that you just, basically, don't need that pattern. So, a pretty cool talk and I'll link to the video for that.
 
00:22:40 OKKEN: Yeah, the if you translated the Gang of Four book directly to Python, it would be like a pamphlet.
 
00:22:48 KENNEDY: That's right. Nice, did you remember your item?
 
00:22:51 OKKEN: I did not, so, oh,
 
00:22:53 KENNEDY: Save it for next week?
 
00:22:54 OKKEN: Yeah, yeah. Yeah, I'll save it for next week.
 
00:22:57 KENNEDY: We'll do this again next week, right?
 
00:22:58 OKKEN: Yeah, maybe we should just do it every week.
 
00:23:00 KENNEDY: Yeah, all right, deal. We'll do it every week.
 
00:23:03 OKKEN: Okay, cool.
 
00:23:03 KENNEDY: Cool, all right. Well, thanks for doing the show this week.
 
00:23:06 OKKEN: Thank you.
 
00:23:06 KENNEDY: You bet, bye.
 
00:23:06 OKKEN: Bye.
 
00:23:08 KENNEDY: Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes. That's Python Bytes as in B-Y-T-E-S. And get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.
 
 <|endoftext|>
00:00:00 KENNEDY: Hello, and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is episode 80 recorded May 25, 2018. I am Michael Kennedy.
 
00:00:11 OKKEN: I'm Brian Okken.
 
00:00:12 KENNEDY: Brian, we have a special guest, don't we?
 
00:00:13 OKKEN: Yes.
 
00:00:14 KENNEDY: Hey, hello Dan Bader.
 
00:00:16 BADER: Hey guys, it's me Dan. Good to be back on the show and it's always so nice to hear you do this intro live, Mike. It's, uh.
 
00:00:24 KENNEDY: Thank you.
 
00:00:25 OKKEN: It's unreal it's like and you sound so smooth. I love it.
 
00:00:28 KENNEDY: I guess I've done it 80 times now. Maybe 82 or 83 from the few times I screwed up with the wrong date. Well thank you and it's great to have you. For those of you who don't know Dan, Dan's well known from Real Python and dbader.org and a bunch of Python goodness. Before we get to this show, I want to say thank you to DigitalOcean. They're sponsoring this episode and a number of them coming up as well as the actual infrastructure delivering all of this technology to you. So pythonbytes.fm slash DigitalOcean get a $100 credit for new users, pretty awesome. Brian, I feel like there's a few themes that we touch on frequently in this podcast.
 
00:01:07 OKKEN: Yeah, I guess we do then. One of them is packaging. So we've talked about packaging a few times and the Python Packaging Authority has their tutorial on how to package Python packages. And it used to be out of date, but now they've recently revamped it and rewritten it and it's very user friendly now. It's a short little walkthrough of how to set up a package and push it to the both the test server and then to the full Python package index, PyPI. Yeah, I got that out. One of the thing's that's kind of fun to note is, that I noted is the read me example is in markdown and that's cool.
 
00:01:49 KENNEDY: And that's a new feature, right? That's one of the things of them switching to Warehouse and the big release of the new pypi.org. I think I remember the old examples for setup.py, they were either like too small, they didn't like include everything they needed or they were too big and kind of scary, and now this is a medium size example setup.py that is actually pretty nice. I read through it and it looked like the same tool set that I use to push up, so I think it's pretty accurate now. So that's nice.
 
00:02:18 OKKEN: Nice, so you didn't feel like you were super out of date you're like, why am I not using this or using that?
 
00:02:22 KENNEDY: Yeah, because when I learned how to do it the first time, I think I read both the old tutorial and then like four or five or six different blog articles on how to do it now and how to do it now because it changed. But now this is all up to date, so it's good.
 
00:02:36 OKKEN: Very nice. Dan, do you do much packaging?
 
00:02:38 BADER: Yes, I run a couple of open source projects and I always felt like exactly like what you were just saying, Brian, where I have to combine a couple of tutorials just to get it to work and it never really felt all that straightforward and so I think this is pretty nice and pretty minimal, right? I like that and I'm surprised that the recommendation now seems to be to use markdown based read me files. Like, I really like markdown. I really warmed up to restructured text so much and it's definitely cool that they're supporting that now. That's awesome.
 
00:03:07 KENNEDY: I think restructured text maybe predated markdown and it was the thing when the original PyPI was created and then just like that thing was calcified and they're like, let's not touch this. Let's just not mess with this. Let's just keep it running, right? It was really good to see that getting a fresh update. Also Brian, you talk about Twine in here. What's the story with Twine?
 
00:03:29 OKKEN: I don't know if there's a story with it. That's just the tool you use to push things up to PyPI.
 
00:03:36 KENNEDY: Oh nice. I probably used it and didn't realize it or forgot that I used it.
 
00:03:39 OKKEN: Maybe there's another way, but that's what I've always used.
 
00:03:42 KENNEDY: Yeah, cool.
 
00:03:42 BADER: Actually, there's a cool project to throw in the mix here. It's called Flit, F-L-I-T and it's, well what's good way to describe it? It's a minimal, simple way to put Python packages on PyPI, so they kind of completely done away with the setup.py. Instead, you write an __init__ file where you just put in your author name and your homepage or whatever and it generates all of that other stuff. And it might not be really necessary anymore now if you have like a release or short and sweet tutorial like the one that we were just talking about, but it is super super beginner friendly, this Flit thing.
 
00:04:19 OKKEN: Oh that's cool.
 
00:04:20 KENNEDY: Nice, that's F-L-I-T?
 
00:04:21 BADER: It's F-L-I-T, yeah.
 
00:04:22 KENNEDY: Awesome. Alright, and so that's probably on GitHub, isn't it Dan?
 
00:04:25 BADER: Yes it is. Nice transition.
 
00:04:28 KENNEDY: So the next thing you have for us is an async library for calling GitHub's API.
 
00:04:32 BADER: Yeah, yeah. I was going to talk about this thing called Gigithub, which is yeah, a Python wrapper around the GitHub API. Basically it allows you to talk to GitHub and you can interact with all the different content types that GitHub provides or exposes, so you can add and modify issues, you can create pull requests, you can add comments to pull requests, you can download all the comments to pull requests and all that stuff. The other thing it does, it allows you to parse GitHub's web hooks so you can configure GitHub so that every time a new pull request or something like that is created, it sends, essentially calls an API callback on the web, like on some URL that you give it. And so what you can use Gigithub for is a really nice and clean way to write GitHub bots with Python essentially. It's just a really cool library and I think its API is super well designed, so we were recently using it on a workshop that we did in Vancouver, or like Marietta, who is a CPython core developer who did it and I sort of TAed and was running around helping her and so she wrote a really cool tutorial about how to use Gigithub. It's just a really nice example from modern Python web API library.
 
00:05:48 KENNEDY: It looks really great. And so you just go over here and you say like, I'd like to open a PR. So you get some PR data, then you say await GitHub dot post and all your methods are async. Yeah, definitely nice and scalable. It looks like it's based on aiohttp, which is a really nice client side, async enabled rest library.
 
00:06:12 BADER: What's really really cool about this Gigithub thing is that it's actually abstracting away from the actual backend I want to say. What the actual library you use to talk to or to handle those web requests whether incoming or outbound, so I just learned that this is referred to as a sans-I/O library. So basically it's just a protocol implementation that doesn't really specify how the I/O is preformed. So it allows you to plug in different backends, different concrete implementations that make this thing super reusable because well, if there's a new async library you know, that flavor of the day kind of thing in a couple of months, then well, you can probably just plug that in and work with that, so it's kind of nice. It's really well designed.
 
00:06:56 KENNEDY: Yeah, so you can use aiohttp, you can use Tornado. Yeah I was, and recently we covered it on the show this thing called unsync instead of async, U-N sync, and it's a different implementation with a different thing, a different event loop thing. Maybe you can use that here as well. That's pretty awesome. I like it, nice pick.
 
00:07:18 BADER: Nice, yeah. It's nice to use, super friendly.
 
00:07:20 KENNEDY: Yeah, Brian do you guys do any Github automation? You just started with Git at your organization, right?
 
00:07:25 OKKEN: We're doing a, we've got a private server, so we don't go through GitHub for work stuff, but I use GitHub all the time.
 
00:07:32 KENNEDY: Yeah, of course.
 
00:07:32 OKKEN: Locally, so.
 
00:07:33 KENNEDY: Yeah, nice. Yeah, I feel like this kind of automation is more relevant and useful when either you're building an app or you have like a big organization and you want to automate your company's interaction with GitHub, right? Me as an individual, I just don't really see a massive use of this for me because I just don't do that much different other than what I personally do with GitHub, but I think it looks pretty cool and I love the way it works.
 
00:07:59 OKKEN: Some uses where you would often use like Travis or something like that, like if you were watching different, if your project depended on a bunch of dependencies and you wanted to when if they changed, pull them in and run your build, repackage everything and run some tests against it, you could do that locally with something like this.
 
00:08:16 KENNEDY: Yeah, that's pretty cool. Or you have that one person on your team that often breaks the build, so you run extra tests when you see them do a check in.
 
00:08:24 OKKEN: Harassment bots that just goes in and. Be careful.
 
00:08:30 KENNEDY: Yeah, I think they use it on CPython. They moved all the source for that to GitHub and I think now they run a couple of bots that, I think one of the things they do is so when you contribute to CPython, they need you to sign an agreement that you're giving up the rights. Essentially free contributions, and so they, I think Marietta actually runs that bot. I might be mistaken here, but it's a bot that checks if that committer or that contributor already has given their permission, and if they didn't yet then it's just going to ask them to do it and it sets a flag on the PR. So it's super cool that way when you can sort of code up a work flow like that that you never have to worry about again in your life because it's 100% automated. So I think it's great for that sort of use case.
 
00:09:11 OKKEN: That is a great use case. Yeah, that's really really awesome. Okay, so the next one that I wanted to talk about actually was recommended to me, recommended to me and Brian because of some stuff I've recently been doing. I think, we were all at PyCon. I think maybe we were all the same meeting or get together and I just decided like that's it. I'm writing a Python systemd daemon that will synchronize all of my course data geo, basically across the various servers and the different locations. There's like eight or nine places in the world that serve up course content based on where you are, and so I wrote a service in python that is a systemd service that will basically keep all of those places in sync. Nothing too impressive, but it's kind of cool that you can do that in python. So we got pointed at this thing called pysystemd, and this was actually presented at PyCon 2018, so there's a whole talk. You can go learn about what is systemd, why you care about it, how is it used? But the short version is this pysystemd is an API into the systemd whole API part of Linux. So you can create things that are daemons. You can say like, I would like to have my Python web app start and I want it to start in this way, but I want it to not start before my MongoDB server starts. I don't want MongoDB to start in that way. You can configure these things to all just happen on boot or on demand, things like that. So I think this is really pretty awesome. If anyone's doing any sort of automation with systemd and they are using python, here's a really great way to just import this library and just ask hey, let's load up this unit, which is like one of these services, and ask is it running, let's start it, let's create a new one, all sorts of stuff. Really really nice.
 
00:10:59 KENNEDY: That's cool.
 
00:11:01 OKKEN: Yeah, also kind of cool how this was built. So this is like based on Cython, so it's a wrapper around the C library that actually talks to systemd, right?
 
00:11:09 KENNEDY: Yeah, I think so and actually I'm going to cover in the next episode this article on using Cyton as a way for, a simple way to wrap C APIs.
 
00:11:21 OKKEN: That's what surprised me, yeah.
 
00:11:23 KENNEDY: Yeah, I think that's why because it doesn't seem like a performance thing, right? I think it's like let's use Cyton to get a really simple API into the C layer as well as build the innervation back into Python. So pretty cool.
 
00:11:34 OKKEN: Yeah nice, I'd love to see that because I'm surprised they're using Cyton for that and not just ctypes or CFFI or something like that, but I'm sure there's a reason for that.
 
00:11:43 KENNEDY: The other thing I wanted to point out about this is this was created and presented by Alvaro Leiva. Sorry if I'm mispronounce your last name there, but he's a production engineer at Instagram and at Facebook, and so they have a few servers to manage. This is probably pretty polished and comes from a pretty well-informed space if it's being used there, right? Pretty sweet. Alright so before we get to the next one, let me tell you guys about DigitalOcean. So DigitalOcean is definitely one of the best hosting frameworks places out there. You can go create a server super easy, you can create a load balancer, you can create floating APIs that allow you to switch between various machines with perceived zero down time. All sorts of stuff. All of our code and our sites and our delivery, all that stuff is running on top of it and it has been for a long time and it's been working great. So like I said, if you're thinking about running servers and you want to do it affordably, high performance with lots of control, then go to pythonbytes.fm slash DigitalOcean. If you're a new user, you'll get $100 credit and check out what they have. Takes about 60 seconds to set up a new server and you be SSHed in and doing all sorts of good stuff. Maybe you could even use pysystemd to like automate some cool stuff on it afterwards. So check them out. It helps support the show and it's definitely a good product worth checking out. Speaking of products, Brian, you were excited about one. That one update one, right?
 
00:13:14 OKKEN: Yeah, I am. I usually, for a while I was running the latest or the last 2017 release of PyCharm, but I don't know how recent this was, but not too long ago, we had the early access program build one of 2018.2 is out for PyCharm and the really exciting bit, and we got notified by this from the Bruno Oliveira, who goes by Nicodemus on Twitter, but it supports a whole bunch of new pytest features and I'm kind of a pytest kind of nut, so the things that I'm really excited about.
 
00:13:55 KENNEDY: You could say you wrote the book on it.
 
00:13:57 OKKEN: Yeah. Well you could brcause I did. A couple of the features that I was really waiting for is PyCharm's really, being an IDE, it has a lot of like, what do you call that, IntelliSense or something?
 
00:14:10 KENNEDY: Yeah, auto complete IntelliSense, yeah.
 
00:14:12 OKKEN: Autocomplete. That didn't work for fixtures to a test. So if you had, if your test was using fixtures and it was returning an object or a function or something and you were trying to call that, you didn't have all of those full auto complete features. Those are now in for fixtures of tests and that's really cool. But the thing that I'm really excited about is parametrization now works seamlessly within PyCharm, so if you've got a test that is parametrized so that you've got several, or in my case sometimes dozens of different parameter sets that are run through the same test, you could always run that through, run all those parameters in PyCharm and that was wonderful. If you wanted to rerun one or rerun the failing ones, it would just rerun all of them.
 
00:15:01 KENNEDY: I see, it treated it like a whole method in the decorative bit that had here's all the variations. That was just like a thing that it would just rerun, right?
 
00:15:08 OKKEN: Yeah, so now you can run a test and then in the left side bar you can right click on one of them and rerun just one of the parametrizations or you can like for instance if only two or three or some of them failed, when you rerun failures, it only runs the parametrizations that failed and this is a huge time saver for me so I'm really excited abut it.
 
00:15:31 KENNEDY: Yeah, that's nice. I use that feature a lot where I just say rerun the failed tests.
 
00:15:34 OKKEN: For people that are really, and it may not be too much of an issue for people that are running really quick tests, but a lot of my tests talk to hardware so they're not really that fast. So this will save me like an hour a day I'm sure.
 
00:15:47 KENNEDY: That's awesome. Yeah, very very cool. Dan, do you use pytest?
 
00:15:51 BADER: Yeah, I do, yeah. Actually, I just used it and rewrote the backend for realpython.com. We've got pytest powered test integration tests for that and yeah, it's just been a joy to use, especially the parametrizations stuff. It's just so nice when you can reuse a lot of test code and you don't have to copy paste it around so much.
 
00:16:08 KENNEDY: Dan, one thing I was going to cover but you put it in here before I could get to it, so you're faster, is basically why is installing Python 3.6 so hard and so sort of confusing, right? You talked about this workshop that you recently did and I feel this out this out on Twitter and people will sometimes tell me oh, it's not hard, it's super easy, you do this. But then if you actually go teach a workshop to beginners, you're like why are those four people over there not ready yet? Like it's been ten minutes. What could they have possibly been doing? And it's because like there's all these edge cases, right?
 
00:16:41 BADER: It's one of these things where in theory, it's easy and it's not a problem that you run into when you've had a little bit more experience under your belt, but for people getting into Python, it is definitely a barrier. And we were teaching this workshop, so Marietta was teaching it and I was just running around kind of supporting people and for some people, we would spend almost like two hours to get them to a working Python 3.6 install. And you know, there were some really. Like, you hit all of these interesting but obviously kind of frustrating edge cases like some people were running a Windows host and then they were also running the Linux subsystem for Windows, so now you can essentially boot up a VM that is integrated into Windows and it boots Ubuntu or Debian or some other Linux distribution, I think. I think it defaults to Ubuntu. I'm not sure.
 
00:17:29 KENNEDY: It's Ubuntu as well, yeah, that's nice.
 
00:17:30 OKKEN: Basically you have this like really tightly integrated Linux environment that we can just work from your Windows host environment. The problem is that people maybe accidentally installed Python in the Linux environment and they'd try to access it from the Windows environment because it's a little bit unclear if you're a beginner like what actually the difference is between these two different terminal windows.
 
00:17:53 KENNEDY: Right, and you might open PowerShell, which is like a third still.
 
00:17:55 BADER: Exactly, you know things like that and then you have your paths set in different ways and other issues where that so the previous longterm release of Ubuntu, I think it was 16.04, so it doesn't ship with Python 3.6. And so for this tutorial, we specially needed 3.6 and so people starting googling and just copying a bunch of stuff from Stack Overflow to install Python 3.6 on Ubuntu. Well, it turns out there's two different PPAs, so like third party packages that you can install this from, and one of them is broken, or was broken during that time. People would have Python 3 but it had broken SSL and no pip. It was essentially useless for the purposes of this tutorial and it's kind of crazy just into, all of the edge cases you can encounter with this and I think it's really something we need to keep in mind when we're teaching beginners or we're kind of telling people how awesome Python is. It can be a pretty jarring experience if you try to set it up and it's just sitting there.
 
00:18:53 OKKEN: Well okay, I just wanted to try this, it doesn't work.
 
00:18:55 KENNEDY: For sure. Well, so you guys are writing this up at realpython.com slash installing dash Python as sort of an ongoing guide, right?
 
00:19:01 BADER: Yeah, so we decided to do something about it, So shout out to John Stuart and Jim Anderson. And we got together and put together this sort of the ultimate Python 3 install guide and we're going to keep it maintained and it tells you how to install Python in very specific steps in all kinds of different configurations, so Linux, Mac OS, different Linux distributions, how to compile it from source, and we're just going to add to it and improve it based on feedback and hopefully that's something we can just use in Linux workshop and then tell people what to do.
 
00:19:33 KENNEDY: I hope that when you refer to Python 2 in there, just say oh, don't do Python 2, do Python 3, that you call it legacy Python. So just throw that in there. Everyone's still trying to make that a thing.
 
00:19:43 BADER: I don't think we even mention it in that particular piece. This is Python 3 only, yeah.
 
00:19:47 KENNEDY: And then my Mac is about ready for a format because you know, it's time. It's been like, it's been bad. Anyway, it's about time for a format. What would you, like after going through this whole experience, we could do homebrew, you could do Anaconda, you could do download the pkd file from python.org et cetera, et cetera. What would you do if you were setting up a new computer?
 
00:20:08 BADER: Like on Mac?
 
00:20:09 KENNEDY: Yeah, on Mac.
 
00:20:10 BADER: Yeah. I'm a big homebrew fan because it makes upgrading very easy and it's just something that I personally use for other purposes as well. One of the things I usually do when I set up a new Mac OS development environment, I upgrade bash. So I use bash as my preferred shell and Mac OS ships with a super old version of bash and with homebrew, it's super easy just to get the latest version of bash and then a bunch of other command line tools that I use and so I just use that to install Python as well. So I kind of like that, I mean, Python Org version, it works as well, but if you're going to use homebrew anyway, which I think you want to use if you're on a Mac, then I would just keep everything in homebrew.
 
00:20:54 KENNEDY: Yeah, that's what I'm thinking as well. It makes a lot of sense. Awesome.
 
00:20:58 OKKEN: Both on Mac and on Windows I just always just use the python.org installer.
 
00:21:02 KENNEDY: Yeah, that's what I've been doing as well, but with homebrew, you just type upgrade, you know? And you can have different versions and stuff. I don't know. I'm thinking of playing with homebrew next time, but anyway, very cool.
 
00:21:12 BADER: Yeah, there's also pyenv. So that's sort of the other, if you're going to go with homebrew, you could just go brew install Python 3 and you get sort of one, the latest version of Python 3, or you could install something called pyenv first and then that's sort of another layer of extraction on top that allows you to switch between different versions of Python, including different versions of Python 3. So you can just go, you know, I want Python 3.5 for testing and I'm going to all of my latest stuff on
 
00:21:41 OKKEN: the Python 3.7 beta version or something like that. That's super nice. It's maybe a little bit more advanced. I feel like you're probably there, Mike, but for a complete beginner, I'm not sure if I'd recommend it.
 
00:21:50 KENNEDY: Yeah yeah yeah, sure, of course.
 
00:21:51 OKKEN: I don't think I'm there. I've tried it several times and it hasn't worked for me, so.
 
00:21:55 KENNEDY: I don't want to go too much longer on this, but what I've started doing on my servers is when I SSH in, part of my shell profile automatically configures the main virtual environment for whatever that purpose of that server is. When I SSH in, I'm actually running just a virtual environments just by default and I was considering doing even that for my Mac and just changing the shell back so it doesn't do something weird. I don't know. I may get myself into trouble with that, but it's been working so far. Alright, so I want to round this out with just a short little list of 30 amazing Python projects from 2018. So there's this thing called Mybridge and Mybridge is a little bit like a Readability or a little bit like a Flipboard where they keep track of different articles, but it's more technology focused than just a Flipboard or Zite, those type of things. And the article starts with, the Mybridge AI evaluates the quality by considering popularity, engagement, recency and so on, so apparently they have this AI which is kind of cool, that goes through and looks at human interaction with all these articles, these tech articles in the Python space and then says, here's the articles that our community interacted with that they really liked or packages actually in this case. So let me just give you a quick rundown on these just to kind of give you all some exposure and like oh hey, I hadn't heard of that package. That's pretty cool. And then you guys can jump in and give me some thoughts. So I'll go from the least popular to the most popular, so number 30 is PDFTabExtract, which is a set of tools for getting tables out of pdf documents, which is pretty cool and data mining on scanned documents, pretty sweet. There's, number 28 is Surprise, which is a scikit learn extension for building and analyzing, or building a recommender system. So you can say, you might also like this, which is kind of cool. Number 27, we won't do all of them. I'm skipping number 29. Number 27 is Eel, which is basically a simple equivalent of the Python's version of an Electron JS system. What do you guys think of that?
 
00:24:04 OKKEN: How have we not covered that already?
 
00:24:06 KENNEDY: I think we might have mentioned it because we have been on a, I think we've covered it but there's two variations and the sort of story that seems to go along with this is it's a simple library. It's not really like fully. There's my understanding that you can build simple apps, but not like full on massive apps, but if you could build full on massive apps, I'd be all over this, that's awesome. Number 25, Clairvoyant. A Python program that identifies and monitors historical cues for short term stock movement and stuff. I don't do really any stock trading, I mean, I put money in mutual fund, so I don't really care that much about it, but the reason I bring this up is Python actually is pretty involved in the whole stock trading automation and real time stuff. There's actually a really good documentary called the Wall Street Code that goes into all these programmers that are building like AIs and stuff in Python and it's pretty cool. So it's free on YouTube.
 
00:25:00 BADER: Nice.
 
00:25:00 KENNEDY: Yeah. Brian, are you a fan of Mr. Robot? Or Dan, any of you guys?
 
00:25:04 BADER: Yeah, I was just going to say.
 
00:25:05 OKKEN: No?
 
00:25:05 KENNEDY: Aw man, Dan?
 
00:25:08 OKKEN: I like it, yeah. It's a good show.
 
00:25:09 KENNEDY: I think it went a little weird in episode two, oh I'm sorry, season two, but like the first year, I was just like blown away. So there's this thing called Fsociety, which is a hacking tools pack for penetration testing in Python, which of course, Python is very big in the cyber security space. You might, if you want to like check your own stuff, run some of these tools against your things before someone else does, We talked about Kenneth Reitz last time and number 18 was Maya, datetime for humans. Better exceptions, I think we covered that as well. 16, Apistar, a really cool, expressive Python 3.5 based API from Tom Christie, the same guy that does Django Rest Framework, but this is like the re-envisioned Python 3 version, which is cool. MicroPython, very awesome for little projects. spaCy, industrial strength natural language processor is number six. Number two is pytorch for machine learning. That seems to be sort of becoming one of the main machine learning libraries, and number one, home-assistant for open source home automation, very cool. I keep dreaming of like creation some IOT thing with like MicroPython and then plugging it into home-assistant, but I just have to figure out what that thing is going to be instead of this. It's a solution looking for a problem, right? Right, it's a good solution, I think.
 
00:26:26 OKKEN: Yeah yeah. I think so. It's a good solution if I can just find a problem to like apply it to. Those that I read off there, are those surprising? Any of those super interesting to you guys?
 
00:26:35 BADER: I've just been trying with MicroPython, so I just learned a little bit more about it and so it is basically like this super small and lean re-implementation of Python 3 I guess that runs on these like super low power, low computational power micro controllers and it's, I mean, it's just so cool to be running Python on tiny, tiny machines that have very little RAM and you know, we're talking kilobytes and stuff and it's just insane,
 
00:27:00 KENNEDY: Like a five dollar chip. That we can program this in Python. Yeah, and you got one of those little bag, in your goodie bag at PyCon, right?
 
00:27:08 BADER: I did like a video review of that on YouTube and I was just you know, all giddy about it just playing with this thing. It just plugs into your USB and you can start running Python on this thing.
 
00:27:18 KENNEDY: That's a really good implementation they did. Brian, how about you?
 
00:27:21 OKKEN: Yeah, I guess I'd have to second that. MicroPython is awesome and a bunch of the Adafruit products run, are able to run it and yeah. It's all fun. Apistar is something I've been meaning to try still. I haven't done any projects with it, but it looks fun.
 
00:27:39 KENNEDY: Yeah, it definitely looks fun. Quite cool, alright, there's one final thing I want to cover. We had the GDPR stuff come out basically come into effect at the end of last week, so just a quick point to an article from our friend Chris Medina at tryexceptpass.org slash article slash GDPR. Sort of a take for developers and if you haven't got your stuff all in line yet, please consider doing so for your own good. Pythonbytes.fm is all up and ready. So, yeah Dan, you probably had to do the same for Real Python, right?
 
00:28:11 BADER: Yeah, some sleepless nights because it's, well, everything's up for interpretation, right? So it's kind of hard to yeah, just to put it into concrete terms, but I mean it's just been nuts now that the deadline for that law to go into effect is passed, like we've seen some services shut down. I think like Instapaper is service that I really, I've been using it for a long time and it just shut down in Europe. They say it's temporary, but who knows?
 
00:28:36 KENNEDY: Yeah, we'll see. It's temporary until it's not, but yeah, hopefully they get that figured out, but yeah I saw that. That was quite the discussion on Hacker News. The other thing I wanted to bring up, which I don't know, this is pretty cool to me. I deal with an insane amount of large files and I use Dropbox mostly for that. Like to give you a sense, I have the terabyte plan and it's like sometimes gets too full and I have to clean up my Dropbox storage. But my hard drive doesn't really want to sync that much stuff. Did you guys know that Dropbox released this thing called smart sync?
 
00:29:06 BADER: Yes, and I've been wanting to use it, but it installs a kernel module and so I was like aaah.
 
00:29:14 KENNEDY: Right, because it's got to get into the file driver. Yeah, so people have this problem, they have, Dropbox came out with this thing called smart sync that will basically give you and your explorer and your open dialogues on Windows or Mac a view which pretends as if the files are there and as soon as you try to interact with them even from like the command line, they will automatically download if they're not which is basically let's you sync nothing but what you interact with, which is really amazing.
 
00:29:41 BADER: It sounds super cool like, I have a lot of trust in it and the Dropbox engineering team and if it works that smoothly, I think it's an amazing feature. I've sort of been hesitant about enabling it.
 
00:29:52 KENNEDY: Alright, when you enable it, you tell us how it goes. I'll probably try it out. I'll give you guys a report eventually. Alright, well I think that's it unless Brian or Dan, do you have extra stuff to share with everyone?
 
00:30:03 BADER: No.
 
00:30:03 KENNEDY: Right on, well.
 
00:30:04 OKKEN: I think I'm all good. Yeah, no. It was great to be back.
 
00:30:08 KENNEDY: Yeah, definitely. Brian, thank you so much and Dan thanks for dropping in and adding some spice to the mix for our whole podcast here.
 
00:30:16 BADER: Awesome, thanks guys.
 
00:30:17 KENNEDY: Yeah, bye everyone.
 
00:30:18 OKKEN: Bye.
 
00:30:18 KENNEDY: Bye. Thank you for listening to Python Bytes. Follow the show on twitter via @pythonbytes, that's Python Bytes as in B-Y-T-E-S and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and sent it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.
 
 <|endoftext|>
00:00:00 Hello, and welcome to Python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 188. Recorded June 24 2020. I'm Brian knockin. And I'm Michael Kennedy. And this episode is brought to you by us talk Python training and Ryan's fabulous pi test book, right? Can you believe 188 contiguous episodes? I cannot. The number keeps going up. I guess that's what numbers do. But I guess so. It's awesome. glad we're still doing it. It's fun. Which got for us to start with. Well, you may have heard me talk about async. And actually, I didn't cover it on purpose. There's sort of a controversial async article going around. I don't really want to talk about it at the moment, unless I have to. But I do want to talk about my favorite async thing, which is unsync un s wincc. unsafe. Okay. I feel like the Python core developers should look at this and say, You know what, we massively over complicated. All the asynchronous parallel capabilities of Python, let's create a unifying API that like, is the one simple way that you can do things. And if you need to dig into the details of the other ones, that would be great. They haven't done that yet. I mean, async await the keywords are great. But if you want to say work with like a thread, and some async IO thing, the way you do it is like totally destroyed and unrelated. So this unsink Library is like a unification library on top of threading, multi processing and async and await. So I've talked about that a bunch of times, and it's sweet. I'd love to see Python just adopt something very similar to that API internally. Anyway, there's a cool article called Making a trading bot a synchronous using pythons. unsink library by Matt, Matt Gostin. Oh, nice. Yeah, it's cool. It just walks you through a somewhat realistic example of creating something that does rating. And in order to do it has to go and you know, it talks to a different web services and some databases, and whatnot. Now, all these are simulated with a function call to a time sleep call. Right? One of the things you'll see a lot of people when they do like these performance analyses and stuff is they'll have some async code, and it's hitting up against some other thing. And that other thing has a performance limit that is like near

00:02:25 near what I can handle anyway, and so you can't get a big boost out of it. So this kind of like puts that to the side. So it's like, we're not going to actually talk to another thing, because maybe that thing is slower than we can handle or who knows, we're just gonna go and simulate slowness by sleeping, right. So it actually walks you through some different ways of doing things that has a synchronous version, and the async and await version using unsink. I don't know if there's intermediate, I can't remember if there's intermediate versions in this tutorial about having just a pure threaded version, right. But it's mostly about taking the synchronous version and making it unsink. So it's, it's nice, because it's a somewhat realistic example. It's not as much of a realistic example as some of the scenarios or it's not as ideal of an example of some of the other scenarios. Like for example, if I need a web scrape 100 different websites, right, you could do that 100 times faster by just like kicking them all off and getting it back and not really waiting, because all the work is happening, distributed elsewhere. But it's still a pretty realistic example, doing some different things. It would be fun to hear it talk about scalability more like how much it's like, we've got a couple, I think it's doing three things. It's like, Look, we could do these three things quicker. But you know, like, what is the limit? Like? How far can you push it? Because I think you could push it quite far actually, with what they're doing. It's just hard to know when if sleeps are representative, as well. Yeah, it is hard to know if like asleep is representative basically, if it's like in truly external system that has infinite scale. Alright, some cloud service, that asleep is probably pretty representative, like whatever you're doing is not going to affect it. But if it's a like a database, right, if I'm doing 10 requests against the database, versus one, and maybe the database can't handle it, it slows down to what like two or three queries at a time would be like, there's things like that right, where it hits a limit, but if the thing you're talking to totally scales, and sometimes it does sometimes doesn't. One thing that I think is missing from this is it doesn't actually use async methods, it just has regular methods. So this is really an interesting thing, right? So it's like, okay, we're gonna put unsink on it. There's a regular function that we put that unsink decorator, which turns them into these things that are available in parallel and so on. And what you really probably want to do is actually leverage async in a way create, you know, def async methods, use await async IO sleep and all that kind of stuff. So I didn't actually fully transition them to leveraging async IO. But what I think's interesting about that is, it still got much better with unsync. And what's cool is like it said, Okay, well these are not async method.

00:05:00 So we're gonna have to use threads, but let's just fire them off with threads anyway. And because the time that sleep releases the Gil, just like a network call would, it still kind of works. So it's kind of neat that like, it wasn't fully converted over, but unsync still made it better in the same way that you would expect. Interesting. Yeah, yeah. Yeah. So anyway, a cool example of someone talking about unsink was not me.

00:05:23 separate out, reviewed it. There's a lot of cool stuff in there kind of like a like a fruit salad, would you say? is a lot of stuff to take? And it's, it's sweet, and people generally enjoy it. Oh, man, I shouldn't have picked this story right before lunch also, cuz I'm kind of hungry. I know. I know. It's good. So tell us about this. I was gonna put this as an extra thing. But I put it as one of my topics because it's actually pretty darn cool. So this on Twitter, Lacey hentschel just asked the question of like, there's this Scrum estimation tool with fruit? Does anybody remember it? and Kathleen Jones replied and said, Is this it, essentially? And it was. And so we're linking to this article. It's called the fruit salad Scrum estimation scale. And, you know, task planning and Scrum estimation is a, you know, it's a kind of an art form and a science together, you takes a while to get things right to maybe just really, really super quickly tell people, what is this Scrum estimation about? Okay, maybe scientists, and they're like, we don't do that in our biology. That's true. Lots of teams have picked up Scrum or sort of a variant of Scrum, which is a way to plan what tasks, what things that people are going to work on. And the things that people work on, we kind of want to, you know, have a like a size for them. And instead of doing like, Oh, it's a one day task, or a two day task or five day task, or some people just use small, medium, large t shirt sizes are popular. And then also, for some reason, just points are very popular. And the point system is often the Fibonacci sequence, which, but it's not really just kind of Fibonacci. So I can't remember the numbers right off the top of my head, I think they're like, one two through a, we usually skip three. So one, two, either four, or five, and like eight sometimes and then like 13, and 40. So it doesn't really quite fit normal Fibonacci, but I think that's where people took it from. So we've been using them at work as well lately. But the numbers, it's a kind of like t shirt sizes, but I don't know that none of these things really fit. But the fruit salad estimation scale actually kind of fits. So they've mapped 1235, and eight to grape, apple, cherry, pineapple and watermelon. And I like these ideas, because they're kind of like how easy they are to cut up something, and how easy they are to eat them. So like a grape is trivial. You know, you just pop it in your mouth, it's no big deal. You don't even have to cut it up for fruit salad. Although I usually do an apple, everybody knows how to cut up an apple, but it's a little more food. So it takes a little bit more in it might take some more time. A cherry. It's also easy, but there's some unknowns in it because of the pit. And pineapple. Yeah, you can't just eat that you've got to actually put some work into it. Some people don't know how to cut it up, and it's a little messy, you're gonna have to get your hands dirty for that one, and a watermelon, all bets are off. Nobody knows. You don't know what you're getting into until you cut open the watermelon. So I like that as the large size. There's more description on this article. And then they throw in some nice ones. Tomato and avocado, tomato and avocado do not map to points. But tomato is unknown. I mean, are you a fruit? Or are you not, and you need more information before you can estimate it. And it really doesn't belong in the fruit salad until you change it into something else. And then one of my favorites is avocado. That's something that you just get, you can't really scope it very well. And it's probably urgent because it'll go bad quickly. These are great. I like this, this concept of thinking about them here. Yeah, so I think that somebody needs to put these fruits in an official product. That would be cool. That would be cool. You know, another one that comes to mind here is a mango. Yeah, you know, those are tricky because I like to cut them like in the orientation of the husk or whatever the thing in the middle is a giant seed. But you got to hack into it a little bit before you can even figure out what that is. So you kind of start out unknown and it's slippery. You may hurt yourself on it, but it's it's really an it's a high value. Once you get it out of there. I don't know mega and sometimes you can't tell until you get into the mango if it's even good or not. Because Exactly, yeah, I think mangoes in this category somewhere but this is a really cool idea thinking about it, because it's super hard to be very accurate when you're estimating stuff. And what I like about this is it just brings that together

00:10:00 pretty clear way, right? They're not like, well, how many hours? Is it gonna take? It's gonna take, it's gonna three or four hours like, No, no, we're not talking like, I can't possibly give you that answer. It's like, Alright, fine. It's four hours plus or minus 16 hours. Yeah. And then that kind of stuff. If you do points, people always have like, some conversion to hours anyway. And it's annoying. I think it'd be cool to somebody said, You know, I got a manager, somebody saying, hey, hey, how many how much time we have left? Be like, well, we have three grapes and a cherry left to do.

00:10:31 Yeah, just don't talk about it by lunchtime. Anyway, now I am hungry now. So instead of doing a another topic, we should just talk about how awesome we are, how awesome your training courses are? Oh, thank you. Well, so this episode is brought to you by us. And we both are doing stuff, we would love for you to check out over talk Python training, we have a bunch of courses, I think we're up. Probably by the time that this goes out, we're up to almost 200 hours of courses and a couple hundred hours of exercises. So lots of stuff to be learned over there. But I want to call out if you have a company, and your company has a training budget or training plan, you know, reach out to us we have special deals and offers and pilot programs to help get our courses started at your company. So shoot me a message over the Michael at talk python.fm or just check us out over there. And if the writing code, they should test it right definitely should test it and tell everybody, the Python testing with PI test is the best way to get started with testing with Python. And even though it's like 180 pages, the first two or three chapters will get you up and running like in a day less than a day. So you can get started right away. And then you just get faster and more more awesome as you go along. Indeed, I take advantage of all those features in PI tests that people might not know about it. So you know, one thing, I think people come into programming often feel like, if they're going to be programmers, they have to be good at math, like, Oh, I was really good at calculus. So I'd be a good programmer, or I never actually got algebra very well. So I probably be a bad programmer. And I think that that connection is often very much not true. Like I don't do math, other than like basic arithmetic in my programming these days. But some people do. Right? Some people come as engineers, or they come as scientists, and they actually do math frequently. And they want to do it with Python. So Vernon thermit bomber at sorry, sent over this cool project called math to code. Have you seen this? Yeah, I was checking this out the other day. It's pretty fun. Yeah. So imagine you wanted to learn something by doing flashcards, right, I'm going to show myself, I'm gonna flip through them and like, see, like a simple thing. And then what the answer to that is, and this is kind of like that, like it starts out says, what I want you to do is take the square root of something using NumPy. And it's all based on NumPy, or just pure Python like, Ray something to the power. It's just x star star y, for example. But it just really quickly and simply takes you through that. So you type out the answer. Hit enter. It's all hockey driven, which is great for a web app. And it just kind of guides you through, like practice experience of here's a math problem. Solve it. NumPy. Yeah. And it's so beautiful. It is pretty right. Yeah, cool. Yeah, I honestly haven't made it to the end. So I don't know how many answers or questions or whatever, there are flashcards as I'm calling them. But it is open source on GitHub, which is pretty cool. So you can go in there. And, you know, check out the source code and play with it. And yeah, it looks like 13 questions, but it's on GitHub. And the questions are just markdown, so you could go add as many as you would like. Actually, that's pretty cool. Yeah. But what also is interesting, just at a more higher metal level, maybe you don't care about finding, you know, the square root of something in Python is the building blocks. So if you look at how this thing is built, and like I said, open source on GitHub, you can check it out. It's built running Python on the client side. What really yeah, so it's built using sculpt, which is a JavaScript implementation of Python. And then it has sculpt NumPy for the subset of NumPy, running on a client side that it wants you to experiment with, right? Like NumPy dot square root, for example, or NPS dot square. It has k Tex for rendering la tech on the browser side. It has next j s for front end tailwind CSS, which my friend Mark just told me about, which is a really interesting alternative way to like CSS front end frameworks, like bootstrap, but different remark from markdown on the client side, gray matter, all sorts of stuff. So there's a lot of cool building blocks here. Regardless of whether or not you're actually into the questions. Yeah, this is awesome. That might be more interesting, actually, than the thing right, because I honestly don't care about learning the math features generally. It's nice, but it's just not some. I do.

00:15:00 Yeah, this sort of model of like have a I mean, if you look at it, I don't know if he already said this, but if you look at it, you get like, the some explanation and a question on the left a place to type in and submit your answer on the right. And then there's even a place where you can like, set up a hint and and show show the answer hidden or somebody. And having all this just it's, it looks very nice and having like this as an example to, for somebody else I could totally see, like a teacher running with this to help help their students learn really pretty much anything. Yeah, it doesn't have to be exactly Python long as you can verify it with Python. Yeah, go. Yeah. Tell us about the PAP. There's always a pep to be discussed. I've learned about a couple of new peps and the three nine timeframe right, so this is the 310 timeframe. So we're everybody's should be using three eight now. And you should be testing three, nine, if you especially if you have a package that depends on that people depend on so that when three nine is then officially, it'll all work. But people are already working on 310, of course. And one of the peps for 310 is pepp 622. And it's not official yet. It's in draft status. But there's some cool people working on it, including Guido, and I think it's super cool. Did you have you taken a look at this? I have taken a look at it. It starts out to me feeling like a switch statement? Yeah, it's there's a lot more going on here. It's called structural pattern matching. And right off the bat, they note that there have been previous peps before that have tried to put switch case statements in Python. And they've been rejected, I don't know why they were rejected, it's kind of something I didn't pay attention to. But this Yes, instead of a switch case, it's a match case statement and a multiple statements. But the neat thing is, there's all these different. So when we think of like a switch case statement, and like from see matches by equality or value, you switch on some variable name, or some expression. And if the answer matches one of the case statements, then you run that part of the code. So that would be in the pepp, 622. world, that sort of a use model would be like the literal pattern or the constant value pattern, basically, with equality and stuff. But it does more than that, you've got named patterns, so that if you just have a whatever, if these will always, if nothing else, succeeds, pre or prior to it, you can just have a variable name, and it just assigns, whatever you're passing in to that name, and you can use it there. My first thought was, what's the big deal, you already have the variable name or the value, but this new value in the name pattern is only available in that it's isn't assigned, otherwise, if that didn't get hit. So that's kind of some useful neat things, constant patterns kind of the same, but then it gets interesting. So I think it'd be worth it just for that. But you've got sequence patterns where you can do it works like unpacking assignment stuff, you've got mapping patterns, that are like similar to sequences, but for like dictionaries, and class patterns where it can, you can have a like a custom class or a class that it might be and you have a match object, it's similar to equality, but you could have, it could be different than equality. And then you can combine them with ORS. So you can match cases, if multiple things are true, like a Boolean expression in there. I don't think it's a full Boolean expression, but at least ORS work for pipes, guards, so you can say if this pattern matches, and then have an extra if expression, so you can clarify it even more. And then even sub patterns. And at that point, I kind of got lost. So just there's a lot here. I don't think it's going to clutter Python up actually, I've seen some examples of how this would dramatically simplify some Python. So yeah, it's interesting. What's surprising to me is how many types of things it's trying to do at once, right? Like, it's not just like, oh, let's have a switch statement with like a slight variation. Like it's, there's a ton of stuff going on, including things like if you switch on an enumeration, you can just say dot attribute, and it'll try to like pull that attribute out of that type and check it. And yeah, it's pretty interesting. One thing that's missing here that I would love to see is range matching. Right? So I could say it's in the range of zero to 10. match this case, if it's a range of 11 to 100. Do this other thing, actually. So I have my package, the switch Lang package, which adds switch to Python, and it has those types of things. So I actually sent that over to one of the people working on this map, it said, Hey, this is really cool. You know, check out some of the ideas from this one, like, especially the the range matching, and see if it makes sense here because it's so common that you would want to say

00:20:00 Like, this range is this case, that range is that case, and so on. And we even talked about a package A while ago, I can't remember exactly what it was called, which is unfortunate that we've covered too many things. But it was basically you could give a, like a number or a value, and then this range, and you could ask is this thing in that range and some real simple way? So it'd be cool. If like, that was all combined, you might be able to do with the IP guard, though. So you could say like, you know, match x if x is within, you know, in this range? Yep. Yep. It's true. Yeah, we'll see. I mean, at that point, like, if you're writing a lot of complicated statements, you might as well just write if statements.

00:20:39 Yeah, yeah. Although, I mean, it's just always, I don't like it when I see like these, the FL sliders. So I think that this is more than, of course, more than just replacing the FL sliders. It's also doing things like unpacking and other sorts of cool stuff. But you're right, yeah, there's a lot going on here. There is, there is, but it's cool to see innovation around this, I do feel like that thing, that general idea is missing from Python. I know people say you could just use a dictionary or stuff. But there's like a lot of a lot of cases where if else is buggy, hard to maintain, or like these other cases are very, you know, verbose, and so on. Anyway, I'm happy to see this, I think, depending how it comes out, it's very complicated. But uh, the idea is good. So one thing that we've talked about a lot, Brian is how do you host your own private pi, pi, right, pip install a thing. But I wouldn't be able to pip install and version. Like, say you work at a large company, you probably have libraries, packages that you've shared across projects. How do you like have the PIP style package management, but for you, well, we've got a custom pie in our work is right, and that's fine, that's fine. The more global you are, the harder it is to maybe do that. Well, without people getting a hold of like, obviously, you want to protect that code, because that's internal private code. But at the same time you want to share in version two, there's all sorts of options that you can set up and take care of that. But there's this new thing, which tormod MacLeod has said over our way called code artifact from AWS. Neat. Yeah. So the idea is, it is a general purpose, basically, package management system for a variety thing. So right now it works with Java with Maven, and Gradle. For JavaScript, it has NPM and yarn. And for Python, it has PIP and twine. And basically, you can just set it up in AWS and tell it to go. And they'll take care of all the storage, and the security and all that kind of stuff. And then you can just pip install all the things. And it also is backed by the real pi pi, or the real NPM. And you can whitelist stuff you say, Okay, if somebody PIP installs requests, just get the real requests and stay in sync with that, but let them have it. But if they pip install that misspelled request, I think you can say don't don't let them have that type of squatting hacker version. Yeah. So these sorts of solutions are pretty interesting to be able to have basically a cache of API stuff, and then also your own stuff. So you push to it just like often you publish it. I don't know about this one. But often you some of these, you use twine or something to push just like you normally would, but it doesn't go to ipi goes to your own thing. Yeah, it's pretty neat. It reminds me of artifactory, which people might have heard of, which is looks really cool. However, if you look at like the pricing, it starts at, you know, just $2,900 a year, right? For the base version, the pro version is 14,000. And it goes up from there. So you know, this is it looks like one of those cases where one of these cloud services from places like AWS and so on, it's coming along and going, you know what, we got you. And it's not 14,000 a year or whatever, or month? I don't know, whatever the you know, it was I said there per year. Yeah, I think to some degree, I believe GitHub is working on something like this as well. I can't remember what it's called over GitHub. But it doesn't have Python yet. Which is why I haven't jumped up and down about it. But I think it will I think they're working on it. Well, supposedly like warehouse was something you could just use that is used for oil. I guess they don't call warehouse anymore. But ipi.org that the new pipe? Yeah, yeah. So I think that you can deploy that yourself, but there's not I haven't seen very many people like well, one I'd like to see people write instructions on really how to get that up and running for yourself. And and also like to see some like, you know, warehouses a service and sorts of things anyway, not so free money laying on the table there people Yeah, that's a good point. That's right. I What's his last one I wanted to bring up invoke, and it's what pi invoke.org is where you can see the documentation for this. And to tell you the truth. We've had it on our list for a while and I've tried several times and couldn't get it to work but

00:25:00 I had some confusion so that my confusion was the product. When you install it, you install it with pip install, invoke, not with the PI part, but there is a PI invoke on pi pi, but it does something different. So, the invoke that I'm talking about is invoke without the PI in front, but the website is pi invoke.org. Okay, if you're confused, I'm confused, but we've got it in the show notes. But why do we care about this, we care about it. Because it does make me feel I like Mike files, I think make files are fine. There's parts of them I don't like like, I don't like that the tat like, it's the only thing in my life that I have to use tabs for. Because I usually use spaces in Python. But make files have tabs. And often things like cleaning out your building your documentation, or kicking out for tests or deploying or a lot, a lot of those other book maintenance things. For a project you put into a no make file. And some people use talks for that. And you can, but invoke is intended to do that sort of thing. But with Python code. So with invoke, you just create a little test.py file with these little tiny, you just have little functions that you decorate with the Add task decorator. When you if you have it installed, you can just say on the command line invoke and then the name of the function. So if you have a build function, you can say, invoke build, and you can pass in command flags to it. And it's just pretty easy to run something. So something like you would use make files for. You can have it without any makefile. Yeah, that's cool. And you get to write Python, or your scripting, right, basically, yeah, the project looks like, I'm not quite sure if this is recent or old, it says that it was intended for building documentation. But it does look like there's some examples on how to combine it to I don't see why you couldn't use it to, to run your tests and run all sorts of other stuff too, because it's just, it's got things like you can run Python code, but you can also run command line, it can launch a command line tools, and all sorts of stuff. Yeah, if you can run stuff off the command line, then you could do get pre commit hook type stuff, are all kinds of automation, or even like cycle, the version like increment, the version numbers and all kinds of stuff, you want to put it together. Oh, yeah, that'd be a good thing to put in there, version incrementing. And then also just like things like deploying, like, check linting, that's a good thing. And then you can still make fun. One of the neat things about make is different make targets can depend on each other. And this one has dependencies as well, you can have, like, for instance, build can depend on clean and can have to have to run off and do a different target. And you can make a whole mess of stuff in there. Or you could keep it clean. But I like things like this that have I mean, one of the reasons I'm not even I don't mind make files, but people that are not from a Unix or don't come from Unix background. Have no idea what to do with a make file. Yeah, it's good for the team to make it easy for them. Yeah, yep, indeed. All right. That's pretty cool. I like to use this. And I just got to think of a reason use case for it. And, and I will, it's great, though. Well, that's all of our six items. Actually. I've been like totally swamped at work. I don't have a lot of extra things to share with people. You have anything extra for us. I have a mysteries that we can discuss no mystery. Yeah, apparently, he just talked, he talked about Python, three, nine, and it's in beta, which means it's getting no new features. It's just getting tested and ironed out. And there was Python three, nine, beta one. And then there, ido announced Oh, hey, everybody, here's python 390. Beta three is out for immediate testing. And somebody disappeared, beta two. So the problem apparently with beta two was somehow the way that it looked up certificates was busted. So if you like, installed it from source and just ran it, it would be fine. But if you install it from the installer, all of a sudden, every web requests that went to HTTPS or something along those lines would fail. So that's not good to break the networking subsystem of Python, because a lot of things depend on that. And so they quickly ditch that one and fix it and roll out beta three. Okay, and just about the time that this is released, so on June 29, we'll have beta four, which presumably will still make web requests successfully, and won't have to be disappeared. So anyway, just some beta Python three, nine news, beta three is out. Beta four will be out days after this comes out. Or actually maybe even before, so there is no beta to before it will be after before it will be before.

00:29:37 Before it will be before I think but it might be after I'm not sure.

00:29:43 So I've got a joke for you. I grabbed here off of

00:29:48 Geek and poke, which is like a cartoon strip. Okay. All right. So it's a mom and a son. And you have kids, I'm sure you know how this goes. How was your day?

00:30:00 Yeah, good day. Yeah. What do you learn in school? Not much. You were there for eight hours, continuously beginning instructed, like you didn't learn more than like half is it like or Yeah, right. So but if this child happens to be a geek, there's another ploy in which you can, you can employ another technique you can employ to get them to tell you more about their day. So goes like that says, Hi, Darlene. How was your school day? Huh? And like sort of a blank stare. Hi, Darlene. How was your school day dash dash verbose?

00:30:32 Yeah, I totally wish I had verbose flags on my kids sometimes. Yeah. Also, sometimes a dash q or like a quiet one would be good sometimes. Yeah, exactly. The dash dash quiet.

00:30:46 If I got to pick one or the other, I'm gonna go for the dash dash quiet as an option.

00:30:51 Yeah, especially for young kids. Yeah, exactly. Exactly. That he needs a little piece dash dash quiet.

00:30:59 Yeah, definitely. All right. Well, that's it for the episode, I guess. Yeah. Thanks a lot. Again. You bet. Thank you for listening to Python bytes. Follow the show on twitter at Python bytes. That's Python bytes as in be yts and get the full show notes at Python bytes at FM. If you have a news item you want featured just visit by thumb bytes.fm and send it our way. We're always on the lookout for sharing something cool. This is Brian Aachen and on behalf of myself and Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.

 <|endoftext|>
00:00:00 Hello, and welcome to Python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 206. Wow. Recorded October 28 2020. I am Brian Aachen. And I'm Michael Kennedy. And we have a special guest today, Steve downer. Hi, thanks for having me on. Steve. Thanks for coming. It's great to have you here. I also want to throw out that this is sponsored by tech meme ride home podcast, check them out of Python, bicep FM slash ride, Steve. I'm sure many listeners know. But maybe just give us the quick rundown you do cool stuff at Microsoft get in Python better on Windows, and you're a core developer? Yeah, so I'm main day job is from Microsoft, or I work as basically a Python engineer, kind of a wide ranging resource to the company. So I haven't shipped anything of my own in a while. But I've had my fingers in a lot of pattern related things that have gone out recently. So a lot of fun, a lot of bouncing around between different teams getting to work with a lot of different people. And yeah, as you say, I'm a C Python core developer, one of the windows experts on the team. I'm responsible for the builds that got on python.org. And just generally keeping Python running well on Windows. Yeah, that's awesome. And you've done some interesting talks, like Python is okay, on Windows, actually, and talks about some of the popularity of it and how we as a community shouldn't discount it just because we might happen to be on a Mac or use Linux or whatever. Right? A lot of people do Python on Windows. Yeah, yeah, the estimates vary. And and every time I get new numbers, they seem to show up slightly different. So it's real hard to get a good fix on how many Python developers there even are in the world. I did get some numbers recently that I had a few people double check, because they were saying there's like 20 million installs of Python on windows in in the entire ecosystem, which sounded like too many to me. So I had them double check. And then I had someone else double check. And they all came back saying, Yeah, that's about that. So I'm like, okay, there's a lot of Python on Windows out there. But yeah, it doesn't show up in conferences doesn't show up on Twitter that much. And a lot of people just look at the packages that don't work and go, Well, I guess it doesn't exist on Windows, because otherwise this package would work. And so you know, chicken and egg problem, right? Yeah, there's a lot of chicken and egg problems in the Python space. And it's a beautiful place. But there are some of these weird chicken and egg ones. Yeah, it's weird. I've been using Python windows since I started Python. So if I,

00:02:14 but one thing I haven't been using, very much is he named so that was an attempted a transition. So why not? Brian, tell us more.

00:02:24 Actually, I've tried many times, I've tried to use enums. And I actually, just to be honest, I don't very much and partly because I'm used to using enums in C and c++. And they're, they just act like symbols in in C and c++, they work pretty good. There is some weirdness with enums in Python, and I'm going to highlight a an article called Making enums. As always, arguably, more pythonic by Harry Percival, he starts off by saying I hate enums. So he's a funny guy. And this is a fairly hilarious look at why enums are frustrating, sometimes. And then he presents a semi reasonable workaround, I think, to make them more usable. So what's wrong with you noobs? Well, he gives an example. And just as a simple enum with string values. And you can't directly if you try to compare one of the new elements to the value, like the value gave like a similar string. It's not equal, it doesn't compare. But you can use a dot value or in the Union value, but that's just weird. He also said, he kind of thinks it'd be neat, if you could do a random choice of all the new values, I think that would be neat. And you can't directly convert into a list, there's just interacting with the new type itself, or the the class itself is, has problems. In the documentation, there is a suggestion that you can use with you can, instead of strings use int and doing into enum, and it works a little better. And if you like it like that, but once strings, you can make your own string, a new class, I'm not sure why they didn't just build this into the default, or, you know, one of the standard types anyway, but stringing him is not there. But there's an example. And it sort of fixes a lot of stuff, but not everything it doesn't still doesn't allow for those direct comparisons. So the solution that Harry came up with is just kind of like the solution, the documentation says, derived from both enum type and stir when you're creating your enum class, but then also define this little snippet of a Dunder stir method. So that stir method works better. And at that point, most of this stuff works that he wants to work, it still doesn't do random choice. But apparently, he's gotten over that a little bit. So I actually think this is really, this is still just a really small snippet, a little like two lines of extra code to add to your ainun types to make them a little bit more usable. So I think it's reasonable if you're judging by, like, value add per character.

00:05:00 This is awesome, because it makes working with enumeration so much nicer. You can do like the natural things that you would expect, especially around testing and comparison. And it's like, also add a drive from stir, and just add a Dunder stir method and you're good. See, what do you think about this? Yeah, I just add the the gotcha that you have by doing this as now you can have two values from different items compare as equal, which as I recall from the original discussions was the reason this wasn't put in by default. So you've got a color enumeration and a fruit enumeration? is orange, the same between the two? And I think the decision was made for enums. To say, No, it's not if it's a fruit, orange, it's different from the color orange, making this change or using an entity you know, is going to make them equal. So as long as you're prepared to deal with that, which, to be quite honest, every time I've reached for enums, I am much happier with string literals. And quite comfortable with them. Matching equal Yeah, but that is just one thing to watch out for. Usually, it's about constraining the list of things like I know, there's five things I want to make sure I don't like somehow mix up with those five R's when I go, you know, class dot, and here's the five, let my editor tell me which one of those it is. It seems like it's all that. So what do you think about if you overrode like, if you added gender EQ, vendor and EQ, so like the comparison would say it has to be this type of enumeration, and the store value has to match? Yeah, that would certainly deal with that. Gotcha. Again, when these were being designed, basically, anything that gets designed and added to Python has a very large group of very smart people work through it. And you know, as a result, things always get missed. So it's possible that one was just missed. It's also possible that someone did figure out a reason why that was also risky. And and, you know, risky, when you're developing one of the most popular languages in the world is just anything that might surprise anyone. So someone has deliberately designed around using enums, everywhere, they're probably not going to be surprised someone who is using code and that developer has swapped out all of their, you know, they had a class with static variables, and they turned it into an enum. And now stuff breaks, because of the defaults that were chosen for them. That's the kind of thing that you're trying to avoid. And, you know, in a language that has anywhere between, you know, five and 20 million, kind of regular users. But as a workaround, I mean, if you know where your income is going to be used, there's a reason you can derive from string and it's exactly for stuff like this. Yeah. Thanks, Harry, for putting out there. That's quite a neat little bit of advice there. And I'm so glad that we have Steve here, because I picked some sort of semi internal type of pieces. And I'm going to make some statements about it. And then Steve can correct me to make it more accurate. And also, we get the core developers but a perspective not they represent all core developers, but at least a slice. Alright, so this next one I want to cover is that Python 310 will be 10% faster. And this is the 4.5 years in the making. So Yuri still have enough. Longo did some work on optimizing, think, was it load attribute? Or was it load method load, a call method do about some of these load operations down at the C Python, C Val level. And then Pablo Galindo, who's also a core developer and the Python 310 311 release manager picked up this work. And now we have load method, call method and load global going faster. So basically, there's some optimizations around those opcodes that make this much faster. And this idea apparently first originated in pi, pi, pi pi. So I'm pretty excited to see that, you know, some simple internals that don't seem to change a whole lot of stuff might make this a lot faster. What do you think, Steve? This one is real, like I was so excited about this, when it was first being proposed. The basis of the idea is that Python keeps everything in dictionaries, which means every time you look up, you know, dot name of anything, it takes that name, makes it a string, turns it into a like, gets the hash value, looks it up in the dictionary finds the value, maybe wraps that up in some extra stuff. Like if it's going to be a method, it's not stored as a method, you turned it into a method when you know what it's being kind of dotted through to get to, and then returns that. That's a whole lot of work. And if you're regularly calling the same method over and over again, why not cache it? That's the heart of this, right? It says that cache around load outer, right? Yeah, it does that cache and the inside the URI had that he made work, and I'm back, I think someone else had suggested it earlier and hadn't gotten it to work was what happens when things change. Because again, as I say, it's we're designing language for many, many people do all sorts of weird things. And if you cache a method, look up, and then someone tries to monkey patch it, you know, we've now broken their code for the sake of an optimization, which, you know, is a no no, in Python. It's like correctness beats performance. In every case, that's just the trade off that the language chooses to make. That's almost always what you want or like, when would you want to be faster and wrong rather than slower and right, I'd be happy with Foster and no monkey patching.

00:10:00 But, yes, sure, like, faster and fewer restricted capabilities might be a really good trade off, but faster and wrong. And it's not a good one. Yeah, we did some benchmarking and basically found that there was a way to track all dictionary updates in the entire runtime with a version tag that was not going to instantly overflow and not going to break everything. So it became really easy to say has this dictionary changed since I last looked at it with one single value comparison, and so it looks at that value. If it has changed, it's going to do for lockup again. 99.999% of the time, it hasn't changed. So it can give you the cached value and you saved big dictionary lookup, possibly error handling descriptor protocol, all of this extra stuff that just adds so much weight to every operation. And that's everywhere. I mean, that's everywhere in the language, absolutely everywhere. That's fantastic. One of the things when I was first getting into Python that made me sort of have a sad face was realizing that having function calls was pretty expensive, right? Like having a big call chain, like actually, the act of calling a function has a fair amount of overhead. But I wanted to break my code into like a bunch of small functions to make it real readable. This part needs to go a little faster. Maybe that's not what I want. I you know, and so hopefully this helps with that as well. Yeah, that and vector Cole is another optimization that we got in recently. I think that might have been the pet 509 actually was vechicle also designed to make that faster, just removing some of the the internal steps for doing a function call. Fantastic. And he's like Brian said, this is everywhere. So that's everyone's gonna benefit. This is fantastic. Yeah. Well, we would like to thank our sponsor. So this episode is brought to you by tech meme ride home podcast. This is great podcast for more than two years. In nearly 700 episodes, the technium ride home has been Silicon Valley's favorite tech news podcast. The technium ride home is a daily podcast only 15 to 20 minutes long and even and every day by 5pm. Eastern, it's all the latest tech news. But it's more than just headlines. You could get a robot to read your headlines. The tech meme ride home is all the context around the latest news of the day. It's all the top stories, the top posts and tweets and conversations about those stories as well as behind the scenes analysis. The tech meme ride home is the TLDR as a service, the folks at Tech meme are online all day reading everything so that can catch you up. Search your podcast app now for ride home. And subscribe to the tech meme ride home podcast, or visit Python bytes.fm slash ride to subscribe. Yeah, thanks for sponsoring the show. And Brian, every day. Like we do this once a week, and it's a lot of work. These guys are on it. I could totally do this every day. If I didn't have another job. I wouldn't not have any problem with catching up on Python news daily. So actually sounds quite lovely. I wonder how that podcast is doing now that not so many people are having to commute to and from work. That sounds like one of the things where you hope that you've you've given people the the excuse to tell their employer on my commute between four and 5pm I can't do it. You know, I've logged off and go listen to a podcast during that time. I listen to podcasts while I'm I realized I was missing out. So I started listening to podcasts while I'm doing my laundry. I do it when I'm we're doing some doing dishes. I listen, when I'm doing yard work, stuff like that. Yeah, I recently broke out some other older podcasts just to catch up on stuff with a big mess around the home. Like it's a long story with a new puppy that's not worth going into.

00:13:41 I'll tell you guys after the show, it's pretty outrageous. Anyway, yeah. And it's so enjoyable. But what I've actually found is shows like Python bites and ride home that have like a bunch of short little things that you can just drop in and out of match a lot better now that people are not commuting so much. You can like do that 10 minutes while you're like folding laundry and get like a whole segment. And so I think he gets varied, but actually it's pretty interesting. I think that they and us here are well positioned like talk Python has more of a dip than Python bytes. Have you surveyed your listeners to find out what they're doing while they listen to you. No, not really. Everyone should tweet at these guys. Twitter. What were you doing when you were hearing this podcast? Yeah, that's also I've got a few. It's but nothing like a survey or give me a proper answer. See you I think yes, your next item is super, super interesting. And people speaking of Twitter, right, like this whole conversation started as a Hey, Twitter message like why did this happen? Well, let's Steve. Yeah, as you know, I spent a decent amount of time on Twitter, my handle there is Uber, Zed, O Ba, which you'll probably never find in search if you're looking for my name, but that's where I am. I really like actually searching for what people are saying about Python on Windows. It's kind of the most honest feedback you get when they think you're not listening. And so I go and listen and one of these popped up, which was Oh,

00:15:00 I tried to install Python 3.9 newest release about a little bit under a month ago on my windows seven machine, and I couldn't install it. And since then I've actually seen a few more posts, someone managed to bypass the installer completely and get it all the way onto their windows seven machine and then found out it wouldn't run. Oh, man. Yeah. And so the question was like, Why would you do this windows seven is still a fairly big platform, why would you take it out? And you know, the answer was just a bit too long for a tweet. But someone kindly included Python bytes in the reply. And so I said, Hey, Oh, come on, and talk about it. So let's do this topic. And the answer is multiple legal looking documents all come together and have to be read in parallel to figure out why we dropped it.

00:15:45 Yeah, the small business owners know what I'm talking about. So one of those documents is pepp 11, one of the the lowest number peps that we have. And it's titled removing support for little used platforms. The title was not originally about Windows, but there is a section in that Pep that describes pythons policy for supporting windows on release day of three dot x dot O, all the supported versions of Windows covered by Microsoft support lifecycle will be supported by C Python, and that's on the three dot x dot o release date. So what that means is, then you now have to go and look at Microsoft support lifecycle website and look up all of the different versions of Windows to see which ones are still covered by support to that date, Windows seven, fell out of extended support in January, there was quite a bit of noise about that, because that means no more security patches, except Microsoft did do a couple more security patches, because some really bad stuff was found. But that's largely stopped. Essentially, it's the point when the only people who get windows seven support are paying for it. And I assume they're paying large amounts of money for it. I don't actually know how much it costs. But that's the point where you know, you bought it, but you don't get the free support anymore. So C Python follows that because no one is paying the core team to support Python on all of these platforms. And so it's, it seems like the fairest point to draw that line, because at some point, we have to say our volunteers can no longer keep a Windows seven machine running. Even I can't keep a Windows seven machine running safely. Because there's no security updates for it. How am I meant to develop Python on it? How am I meant to test Python on it, the burden there is too high for volunteers to handle. So we just say that's the point where it goes away. So because those two documents lined up, Windows eight actually dropped off a couple of years ago, because the support lifecycle ended early for that to force everyone onto 8.1. Windows 8.1 has about three more years. So I think Python three dot 12 will be the last one to support 8.1. And then it's all windows 10. Or whatever comes out in the future. Yeah, yeah, Windows 10. x, or whatever they call it.

00:17:57 That's the difference. That's the Xbox. Yeah. So I you know, I think this makes a ton of sense. And two thoughts I had as you were laying out the case here. One is if you're running on Windows seven, and you can't upgrade to even windows eight or more reasonably windows 10, or one of the server equivalents, right. I'm sure there's like a server quote, like Windows 2003 server. I don't know how long it's supported. But whenever it goes out, it probably falls under that banner as well. Right? Yeah, Windows Server is a bit more interesting that life cycles tend to last longer. Yeah, historically, C Python has only kind of tied itself to the client. Operating Systems. Gotcha. Oh, interesting. Okay. So to me, I feel like if you're running code, or you're running systems that old, you must be running it because it's like some super legacy thing. So do you absolutely necessarily have the most cutting edge? Python or whatever language? Like it's probably something that's that way, because it's calcified? And you probably don't need or you probably shouldn't be putting, like, the newest Chinese things on it. Right? That's not one. What do you think? Yeah, no, I totally agree with that. If that setup that you're running is so critical that you can't upgrade the operating system. How can you upgrade a Language Runtime? Say, how can you upgrade anything on that? I feel like it's in the category. Please just don't touch it. It's over there. Just don't even walk by it. Leave it alone. We cannot have it break. Just leave it over there. probably still has a PS two keyboard plugged into it. Oh, we might with a little blue or pink round thing? Yeah, absolutely. The screen is probably got at least 16 colors. Yeah, the monitors probably really heavy windows seven. It's not that it's not that old. Some of the

00:19:37 seriously, like this stuff is old. And you probably don't want to touch it. Right? Yeah, that's exactly it. It's all the motivation that you would have updating to Python 3.9 from 3.8. And again, we're talking about a version that's only one year old, like Python 3.8 is not that old, and you desperately need to upgrade to 3.9 you even more desperately need to upgrade windows. And that's just really there really is no question about that. The

00:20:00 Same thing applies to early versions of Ubuntu, people running Ubuntu 14 or even 16. At this point, like need to be facing the same thing. And we have similar discussions around open SSL, where occasionally people will be all I need Python 3.9 to run on open SSL 0.92, which our answer is basically, that's pre Heartbleed. That's

00:20:24 okay, I'm gonna play the other side, I totally get the reasons. But I also get the questions. Because the users and the developers or the whoever's wanting to install Python, they usually don't get to choose what operating system they're using. But they do get to choose which version of Python they're using. So I do get said in some cases, and it's

00:20:48 true, I totally understand where the question is coming. Yeah, we joke about how all these machines are. And they're really not like people are setting up new machines, probably with Windows seven, they certainly were within the last year. And there's good legitimate reasons for that. And, you know, we're not, you know, we're making fun of some of the the apparent contradictions, but we're definitely not making fun of the people who have, you know, often been forced into these positions. But the reality is, we can't afford as a volunteer team to maintain Python against unmaintained operating systems. And so, you know, the advice is, stay on the previous version of Python, that the latest version of Python that works for you, it's not going to break, we're not changing, anything new, that comes up security fixes will still come out. At some point, there just has to be a line drawn. And that's the point where we've chosen to draw it. The other thing I want to point out that we changed in this release, which people are more excited about is if you go to python.org. To download Python for Windows, you get this real big, obvious button up front that just says download for Windows or download now or something as well, python 3.99. That's not getting the 64 bit version, rather than the 32 bit version. For a long time, it's been 32 bit, the reason for that was compatibility. We knew a 32 bit one would run anywhere. When we put Python in the Windows Store that was 64 bit only, we kind of wanted to test the waters and see, hey, Will people notice that we haven't put a 32 bit version here. Turns out no one did. And so when we got to 3.9 had that change, we made it 64 bit by default. So that has not flown effect to the ecosystem. A lot of particularly data science packages would rather just do 64 bit only packages. Some of them certainly get theirs done first, and not 32 bit ones. So expect to see some flow on impact from that. Just broader use of 64 bit Python throughout the the windows ecosystem first, yeah, that's super cool. And just like final thought I had was, you know, Django dropped Python two. And they're like, we were able to remove so much code. And it is easier for new people to contribute because they don't have to write for two ecosystems, they write for one NumPy did the same thing. And I feel like this is sort of the same story like you guys can just not worry about yet another older, outdated operating system, and stay focused on what most people care about. Yeah, one thing that someone did suggest in one discussion was why not dynamically light stuff up for the new operating system? And the answer is we do that. And when we drop the older operating system, we're here to delete about 100 lines of code for each point where we do that. So it is we have to do a cleanup, we get to say Oh, we don't have to dynamically check for this API, this API, load this cache this store that call that call this folder, we can just condense that into all we know that this API is there. So we can use it and just reduce a lot of kind of effectively dead code on newer operating systems. Is that a pre compile like, hash if that sort of thing? Or is it a runtime thing? Does it make a performance difference, it definitely makes a performance difference, though, we try and minimize it. But again, there's, there's always some impact, it tends to be in operating system calls anyway. So you expect a bit of overhead. And so it's not going to add a significant kind of percentage overhead compared to whatever operation you you're doing. But it does certainly add a lot of cognitive burden, someone who's reading the code, or one example that we got to clean up recently, not in the in a previous version was we had about, I think 70 or 80 lines of code to concatenate two part segments. And this is before pythons loaded. So we have to do this with the operating system, the API call up until windows seven, I think so pre windows seven was not secure. And it would you know, buffer overruns, all sorts of horrible stuff. But it was the best available function there for handling certain cases. So we use it, but first, we dynamically look for the newer, safer one and call that soon as we dropped, I think Vista, we could delete all of that code and just unconditionally call the one safe path combined function. And that code got a whole lot simpler. Yeah. Lovely. That's awesome. Yeah. Cool. Brian, would you say it's more robust now? Yes. I think it would be more robust. Actually. I thought I showed up

00:25:00 The bash podcast is this the Python podcast? Yeah, this is not as bash bites, okay? I love Python. Of course, I still use bash regularly. And I know a lot of people that are like sis ops people and other people are using bash daily as well. So I wanted to highlight this cool article. This is an article by David passionately called writing robust bash shell scripts. And even though I've been writing scripts for decades, I learned a whole bunch in this, and I'm going to start changing the way I do things right away. The first two tips right away are things I'm going to do. first tip is to include a set dash U. and never heard of this, what it does is it makes your bash script exit if it encounters an uninitialized variable. So the problem without this is like let's say you're constructing a path name or something or a path of long path. And one of the directories or file names you have in a variable, if that's never set, a bash normally just silently just deletes it, and it's just not there. And it'll still keep executing anyway, but it's not going to be what you want it to do. So yeah, I definitely want to turn these this on. So I don't use uninitialized variables. Similarly, if any of your script statements returns a non true value, so it's a that's usually in scripts or shell work non true value means something bad happen. If you use set dash E, that will make your script exit at any point, if one of the sub statements returns a non returns an error value. So you don't you don't want to just keep rolling with an error condition. So this is good. I hopefully, I'll cautiously add this to scripts, because I want to make sure they keep working. And then a tip just to say expect the unexpected. There will be times where you're missing files or missing directories or directory that you're writing into is not created. So there's ways to make sure it's there. Before you write to it, if you're especially if you're running on Windows be prepared for spaces and file names. And so variable expansion in bash, does not really isolate spaces. So you have put quotes around expansion to make sure that it's a single thing. And one of the things right away, the next one is using trap. And I've never actually knew how to do this before. So if you've got a bash script that's running in it, just something's wrong, and it won't exit, you can kill it or other ways to get it to stop. But if you have the system in a state that needs some cleanup, so that this there's a way to use a trap command to exit gracefully and clean up things. The last couple of points were Be careful of race conditions and be atomic. Those are good things to do. But at least a handful of these I'll put to use right away. So it's good. Yeah, this is neat in a lot of the stuff I didn't really know about. So yeah, like, continuing on if something went wrong, just plow ahead. Yeah, that's, that's cool that no, you can make it stop. Yeah, see, if you ever do any bash, you've got a W SL thing going on over there. I've certainly done a lot more bash, since I started using Ws l for a lot of things, I was aware that using another uninitialized variable would substitute nothing but I'm very happy to know that there's a way to kind of turn that off. Because that that is certainly caught me out in the past many times. And this looks like just a good article that I'm gonna have to go read myself now because it has everything that you learn from doing scripts in like command prompt or PowerShell. Now or even Python to some extent, I have not personally mapped those to bash equivalence. So it sounds like this would be a good place for me to, to go through that and up my skills a little bit. My favorite thing was the find command. And once I got that, that felt as powerful as a regex. And I kind of like, Oh, I don't need to write a whole script. Now. I can just do one excessively long find command.

00:28:54 Nice. Yeah, you find a lot as well. This next one, I don't want to spend too much time on because I feel like we could easily just go and spend an hour on it. But we, for time sake, we don't have a whole lot of time left for the episode because we have a bit of a hard stop. So I'm going to go through this and get your thoughts on it real quick. There is a tweet about a GitHub repository. That was our conversation on the Python mailing list. Lots of lots of places. So Anthony shot tweeted, calling attention to a roadmap by Mark Shannon, called ideas for making for five times speed of five times faster, C Python. So he laid out a roadmap and a funding map, and some interesting ideas. And I'm going to go through and quick and then especially Steve, we'll see what you what your thoughts are here of how reasonable this might be. So the idea is like, there's going to be four different stages, and each stage thinks he can get 50% speed improvement. You do that four times. That's, you know, compounding, performance interest, you get five so

00:30:00 I think it talks about three, nine somewhere. But anyway, I think maybe it's kind of shifted numbers a little anyway. So python 310. Stage One was to try to improve will be adaptive, specialized interpreter that will adapt types and values during execution, exploiting type stability. without the need for runtime code generation, that almost sounds a little bit like what you're talking about with the 10% increase, earlier, Steve, and then 311. Stage two would be improved performance for integers, less than one machine word, faster calls and returns through better handling of frames and better object memory layout. Stage Three, Python 312 requires runtime code generation as simple JIT for small regions. But then 13, extending the jet to do a little bit more. And I'm linking to a conversation, a long threaded conversation over on Python Dev, there's a whole bunch of stuff going on here. So I encourage people to read through it. But there's just like a lot of interesting amplification devoutly, how do we pay this if we pay someone to do it? people like Steve, work on C Python and they don't get paid? Like? How is it fair to pay someone else to do it when other people are volunteering their time? There's a lot going on here. Steve, what do you think about this? Have you been following us? I read through the original proposal, I haven't had the chance to chat with Mark directly about it. I will, I guess stop by saying that mark is very smart guy. And he has done all of this planning off on his own in secret and kind of come out and share this plan with us. Which you know, is it's not an ideal kind of workflow, certainly when you're part of a team. But I have certainly found in the past, when you get a very smart guy, or very smart go, goes off and disappears for a few weeks and comes back and says I've solved it, there's a good chance they've solved it. So I'm very interested to see where it goes. The part of the discussion that you didn't mention is that you hinted at is this is kind of a proposal for the pipe and Software Foundation to fund the work. And that part of that funding is conditional on delivery. So the way he's proposed this would work and and the implication seems to be that that mark will do the work himself and be the one getting paid for it. Yeah, that seemed like, it wasn't clear from his GitHub repo. But if you read the conversation was like, Look, I'm pretty sure I can do these things. This is how much would make sense for me to spend the next couple years working on it and getting paid. How do we do a fundraiser so that I can do this for everyone? Yeah. And you know, I think under those conditions, if the PSF is able to put the budget towards it, they are in a bit of a tight spot, since pay con is normally the big fundraiser for the year. And that didn't happen on the other hand source of the big expense. But financially, the PSF is not in their normal place where they'd be for for the year, because pi con didn't happen in the same way. But I think if they're prepared to put funding towards this, I guess if the community consensus is that this is the most important thing for us to do. And there's certainly potential downsides to doing it. Code complexity is the big one. And I don't actually think there's a way that you implement this, or even achieve these performance gains without making the code much more complex. And hence, less accessible to new contributors. And you know, people in earlier stages of learning to code at least on the C side, yeah, yeah. So there's trade offs. I'm very interested to see what would come about, I assume that because 310 is targeted for the first pass that it's already done. And he's already got the code. And he's trying to actually, and he's just trying to get confirmation that he can spend the next few years heavily investing in it, instead of having to go find a full time job and go back to doing this in the evenings. Yeah, which, you know, I'm I'm fully supportive of, again, it's really just a big open question of is this the most important thing for Python to be funding right now for C Python to be getting? In particular, someone I forget, who raised the question of what if we put that money towards pie pie instead? You know, what could they do with it in that amount of time, and ultimately, it's going to come down to someone was probably a small group, presumably, the steering council will have some involvement from the technical side, the Python Software Foundation Board will no doubt be involved in just deciding Is this the best use of the money that we have? Or can go out and get Yeah, for what benefits it would produce? You know, when I look at it, the funding side, I see it is very fraught with challenges on the sort of community funding the PSF funding, but I know there's so many huge companies out there that spend an insane amount of money on Compute and infrastructure that make a lot of money. And that if they could have a five x speed up on their code, they could probably save that money right away on infrastructure. So it seems like that they could also get funded that way, but we should probably move on just because I'm gonna I'm gonna make sure we have time for everything else before we end up running out of time. I do want to call out like you should go check out that conversation. There's a very funny excerpt from Larry Hastings says speaking as the elected me guy is

00:35:00 They were talking about bar references being a challenge. And BB references are evil, the definition of a valid lifetime of bar reference doesn't exist, because they are a hack baked into the API that we mostly get away with because of the Gil. If I still had wishes left on my monkey's paw, I'd wish them away. Unfortunately, I use my last wishes. Back in February, wish I could spend more time at home.

00:35:20 Oh, bad.

00:35:22 Alright, so let's get a little bit more insight from you on this last one. Because you were the core developers friends, which recently happened. Yeah, so I don't know exactly what day this is going to go out. But last week, from recording day, we had the C Python core developer Sprint's so this is kind of a a get together, generally in person event that the core development team has done for five years now. I think this is the fifth year. In the past, we've all gone down to Facebook, or Microsoft, or last year, we hung out at Bloomberg in London, and basically spent a week in a room together, coding, discussing reviewing things, designing things, planning things, and otherwise, just getting to actually meet our other contributors. Because we all work online, we all mostly work over email, and kind of bug tracker on GitHub pull requests throughout the year. And so it's a really good opportunity to get to meet each other get to see who we're dealing with. It's a lot harder to be angry at someone over email when you've met them. Yes, and so so it's been a really good event this year, because we're obviously not traveling for it. We were hosted by Python discord, which is at python discord.com. There's a server that is really well managed, it's really well organized, I was impressed. I have not been there before. But it was great. They set up felt like thousands of channels for us, not too many. But it gave us plenty of space to kind of mingle with other core devs. While we're discussing and working and planning anything, we also did a q&a. So the there'll be a link in the notes for that from YouTube that we live streamed, we had people submit questions ahead of time, everything from what situations? Should I use a mangled name and like a double underscore lead name? through to you know, what's your least favorite part of Python? What do you most want to replace? Did you ever expect by them to get so big, and we had a lot more people involved, we normally do a panel for the host company. So we'll we'll get kind of their employees together. And it's like part of the perk for funding the venue and typically meals and coffee and everything for the week. This time, it was public on YouTube, it was all kind of over video. So everyone got a bit of a turn to jump in. So you'll get to see a lot more core developer faces and you've probably ever seen before, you'll get to hear from a lot more of us than you have before. And a lot of interesting things, the big kind of ideas that came out of the week, kind of had to say a lot of us did come out feeling like we didn't get as much forward momentum on stuff as we normally would in person. But at the same time, a lot of things did move forward. I think there were about seven or eight peps passed up to the steering council during the week, the various things one of mine was deprecating dis utils, which is an entire podcast on its own. So I might, might have to call you guys another time to talk about that one, through to proposal to change how we represent 310. Because a lot of places we put the version numbers back to back with no separator. And so you have the you know, 3839 with no, nothing in between now we're up to 310 or is it 31? Zero? Yeah. Okay, how do we fix that? And we had a lot of discussions about that. There was obviously a lot of talk about JIT about the caapi. All the usual things that we talk about. But again, because it was online, it was really good to have such a range of people involved for you know, across different time zones, and people who would not normally get to travel. Yeah, it makes it more accessible. Yeah, that's awesome. Yeah, we have core developers and countries who can't leave. Like they literally cannot leave their country, either because the populace is just strictly controlled, or they know they would not get back in when they tried to go home. And so they were able to participate. And that was great to, you know, see and meet some of those people. We had a few mentees come along to interact with the rest of the team. And just overall a good week. Awesome. Yeah. Cool. And yeah, people can check it out the YouTube stream. I definitely want to check that out. Sounds nice. I Brian, we got two minutes left. Do you think we should do a joke? Yeah, let's do the joke. Let's go. Let's just cut to the joke. So we don't miss that. Right. So you and I spoke about Oktoberfest going wrong, and like random prs to like config files and change changing the spelling and config file settings. So there is a guy who posted on Twitter said hey, let me double check the name

00:39:44 was Stuart mccrudden. And he posted this cool t shirt that he got says Oktoberfest 2020 any PR is a good R and it's lua.py and it has import. Hi in vim, then

00:40:00 The PR just add hash this imports a package.

00:40:05 That's awesome. Steve, did you suffer from any of these? I did not miss it. I might have done my GitHub notifications are a mess. So yeah, I don't even know yet. Yeah, I don't see pull requests until I actually go look at the repo myself for the most part, and yeah, I got a bunch. I got a whole bunch. Yeah. Cool. Okay, I wanted to do one. This should have been a topic, but the five most difficult programming languages in the world. This was submitted to us by Troy, CODEL Cadell, I think so. Really full topic, but I thought was hilarious. This is an article where the author look look at locate, I guess, actually took five programming languages mal Bosh, inter cow brain, you know, we all know that one, cow and whitespace and wrote hello world in that language. And these are hilarious. And my favorite is whitespace. Because the entire language depends on space tab in line feed for writing the program. And any non whitespace character is considered a comment. So this is great. That's crazy. I don't know why that AAPL wasn't on there. A PL is just fully insane. Let me I'll put this in the show notes here at the bottom of this. An example of a Pl. That right there that I put on is I can't try to even speak this but that is an entire thing that finds the all prime numbers from one to R. In that line. If you guys see at the bottom of the notes, it is insane, isn't it? That's not even intentionally bad, is it? It's meant to be a real programming language. It's as if the Egyptians who only wrote in hieroglyphics decided to write a programming language. That's how I feel like you. It's insane. But it's a legitimate language like people try to use it do use it. Anyway. Not very long. Expect only as long as they must. And then they immediately stuff. I just like to this into cow example. It's so polite, and please, please do please do please, please give up.

00:42:06 Yeah, apparently you have to sprinkle pleases in it or else like error because it's you're not played enough. But if you'd be doing too much, it also errors because you're overly polite. Yeah. I like that. We need more passive aggressive languages like that.

00:42:22 Lovely. Cool. Well, thanks a lot, guys. It was fun. Yeah, yeah. Thanks, Brian. Michael. Yeah. Thanks. And thanks for being here. Steve. It's great to have your perspective. Thank you for listening to Python bytes. Follow the show on twitter at Python bytes. That's Python bytes as in be yts and get the full show notes at Python bytes at FM. If you have a news item you want featured just visit by thumb bytes.fm and send it our way. We're always on the lookout for sharing something cool. This is Brian Aachen and on behalf of myself and Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.

 <|endoftext|>
00:00:00 KENNEDY: Hello and welcome to Python Bytes, where we deliver python news and headlines directly to your ear buds. This is Episode 102, recorded October 30, 2018. I'm Michael Kennedy.
 
00:00:11 OKKEN: And I'm Brian Okken.
 
00:00:12 KENNEDY: Hey Brian, how you doing?
 
00:00:13 OKKEN: I'm doing great.
 
00:00:14 KENNEDY: Are you frightened to be recording this on the day before Halloween? Or is it all okay?
 
00:00:18 OKKEN: Yeah it's okay.
 
00:00:19 KENNEDY: It might release on Halloween. But I think it's still going to be okay.
 
00:00:22 OKKEN: Yeah that'd be neat.
 
00:00:23 KENNEDY: Actually, it would be cool. You know, what is neat is that Digital Ocean is sponsoring this show like they are all of our shows for the rest of the year. So check them out at pythonbytes.fm/digitalocean you'll get $100 credit if you're a new user there. We'll come back and tell you more about that later, some cool stuff they got going on. Brian, what's the first cool thing that you found?
 
00:00:41 OKKEN: Quanticon, or Quanticon, however you say that. Didn't we cover like economics? Somebody getting a Nobel Prize in Economics? Was that last episode?
 
00:00:51 KENNEDY: That was last episode, yeah. The guy who won the Nobel Prize, one of the guys who won the Nobel Prize in Economics is all about Jupyter, and is very much an advocate for it.
 
00:01:00 OKKEN: Yeah, and we did a shout out then saying, hey if anybody knows other economic stuff, we'd like to hear about it. And, somebody did, somebody let us know. I really should have wrote their name down but thank you. Gave us a point or two this site, called Quanticon. And it's Quanticon.org, it says open-source code for economic modeling. Quanticon is a NumFOCUS fiscally sponsored project dedicated to developing documentation for modern open-sourced computational tools for economics, econometrics, econometrics, I don't know. And decision making. Anyway, it's an educational resource for people wanting to do economics and stuff like that with Python and other programming. I guess it does Julia also. But it's got a bunch of lectures and a bunch of workshops and seminars that are taped and upcoming ones. And then some Jupyter notebooks, and some cheat sheets.
 
00:01:54 KENNEDY: This is really cool what you found here. Like if I cared about economics, this would be a massively cool resource.
 
00:01:59 OKKEN: Yeah you could just sit here all weekend and learn about all sorts of stuff on this. It's pretty great, and I, yeah it says fiscally responsible. And looking at the bottom, it's even got the Sloan Foundation support. So, it's pretty cool. There's a whole bunch of stuff here.
 
00:02:16 KENNEDY: Yeah, it's great, it's all part of that NumFOCUS thing, which is really cool. NumFOCUS is sort of the umbrella that sponsors things like NumPy and stuff. And this is one of the areas of open-source where like legitimate money is going to these projects. Remember we covered a while back, like multimillion, like three million dollars going to the SciPy and NumPy world that's really really great. It'd be cool to see that in some other areas of Python as well, but it's great to see it here.
 
00:02:44 OKKEN: Yeah, it's neat. And, yeah, maybe I'll check it out also.
 
00:02:47 KENNEDY: Yeah, it says there's, it's basically a high performance library comes in the form of Jupyter notebooks if you want it. And it has a whole series of lectures. And what's cool is you can pick the Python version, the Julia version and you know you just get started watching the lectures, it's pretty great.
 
00:03:04 OKKEN: Yeah, it has an area for if you want to contribute to it, where they'd like some help. And yeah, it's good.
 
00:03:10 KENNEDY: Yeah, so it's a good find. I like it. I'm sure people will enjoy having it. So I think we've talked about how you structure packages in Python a lot. It's kind of one of our themes, right?
 
00:03:21 OKKEN: Yeah.
 
00:03:22 KENNEDY: So this next one I want to cover is about structuring Flask projects, and also treating them as packages as well, which is kind of interesting. So I think Flask is one of those things where it's, it falls over itself to show you how simple it is, and then it doesn't have much opinionated ways of sort of telling you, now do this and that, right? So you're kind of left to your own devices to figure out how to structure your Flask program. So there's a cool article called Structure a Flask Project. And it says, you know, look, it seems real easy to get started when you're new, as your app grows, you're going to find you start learning the challenges of the circular references, and other things like that. So he actually, the person who wrote this, has a couple of different structures. And you can take the ones that feel best to you and run with it. So one of it is to have like your project and then have the models folder, sub-package, they call them routes I think, it should probably be called views or controllers or something. But routes, templates, services, things like that. So if you're going to have some code that sends mail for you, put that in a separate thing in a Services folder, don't cram that all into just one giant file, which kind of Flask encourages. So I really really love it. And I think it's nice, what do you think?
 
00:04:39 OKKEN: I do, I like it. And actually, when you structure things in packages, then you have the dot notation to sep in your code, you can, it separates the different parts of your system a little bit better.
 
00:04:51 KENNEDY: Yeah, absolutely. The one thing I would add here is some kind of concept of a view model, which is a class whose job it is to exchange the data between the HTML template and the view or controller method, and just do all that validation instead of trying to cram that into your view. Usually, the validation is more code than the operation you're trying to do with the data anyway. So.
 
00:05:14 OKKEN: I don't know, okay.
 
00:05:15 KENNEDY: I'm going to throw that one in there, and those are easier to test, right? Test your validation separate.
 
00:05:19 OKKEN: Yeah.
 
00:05:20 KENNEDY: And so I threw this little question for you, I see you already, you already caught it quickly. What's missing from this structure?
 
00:05:24 OKKEN: Tests.
 
00:05:25 KENNEDY: Yeah, there's no tests in this layout. I mean there is a ... somewhere. So maybe in the dot dot dot there's some tests. But, probably not.
 
00:05:32 OKKEN: Also, this is sort of a zoom in on the project. And in a lot of projects that I've seen that are Flask applications, there's a test directory at the top level. So it might be parallel to this top level project directory.
 
00:05:45 KENNEDY: Right, right, right, cool. Yeah there's another structure that they propose as an alternative called the app-based structure and it takes all the models, the view methods, the templates and everything, and puts it under the different categories. So maybe you've got a blog sub-part of your app, you've got authentication, you've got a store. And it sort of replicates this structure underneath all of those. I don't know how I feel about that, I kind of like the first one better personally. But, it's more Jinja like.
 
00:06:12 OKKEN: Yeah.
 
00:06:13 KENNEDY: There's a couple of options here, which I thought was a nice trade off that would show how different people were doing it. And then also, I would like to just give a shout out to Flask Blueprints, which is part of Flask. This is nothing like extra, it's just built in. But, it's kind of challenging the way Flask works to easily and clearly share or spread your view code across different files. So it's not into one giant file. And Flask Blueprints is really a great way to break one big file with all your view methods up into a whole bunch of little ones that are grouped by what they do. They're easier to test 'cause they're more focused, things like that.
 
00:06:50 OKKEN: And is this, the Blueprint, something you could use with either, any of these project structures?
 
00:06:55 KENNEDY: Yeah, I think so.
 
00:06:56 OKKEN: Okay.
 
00:06:57 KENNEDY: It just lets you take one big file, instead of trying to figure out how to, in Flask you create the app dynamically at run time. And then you say App.route, that makes it tricky to share that thing without being circular, or things like that. So it just lets you do the reverse. You create a blueprint for each of your separate files. And you say, Blueprint.route and then you just register the blueprints with the app and the main startup, and you're all good.
 
00:07:21 OKKEN: Oh, nice.
 
00:07:22 KENNEDY: It's really a nice thing, and I haven't seen it used a lot, but it's great. I learned it from Quart guys. All right, so, anyway, that, I think that puts a nice structure on the Flask world and people should check that out if they're doing Flask. What you got next for us?
 
00:07:34 OKKEN: I've got an article from Trey Hunter that's Overusing Lambda Epressions in Python. And I actually kind of love lambda expressions. However, I've, so where I often use them is in ID functions for test cases. So if I've got a test parametrization, you can rewrite the ID function to take all the parameter data and spit out an easier to read string. And this is something that where lambda expressions are often used, however, I do have some of them that are kind of getting big and are hard to read. So this is a good time to read Trey's article. So, it starts out talking about some of the differences between lambda expressions and just define functions. And some of the things I guess I didn't realize. I mean it's obvious if you think about it, but I didn't really think about it, is that one of things is there's no docstring, you can't have a docstring for lambda expression. And the, the representation also is a little weird. So, if you're stepping around, or if you assign a lambda expression to a variable, if it gets passed in somewhere, the value of it is going to be something ugly that you, if you're debugging, it's going to look bad. And you might have trouble figuring out where that came from. Whereas if you just define a function, it's easier to figure out. So, basically, this is an argument done, that it doesn't really save you a lot in a lot of places. And perhaps even just use normal functions. Then the other thing is, he talks about some missuses. And some of them, I've seen this before, is calling, having a lambda expression, calling it single function with a singular argument. Well, that function that you're calling, you can just pass that instead of the lambda expression that you're passing.
 
00:09:25 KENNEDY: Right. So for example, if you have a Sort function and you'd like to take the number and sort by the absolute value of it, you could have a lambda that takes the end, and this says return the abs(n), or you could just pass abs. Right? Those are basically the same thing. You're just putting a layer of function calls between them, make them slower.
 
00:09:46 OKKEN: And then actually, I didn't know about this module before so I'm glad I read this. Defining little custom lambda expressions for operators that happen to exist in the operator module, there's an operator module that comes with Python and it has a whole bunch of things that might, it might have wanted to create a lambda expression for.
 
00:10:08 KENNEDY: Yeah, this is interesting, I didn't know about this either. But you need to say like operator.add, operator.truth, and so on. Yeah, these are supposed to be high performance little efficient functions, quite cool.
 
00:10:19 OKKEN: The last thing is, I've seen this before also, is used to be using lambda expressions for map and filter, but just useless comprehensions instead, or other kinds of comprehension.
 
00:10:30 KENNEDY: Yeah, that's a good one. Certainly the comprehensions, set comprehensions, dictionary comprehensions, all that kind of stuff, it's better than a lambda function, generally, right?
 
00:10:40 OKKEN: Yeah, it's more readable.
 
00:10:41 KENNEDY: I think they might even be more efficient in terms or performance, I'm not 100% sure but I think so. But, anyway, these are all good things. Yeah, and I think there's a lot of good guidance here. You know, for example, it says, you can't have a docstring, well if your lambda expression requires a docstring, you're probably doing it wrong, right? It's probably too complicated?
 
00:11:00 OKKEN: Yeah.
 
00:11:01 KENNEDY: The value of the lambda is, I'm going to take such ridiculously simple code instead of moving it way far somewhere else, into a function that then I have to document so I know what the heck it does. I could just put it right here, right? You know abs of a number type of thing. I don't think, I personally love lambda expressions. I feel like Trey is a little harsh on them. I find that I'm more often see code that should be using the lambda, then there's overusing lambdas. So, grain of salt there, but I think there's a lot of good advice, too.
 
00:11:30 OKKEN: Yeah, I guess there's sometimes where you see a little tiny function that is only used once and it's small, and maybe it could have just been a lambda.
 
00:11:40 KENNEDY: Right, it's probably badly named and not documented either, so.
 
00:11:44 OKKEN: Yeah, docstring, what docstring?
 
00:11:48 KENNEDY: Exactly, exactly. So anyway, yeah, people check it out, it's a good article. It's kind of a long one, it really is in depth. We got a couple of good solid long articles to cover this week. Now before we get onto another one that I think is really interesting because it introduces a lot of structure around features introduced two versions ago, two dot versions. So, we'll get to that, but before we do, I just wanted to tell everyone about Digital Ocean, if you're not familiar with them, check them out at pythonbytes.fm/digitalocean. They've got all sorts of cool stuff going on. One of the things that I want to highlight this time that's cool, I've talked about it a few times before is the ability to bring your own custom images. You can go to Digital Ocean, and create a Droplet, that's what they call their virtual machines. And say I want a Ubuntu 18, or CoreOS, or whatever. And you get those stock images. They even have the little app, prebuilt apps like, give me a MongoDB server, or give me a Ghost server, things like that. But if you want exactly the machine that you'd like to run there, and you want to create that locally, you can upload your own images. All right, and that's super easy once you've registered them and uploaded them. You can just click start my own image, and off it goes, it's really cool. So, check them out. THey're doing us well, and I'm sure they'll do you well as well. So, if you wrote some code Brian, and it used the word async, all lowercase, and that was working just fine in Python 3.4, and then Python 3.5 comes along, and it introduces two new keywords, async and await, do you think there's going to be some problem with your 3.5 code?
 
00:13:22 OKKEN: Yeah, probably.
 
00:13:24 KENNEDY: Well and there should be, right? There's a new keyword, and you can't use the word class. You can't use other core keywords. You can't use def as a variable name. But it turns out for whatever reason, I don't know really why they chose this, but async and await were valid like parameter names and stuff, in Python 3.5 an 3.6. But they're not in Python 3.7.
 
00:13:49 OKKEN: Oh, okay.
 
00:13:50 KENNEDY: So, if you've got some sort of package, and it uses the word async for a variable, or parameter, or something like that, you're all of a sudden going to have your package, or the one you're using, no longer running. That's big, right?
 
00:14:06 OKKEN: Yeah, that's not good.
 
00:14:07 KENNEDY: Yeah. So there's actually, I saw this article, this is from Chris Medina, called asyncio in Python 3.7, and I thought, oh, okay, it's going to talk about this keyword thing, maybe a little bit something else. Oh no. This is like a serious, there are so many changes to asyncio, and async and await, and Python 3.7. Pages and pages of changes. So there's really quite a bit of new stuff. And if you care at all about this, you should go check it out. And you might not care at all about it, but you still maybe should check it out at least for the fact that parameters called async, and parameters called await no longer work. And if you have a library like that, it won't run on 3.7.
 
00:14:47 OKKEN: That's uh, that's definitely concerning.
 
00:14:49 KENNEDY: Yeah. So, I kind of feel like this maybe should have been the way it was done with 3.5. As soon as those keywords appear in the language, they should be officially keywords. But, anyway, here we are, three years later. Now async and await are enforced as key words. The reserved words.
 
00:15:05 OKKEN: Okay, so I definitely want to, I definitely want to heavily test your applications as you shift to 3.7.
 
00:15:12 KENNEDY: Yeah, maybe using something like Docs, or something like that, right? Test across the conversions.
 
00:15:17 OKKEN: Yeah, oh yeah that's a great idea.
 
00:15:18 KENNEDY: So there's a couple other things I'll go through really quick here. Like I said, check out the article, there's tons there. One of the challenges with asyncio, is it simulates parallelism by slicing up all these different methods and running them, running the other ones while one of them is waiting. But what's interesting is, you can no longer have thread local variables. 'Cause even though it feels like you're doing concurrency, it's actually all the same thread. So there's no mechanism to distinguish across threads, right? That's sort of how Flask works, for example. They've got the request as a thread local variable. But it doesn't work in asyncio. So there's this new concept called context variables that are like thread local variables, but for coroutines. So they can have different values on the same thread which is kind of crazy. Just a bunch of stuff around how that works. There's a new asyncio.run function, you used to have to get a hold of loop and call that a simpler task management. Simpler event loop management. You can call asyncio.getrunningloop from within the library to see if there's already being run async, or if you have to kick that stuff off. A cool decorator to turn async functions into async context managers, remember context managers are things you can put in a with statement, right like with open file name as fin, right? There's a new part of the language that'll let you say, async with, so it will allow concurrency and just sort of do waiting type of work on those context manager enters. Now there's a really cool decorator you just add to your function, and it automatically implements this asyncable, Async enabled context manager which is pretty awesome, 'cause that sounds complicated, doesn't it? And then there's a bunch of performance improvements. asyncio event loop is 15 times faster, that's good. Gather is 15%, Sleep is twice as fast, for not really sleeping. Future is faster, all sorts of good stuff. There's tons and tons here, so go check out Cris' article. I'm just blown away at how much new stuff asyncio got through in 3.7 actually. So when you see it all put together like that.
 
00:17:30 OKKEN: Yeah, that's great. I like seeing it all together like that.
 
00:17:34 KENNEDY: Yeah it's like, wow, there's still a lot of stuff happening here. That's good. I feel like we should say, thanks to all the people that work on it, that'd be awesome.
 
00:17:43 OKKEN: Yeah, I think we should.
 
00:17:44 KENNEDY: Would like, with an email? Or how do you propose this?
 
00:17:47 OKKEN: Well there's a proposal in pip. So, this is a proposal from Brian Skin.
 
00:17:56 KENNEDY: Brian Skin, yep.
 
00:17:58 OKKEN: And he sent us a heads up on this, that he submitted just this morning. And it's a proposal to add a subcommand thank to pip. So that...
 
00:18:09 KENNEDY: So you got pip install, you got pip uninstall. And so another one would be like pip thank requests, or pip thank sqlalchemy, something like that.
 
00:18:17 OKKEN: Yeah, so there proposal is to add that, and then also change install. So the install, if you install a bunch of stuff at the end after everything's installed, if there's the right metadata in the modules that you installed that'll add a little information that says, hey if you'd like to thank the contributors, I run pip thank on the pip thank requests, or pip thank something. And the idea is to look in the metadata for the project for URLs specific thanks, you are thanks tag in the metadata, or donate possibly, there's a, it's still kind of, in a little bit influx as to what would be in there. But there's already some information apparently. It's all the, info's there, a lot of it is. And there's a way to possibly just print that out, and say hey, if you want to say thanks, this is how you can do it. I think it's a simple thing, it's not going to be very intrusive. And I think it's cool.
 
00:19:17 KENNEDY: I think it's cool. There's a lot of conversation happening on Githum around this. I like it. Well done Brian, Brian Skin for coming up with this idea and actually putting it out there as a proposal.
 
00:19:27 OKKEN: Yeah. And I don't know if it'll happen, but why not, there's so much negativity in the world. A little bit of positivity is a good thing.
 
00:19:34 KENNEDY: Yeah I agree, yeah quite cool. So I feel like I kind of snuck this last item from you. 'Cause this one belongs in your realm, but I grabbed it. So, this one is an article, a booklet, should I call it a booklet? I don't know. I'll tell you why in a second. On Real Python called, Getting Started with Testing in Python by Anthony Shaw. A friend of the show. So, this is not just a little quick tutorial on getting started with testing. This is like a little bit of a mini book type of thing. I threw it into Instapaper and Pocket, and they both said that it's a 33 minute read. So that's a serious little write up.
 
00:20:10 OKKEN: Yeah. Yeah, it's an interesting read. I heard about this before it went through. And it sort of, one of the things it highlights is some of the process around Real Python articles. They treat it like a magazine, and there's their view process and stuff. So, that's pretty cool.
 
00:20:28 KENNEDY: Yeah, Dan Bader, and crew over there, definitely creating some serious articles and things over at Real Python. And so this is Anthony Shaw's. I'm just going to touch on some of the topics covered in there. Because like I said, 33 minutes, I can't really go into too much detail, but it covers things like automated versus manual testing. It's really for people getting started, I think. But it's pretty interesting for everyone. Unit tests versus integration tests. It does a comparison of unit tests nose, and nose2 why there's actually two noses, and pytest, and which one you should actually use. Do you have an opinion on that Brian? Do you care about which one you?
 
00:21:02 OKKEN: Yeah, use pytest.
 
00:21:04 KENNEDY: It also talks about things like writing your first test, where to write it, how to structure tests. How to write search engines, the dangers of side effects. Testing in PyCharm, in VS Code. Pycharm is pretty straight forward, VS Code has that command pallet thing, which is cool, but you got to figure out how to do it. So that's kind of nice. It also talks about testing web frameworks like Django and Flask, advanced testing scenarios, and even testing for security flaws in your app. So there's a bunch of cool stuff here. Like the testing security flaws, like that's new to me, so I don't think it's really that much of a beginner article. It just starts at the beginning.
 
00:21:38 OKKEN: Well, okay, yeah. But it's, a lot of these I like that he touches on a lot of this stuff, but a lot of these things are touches on them, there's not. Like testing some of the web applications is kind of a pointer to yes you can do it, and here go read about it in other places. But I do like it. And that, like you said, the security flaws, that needs highlighted more, and I think that's a great thing to add to people's tool belt.
 
00:22:05 KENNEDY: Yeah, just to know that, this is a way you can test for it, right? There's even tools and what not. So are you telling me that this could be a book?
 
00:22:12 OKKEN: Yeah, I think it could. But I think it would be a lot bigger book.
 
00:22:16 KENNEDY: Somebody should write it.
 
00:22:17 OKKEN: Yeah, somebody should write it.
 
00:22:18 KENNEDY: No, I'm just kidding, people should check out your book if they want more than 33 minutes worth.
 
00:22:22 OKKEN: I'd also like to add to, just talk about PyCharm and VS Code, and it's a little bit, I don't see a lot of opinion, but the testing story in PyCharm right now is a lot stronger, and I'm not just saying that because I like PyCharm, it's just true. The VS Code team has something on their, I think they're going to address some of the testing short falls in the upcoming years, and I hope they do. But for right now, if you want to test within an IDE, you do it in PyCharm.
 
00:22:52 KENNEDY: Yeah, it's definitely nice of PyCharm. Awesome, all right, so those are our main items. I have a few other things I want to throw in here because I don't feel like they really warrant a whole thing to be covered, but they're fun. Anything you want to cover first, Brian? I will just say that, speaking of testing, I'm wrapping up testing code episodes, and doing them actually more frequent than one a week, not up to two a week, but I'm going to get a lot of episodes out. And there's a couple recent ones on Flaky tests. Yeah, speaking of Anthony Shaw.
 
00:23:25 OKKEN: Yeah, Anthony Shaw is there talking to me with Flaky tests and I talked with the Automation Panda about feature tests.
 
00:23:36 KENNEDY: Yeah, that's really cool. Great to hear you doing more, I've seen those coming out. All right, I have a few that I would like to throw out here. A few quick simple ones. First is just this fun project from Vicky Boikus. See where it says Hack Your Name in our notes, Brian? Click that. So the idea here is, that you've got a startup, you're trying to come up with a name, and it seems like there's all these silly names, they're often talked about on Hacker News. So, which is from Ycombinator. So, why not just take the words from Hacker News, break them into syllables, and generate new words which can be the name of your new cool startup. And so there's, you go to this URL, hackurname.com, and it has just one big button. And it says, Pivot Me Bro. So, I get Guysed back. Let's see, if you click it a few times, you get some pretty good ones.
 
00:24:28 OKKEN: I got YouChair.
 
00:24:28 KENNEDY: Yeah I had ShyFox the other day. I'm pretty happy with ShyFox. So why is this interesting? I mean it's funny, obviously. It also is an open-sourced project that is written in Python that does all the download from Hacker News and does all the working words and stuff. And so It's kind of cool, you can check it out. I'll link to the git repo as well.
 
00:24:47 OKKEN: Oh so it's a good simple project.
 
00:24:49 KENNEDY: Yeah, exactly, it's a pretty simple one, but it's pretty fun. So if you are doing a startup, like seriously, click that thing like 20 times, you'll probably find your name right there. All right, the other one, just some quick news, Python 3.7.1 and 3.6.7, so modern Python, last two versions got a new release. And there's actually a decent amount of little bug fixes and stuff, at least in 3.7., 3.7.1, so check that out.
 
00:25:12 OKKEN: Yeah, neat.
 
00:25:14 KENNEDY: Yeah, links there for that. Not a lot to say more about that one. And then the last one is, we were talking with Tom Baker in Twitter about a project that's a command line interface app, that he's converted over to Python. And he used Click, and he wanted to propose a new acronym, and we've got TDD, Test Driven Development, we got BDD for Behavior Driven Development. He wanted to propose CDD for Click Driven Development. So you use the Python Click package to mock up your suite of commands. You put little print functions in there to show what's supposed to be happening. And then you just start filling out the place holders, take away the print functions to make it start working then. So there you have CDD.
 
00:25:58 OKKEN: Sure, yeah.
 
00:25:59 KENNEDY: Why not, right? We always have a shortage of acronyms in the programming world, so why not?
 
00:26:06 OKKEN: Yeah. I think CDD may have been taken already. But I don't remember what it was for.
 
00:26:10 KENNEDY: Yeah well, I'm not sure how well it's going to actually take off. But, there it is. CLDD, I don't know.
 
00:26:16 OKKEN: I don't know, I do love Click, Click is cool.
 
00:26:18 KENNEDY: Yeah, it's pretty cool. All right, well that's all of our news for this week. Brian, thanks for being here and sharing with everyone.
 
00:26:24 OKKEN: Yeah, thank you.
 
00:26:25 KENNEDY: Yep, bye.
 
00:26:25 OKKEN: Bye.
 
00:26:27 KENNEDY: Thank you for listening to Python Bytes. Follow the show on Twitter via @PythonBytes that's Python Bytes as in b-y-t-e-s. And get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.
 
 <|endoftext|>
PYTHON BYTES TRANSCRIPT
Episode #37: Rule Over the Shells with Sultan
Michael KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode #37, recorded July 31st, 2017. I’m Michael Kennedy.
Brian OKKEN: And I’m Brian Okken.
KENNEDY: We’ve got a bunch of sweet stuff lined up for you.
Brian, let’s talk about contributing to Python. If there’s something in CPython itself we want to change and we don’t like how it works, maybe we can just go change it. It is Open Source, right?
OKKEN: Right, it is Open Source. There is and has been a developer’s guide for a long time for CPython, but the URL has changed recently, I think I saw that recently. But it’s at devguide.python.org. I bring it up mostly because the URL changed and I like that URL, but also it is how to contribute to Python. I was looking over the initial page where it drops in there’s some really cool links in there. One of them is just for everybody. It’s “How to Contribute to Open Source’ and another one is “Building Welcoming Communities” and those are both at opensource.guide. They’re pretty good articles.
I also liked basically the structure of some of the “Getting Started”. I think it’s a good onboarding thing. Even if you’re not going to contribute to CPython, I think it’s a nice outline of things to include in any large Open Source project to try to get people onboarded fairly quickly.
KENNEDY: Yeah, for sure. We’ve got, ‘Here’s how you propose changes to Python itself’, they’ve got some nice things that take you through the whole GitFlow style, the life cycle of a pull request, running and writing tests, talking about coverage. There’s a lot of good stuff here.
OKKEN: Yeah, and talking about the issue tracker. Apparently, there’s an expert’s index, which is kind of neat, like who do you send issues to. And even things like how to run the tests and stuff. It’s nice.
KENNEDY: Yeah, very nice. Cool, so if you have an idea for CPython. That thing is still changing a lot. We just covered recently the 3.6.2 changes and that was pretty extensive for just a little tiny release, basically a maintenance release.
So, how would you like to rule over your shell, Brian?
OKKEN: Rule over my shell? Yeah, sure.
KENNEDY: In fact, not just ruling over your shell, but over many of the shells. Even the shells that are in outer kingdoms. So, the thing I want to talk about next is called Sultan, and it says “Command and Rule Over Your Shell”. Basically, you can run shell commands using this library, this package called Sultan, in a Pythonic manner.
The simplest thing, like let’s suppose you want to install Tree, so you can type tree and you get this cool ASCII hierarchal view of your files. And you would just say, ‘pip install Sultan’ then you would say create a Sultan object, sultan.sudo(yum install -y tree).run and it will actually go and run that command as sudo on your system. That’s pretty cool.
You can do things like work with aptitude or yum or ls, all the shell commands. They also have a way to work with it inside a ‘with block’, a context manager, so that it will clean up with itself. It runs a slightly different command that I think has some sort of better cleanup. I don’t actually know all the details with yum.
It’s pretty cool. It even works remotely so I could say sultan.load and give it a host name and do that as a sudo, and then run that remotely on the server. If there’s any errors, it brings all that information back and prints it out for you, the warnings, I think.
OKKEN: I think that’d be useful, I’m thinking right off the bat some of the automation stuff that large projects have, like build scripts and whatever. I’d like to have it in Python but sometimes I don’t really know how to do it within Python itself, but this is kind of neat. I’ll have to check this out.
KENNEDY: Yeah, it’s pretty cool. I think it’s pretty focused on the use case that people have running stuff over SSH, remote servers, a lot of shell stuff. But if you find yourself doing that a lot and you want to do more of it in Python, here’s a pretty cool library. It’s pretty simple.
OKKEN: What is yum?
KENNEDY: Yum is a package manager. I don’t remember which distribution it’s for but, like Ubuntu has Aptitude, apt-get, yum if for some of the other distributions.
OKKEN: Okay, got it. I probably just haven’t run into that yet.
KENNEDY: It’s tasty.
OKKEN: (Laughs) Okay.
Next I want to talk about a tool that helped me a lot recently. I’ve been working on the book, which I’m not working on it anymore because it’s turned into my editor. But I’ve been using Sublime to write it, and write all the code for it. But one of the things I wanted to do was, I got harassed by not being PEP8 compliant in a couple places, so I wanted to quickly go through and just check everything.
Of course, I can use Flake8 on the command line, but once I know there’s a bunch of files with errors, what’s the fastest way to go fix them? For me, it was a Sublime Text plugin for lint. I know there’s a lot of Sublime Text linters out there, but this one did everything I needed it to do, just right off the bat and it was super easy. You just installed it and it worked, so I highly recommend Flake8 lint.
It’s got Flake8, of course, and it’s also got pydocstyle and some conventions, import-order and stuff.
KENNEDY: Yeah, I think having these automatic tools make tons of sense. Your editor should do as much of the work for you as possible, so definitely a good recommendation there.
OKKEN: One example is, I would bring up, if I knew there was a directory with a bunch of files that had problems, I would bring up a file. The default I would never change, the default is just to check it on save. When I would save the file it would check everything and then also pop up a pop up window with all the errors. I could just hit enter, it would take me to the very first error and I could just walk through the the errors. It was great.
KENNEDY: Nice. And it’s not just purely following the PEP8 rules. For example, it has Cyclomatic_complexity checking, which is pretty sweet. That’s like, ‘Hey, I’ve got a highly nested, 500-line method. What’s wrong with that?’ (Laughs) It only has 20 if blocks, loops, whatever; it would complain about that if it goes over 10. That’s cool.
So, how would you like to travel time and be sucked into say, a magic wormhole?
OKKEN: I’m pretty excited to hear about Magic Wormhole.
KENNEDY: Magic Wormhole is pretty cool. Maybe you guys have hear of this. So, the problem Magic Wormhole is trying to solve is, ‘I want to get things, be this text, be this a small file, be this a huge file, from one computer to another safely. So, encrypted in a way that other people can’t get to and things liked that.
Magic Wormhole is basically a command line thing, where you just type wormhole and it will come up with a code that your computer has. So, you say, ‘Create a wormhole and send this file.’ It will come up with a code and if you give that code to someone else, they can run wormhole receive on their command line, enter that code and then over an encrypted connection that will automatically connect the two computers, even if they both have firewalls blocking it. There’s like some sort of intermediary server that will link them together. And it will just do this, from what I understand, in an encryption between these two things. So, if you need to get something and you don’t want to put it somewhere public like Dropbox, or you don’t want to put it somewhere that’s hard to erase or is hard to actually physically transfer like a USB drive, you can Wormhole it. And there’s even a PyCon presentation on this at PyCon 2016, so you can check it out.
What do you think about that, Brian?
OKKEN: That looks pretty cool. I don’t think I’ve got a use for it, but I want to have a use for it.
KENNEDY: I know. Well, suppose you want to get something to some server you’re maintaining, say you’re on vacation and you want to send something back and you don’t want to send it over Dropbox, I can see some good uses for it. They talked about things like, here’s a way that you might be able to share SSH keys that you don’t want to put anywhere, but you’ve got to get them somewhere, things like that.
It’s pretty cool. One of the things I thought was a nice touch was the codes are short and human pronounceable. They had some nice examples. They one that they had as an example on the website is 7-crossover-clockwork. So, pretty long password if you will, but also you can tell it to someone over the phone. The idea is, this is when you have the ability to communicate with a person, but your computer and their computer don’t necessarily have a way to directly connect.
OKKEN: Great. So, you have to email them the secret code or something non-secure.
KENNEDY: Exactly. (Laughs) ‘I enable you the ISO. It’s only 3 gigs (GB), I’m sure it will be fine.’
And finally, there’s actually an API that’s part of this, so it’s not just a command line tool, you can actually make Wormhole capabilities in your own applications by importing the library.
Now that’s sounds even more fun. I don’t know what to do with it but it sure sounds fun.
OKKEN: It sure does, yeah.
KENNEDY: So, take us back to some fundamentals. One of the things I think we don’t do enough of as developers is virtual environments. What do you think?
OKKEN: It’s one of those things that I forget that it’s hard to figure out the first time. So, if you’re not using virtual environments, you need to be. There’s an older tutorial, but this is from realpython.com and it’s, “Python Virtual Environments: A Primer”. It covers what they are, why we need them, how to use them, of course. And then it also covers a few extra tools that a lot of people use like pyvenv, that came with Python 3.6, and virtualenvwrapper.
I point to it because this article is a pretty good description of why we need them and what they are. If you’re not understanding why you need them, this is a good document to talk about it.
The thing that I ran into recently is, I was trying to help somebody and install something. It turned out the problem that they were having was they were not using virtual environments and when they would pip install something, they weren’t able to import it from within the tests. The problem was that their pip was pointing to a different Python, the Pytest was using a different Python. So, when you pip install something, it goes in the site packages for that version of Python, not for all Pythons. So, his pip was 2.7, and it goes into 2.7 folder than.
For me, that’s one of the main reasons why I use it, because once you use virtual environments, your pip and your Python and your Pytest and everything are all using the same Python and they don't get confused.
KENNEDY: Yeah, it’s great. I use it a lot to make it very clear what versions a particular web app of mine is running and what I need to deploy and things like that.
It think your point about, it’s easy to forget why this should ever be hard, it’s just second nature for those of us who’ve been doing it for a long time but your example is perfect. Helping someone out who is somewhat new, it’s like, ‘I thought Python was simple. Why is this not working? What is this?’ That happens all the time.
OKKEN: And all the extra stuff, like virtualenvwrapper and py environments and all these extra things, those are great for the people who work with them. But if you try these out and they don’t work for you, it might not be your fault. Or maybe it is, but I haven’t been able to get any of these extra things to work. I tried virtualenvwrapper, it’s never worked for me, I don’t know what I’m doing wrong. Just the straight virtual environments work great, so that’s what I use.
KENNEDY: That’s cool. Nice to have a little reference there.
So, the last thing I want to touch on is an interesting article that actually highlights a couple projects. I think there’s four projects it highlights. The idea is Rust, the programming language from Mozilla, is a pretty interesting alternative to C. It’s kind of a systems level programming language like C is, but is has a type system, it helps eliminate memory leaks, it has proper interfaces, it has better inference, better support for concurrency, better support for first class functions, those kinds of things. So, compared to C, it’s a pretty nice language. And so, when you think of a lot of the important Python packages, many of their important internal low-level pieces are written as C extensions, right?
OKKEN: Yeah.
KENNEDY: So, could those be written in a better language than something like C? How about Rust?
So, here’s four projects that make it easier to implement what would be the C extensions, the native, compiled, hotspot type of code, but do it in Rust instead of in C.
The first one is Rust-CPython. So, that’s an interesting description of what it is. It’s A set of bindings in Rust for the CPython runtime. It allows Rust to connect to CPython using its application binary interface (ABI) which is a Rust thing. You can run Python programs from Rust or work with the representation of Python objects directly in Rust. So, this is for if you’re a Rust programmer and you want to hook into CPython and control of from the outside.
There’s PyO3, which is a way for people to write Rust software with bindings to Python in both directions. So, a Rust programmer can interface with Python objects in the Python interpreter and it connects Rust methods to the Python program the same way like a C module does. That’s pretty cool.
Then there’s Snaek, which is an early stage project but it lets developers create Rust libraries that are loaded dynamically into Python as needed and they don’t have to be statically linked against Python’s runtime, which is kind of cool. I think it pulls it off using CFFI, which is the C interop layer for PyPy, the alternate interpreter JIT compiler for Python, rather than CTypes. So, if you don’t have some old library that is based on CTypes, like say C and you want to upgrade, this might be a pretty sweet option.
Finally, there’s actually a cookiecutter template and it says, ‘The goal of this project is to be able to produce a binary distribution, a Wheel, which will not require the end user to actually compile the Rust code themselves.’ Which everyone would appreciate that, right?
So, here’s a bunch of cool options if you’re like, ‘I really don’t want to write this in C, but it probably should be written not in Python, in some other way.’ Maybe try Rust if you want to check that out.
OKKEN: That actually looks pretty cool. Have you done any Rust yet?
KENNEDY: No, it’s one of the languages I want to learn that I’m kind of intrigued by. I looked at Go a little while ago. I’m not a huge fan of Go, but people compares these a lot. I want to check out Rust, I think it’s pretty different than Go.
OKKEN: It’s definitely something on my To Do list, too.
KENNEDY: Do you guys have any used for Rust with all the hardware stuff you’re doing?
OKKEN: I’m sure we could invent some reason to use Rust.
KENNEDY: Perfect. How about you, any personal news?
OKKEN: Just that I’m not writing anymore.
KENNEDY: Congratulations, that’s awesome. How does it feel?
OKKEN: It feels incredible. To go from, ‘I’m writing a book’ to ‘I wrote a book’ is great.
KENNEDY: Was your wife and kids like, ‘Hey, there’s some random guy in our house! Oh, wait, no, it’s Brian.’
OKKEN: (Laughs) No, I try to limit the writing to obscene things like early in the morning and late at night.
KENNEDY: Yeah, punish yourself instead of your family.
OKKEN: Exactly.
KENNEDY: Well, I am packing my bags and I am going on vacation. So, either we might be a little bit intermittent or there’s some talk that we might have some guest co-hosts coming in here.
OKKEN: We’ll see. If you don’t see some podcasts in the next few weeks, don’t worry, it will come back. But you might see them anyway, with some new faces.
KENNEDY: Yeah, that would be awesome. So, either way, great chatting with you, Brian. Thank you for listening.
OKKEN: Thanks.
KENNEDY: Bye.
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes. Get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues. <|endoftext|>
00:00:00 OKKEN: Hello and welcome to Python Bytes, where we deliver Python news in the headlines directly to your earbuds. This is Episode 150, recorded September 25th, 2019. I'm Brian Okken.
 
00:00:11 KENNEDY: And I'm Michael Kennedy.
 
00:00:12 OKKEN: And this episode is brought to you by Datadog, check them out at pythonbytes.fm/datadog. More on what they have to offer later. But Michael, right now I kind of sense a theme. Are you looking for a new job? Are you hiring somebody? What's going on?
 
00:00:27 KENNEDY: I'm going to cover a couple of topics about getting better interviews. You know, I kind of hope I never have to apply for a job or go to a job again in my life. So no, I'm not actually on the hunt for that. But I do have a couple of friends who are looking for jobs, and I'm just a little sympathetic to the challenges and whatnot, so, I want to kick us off with a thing called, How to Stand Out in the Python Coding Interview. This comes from James Timmins, and he wrote it on realpython.com. So it's kind of a Python version of the stuff that it seems like the tech industry thinks you should know, and I feel like it's a little bit better. I feel like the tech industry says, "Which is better, a bubble sort or a quicksort?" You know what? I don't care, I call sort on the list and we're good. You know, I don't, maybe sorted, you could debate .sort versus sorted, but who cares, right? This is not a problem we need to keep solving. And yet, it feels like in the interview process it falls back to, they asked about Big O notation, and they asked about algorithms of that type, they asked about a data structure, like, when would I use a doubly linked list versus a singly linked list, and like, ahhhh. I can go build a Python web app with SQLAlchemy and talk to Stripe and charge a credit card, but I forgot when I use a singly linked list, right? Single direction linked list. But that seems like what people are testing. So here's an article that sort of covers those kinds of questions, but specifically for the Python developer. And I think it's pretty, pretty decent. So it's meant to help you kind of navigate that space of Python, and show you that you have some knowledge of the built-ins and of the language, and things like that, and you can kind of write decent code. So, it covers a handful of things with a bunch of other stuff mixed in there. So how to use enumerate to iterate both over a view of collection, to iterate both with indices and values, and if you've been doing Python for a long time, that's obvious, we do that a lot, but if you come from a language like C++, or Java or something that doesn't have this, all of a sudden, well, then it's really weird and you don't know to use it. So it's good to have that in there. Debugging with breakpoints, formatting with f-strings, F yes for that one, that's great, sorting lists, I talked about that, you don't have to care about the algorithms but knowing how to sort stuff is really nice; generators and its pressure on memory, default values and dictionaries, using the Counter class, and then just some standard library stuff. I think knowing all those things kind of puts a nice Python spin on that level of Python interviewing. Do you do any interviewing?
 
00:03:19 OKKEN: I haven't actually applied for a job for several years.
 
00:03:22 KENNEDY: Do you do it in reverse though, do you do hiring, like interview people for their...
 
00:03:23 OKKEN: Yes. Yeah, definitely a lot. And I help but with other teams too, in their hiring. For some reason, people know me as this person that knows Python, so I'll do the Python interview part. But yeah, a lot of this stuff is stuff that I look for, if you actually say, "for i in length," the interviews over. You don't know Python then.
 
00:03:44 KENNEDY: Yeah, I think maybe if you're hiring for, I'm hiring a developer, they don't have to know Python, but they're going to be doing it so we're going to help them along. If they're really good at Java, you could probably mentor them over, but if your goal is to hire an experienced Python developer, and they don't know, for item in collection, yeah, you're done.
 
00:04:03 OKKEN: But I'm a pretty fair person, I talk through stuff. People can always recover. If you freeze up, don't worry about it, just flow with it. I think people should interview more, even if they're not looking for a job, just to keep up their interview chops. It's good.
 
00:04:17 KENNEDY: Yeah, nice, I agree.
 
00:04:18 OKKEN: Speaking of being nice to people, we have a bit of news. Even though I didn't even actually know this was an issue. So, there was an announcement made that the PSF, the Python Software Foundation, updated its Code of Conduct. And apparently the PSF had one code of conduct for the PSF and things it was sponsoring, and a different one for PyCon US. And now there's just one. And so, that's the big news. And we've got links to the Code of Conduct and the enforcement guidelines and reporting guidelines. And we hear about codes of conduct occasionally and stuff. And in the past I've thought, why do I have to care about this? I mean, just don't be a jerk, and try to be a nice person, isn't that enough? And for the most part, yes, but if that was all there was to it, and there weren't any problems, then we wouldn't need these. And clearly we need them, things come up. So, I think it's good for people to go, it's not a long read, I think people should read them, especially before you go to an event, to make sure you know what's up with that. The other thing that's nice to look up is, what is the reporting mechanism? So if you see somebody violating these, or basically just somebody being a jerk, what do you do about it? Who do you contact? And so that's good to just sort of, at least have read it once, so that if it happens you can look it up and figure out what to do.
 
00:05:35 KENNEDY: At least tell what it is. And you're kind of putting yourself in a space where you got to know even a little more about it.
 
00:05:41 OKKEN: Right, so one of the things is that, it covers things that the PSF sponsors, also sponsors bases. This includes a couple of different, two or three of the Python meetups around the country. They're not sponsoring us, yet, although we should probably hit them up for that. But we are doing a meetup here in Portland West coming up next month, and yeah, we probably got to think about this, of what to do if something happens. So, Michael and I will probably talk about this before the actual meetup.
 
00:06:10 KENNEDY: Yeah, we'll figure it out. What's the date of the meetup again, for people?
 
00:06:12 OKKEN: Oh my gosh, I should know this. It's like the second Tuesday in October, so that's the sixth or the eighth or something like that?
 
00:06:20 KENNEDY: That would be the eighth.
 
00:06:21 OKKEN: Eighth, yeah.
 
00:06:22 KENNEDY: Awesome. Alright, well, for those of you who can make it, that'd great to see you out there. Alright now, speaking of great stuff, before we get onto more interviewing on my theme here, I want to talk about Datadog. Python Bytes is sponsored by Datadog, through a modern cloud-scale monitoring platform that brings things like metrics, logs, and traces all in one place. Their tracing client includes auto-instrumentation support for things like Django, Flask, Postgres. That means you get visibility into what your entire application is doing, not just maybe a trace out of your Python app, or profiling just your Python. You can troubleshoot slow requests and optimize your code within a few minutes. So start monitoring your dynamic environment with a free trial, and Datadog will send you a free T-shirt as well, just get over to pythonbytes.fm/datadog to get started. So this previous one that I talked about, Brian, it was very much focused on, sort of these, almost these data structure algorithm versions, and it said, here's the Python equivalent of some of these conversations you might have. This next one, I don't know how long it would take you to go through all this stuff, But it would take you a good, long while. This is by Ben Rogojan, I'm going to say. Sorry about that if I got that wrong. Goes by, Seattle Data Guy. so it talks a little bit about some of the silly stuff like FizzBuzz, and some of the traditional, classical silly algorithm problems like, give us the nth Fibonacci et cetera et cetera. And some things that you might study, and so on. But then, there's a bunch of videos, and I don't know how many videos, there are many I would say, at least 75 videos on different topics. These are like 15 minute videos. So there's some on algorithms, there are some on data structures, there's some on Big O notations, dynamic programming, string manipulations, system design, operating systems threads, object-oriented programming, design patterns, SQL and more stuff. So, if you are in the process of trying to learn these things, to get one of these jobs or nail of one of these interviews, you've got homework.
 
00:08:25 OKKEN: Oh okay.
 
00:08:26 KENNEDY: That's a lot.
 
00:08:27 OKKEN: This is frightening though. Yeah, awesome that this resources is here, especially you can pick a part where you had trouble with or maybe after an interview even, and go, "Wow, I got asked this stuff and I didn't understand it. So maybe I got to review it, then." I was just watching all of the different algorithms, sorting algorithms. I love videos of sorting algorithms.
 
00:08:46 KENNEDY: I know, the visualizations. There's a big graphic of 20 different sorting algorithms, all sorting next to each other at the same time. It's mesmerizing. And also, I would say, there are maybe 15 pages of comments, and the comments get kicked off. I think we really need to face a reckoning in our profession. And the reckoning is this. We require an overload of stuff that's simply not important on the job, just to get through the interviewing process and land a position. So basically, you got to go through all these algorithms, kind of like I said, and then in the end, you do a lot of googling on Stack Overflow, and you find packages on Awesome Python, and then you install them and you roll. Right, there's a huge discussion about why that is, what we can do about it, and so on. So I think it's great. You should also check out the conversation in the comments.
 
00:09:35 OKKEN: On the other end of it, just a devil's advocate. One of the reasons I know people do pick up algorithm type questions is because they work in a specific space, domain, and it would be obvious to ask about that. But if they don't really, if they know they can train you on their domain, they have to ask you about stuff that is something generic, and that's where the algorithm stuff is. I still think it's bad. Things like, which should you use, a bubble sort or a quicksort? That's a dumb question. But if you have things like, FizzBuzz is kind of silly, but you should know it by now. And some of the other things, it's hard to come up with good questions that are fair for anybody coming at it. So also, keep in mind that.
 
00:10:19 KENNEDY: What I would much rather see is something live, and in the tooling environment that that person likes to work in. So if I was interviewing somebody, it seems to me that I might set up a Zoom call, and we'd do screen sharing, and say, I would like you to create this kind of website, and have a route that passes data to the view method. Or whatever, right, if it's a web job. Or, I'd like you to have a program that reads a JSON file and prints out these things, and just say, okay now, go, let's do it, talk me through building this app. And spend 15 minutes. You can tell if somebody is comfortable in the language and comfortable in their tools, or they have just no idea. I know that's what FizzBuzz is supposed to solve, but if you can't load a JSON file, which is like, three lines of code, and it just works with dictionaries after that, you probably are not really capable in Python. I would much rather see something like that, like a small task that's not super domain-specific, that's not really deep into some library, that you could ask, over all of these crazy things. And it seems like it'd be effective. So, I don't know, that's my thoughts.
 
00:11:28 OKKEN: Definitely. Cool.
 
00:11:29 KENNEDY: So one thing that I would really hope I don't get asked in interviews is about regular expressions. Because those things are like write only.
 
00:11:38 OKKEN: No, simple regular expressions are fine. In regular expression's defense, they're very useful to concisely say some string kind of matches some other string within, anyway, people know what regular expressions are for, hopefully. If you don't...
 
00:11:55 KENNEDY: They're superpowerful.
 
00:11:56 OKKEN: you should probably look it up.
 
00:11:57 KENNEDY: They're our thing.
 
00:11:59 OKKEN: But one of the hard things though is, I'm going to introduce a project by Anthony Sotille? Sotille? Sotille? Anyway, sorry Anthony.
 
00:12:07 KENNEDY: Sottile
 
00:12:07 OKKEN: Sottile - Sottile, called re-assert. And so what this is, it's just a new matcher that does better tracebacks for when the match fails. And so this is really helpful if you've got, if you want to use regular expressions for a test, for part of your test, for your application. The string should say, "Hello Michael, welcome to my website." And I know that the names going to be different so I'm going to use a regular expression to parse out the name. How do I make sure that that matches, and have a useful answer when it doesn't. And that's where our re-assert comes in. And it's pretty fun. It's a fairly new project so the documentation's a little on the light side, and so I did what I often do with new projects, is I jumped into the test code, and looked at the test code for this to find out how it was used. And it's kind of fun. Like, for instance, we're going to put it in show notes, an example of just matching foo with fob, and if you use just re.match, it just returns as none.
 
00:13:15 KENNEDY: It says no match.
 
00:13:17 OKKEN: Yeah, so it's not going to tell you anything. But if you use the match as object within the re-assert project, it gives you more detail of why it doesn't match. I think this is, for very specific use cases, it's very cool.
 
00:13:34 KENNEDY: I love it, because one of the really frustrating things about regular expressions is, you say, here's the thing and it should match this, and it says, nope, doesn't match. Why don't you match? And this is really cool. So if you compare foo to fob, foo is the regular expression, fob is the value, for static characters, it just matches, just tries to find that substring basically, and the error is, right here at the b, it didn't match, the f matched, the o matched, but the B didn't match, and that's super helpful, that's great.
 
00:14:04 OKKEN: And there's a bunch of examples, especially in the test code. So check it out, and good job, Anthony.
 
00:14:10 KENNEDY: Absolutely. You know, there's a bunch of awesome Python lists these days, Brian. We've got awesome ASGI, we've got Awesome Python applications from Mahmoud, and we've talked a bit about Python type hints, and whatnot, so of course there's an awesome-python-typing awesome list.
 
00:14:30 OKKEN: Okay, nice.
 
00:14:32 KENNEDY: It's a collection of awesome Python types, stubs, plug-ins, and tools for working with them. And so, in terms of the tools, there's the static type checkers, there's stub packages, which define the types that go with other packages, which is pretty interesting, like typeshed. So instead of actually putting the types in the libraries, you can put them in these libraries that go next to your library, and it will actually pull that. It has stuff for Python 3.6, 3.7, standard library, like data classes, and all of those things. So yeah, it's pretty interesting, put them in a pyi file, and it will carry the types over to, there's an example of dataclasses.pyi, that will apply the types to dataclasses.py.
 
00:15:18 OKKEN: Oh, cool.
 
00:15:19 KENNEDY: So it's got a bunch of those, typeshed, is probably the biggest one there. It's got tools. This is a supercategory of many other ones, but one I thought you might like is, pytest-mypy. So mypy static checker plug-in for pytest, I think we covered that one.
 
00:15:32 OKKEN: Yeah, I think so.
 
00:15:34 KENNEDY: Yeah, and then cool articles like how to type check Django, and Django REST framework, so which is a whole tutorial on doing that. Apparently, Django has a bunch of magic, and it makes type checking it extra hard. so there's just a bunch of things like that in there, that I thought people might, if they're getting into this Python typing space, it's a lot of good stuff to go check out.
 
00:15:53 OKKEN: Some of the, like even Linters, because some people, you try one and it's confusing, well try another one, maybe it fits better for what you're doing.
 
00:16:01 KENNEDY: Yeah, there's a bunch of Flake8 and some Black stuff, and things like that in there.
 
00:16:05 OKKEN: Okay, cool. I haven't really worked with stubbs yet. I think that's something I want to try and turn to.
 
00:16:10 KENNEDY: Yeah, same here. What do you got for our last one?
 
00:16:12 OKKEN: Last one... Oh, so we have, actually, in the space of looking at people writing articles and and speaking and stuff, we kind of do that a lot. We run across quite a few people that list Developer Advocate as their job title. and I don't really know exactly what that is, and I've asked a couple of people, and not quite understood it still. You did an entire episode on it, didn't you?
 
00:16:36 KENNEDY: I did, I did. I'm going to see if I can pull up the number, the number is, I'm not sure what the number is. I got to figure it, I'll look, you go ahead.
 
00:16:43 OKKEN: This is from Dustin Ingram, in an article called, Developer Advocacy, Frequently Asked Questions. And the disclaimer he puts is, he is a Developer Advocate for Google, so other companies and other people might experience different things. But first off, just what is it? And he says, he helps represent the Python community at Google, in his case, but really whatever company somebody is working for, tries to get more involved with the Python community and then also try to represent the Python community within the company and represent the company in the community, kind of both ends of it. He has a chance to work on different packages that he cares about, in Dustin's case, he works with the PyPI and with packaging and other things, speaking at conferences of course, that's what we assume, that's what I assume, but there apparently some that don't do, much speaking at conferences, and some the just do one or two a year. Which, that sounds fun. The thing that I think really sounds fun is being the user zero for new products or features for a company.
 
00:17:46 KENNEDY: Yeah, that's pretty cool.
 
00:17:47 OKKEN: With the bent of thinking about Python users and whether or not they like it, and things like that. He's got a whole list of different things that they do, but actually, this sounds like a lot of fun to me. It would be kind of cool.
 
00:17:59 KENNEDY: I think this would be a great job. Yeah, I interviewed a couple of folks back on Talk Python, it was a lot of fun to do that episode. Yeah, I think it sounds like a great job. It's one of those jobs where you get to, you basically get to explore technology, obviously, when you work for one of these companies, it's in the slant of that, so the three people I interviewed, Cecil Phillip from Microsoft, Paul Everett from JetBrains, and Matt Makai from Twilio, they all kind of work around their space. But I think it sounds great, if you just like researching new stuff and playing with new ideas, talking to people, I would definitely do it.
 
00:18:36 OKKEN: I'd kind of assumed, even address the work-life balance, there's some people that do like to travel a lot, so you can do that, and some people that don't. I thought that maybe that was just required for a DA but...
 
00:18:48 KENNEDY: Maybe, I'm not really sure either. But work-life balance is interesting, because a lot of times those folks would be working from home, when they're not gone, they might have more time with their family, more flexibility to go to their kid's soccer game, but then make it up in the evening, whereas people go to the office every day, maybe not so much.
 
00:19:07 OKKEN: Definitely. It depends on your life, right?
 
00:19:09 KENNEDY: That's right. What you call balance? Okay, so do you got any extra stuff you want to share? We already gave a shout out to our Portland West meetup that we're doing by your office.
 
00:19:19 OKKEN: That's all I wanted to shout out. How about you?
 
00:19:21 KENNEDY: Yeah, that's all on meetup.com, so people can check that out. Nothing major, there was some interesting news we covered a while ago, that some of Kenneth Reitz's projects were being moved around, and the biggest domino in that whole space was requests. I can't remember exactly who jumped in, but someone from the PSF jumped in and said, we'll take it, we'll will take care of it in this thing called, some project that the PSF runs, that can take care of these types of projects when they become important in our, teetering on being unowned or whatever. So there's a huge discussion on Reddit about how it actually has moved over. So it actually has moved over to the PSF, for one. And so, now the place for requests on GitHub for example, is github.com/psf/requests. That's wild. but there's a huge discussion around it on Reddit. And, take that for what it is, it's Reddit. It's kind of, you get both sides type of place but I think people find it interesting.
 
00:20:22 OKKEN: I didn't really know that, actually there's quite a bit of stuff, there's a few projects under PSF. I imagine that will grow bigger now.
 
00:20:30 KENNEDY: Yeah, I would think so as well.
 
00:20:31 OKKEN: Black is there. That's interesting.
 
00:20:33 KENNEDY: How interesting. Are you ready for some laughs?
 
00:20:35 OKKEN: I am.
 
00:20:35 KENNEDY: This one might hurt us a little bit. This is good, as in from laughing so hard. This one was called to our attention by Colin Martin, and it's a set of web development merit badges. Go ahead and pull up the link, where you can see the badges, 'cause you got to see the picture that goes along with each badge. Let's take them row by row. Alright, I'll do the first one. They each have a big circle, and its got something in it. this one has a giant A, and it says, so you get this badge if you changed a DNS record and everything worked just fine. And I love this one. There's a /[A-Brain]], and it says, comprehended someone else's RegEx.
 
00:21:16 OKKEN: Yeah, exactly. Definitely.
 
00:21:19 KENNEDY: it just has as a bit of a web bend. Another one is like an expander thing, it says, built an accordion from scratch.
 
00:21:24 OKKEN: I've done that.
 
00:21:25 KENNEDY: I think you've done this next one. the one on the next row.
 
00:21:29 OKKEN: So, :wq, for, exited VIM.
 
00:21:32 KENNEDY: Exited VIM, I love it. Do you want to do the next two?
 
00:21:36 OKKEN: So, Aw CRUD, you get it if you accidentally created your own CMS. And then, a little painter I like the little painter with the acorn hat.
 
00:21:46 KENNEDY: It's like a French design painter.
 
00:21:48 OKKEN: You get this if you pulled off a design you didn't think you could. Well that's actually kind of nice.
 
00:21:53 KENNEDY: It is nice. This next one is for the consultants out there. It's like a mallet banging down, like a judge. And you get this one if you told a client or boss, "No, were not doing that."
 
00:22:04 OKKEN: Yeah, that's awesome.
 
00:22:05 KENNEDY: Then there's one wtih some crazy matching symbols, as you, wrote an HTAccess redirect that included a capture group. And then this one's pretty funny. You have a minus CSS in pink, and a plus CSS, green, and it says you've, refactored a large portion of CSS and you didn't break anything.
 
00:22:23 OKKEN: Oh yeah, that's good. There are some good ones.
 
00:22:26 KENNEDY: You just want to pick out a couple of more? We could do that...
 
00:22:28 OKKEN: Yeah like, merged master into a six month old branch.
 
00:22:32 KENNEDY: I love that one. There's two arrows going sideways two arrows going down, it says, centered an element horizontally and vertically.
 
00:22:39 OKKEN: Nobody can have that one.
 
00:22:40 KENNEDY: That's so hard.
 
00:22:41 OKKEN: It's not possible, I don't think.
 
00:22:43 KENNEDY: I don't think it is either.
 
00:22:46 OKKEN: I like the dude laying down on the ground. It says you, pushed to production on Friday and didn't roll it back over the weekend.
 
00:22:51 KENNEDY: Here's our undecorated one. Had a neglected site get hacked and spammed.
 
00:22:58 OKKEN: Oh yeah, these are...
 
00:23:01 KENNEDY: And then there's another one, there's a guy sleeping on a laptop, it says, solved the bug by taking a nap.
 
00:23:06 OKKEN: That's awesome. There's a semi-colon for, debugged something for over an hour where the fix literally was one character. Awesome.
 
00:23:15 KENNEDY: Yeah, let's leave the rest for the listeners out there to go check out. You just going to to see the pictures, these are brilliant.
 
00:23:20 OKKEN: Yeah, these are great.
 
00:23:22 KENNEDY: The first time I read it, my stomach hurt, it was really good . Alright, the speed was good. This was a fun show, thanks Brian.
 
00:23:31 OKKEN: Thank you.
 
00:23:31 KENNEDY: You bet. And talk you later.
 
00:23:32 OKKEN: Thank you for listening to Python Bytes, follow the show on Twitter, @pythonbytes, that's Python Bytes, as in B-Y-T-E-S. And I get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We're always on the lookout for sharing something cool. This is Brian Okken, and on behalf of myself and Michael Kennedy, Thank you for listening and sharing this podcast with your friends and colleagues.
 
 <|endoftext|>
00:00:00 Everyone 2020 it has been quite the year hasn't it? Definitely one of those for the history books to overall talk Python to me, I did a urine review show. And it actually had me and Brian on there along with a bunch of other really great guests who have been on this show and on top Python before. So I thought what we could do for our year in review here is to bring you that same show to bring you that same conversation. In fact, it was more in the style of Python bytes than it was taught Python to be honest. So I think it belongs here. So without further ado, let's join that conversation. When we look back on 2020 with sessile, Philip, Enos, montani, J. Miller, Paul Everett, Reuben Lerner, Matt Harrison, Brian knockin and me, enjoy the show. And thank you so much for listening to Python bytes this year, we'll see in 2021. So let's go ahead and just kick off this episode, this one is a little bit different than the standard show, everyone here has been a guest and a great guest. And some of you even repeat guests, some of your repeat guests and scheduled for more episodes even hinted enough. But let's go ahead and kick it off. So this is going to be a year in review. There's a bunch of us here, seven or eight of us. And I just do a quick introduction. Let me just welcome you individually on you could say you know, a couple sentences about who you are, and whatnot. So people know. And then we're just going to get into what you thought was the most interesting, impactful thing of the year. And I have some software to help me do this. So let me run it here. Darn it. Me. I will go back to that. Well, let me welcome you all, then we'll get through this. So Jay, Jay Miller, welcome to talk with me again.

00:01:32 Happy to be here. I haven't been a guest in like three years. So I know.

00:01:36 But your episode was so popular, like over 100,000 people listen to your episode. Can you believe that? That's so insane.

00:01:42 I'm shutting down my podcast. I don't get those kind of listens.

00:01:46 tell people about yourself.

00:01:48 Sure. Jay Miller. I'm a podcaster. developer, now developer advocate for elastic. You know, the people that do search, and we are database shots again, Michael. But yeah, I'm just happy to be here.

00:02:02 Yeah, that's it. Awesome. Welcome. Reuben Lerner, welcome back. Good to see you, man.

00:02:07 Nice to be here.

00:02:08 How early is it?

00:02:09 It's not that early. It's only 530. Okay. Well,

00:02:11 thank you so much for waking up early and make it? Yeah, we have people from basically every corner of the world. So yeah, don't be by yourself again, if they haven't heard the episodes.

00:02:20 Sure. So I'm a Python trainer. So most days, I'm in different companies doing on site training, nowadays a little less on site for some strange reason. And so I normally do corporate training everything from intro to Python for non programmers all the way up to advanced workshops, and also sell a whole bunch of courses online. Do individuals. Oh, my book, my book, Python workout.

00:02:42 Yeah, and we're we're streaming live with video so you can hold it up? Yeah, that's awesome.

00:02:46 Oh, hold up. Fight on workout. Picture be on the cover? Of course.

00:02:50 Of course. Yeah. That was when you're working out preparing for the Olympics. Precisely. Precisely. Yeah, exactly. So we'll be sure to link to your book and some of your courses as well. Enos welcome from the other side of the world.

00:03:02 Yeah, I'm currently in Australia. Escape the EU lockdowns and I'm here. Yeah. Happy to be back. I think I've been on a few of your podcasts, but it's always my favorite podcasts. So thank you.

00:03:12 Yeah. It's awesome to have you here. And I have definitely dreamed about. Well, my daughter goes to school online. I always work online. Maybe we should just go somewhere by a beach away from people. How can we do that? Where it's warm, right. And it seems like you pulled it off. Beautiful. All right, Paul. Paul Everett, welcome.

00:03:28 I just saw Anthony Scholl talking. So if you want to talk about converting your life to work at the beach, just subscribe to his damn Twitter account. Welcome against you.

00:03:39 Oh my gosh, also from Australia. Hey, Anthony. And Andrew from pi charm is here a bunch of bench folks. Mark. Awesome. Paul, introduce yourself.

00:03:47 Sure. developer advocate at JetBrains for Python stuff and web stuff. most known for giving the Python 1994 talk. My purpose on this panel is to increase the median age so that we all qualify for the discount at the buffet. Hey, man,

00:04:02 I'm right there with you. right there with you. Awesome. Nice to have you, Paul. Brian. We've met before right now, Brian, aka and he and I host co hosts Python bytes together. And you've been on the show quite a few times as well. Last time, I think we covered 30 pi test plugins. That was quite the whirlwind tour.

00:04:17 Yeah, so I highly recommend this book to anybody.

00:04:20 Awesome. Matt Harrison. Welcome back. Thanks. Good

00:04:23 to be here. I guess I'm similar to Ruby. And I do corporate training and consulting and Python and data science. And I guess since we're flaunting books, I'll flaunt my latest book

00:04:33 way way. The tiny Python three notebook.

00:04:36 notebook. It's very small. Anyway,

00:04:38 it is tiny. Well, what I was gonna say Matt is like, you're gonna need to be like, basically an octopus to hold up all your books, multiple books on each tentacle.

00:04:46 I've got a few here. So yeah, it's good to be here. Thanks for having me on.

00:04:49 Yeah, you were just recently on about learning how to learn. Yeah.

00:04:52 Does it count if I have everyone else's book?

00:04:55 Yes, it does. But it also be hard to hold them all up, especially if you got all the mats That's a fella van. Hello, good to see you, friend.

00:05:01 Hey,

00:05:02 thanks for having me on. I don't have any books to share. But because I hate writing, so I don't write anything. I do do some video. So if you're interested, I do do a weekly Python stream on Wednesdays. So if you folks want to check it out, it's on Twitch or the Microsoft developer account. And we do a very beginner friendly conversations about Python and stuff like that. And Michael, you were just on the other day, too, right?

00:05:24 Yeah, it was so fun to be on there with you. We got to play around with fast API and mathematical framework.

00:05:28 So it's coding from the beach? What's the name of the show?

00:05:31 That's a good name. Actually, maybe I should coin that or? No. Um, so we do pi weekly. So it's me and my, my coworker, Brian Clark. And you know, we kind of approach Python from the perspective of beginners, but also from people that don't necessarily know Python very well. So you know, Brian is a JavaScript guy. I'm a dotnet. Guy. But we're both I like to call it pi curious. You know what I mean? Like, we're Python curious. And,

00:05:54 you know, we

00:05:55 definitely want to show people like the different perspectives of learning like new languages.

00:06:00 Yeah, it's super interesting. And it's really lucky. It's, it's like you said, it's, it's this twitch sort of exploration style of code, not polished presentation style. So you just guys sit down, take feedback from the audiences and and go with it.

00:06:13 Yeah, I love the show, because I am never prepared. Like, I kind of just show up and talk about stuff. And people love it. And

00:06:19 it's great.

00:06:21 I don't have to do notes or anything like that. We just kind of be like, Hey, what do we want to learn about today? Right? Well, let's go ahead and do it.

00:06:26 Yeah. Fantastic. All right, well, given how many of us that are, let's go ahead and just jump in. And we're going to do our year in review. And so I've written a small piece of Python software here in the repple. It's very advanced, it's at least four lines of code I got to tell you, and what it's going to do is going to pick one of you. And then we're going to have you talk about what you felt was the most significant or impactful thing that you saw happening in the Python space. So round one, sessile, you're on screen and it pulled you up, go for it.

00:06:54 I got lucky. Okay. So the most exciting thing that that I think happened in the world of Python, and one that I have a little bit of a close relationship to is the fact that Guido van Rossum joined Microsoft just a couple of weeks ago. So I didn't mention this before. But I do work at Microsoft as a developer advocate. And I think for me, it's been a really interesting to kind of see how the company has, you know, been embracing open source and working with a lot of the creators. And now seeing a lot of the leaders of the industry kind of joined the company in and I mean, it kind of, it's a kind of, it's like a different world. Let me I don't know how else to explain it or, or talk about it. It's been really great to have him here. I had the opportunity actually to interview him. And we did like an internal interview, just talking about like, well, what made you decide to go into retirement? Right,

00:07:42 like, that's awesome. Was this on Channel Nine? Is it public? Or is it?

00:07:46 No, it was internal. It was an internal interview. I don't know what it is. I'm sure we'll do some other ones. But it was an internal one.

00:07:53 To make them whiteboard.

00:07:54 No, we didn't do any whiteboarding. We did ask him what some of his favorite shows were. So that was pretty interesting. We asked him like the Star Trek versus Star Wars conversation. So

00:08:02 I couldn't I couldn't handle that pressure.

00:08:05 It's hard, man. It's a tough crowd. Tough crowd. I think it's definitely amazing to be able to see folks from the industry like kind of embracing, like these different companies and us really supporting open source in a very, like, authentic way.

00:08:19 Yeah, it's such a big change. And Ruben, you were just talking before we started streaming, I think about, you know, 10 years ago how this was really different.

00:08:26 Oh, yeah. I mean, like, even more, but yeah, even 10 years ago, the notion that Microsoft would be so involved in the open source space, especially the iPhone space was basically unthinkable. I mean, I think was Steve Ballmer, who said that, you know, Microsoft, was like, the Linux open source were a cancer on the industry. And they were definitely seen, Microsoft was seen as an enemy of the open source world. And it's been truly amazing to see them just embrace it. I mean, you see the booth of Python, you see the vs. Code investment. It's very, very impressive. And it demonstrates, and he says he was saying this earlier, like, how much leadership at the top really can change the direction and the attitude of a company. And that filters through to even the lower level people and the decisions made there.

00:09:07 Yeah, that's a lot of hard work, right? Because if you think about it, we've had different leadership for a very long time. And so for some of us, some of this change that people are still recognizing, I mean, we've been doing it for a very long time, you know, what I mean? Like, we didn't just in 2020, decide, oh, hey, let's adopt and support open source. It's been it's been one of those things that have been building, you know, very much over time. But, you know, the fact of the matter is that you still have those old stigmas that we still have to shake and, you know, we still have a lot of folks that we have to help convince that we're not the Deathstar. And we won't, you know, destroy the world kind of thing.

00:09:43 It's a good, good responsibility to take on because there's also you know, there's a lot of fuckup and if you commit to like doing something like, you know, GitHub acquisition and say, Okay, we're doing that and we're running it, you know, what side forward because every misstep can have, like, you know, a really big impact. Yeah, you know, If Microsoft starts doing bad things, again, people are not going to be, you know, be forgiving at all. So

00:10:04 I think that was the most sensitive. One of them all is the GitHub acquisition, because what they do to Azure is kind of their story, what they do to Windows is their story. But what they do to GitHub, that's Everyone's story. And all of a sudden, that was a big deal.

00:10:16 Yeah. And on top of that, you have the ability to give GitHub a little bit more power in the space. Like, I mean, we've all been kind of watching what's happening with like, YouTube dl and stuff like that, and just seeing the support. It's not just GitHub anymore. Now it's like, Okay, what does one of the the wealthiest companies in the world, you know, say about this particular position that YouTubers have a problem with that people in tech have a problem with, like, a lot of abusive behavior. And on top of that, you're providing support for things like NPM? It's one of those questions, we all want to contribute to open source, but none of us have the financial ability to contribute like a company like Microsoft can. So not just saying we're going to be a part of it, but saying, No, we're really going to be a part of it. It's like a huge dip.

00:11:04 Yeah, the million dollar defense fund that they just announced, it's a big deal.

00:11:07 Yeah, for sure. And when you think about GitHub, right, like you think about, like developer culture, that's what GitHub kind of represents to me, is the the new, you know, the future of developer culture, like how do we collaborate? How do we work with each other? How do we share not just source code, but like, experiences and knowledge right through like something that we can all connect together with? That's code, right? And then kind of circling it back around to Mita, being able to again, see these leaders of these really large open source projects, put their faith in the company, and even considering what the past of the company was to what it is today. And then hopefully, like the rest of the open source world would start to realize that we are serious about being good open source citizens and supporting the culture in the community. I mean, me personally, I'm just really excited to see what he's gonna do what he's going to work on. The future's bright. Yeah, absolutely. Someone on on Twitter had said, so now we actually hire folks that contributes to, you know, obviously, C sharp and F sharp and dotnet stuff, but also folks that contribute to Java, Russ, c++, and obviously, Python, right. So we have a whole host of language books underneath the umbrella of the company. And so now being able to have that space of collaboration, like underneath the umbrella of one company, I think is gonna be really interesting to see what the next couple of years looks like.

00:12:24 Yeah, you have to come back in six months and give us an update on Python.

00:12:28 Give it a six month update on it.

00:12:31 This episode is brought to you by linode. Simplify your infrastructure and cut your cloud bills in half with linode. Linux virtual machines, develop, deploy and scale your modern applications faster and easier. Whether you're developing a personal project or managing larger workloads, you deserve simple, affordable and accessible cloud computing solutions. As listeners of Python bytes, you'll get $100 free credit, you can find all the details at Python bytes.fm slash linode. linode has data centers all around the world, the same simple and consistent pricing regardless of location, choose the data center that's nearest to you and your users, you'll receive 20 473 65 human support with no tears or handoffs, regardless of your plan size, you can choose shared or dedicated compute instances. Or you can use your $100 in credit on the s3, compatible object storage, managed Kubernetes clusters and more. If it runs on Linux, it runs on linode, visit Python byte set FM slash linode. And click that create free account button to get started. I'm going to run run the chooser Hall it has chosen you

00:13:38 not sure about your chooser algorithm here, there doesn't seem to be

00:13:43 a random choice. I'm telling you.

00:13:46 This time, it's not a good time to talk about election strategies. And the scene is how it shows you first, it could be flawed.

00:13:53 We're changing. Are you changing the random seat on a back way?

00:14:00 Yeah, I should topic. My topic is things change, nothing changes. And I think I'm maybe stealing someone else's topic. So I appreciate your random algorithm choosing me first. And it's kind of along the line. I'm kind of interested in open source communities over the years and decades and why one works when one doesn't in particular, a lot of open source projects that get successful kind of founder when the founder leaves and over the last couple of years you've seen Guido transition out step now is BD FL and kind of a new language governance model that he didn't even decide on he let it emerge. And then new release managers, new PSF directors all happen in this year, a pandemic which kind of destroyed the big fundraiser and organizing event called pi con Python 2.7 end of life, which I guess a lot of us thought would never effing happen in it effin happened. And through all of this change for a project that was like reaching mega escape velocity. in popularity, nothing changed. It was like who cares? Python just kept on doing the doing its business releases kept cranking out peps kept cranking out. elections will Python elections kept cranking out. Michael O'Brien kept cranking out podcast Hallelujah, something good happened in 20. And so it's interesting to me healthy projects are those with kind of a healthy bench kind of a middle management. Python has a hell of a middle management now. It's awesome. And it's like middle management, and every vector now it's got language leadership, middle management, Foundation, leadership, manage middle management, conferences, all the regional conferences are kicking ass even online. So it's really good for me to see kind of a balance between some of the old heroes like Brett cannon, who gave this awesome keynote two or three or four years ago at pi con about open source. And then some of the new heroes like Marlene mengalami. When I do the Python 99 for talks, sometimes I get with Barry, and it's like, well, did you ever know back then that it was going to hell? No, we didn't know. And so seeing all of this happens, seeing generation after generation come in, do their thing raised the next generation is pretty cool to see. Yeah,

00:16:10 it's fantastic. And I know there was a lot of uncertainty when Guido stepped down about oh, my gosh, what's gonna happen, but it's kind of been a non issue, which is good. Non issue in a good way. The Yeah,

00:16:22 I think it's really nice to also have, you know, some stability even, you know, especially nowadays, that's quite rare. And just to see, you know, stuff just works. nothing goes wrong. No drama, no, no, nothing terrible. Just dramas, almost boring.

00:16:36 Yeah, boring is good these days. One of the things that really surprises me pose, you mentioned the escape velocity. It's what's weird to me is how Python went like 20 years on medium, like simmer popularity, and then it then it hit the afterburners and took off. Right. It seems just, I think there's gonna be some interesting studies done about why or how did a language that had kind of been around for 20 years, all of a sudden, really dramatically improve in popularity. And, you know, I have some ideas, but I just think that that's an interesting aspect to what you're talking about here.

00:17:05 Yeah, it's also the whole aspect of the, you know, the previous like Microsoft and Java and sort of, I guess, big money behind those sorts of languages, and like the early 2000s, pushing them, and then I think community and to the point of like, developer gave developers what they wanted, rather than maybe, say, enterprise II languages. And then I think there's a whole confluence of other other things that happened as well. But it is kind of crazy, right? That like one of the top if not the top languages, right now. They're almost 30 years old. And it's got issues, it's got warts and whatnot, but it's it's a thriving language and, you know, without significant big companies behind it, right, that it's competing with companies that thrown millions of dollars into development of these things. Yeah,

00:17:54 absolutely. And Matt, and Enos, you, too, are on the data science side. And I think the data science and computational folks are the ones that poured the gas on the fire and really made it take off. And that's not where the growth necessarily completely is. But I think that gave it a serious kick.

00:18:09 Yeah, no, no, actually, I because I get asked about this a lot like, oh, what what do you think made Python the language for machine learning data science. And I, my theory is actually that a pace that, of course, was lucky that it was in a right place at the right time. But I think actually it one because it's a general purpose language, people can come from other fields of Python into machine learning data science, for example, like what did people do before, if you look at kind of, you know, these surveys of what to use Python for before, it's a lot of web stuff, you can build kind of thing in Python. And I think that's what makes it so appealing, and much more appealing than, let's say, like an AI language. And that's also, in my opinion, why a lot of these attempts at making an AI language haven't taken off. And people are like, now Python is great. Yeah. So it's fast enough. It's usable enough. But I think the general purpose is really is what kind of got it over the edge there. And

00:18:58 a lot of people that I'm teaching or training are people who don't want to be programmers, they want to use Python as a tool. It's like Excel to them. They don't want to be programmers. And so something that they can pick up and it just sort of works. And they can go to StackOverflow and copy something and as long as they get the indentation, right, that sort of works, as long as they're using the right version or whatever. No compiling, there's

00:19:21 no linking, yeah, weirdness.

00:19:23 And then you have things like Google colab, or whatever, where you have an environment, it's all set up, and you can just sort of go right and so that is really empowering for people who don't want to be programmers, but view Python as a tool, a necessary tool that they need to leverage. And in addition, there's over a quarter of a million packages on pi pi, right? And that's like literally standing on the shoulders of giants. You can go there and pick out something that you want to do and you're a pip install away from it. And that's super powerful, right? You don't have to set up a huge environment and Yeah, it just really simplifies life for a lot of these people who don't want to be programmers, but want to leverage these really cool. Yeah.

00:20:08 But at the same time, you do have a, you know, strong support for C extensions. So if you're looking at the top packages people download from pi pi, it's most of them who are written in C siphon, whatever. That's what makes them so powerful. So we have that while also have it being able to provide, you know, a good developer experience. Yeah, absolutely.

00:20:27 I think it was, um, Seymour pepper, who talked about a good language having us talking about logo, but it's even more appropriate for Python, having low floors and high ceiling, that's really easy to get in and do simple stuff. But when you want to do complex stuff, you're not limited. So just yesterday, I was like doing a workshop with people. And we like someone who had just started with Python. I said, Oh, but look, what we can do if we sort of extended several, several layers. And he was amazed how complex you can get and how sophisticated you can get just if you want to vote, it's really a testament to the elegance of the design language, I think,

00:21:00 yeah, great. All skin chat makes a good point that many folks say Python is their second favorite language, you know, and, and there's something to be said for that.

00:21:10 dericks. Sir, should be there first.

00:21:13 I'm with you. And with you.

00:21:14 Well, to that point. I mean, it's also been said that Python is the second best language for doing things, right. So you might have a language that yeah, that's actually is cool. I got data science, or you might have a language is better for web apps, you might have a language, it's better for like system admin. But there's probably not a language is going to like get you all three of those right and Python, sort of that Venn diagram that gets you in the middle, and is good enough to do a lot of what you want to do. Absolutely.

00:21:41 Random and by choice chooses Brian Aachen.

00:21:44 Okay, cool.

00:21:44 Let me pull up my notes. It was interesting, we were talking about Microsoft. And I didn't choose this, but I'm going to mention it. Anyway, tons of projects switched over to GitHub actions in 2020. And, I mean, because it just kind of be hit the area, right, like at the end of 2019. So I saw a lot of projects migrating to GitHub actions. Anyway, I wanted to talk about packaging, which is sort of related. There's a couple things I was supposed to pick one exciting thing happened today, Pip 23, was released and the dependency resolver. resolver is now the default,

00:22:18 the present sees resolvers already angry at me for trying to deploy some depend about changes.

00:22:24 I'm excited about this. And it's bit me already, too. I had I've had requirements, text files that have broken dependencies. So I have to go look at those and see well, which you know, I have to pay attention to it. So there's, there's a little bit of pain for some people. But it was such a long struggle in that's I look back. And the request for a dependency resolver came in 2013. So seven years later, but the something magical happened in 2019. And that was some money from Mozilla came through, and they threw some of that money at the dependency resolver. So that's pretty cool.

00:22:57 Yeah, that's a big deal. That money was there's been a couple of these experiences where money was given to Python specifically to hire a team to improve on pi pi that the rewrite of pi pi, that org was one and then this is another

00:23:10 Yeah. And they rolled it out in several versions. So we had our version early, early in the year. And then around July, we had another version that had a different flag that you could try it out with, to try to get some of the early adopters to try it out to make sure it's working. And then today, it's rolled out for good, and I'm pretty excited about it, I kind of want to tie this in with the packaging, I've seen a lot of progress on and a lot of adoption of the pipe project tunnel, kind of taking over more packages and more uses. So we saw flit used to have its own INI file now only uses by project tunnel, there's been dependent, like additions to the metadata definition that hopefully will take hold, and even pi test now you can throw your configuration in a pipe project a tunnel. So I've seen more and more projects, saying they're getting pressure from their users to say, I don't want another INI file, I want to put my settings in the project terminal. So that's a good thing. Yeah, absolutely.

00:24:06 You know, a couple of things on that. You talked about two things. When you talked about packaging, you talked about GitHub, I mean, the fact that now you can actually do some package work within GitHub itself, I build a lot of small little tools, not things that I would want to go on pi pi note, we don't need to clutter that up anymore with my garbage. But it's great when I can just say like, Hey, here's a link. And if you're really, you know, concerned on how to add it, you can just pip install, but point to this GitHub, you know, and that that works.

00:24:36 Yeah, and also the stuff about finding security vulnerabilities automatically, and doing prs for you that GitHub does against like your various package definitions. I think that's great as well.

00:24:47 Hey, has anybody ever put a JavaScript package on the GitHub? The package JSON?

00:24:53 Probably, but yeah, I mean,

00:24:57 I guess right.

00:24:59 Oh, It's Gatsby. So I basically put 500,000 JavaScript packages into my repo.

00:25:06 Yeah. And

00:25:09 there's something I appreciate about Python a lot that like I actually, I never thought I'd say this but like I do

00:25:14 prefer also that you can't resolve the dependency bot security mega warnings fast enough. It's just incredible. I know. It's and I

00:25:23 just turned them off. Right? Like

00:25:26 I totally fix it.

00:25:28 One way to do it, yes.

00:25:31 It's like I've always say that's a problem writing tests, right? Like, when I started programming, I was like, kind of hate writing these tests because they keep pointing out shit, that's kind of wrong. And then after fix that, but don't have tests, it all works fine. And and I'm happy. Same with TypeScript. pins to some talk. Yeah, I know that's kind of wrong. So now I have to you have to fix it. So yeah, just to

00:25:53 let you speak at a high school.

00:25:56 It's the See No Evil Hear No Evil I, I the I do think that the dependable stuff, there's something about turning it off, it drives me crazy. I really value it. But at the same time, the reason I had this conflict with the dependency resolver is it told me I'm I should give me a PR to upgrade one thing, but not one of the dependencies for which the newer version was required, or would break the resolvers. Just like Ah, what is this thing doing? All right, very good. Very good. Brian, the chooser you

00:26:22 need to? Sorry, you need a batch batch dependency resolver.

00:26:26 Yes. And that resolves everything at once. And then make sure you've got a working state at the end? Well, the thing is, the PIP is fine. It was right. It's that depend about if you have 100 100, I probably had 20 dependencies in this thing. It gives you one PR for each line is sometimes it's like lags a day on the other one, and if it gets it out of order, then the result the resolver get anyway, long story. frustrating. Yeah.

00:26:49 I mean, to be fair, speaking of dependency, resolving from the perspective of a library developer, it is hard and it's, you know, you do want to use versioning properly. And I do feel like there's this internal conflict between how do we manage dependencies properly for users? And how can we make sure that we can define how our packages depend on each other in a way, that's reasonable, because not everyone, you know, use semantic versioning not everything is a major release. Not everything is a breaking release, but stuff just depends on each other. And you don't want to lock people in, there's always the ideas, you should be able to pick up your project a year later with its requirements, and it should run. And it's really, really, really hard.

00:27:27 Yeah, and if it gets wrong, then you probably get a lot of email or a lot of GitHub issues.

00:27:31 Hey, Brian, on your topic of pi Project tommo. What's the latest greatest on ebenfalls?

00:27:37 I don't think it's completely working for all the same. So I'd like to be able to say pip install dash, he is a deshi. And just a project, you can say pip install just a directory, no matter what kind of packager it has. So that works now. So you can if you even if you split or something, you can't do dashi, but Flint itself, for instance, has its own editable install thing. And I don't know what poetry does. I don't use poetry. So it's a different command. I'm annoyed that it doesn't just convert it. We should plug it in. But I think that'll be coming in. Maybe in 2020 or 20. Probably not this year, maybe next year, hopefully. Yeah. Bad Wolf says in the chats,

00:28:19 what is the quick solution for getting PIP version updated? First thing you created virtual farm and this is another thing that drives me crazy about PIP and if it could get changed, I would love it. When you create a new virtual environment. Basically, for about a week, you have the latest Pip. And then afterwards, as soon as you pip install something, it says warning, your PIP is out of date. As soon as you create a virtual environments like well, why didn't you just update it? I want. If you're going to tell me it's wrong, just fix it.

00:28:42 You can use virtual environment instead of v and v use virtual environment because then you can update your Pip. And you can update the global one and install it in your environments.

00:28:50 Interesting. Yeah, I just wrote up an alias that will create diverse environment, upgrade different set of tools and then activate it all the way around activate then. Yeah,

00:28:59 yes. Like that. Yeah. Awesome. And then you can also have it installed everything you need, you know, in the same command automatically create one switch. I shared my script somewhere, I think on Twitter, if anyone's interested.

00:29:12 Nice. Yeah, I might just V and V, I just type v and v. and magic happens. I don't think of it anymore.

00:29:16 But when I finally switched to virtual, and it's like, I make so many virtual environments, it's so much faster. And just that even just a few seconds, several times a day. It's worth it for me. So

00:29:28 yeah, okay. Awesome. All right, I've chosen next and there's a dependency in the chooser. So it's worth correctly. So it's chosen me actually to talk about the next thing. And Paul touched on this, but I think this is a really important one. Like this is the year that Python two actually went away. And it's I just spent so long having to justify why Python three is the right thing. Or more often teaching people No, no, no, you can't type Python. Please don't do that. Unless you're on Windows and you have to do that. But if you're not on Windows, then you better not do So you got it, you know, it's just like this drag it, it always felt like things like Django or flask and whatnot were being held back, all these libraries were being held back by Python to support. And last year, they started dropping it. And then Python two itself actually went away, Brian and I tried to create the right nomenclature around this, I guess, is calling it legacy Python and modern Python, rather than two and three. And that was, that was fun. People started to quote it and use that terminology, which is kind of cool. I don't know how well it worked. But it's really nice that Python two is finally officially gone. And I thought there'd be a bunch of people would freak out for Python, and start creating, like alternate old versions, and I haven't besides some, like, support commercial support stuff. I really seen that happening. So it's, it's pretty interesting, I think,

00:30:45 yeah, I think I show like horns and stuff. And like, you know, maybe

00:30:51 some, like bottle. Yeah, absolutely. Yeah. I mean, we really didn't get the party we were hoping for right, like pi con was supposed to be this big send off for Python two. But now there is not so much of a Python. Not really, I mean, there's online, but it wasn't the same.

00:31:07 Now, we just got to wait until we have all of the articles about the companies that finally decided to switch and the steps that they took, yeah, that they avoided for the last decade to to make this a reality.

00:31:19 Yeah, one of my biggest corporate training clients, they have been using Python two for years and years. And they do all sorts of testing of hardware using Windows. And so with all sorts of custom c extensions. So I've been saying that for years, every time I do training, look, you should really be doing item three, and you should realize you should move that direction. And there was basically no, no, no, we got so much invested in what we've done, we're not really going to upgrade. And finally about I guess a year ago, they realized, ah, we're going to be stuck on our own maintaining everything putting all these actors have API, maybe it's time to start talking about it, as I'm actually doing some training for them now. And I asked a group, should we do Python two or Python three. And the majority actually said, it's okay to use three because our group has switched. So if they are moving, it's clear that you know, even sort of the the drag of the drag is companies are doing it.

00:32:12 Yeah, I was just gonna echo what what Ruben said that, you know, when you have success, and you get enterprises using your stuff, and enterprises are slow to move. And, and I don't want to like criticize Python three too much. But I think if they would have put f strings in 3.0, then they wouldn't have had this problem. But because they waited for F strings, and then they had people dragging their feet. So we'd have

00:32:33 that drag. That's that was one of the most popular features for sure.

00:32:37 You're saying the walrus operator was what finally did it?

00:32:43 I'm not gonna go there.

00:32:44 You know, I was not super excited about the wall sharpener I found myself using all the time I like it did mean?

00:32:49 Oh, that's cool. I think it definitely solves a problem. I just wait. That's three, eight, right.

00:32:53 The Wall was I believe so?

00:32:55 Yeah, yeah, I'm still I mean, I feel like I'm now back at like, okay, we finally dropped support for two from all of our libraries that we're developing. And now we're on 3.6. Because Yeah,

00:33:03 3.9 is current 3.8 is now the new legacy.

00:33:11 How was it for you like, a library developer?

00:33:14 Yeah, I mean, I feel like I only really got to use Python three this year. I mean, of course, I've been using it privately for much longer. But I would say admit, this year, I was finally like, cool. I just use tie pins, I use f strings across all of our projects. Because before our dependencies had to support people on to an old version of spacey had to support people who wanted to use too. So that's, that kind of becomes the baseline. And now we've moved that up to 3.6. And so on till 3.6 is dead. They still always new features that you know, we can't just you know, ship.

00:33:44 Yeah, but that that step from two to 3.6 is going to be way bigger than 3.6 to seven, right? That's a very small step. 236237 or 37238. So you've done the big stuff.

00:33:56 Awesome. Yeah, yeah. And some of the new features. It's like, yeah, whatever I can, you know, live without writing those in my codebase. And people can still use them in their code bases. But yeah, all the new versions, we're going to publish, like spacey three that's coming soon. We'll use Python three in the codebase and will only work with Python today, we want to distribute wheels for Python to which we might have not even done for a while, because it's really, really a pain for some of our more abstract and complex dependencies that we're also building. Yeah, cool. So far, probably complain, like I was I was expecting people to complain a bit more, but like, No,

00:34:28 well, if you look at the PSF JetBrains survey, the data science folks that side of the house have definitely moved to Python three quicker and bigger than the web team.

00:34:37 I'm actually surprised how quickly people move up. Like, you know, I don't know even after three nine came out, we've had people questioning like, Oh my God, why does your you know annotation tool not work on you know, three, nine, or why does this not work? And it's like, nothing works. Something I know. It's like, I'll see I doesn't do theanine yet. Like, I can't build anything. None of all the packages. Run like sorry.

00:34:58 I felt like a big person. In developer for like the first time ever, when I actually got my first issue with running the latest and greatest Python, it was because I was running GCP. And I kept running into an error or running into an error. And I was like, You know what? It used to work. Let me just try it on 385. And then sure enough, it worked perfectly. And I was like, I've done it, I've reached the new achievement, like,

00:35:20 nicely, I've taken down the top Python training website by shipping the walrus operator accidentally, at the time, the Ubuntu didn't support it. A quick question or a comment from Zack in the comments about when, you know, we can actually say like, is he pythons gone when the OS vendor stopped supporting it? Well, I think Python two is no longer shipping with the new Mac OS. And canonical is starting to make Python three as the default. So I think we're we're getting there

00:35:45 is I thought they were removing Python in general from Mac OS, or just making you install it yourself.

00:35:51 I think there might be some internal system thing. I saw people talking about the system Python three, eight, even though I agree I'd heard the same thing you said, but I don't have a fresh

00:35:59 it's not actually. So such a bad idea. Like I think you know, you for most things to do you have to install some extra stuff anyway. So making it an extra more explicit install, from a user's perspective, I think is nice. not terrible. Yeah. Because otherwise, you know, if you just type in Python, and you just run into all kinds of potential issues anyway. So yeah, especially when it's super out of date. All right.

00:36:20 Yeah, definitely end up like telling people my courses. Oh, using a Mac. Yeah, ignore the Python. It's installed. I know, this is a Python course, ignore the ones it's all Here are ways that you can install it on your own. So it'll be up to date. And here's how you can make sure it doesn't conflict with what's already installed. So maybe removing it altogether. Is that such a terrible thing?

00:36:38 Yeah, for sure, homebrew homebrew. Alright, enough. The voting system is chosen. You Next,

00:36:44 unmute myself and look at my notes. Yeah. So I think I've already mentioned the topic I was going to talk about about five times so far. But yeah, I think in 2020, we really saw the ecosystem about type hinze, static type checking types, in general, mature and like really be widely adopted. And I do think a part of that is the more widespread adoption of Python three, because before that, to be fair, you could use type hints before pie for free just for completeness, but like, that's not what people did. And they've looked a different so yeah, now and actually even I couldn't really imagine writing code without type hints anymore. Like if I write something, and I'm not adding any types, it feels kind of naked, and it feels kind of wrong. And I actually feel like, Oh, my God, I might be missing some issues here. Maybe I'm not catching some bugs. So yeah, which is quite surprising concept. Or it says something considering I only just recently was able to really embrace all the new Python, please.

00:37:39 Yeah, that's a pretty quick transition stuff. It's fine. Yeah, to go. I depend on this thing now that like previously, you had to stay away from

00:37:45 Yeah, and I have static type checking enabled in Visual Studio code, you know, underlines things. If you pass in the wrong types. It gives you all these nice, like autocomplete prompts or previews if you want to, that's all something I got really, really used to have a really short period of time. Like, what about you, everyone back to you use type pins? Like, can we have like an opinion poll, like just base the hand and then we summarize it for people who

00:38:10 address everybody. I'm

00:38:12 Ryan Rowley, I'm slowly starting to use them more and more, I see the advantages. And in part, before we start recording, like, because my students are encouraging me to use it more and more, because they want it because they come from languages where there's no such thing as optional typing, it's, you must do this or the program does not run. So what do you know, they can actually be useful?

00:38:32 Yeah, I think that's one of the biggest benefits that I like about the type hinting system is that it's optional, so you could choose to use it. And then if you don't need it, we could just take it up. Because for me, like, I believe in lazy being a lazy developer, and stuff like type hints just make certain things a little bit more discoverable. Right. And, and kind of like, what we were saying before, like, it just improves your tooling to be able to discover more

00:38:56 of your code for you. I like to use it, I like to use it for API's are especially for package interfaces, so that people using a package can can use the editor tools and stuff like that to further hints. And also just wherever it makes sense. I mean, if it looks like it actually distract detracts from readability, then I take it out readability is above all for me. So if it's usable and readable, it helps

00:39:20 me advocate of any, like, I don't know, you may have a function that takes several arguments and then returns like a callback that gives you this kind of typing. I wouldn't advocate for that necessarily. But yeah.

00:39:32 And I feel like they're, they're working on some of that confusion as well. And some of that, like clutter and bloat. I mean, that was I talked about that 3.9 story, it was because I was tired of typing typing dot list or typing dict. And it was like, Oh, you mean, I can just do this now. Like, and then sure enough, you know, stuff crashes, and it's like, well, guess not maybe later, but it's great that for people who are looking at Python as a tool that they're using, not the language Sit there reading on a day to day to day, but just flat out the tool that they're using. They don't know what we're talking about half the time, but they can kind of look at something and go str. Huh. Someone mentioned a string that one time, maybe that's what that is, you know, it's a lot easier than just looking at the code and trying to figure it out.

00:40:19 Yeah, speaking of tools, I think I'm typing. They're not only that syntax feature, they've really enabled this whole new ecosystem of tools that use type hints to accomplish something else, or in a creative way. And I think many of them have been covered on this podcast previously, for example, there's pedantic, which uses high pins in actually one of my favorite creative ways for data validation, settings, management, it's actually a library we've adopted across a lot of our projects to just quickly you know, you define this interface, here's what I expect, you get like, kind of like JSON schema, just with type hints. identic is so

00:40:51 wonderful. Yeah, you're right. It's really nice. True. Yeah, I

00:40:55 would say it's one of my favorite recent discoveries in terms of Python developer tools. And then of course, there's fast API and typer, developed by my colleague, Sebastian, which probably have not been discussed a lot on this and related podcast. Yeah,

00:41:08 he was on the show ago, like 10 shows or so. And yeah, that's a fantastic framework to you.

00:41:13 Yeah. So that's, I think it's also partly what really popular popular, popular is a great way to tie pins in as a board as a tool for Yeah, developing applications and so on, I think also also actually pedantic, and yeah, we've also in 2020, I think released our Machine Learning Library thing, which kind of functions more like a, an interface layer, and lets you write neural networks, combining layers written in different frameworks like pytorch, tensor flow, and we've included custom types, for arrays and all that stuff that passes through the network. Because you know, if you're doing machine learning, a lot of it is like really abstract, you have like this multi dimensional array as in like, 300 dimensions, and then that goes through, and then it gets transformed. And then it goes all the way back. And at the end, you're hoping to get something out. And there's a lot that can go wrong. And it's not even about like, Oh, we experienced it as a programmer, it's like, that's true. It's just abstract. And we can make it a bit less abstract, even by just providing custom types that you can declare. So it's easier to see what goes in what comes out. Do these layers fit together? Do they not? Because otherwise, yeah, you usually end up with these very hard to debug NumPy arrows are triggered by like five layers deep that tell you that you can't vote pass that shape into this other shape. And you're like, Yeah,

00:42:32 that's it, this doesn't help me, I have no idea. Yeah, there's also things like my pi c, which will compile stuff that has types and there's scythe on which will use the new Python type ends to compile to much faster code. So there's a lot of neat things coming out of it.

00:42:47 Yeah. And I think especially for abstract stuff, like machine learning there lots of use cases that were type ones. And type based validation is really promising. Because we can also take something a developer already knows like typing your functions, typing your layers, and we'll just work and do some extra stuff, if you wanted to, watching my PI evolve is really cool. And in four, four, think we've briefly dabbled in my custom might like my plugins for bit back, we have a plugin that checks. If two layers you chaining together, return the correct types, like you know, if you have one layer that returns a two dimensional array of floats, and the other layer expects a two dimensional array of integers or four dimensions, whatever, you can actually see that underlined in your editor done by my PI, as you type the code, you can prevent a bug before you even make it like type it and introduce it. So that's cool. I think that'd be that's all very actively developing. So I think there's so much potential for custom plugins, like imagine more libraries just coming with our own my plugins that help the developers use those libraries better, I think, yeah, that's all super cool.

00:43:51 Yeah, it's early days, there's a bunch of great tools. So let me round this out. With coming back to one thing you said, you talked about how is optional. The closest analogy that I think we have to this in other languages has got to be TypeScript, which is like JavaScript plus types and a little transpiling thing. And it's all cool. But all my interactions with TypeScript are like, Oh, you haven't declared this thing, right? This thing's it's like, it's, it's as picky as c++ or C sharp or Java. But it's it's not as like built from the start, like, the tools aren't necessarily all there to make that fit together. So I always feel like I'm kind of stumbling over the things like 80% of the time, it's helped me and 20% of the time, that frustrates me. Whereas like here, you can just kind of either leave it off, take it or leave it if it's good or not good. Yeah. Yeah. I

00:44:34 think TypeScript definitely helped with some learnings about how developers want to interact with typing. I think the thing with TypeScript is very, like there's a lot of features in there and it's very customizable, but you know, it's kind of like you have like a nail. Right, and it gave you a jackhammer. You really don't need the jackhammer.

00:44:53 Exactly. So finishing hammer would be nice. Yeah, there's

00:44:57 a lot of different things you can customize and some people need But I think for 90% of folks, I'm making up that number. That's not a real number.

00:45:05 But for a lot of folks who are holding the show at me,

00:45:07 you probably don't need a lot of those knobs to turn in options to say,

00:45:11 Yeah, absolutely.

00:45:11 There was like a two year period with TypeScript where I'd read the roadmap. They do a great job of running their project, a great job. But they put a feature in using words I didn't know from type theory. And my answer was, oh, that's for Angular. Oh, that's for Angular. Oh, Angular is the only one having that problem. Yeah, there's some serious machinery.

00:45:33 Yes. All right. final final thought of this from the chat. as Eric O'Shaughnessy says, I love how typing solidifies the author's intent. Yeah. All right. Let's have the chooser choose again, Jay. All right. So

00:45:46 I totally didn't peanut butter on this. But as y'all were talking, like, I just got some wonderful ideas. And I immediately started thinking about just the doubling down of some of the technologies that we've seen kind of pop up over the last couple of years, but then truly evolve. And like one of the biggest examples of that, and I know, I'm like five years daily dollar short here, but like Jupiter, anything Jupyter Notebook related. Like, it's not just for the solo data scientist anymore, like collaborative Jupyter Notebooks like to me that I know people that just have dreams about that. And they're like, the best dreams ever. And, you know, I know, Mike, you just did a podcast episode a few weeks back about that. And we were talking about it on Python bytes a little bit. There. Like it's not just one option anymore. It's you know, there's coke out there's pi binder, there's deep node, apparently, I'm a deep node influencer, and I didn't even know it. But it's awesome, you

00:46:44 know, exactly.

00:46:45 But not just in like Jupiter land, we have like, crazy ideas. Like, what if we could do Python on the front end with anvil. And like, now Anvil is saying, like, Hey, we're gonna open source some of our server technology so that you can take this technology and do it yourself. And I think that that's just like with taipans, we're coming up with these ideas. And we're taking them a step further. I think that this is what In my opinion, has kept me in the Python ecosystem, as long as it has, is because I'm constantly learning about like, brand new ways to do a thing in Python. And I have to talk about this because I told people in my Slack channel that I would, but like, we just thought, you know, it elastic, we just launched a brand new tool called Ilan, and it's in beta. And the whole idea is, it's like a panda's data frame. But instead of storing all of your data in memory, you can store it in an elastic search, you know, data store. And that's an interesting idea. So now, instead of being limited to what your RAM can hold, you're limited to how much space you got. And you can run search in that you can run queries on it, you can tie it into things like you know, psychic, learn in TensorFlow and do machine, you know, any type of machine learning on it. And at the end of the day, you're doing transforms on the data as it's in the data store. So there's no more downloading a bunch of data working on it and trying to re upload it. And it's off of the backs of crazy ideas from people crazier than I am, that are just like,

00:48:13 hey, what if we could do this? And, you know, to me, that's all I wanted to do with Python is just make up goofy stuff and see if it would work. I think that's an interesting idea. You could start using things like lots of data and things like serverless, where you get really short execution times, and not much power. But if it's already in something like elastic, you could do pandas against it, like, quote, pandas, like the API against it, without really suffering a lot of trying to download a cheer little Dr. Lambda callback thing, before runs out of time to execute and whatnot.

00:48:44 Yeah, actually, I think I've seen some people do some cool stuff with spacey and elastic as well, you know, processing all of their huge volumes of text, which also, I think is such an interesting part of our application of data science, like, you know, you, you want to have, you have so much text that, you know, you can't even nobody can read it, you can barely store it, but you can still analyze it and process it and find something out about it that otherwise. So yeah, that's, that actually sounds quite cool.

00:49:08 I mean, the problems I was I was having initially was just this amazing problem of like, I've got a million lines of data that I need to do something with. And I've got this little Mac Mini here that's just chugging along, trying its best. And everyone's like, Well, why don't you just use the Google API? And I was like, Okay, well, I did the math, I'm gonna need $20,000. And it's like, okay, so we can't use the Google API. We can't solve it with that problem. What else do we got? And now it's like, oh, wait, you mean, I can just store all this data, because it's only a few gigs. But then I can just hit my local server as many times as I want, let you know, search store any type of data store that's good at retrieving the data as I want it as I need it, and then let it do its thing. Like that solved a $20,000 problem.

00:49:53 I mean, even even aside from the cash, do you want to send all your data to Google? Probably not. Yeah, that's

00:50:03 also send it to Facebook while you're at it.

00:50:06 I don't know, I was I was working with police car records. So I don't want to send that data anywhere. I don't want to be on a watch list.

00:50:13 No, exactly. I think those are like really a lot of these really important applications of the technology, when it in the health domain, people are doing good and useful stuff, but they should not do that stuff at that type of cost, which means sharing all of their sensitive data with companies that will, you know, want it for some other reason.

00:50:29 Yeah, absolutely. Matt Rubin. You guys do training. What's the Jupiter story around there?

00:50:34 I did a class with not Jupiter, but it was all coal at base this morning. So yeah, I use it a lot. I think it's great for beginners. Like I said, for a lot of people who are scientists or engineers, that's what they sort of consider Excel. And so a lot, a lot of them sort of want to sit in Jupiter all day, they don't even want to like think about modules, or code or even software engineering, right. And so it's somewhat of a challenge for me to sort of say, Okay, let's talk about some engineering skills. And some good best practices for Python projects are like, I don't want to leave Jupiter, right? Can I do this on Jupiter? Like, well, you could, but you kind of don't want to per se, but yeah, definitely cool. I think what I'd love to see as an as is a fancy my pie checker hooked up with pandas on Jupiter that would make my day because that's one of the things that I find confuses people just with pandas having 50 ways to do things and then objects returning five different types or methods that return five different types. Like you don't get any tab completion or any of that good stuff in in Jupiter, when you're doing a lot of the machine learning stuff.

00:51:43 Yeah, and a bunch of like, grown up engineering stuff has come into Jupiter, right, like NB Dev, and B, QA. Some of these other stuff that's coming is making it way more interesting for that regard.

00:51:54 Yeah, the MB dev stuff is interesting, just coming. I mean, that's sort of taking it to that sort of literate style of programming, where we're gonna stay in Jupiter all day and do everything from that. And then, you know, Netflix has their stuff where they're deploying Jupyter Notebooks to production. Yeah,

00:52:09 it was paper mill. Yeah. Reason, have I. And then I'm gonna run the chooser.

00:52:12 So I, yeah, I mean, I you Oh, so I use Jupiter everyday for my writing. I don't use slides. I just do live coding. And and I find that's a great way to show them not just sort of the answer. This is how you code something. But this is the process you use to get to the solution is teaching people that process is really important. It also means I can share with them everything that I typed during the day really, really easily. People are a little resistant to using it first, especially experienced developers, they're like, wait, what is this thing? Why are you not using a normal ID? I've actually had to force myself in the last year to remember Oh, yeah, we should do a few exercises and tell them to use the IDs. So they won't think that everything is done Jupiter. That's a great environment. But like, there are other ways to do software.

00:52:54 Why is Python only running this weird web browser thing?

00:52:57 Exactly. Speaking

00:52:59 of this, this is another I think this is another reason why Python has taken off so much just that you want stuff to be dynamic. If you're doing the sort of data sciency type of work, you want to run your code that way, even if you're running it in an IV in a more traditional way. But I think Jupiter has especially not just like, Oh, you want to have like these little notebook cells in your browser. But more like, this is the type of way you want to interact with code, run something, change a line run again, run that path.

00:53:24 Well, they're coming from too, they're coming from notebook environments. And so this, this makes sense for a lot of these people

00:53:30 and being able to explain it, you know, on the same just in one look, like instead of going, here's five slides explaining what I'm about to do, or here's just the code. Now, let me sit here and explain it to you I can, I can literally break it down line by line. Okay, this is what's about to happen. Now, let's run this and watch it happening as we go. For people who don't write Python full time. Again, it's amazing. Because for them, they can see it piece by piece, just like you know, my daughter, I'm just trying to teach her how to read early. And it's just like, like break it up piece by piece. And like you can do that when you're training young, experienced wise. pathania says and just say like, hey, let's just look at what this does. And if we want to dig into it, it's almost like having a debugger in your presentation. And just being able to like, stop at any point in time and go, alright, let's let's jump in. Let's go deeper. Let's really talk about this.

00:54:22 Yeah, or be able to step back two lines of your execution true. All right, just for the time being guys. last thought Ruben, you get the final thought in this one.

00:54:30 I started using more and more markup in my notebooks as well to like, sort of document what I'm doing explicitly and sort of isn't just using hashtags and then comments, so it becomes much more obvious it with bullet points. I think people are enjoying that as well.

00:54:45 Yeah, that's great. And that's, I mean, that's part of the Zen of notebooks. All right. And you're up next, the random match choices selected you.

00:54:52 Okay, so my big story for this year is very small story, a Microsoft story. It's COVID. It's the Coronavirus Which I think for the first time ever, it's the topic that everyone is speaking about in every country, every walk of life, like, whoever I talk to wherever they are, this is the only thing people talk about, because it's such a profound effect on everything we've done. Now, you know, does the Python show so we'll talk about the Python aspect of it. And I'm not trying to minimize at all the extraordinary pain that people are going through physically, medically, emotionally, financially, on, on and on, but Python is consider it as continues to chugging along throughout this crisis. In fact, like, we've seen that big companies, high tech companies are actually among the winners in this as the whole world is going digital. And companies are hiring Python developers, they're really desperate to buy the developers, the number of people my corporate training classes. But when we go around, everyone introduces themselves who were hired in the last six months is amazing to me, like these are people who are working from home, or interviews from home, hired from home and are now doing training from home as their company's sort of grow and interest in power every day. So people who have Python skills have continued to be I would even say, are increasingly in demand, which is amazing. The bad news among the bad news is, of course, so I mentioned this before Python, and all the other meetings and meetups and gatherings have suffered as a result, they're good isn't his friend is I've been able to speak in many more conferences that I would have been able to, because hey, I can attend the conference, from my home office, I don't need to fly anywhere, go anywhere. But you know what all of these conferences, these online solutions are still really lacking. At the end of the day, as much as we want to say we're virtual, we're online, we can make it this way. And that is an important part of things that face to face contact, that personal contact is really missing. And I'm really feeling it. I've only been going on with this for a few years now. And boy, I really just being in the same room as other people and talk to them and chatting and just sort of randomly bumping into people. And then you also have the financial aspect of it that someone's mentioned earlier, the PSF. Their big fundraiser each year is Python. And I'm sure it was a hit for them, not just not to have it this year, but to have to cancel the venue. And I am extremely skeptical that's going to happen in person. I know euro Python already said it's not happening 2021 and want to see exactly how this affects the community going forward. I say so far, we're doing okay. But you know, here's an opportunity for them to figure out how can we do conferences online that are effective in a closer way to what we've been doing so far. The news is, I would say on balance, good for Python, and for people who know Python, but still pretty, pretty bad overall. And also add that like these vaccines, I mean, boy, boy, if they work, this is going to be like, I'm super not as a biologist or anything. But I'm so amazingly impressed with all the science and the work that people have been doing on this frog. And I think this this has a chance also to affect their lives moving forward, how they develop,

00:57:49 they just need to make a Python bubble. So in the United States, the NBA was continuing to play because they had a bubble where they isolated all the players for however long right so we just all go to somewhere and bubble up for

00:58:05 our Do we have our coffee?

00:58:06 with you guys from on

00:58:09 my family? Let me do that.

00:58:10 Jay, we'll just do it in San Diego, man. It's nice. Okay, I'm all for another island. We'll just get a section of it. Okay.

00:58:15 Oh, come on. No. Mandatory quarantine for like conferences. I just did to record one thing here to be able to enter Australia. Just keep an Australian in the hotel room. Yeah.

00:58:26 icon in Australia.

00:58:28 That sounds okay. To me. Problem solved. Well,

00:58:29 I mean, it is to be fair, it's it's expensive. So I wouldn't, you know, it's like, you know, you would you want to pay like you know, your conference plus two weeks at a hotel in order to do that. I don't think that'd be a that'd be even less inclusive than a lot of these conferences already are. So

00:58:45 I don't want to take all of his thunder. But one of the first conferences that I watched was sessile. Please remind me now because I'm blanking. That's how long of a year it's been the conference that you helped put on? and other teams, you know, yeah. And And with that, I mean, one great conference, I'm sorry, I screwed up on remembering the name. That's my fault, not yours. But also the sheer fact that that conference was organized in two weeks. And it was an amazing conference, like the

00:59:16 could never been done if it was in person, right?

00:59:18 Yes. So like the accessibility that you're providing to new speakers, people that normally would not be able to get up and give a presentation. Like I've had that conversation. So many times of like, the type of talks that I like to create are not the type of talks you see at pi Khan. And there's a reason why, and it's not a bad thing. It's just it is what it is. And I think when you're able to say you know what, let's do a conference. Let's make this happen. Let's let's just get up. We can have fun with it. I've seen some conference talks that were literally small budget films, like they had multiple cast. I've done transcriptions on on conference talks that literally had like they gave me the script, and said, All right, here you go. So like when you can actually do things like that and think outside the box and use this time to readjust the needle, there was a good podcast episode on more than just code, I believe number one just got on number one is I'll find it greater than code. That's what it was. And they said, if we haven't taken this time to do something better, when things are different, when things have improved, then shame on all of us. Because yes, this sucked, but it caused us to think so much outside the box, that we should be able to take all that knowledge with us when we can get back in the box and just have a ton of fun with it.

01:00:38 I think that a lot of opportunities been made available for people to attend conferences, and for people to get jobs, where companies would previously say no, you have to move to San Francisco or to Omaha or whatever. It's like, Well, you know what, no one's going the office, let's try hiring from the best in the world instead of the best in Nebraska or whatever.

01:00:56 I think that might be the biggest fallout of this. Michael, is just the change in everything being centrally located in Silicon Valley. Yeah,

01:01:04 I've heard of a lot of people like that actually just have jobs in in the valley that have moved back to where their parents are, because it's like, 10 times cheaper, or something like that. And they're not going to want to move back. Yeah.

01:01:18 Have you heard that some companies have been readjusting their, their salaries, they're saying, Well, if you live outside of the Bay Area, then it's cheaper. So we're gonna cut your salary as a result.

01:01:28 People have been Oh, I've always been doing that. That's like, unfortunately, not new.

01:01:33 So if you're listening, and this happens, you can say, well, you no longer have to pay yet umpteen million dollars for my office area. So let's call it an even swap.

01:01:45 Just keep just keep a virtual address. And in the Bay Area.

01:01:48 Exactly. My PO Box is right down on Fifth Street. All right. Last one, this random choice was easy, because we're down to our final excellent guest, Matt Harrison, what do you got for us? Okay,

01:01:58 my thought was just on sort of the hardware aspect of things this year. So I have a daughter who's who started college this year, for better for worse. And she's learning both c++ and Python right now, her linear algebra class as a Python lab, which I think is awesome. I wish I had that. But I was actually helping her with some homework I wasn't doing but she was like, I can't figure this out. So I was her rubber duck the other night. And her issue was allocating memory. Right. And, and so one of the things that's nice about Python is you don't have to worry about allocating memory. And you know, she got all the output, but she was just double freeing a pointer here, which they checked on submission. So pythons now now we're seeing Python. And I'll just tie this like I I have a client who wants next year wants me to do a training on GPUs with Python, which just goes to show like, my clients tend to be big companies. And so big companies are now leveraging, like specialized technology to do things very quickly, right. And if you have a GPU, you can get 10 100,000 times performance that you get out of a CPU. So I think that's super exciting. There's the rapids project, which is heavily sponsored by Nvidia. And I'm super impressed with that. They're basically like taking well known API's and basically saying, Hey, your code, basically change an import or, you know, with the change of an import, and this hardware, your code will run x times faster, or whatever. And so I think that's super compelling and exciting. Not that necessarily everyone will have access to those sorts of things. But it's now it's now getting to the point where it's becoming more common. On the note of hardware. I think another thing that was really interesting this year was the apple and one chip coming out, I actually bought a beefy PC this year, having run mac book for 15 years, just because due to Corona and whatnot, I needed something beefy to start doing virtual sharing and presentation like this. And my MacBook just wasn't cutting it. And but the thing I don't like about my PC, is that as it sounds like it's going to take off every time I start doing something right, like modern Intel chips can take us to Mars, if they want to, we just need to like make a huge drone out of them. And so I'm super excited to see like if you can get a silent mac book that you know, is super powerful runs faster than Intel chips that's super compelling, especially if they allow you to get a little bit more RAM, which from the machine learning side is interesting to me. But I'm also excited about the competition factor of that I think like Intel, and the chipset is sort of stagnated for the past couple of years, we've sort of run out of the end of Moore's Law per se. So I think both the GPU and the M it'll be interesting to see what the competition is from the PC manufacturers if they're going to, you know, do a similar everything on a chip thing or just sort of go With what they've been going with, I think competition is good. And so I'm cited the Apple did this, even though there's going to be some growing pains and Python might have some issues at first. But I think in the end, new technologies, new hardware that allow us to write at high levels and not have to worry about freeing and allocating memory, which, again, a lot of people are using Python don't care about that. They don't want to be programmers, they want to leverage great code stand on the shoulders of giants and the latest and greatest software and hardware, and have it be fast. So I'm super excited about the future with them. Yeah, I'm

01:05:32 really excited about both these things, like the whole GPU. Revolution is incredible. And the apple in one stuff is going to be really, really interesting. Like, like you, I, I bought a maxed out Mac Mini actually had already ordered a top of the line, MacBook Pro 16 inch. And then that came out, I started seeing the reviews, I'm like, you know what, forget it. I'm not getting that thing. I'm getting this new one to try it out. And he does have some drawbacks. Like Docker doesn't work right away, maybe it will, maybe it won't, but I have a 2018 MacBook Pro, that's pretty good. I have a sim racing 16 core machine over there. Like, I've got plenty of Intel stuff to work. So I'm gonna try to jump on this, I think the interesting Python angle here, besides just having stuff to run our code in his, you know, in his talked about, like, her ci didn't support three, nine right away, well, whose ci is gonna build wheels for Apple in one straightaway and things like that, there's gonna be some interesting growing pains, especially on the data science side, as this true platform. Yeah,

01:06:27 it's funny, you mentioned that because actually, when this came out, we were also thinking like, maybe we should get one of these, um, you know, we want to make sure spacey compiles properly on it, and we can really, you know, optimize for that. And did you guys go on? Yeah, because someone has to do it or so you know, not yet. No. Also, it's a bit difficult with the traveling, but like, yeah, that's kind of fun. We have other priorities, too. This is not I wouldn't put this like, at the very top, but like, it's definitely something you want to do. While at the same time, we also want to keep optimizing for CPU. Like, that's the other thing. Of course, you know, even all the new these new NLP models, all of that stuff, obviously runs great on a GPU, and we'll see a lot of improvements. And we also see, this become much more available and cheaper for people to use. But at the same time, we still, we still optimizing our tools and libraries for CPU, like you can run it on your random laptop. And also it still for a long time, it will be cheaper Still, if you just you know, you want to run lots of machines, and you can get those, you know, much cheaper in the cloud. And if you can power lies, you can train, train your models very efficiently on CPU, if you can get it to work. Yeah, that will always be cheaper for a long time.

01:07:29 There's a lot to say about just the overall cost of computing as a whole. I mean, this is great. This is $10. And I mean, I can run a lot of stuff on that

01:07:39 you're holding a circuit. Well, this Adafruit thing, just for the people who are not on the video. Oh,

01:07:44 yeah, sorry, I'm holding a Raspberry Pi Zero W. So it's like, you know, four gigs of RAM like enough, you can buy a 64 gig, like flash drive for $3. Now, like, it's amazing, like, just the overall cost of computers drops so much. I mean, what was it the was the Raspberry Pi

01:08:03 400 400, where it's just, it looks like a keyboard, but it's actually a whole computer.

01:08:07 Yeah. So it's like, as we continue to do more and more, we're doing it with less and less. And it's cheaper and cheaper and cheaper. And most of us are coming from someplace where the cost of living is too damn high. And we're able to say that we can afford to buy a $15 pie zero and not think about it too hard. But the fact that we're getting to that point where you can have people all over the world where the question isn't anymore. How do I get a computing device in my hands, it's like, okay, now I have some choices, and they're all affordable. Like to me that's we're gonna see a lot of things come where Brian knockin is right now we're vs. 2103 is in the future, there's gonna be a lot of great things coming in. Yes, I'm looking at chat.

01:08:50 I have in my kids to have one of those One Laptop per Child and in their bedroom over there, right, which I think that the the Raspberry Pi 400 is sort of, it's the next gen of that. It's actually something that makes sense. Everyone has a TV, right? And you can just plug it in, and you're not in somewhere. I mean, you're in Linux. So yeah, you're in a weird environment. But you

01:09:13 know, one of the laptops with a hand crank on it. Yeah.

01:09:16 Well, it has a little wings. Mine didn't have the hand crank. But okay.

01:09:19 I actually, like I kept hearing about Raspberry Pi. And so I decided to order one recently, and I haven't done anything with it. I like just came a few days ago. But I'm looking at this game like oh my God, this little card here that cost me less than $100. a lot less than that is more powerful than the computer. I used to run my entire business for years and years and years. It's just astonishing to me.

01:09:40 Yeah. So I think that's probably a good place to round out the show like the future so exciting. And in some ways, we're like kind of living there. Right? Some of these things that are coming out are so amazing. And I just want to say thank you all to you all for being here. You're all doing such amazing work and it truly humbling. You all took time from crazy schedules from traveling from weird locations to Be here and make this whole event happen. Thank you for listening to Python bytes. Follow the show on Twitter via at Python bytes. That's Python bytes as mb yts and get the full show notes at python bytes.fm. If you have a news item you want featured, just visit Python by set FM and send it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian knockin, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

 <|endoftext|>
00:00:00 KENNEDY: Hello, and welcome to PythonBytes, where we deliver Python news and headlines directly to your earbuds, this is Episode 111, recorded January 4th, 2019. I'm Michael Kennedy.
 
00:00:12 OKKEN: And I'm Brian Okken.
 
00:00:12 KENNEDY: Hey, Brian, can you believe it's 2019?
 
00:00:14 OKKEN: Yeah, it's kind of hard to remember to say that.
 
00:00:16 KENNEDY: Yeah, it's going to take awhile. So before we get into the topics, I just want to say thank you to Datadog, they're sponsoring this episode, check them out at pythonbytes.fm/datadog. More about that later. Never really enjoyed the built-in logging in Python. It's never seemed super, super clear to me. So I've ended up using other packages, something like Logbook or something like that or maybe just a print statement, but what you found today, Brian, is pretty sweet, actually. It might convince me to stop using Logbook and use something else.
 
00:00:46 OKKEN: You know, I was playing with this, this morning, so what we're talking about is, I think it's Loguru, I think that's how you pronounce it, L-O-G-U-R-U.
 
00:00:54 KENNEDY: Right, like log and guru smushed together? Joined by the G?
 
00:00:58 OKKEN: Yeah, or it could be Loguru.
 
00:00:58 KENNEDY: Loguru?
 
00:01:00 OKKEN: But I don't think so.
 
00:01:01 KENNEDY: I'm going to go with Log Guru.
 
00:01:02 OKKEN: And the tagline is Python logging made stupidly simple, and I think this is, it's like a one API function for the most part, so the built-in logging for Python, it does a lot, and you can have multiple logging entry points and multiple logging output points, and everything, and Loguru kind of took the model of everything gets logged to all the places and there's a default place that's standard error, and that's better than print mucking up your standard output. And by default, just a few lines of code and it works just fine. You can just say from Loguru, import logger, and just use the logger and say debug, or info, or whatever. But then if you want to do more advanced things, like one of the things I had to play with 'cause I couldn't believe it was this easy was, file logging and log rotation. So let's say you're logging some stuff and you want to be able to log it into a file, and then at some point make that a new file, like a date stamped file or time stamped or something, and it just has that really easy, and then you can give it different options for if your file gets to like 50 megabytes, at that point start a new file. And there's even compression, so when you're rolling over to the new one, take the old one and zip it, or you can time it and just do a new log every hour or a new log every day.
 
00:02:29 KENNEDY: I love the zipping aspect, that's awesome. It just does that automatically or do you have to tell it to?
 
00:02:34 OKKEN: You have to tell it to. It's a fairly simple, easy thing, and one of the bonuses of this package is the README on GitHub is kind of a tour of all the features with examples, so it's really easy to pop through and see what's going on. I mean, I really spent just a few minutes trying it out, and I already love it, so I think of this as the logging API that fits in my brain and I can do things right right off the bat. It's cool.
 
00:03:01 KENNEDY: Yeah, that's super cool, on one of my websites I had a bunch of logging happening, and I went and checked it out, checked out the log directory, and it was like five gigs of text files, but they compressed down to like 200 megs or something totally manageable, so that's pretty awesome, that you can have it kind of do that step for you in the background. A couple of things strike me really as nice here, one is the use of color. It'll print out here's the time, here's the log level, like info or error or whatever, the message and so on, and it'll actually show those in different colors, 'cause by default it prints, it logs to the terminal, right? Standard out or something like that.
 
00:03:40 OKKEN: Yeah, and it looks really nice, so I tried about that, just to make sure it was cross compatible and stuff like that. I tried it both on Mac and on a Windows machine, and then I also tried it if I'm logging stuff from, and running it within PyCharm, how does that look, and all of this looks really good still.
 
00:03:56 KENNEDY: That's awesome, and it also has the ability to wrap functions and catch the unhandled errors, so the syntax is like logger.catchall or something. It's a decorator, and if there's an error it'll print a colorized, properly indented, formatted traceback.
 
00:04:13 OKKEN: Yeah, and then it has some traceback options too, and the traceback options are even pretty cool, they'll blow it up into these little mini-graph, and you can specify how deep, just the traceback for the function that it got hit, or its parent, or how many parents. It's pretty cool. One of the things I like about the, the honesty of here is the last feature is crossed out. The last feature says it's 10 times faster than built-in logging and then that's crossed out because clearly adding all these features isn't free. It does cost a little bit of performance, but there are plans for some of these, some of the things to be critical functions to be implemented and see in the future. I think it's convenient right away. One of the things I was always interested about is how to figure out how to get email notification in some cases, like in particular, like if you had a critical log error and a critical something, sending off an email to the right person. I wouldn't know how to do that right off the bat, but this one apparently, it works cleanly with the notifiers library to be able to send email.
 
00:05:21 KENNEDY: Yeah, notifiers is nice as well. I think we've covered it before. One other final thing here is you can actually put color into your statements as well, so if I want to have, like they've got a little screencast, GIF thing on the GitHub Repo, you can just watch. It says there are several options available. If you want options to be blue you put 
 
00:05:47 OKKEN: Yeah, I'm sure it does a lot of cool features. One of the things I like about the API is once you've figured out something, other people will be able to tell what you're doing because it's not confusing to read.
 
00:05:57 KENNEDY: Yeah, it's very cool. This might be my new favorite logging library. Now I have to get over the inertia of actually having that other stuff already working and wanting to switch to it. That's going to take awhile, but this is cool. I like it, good find. So, we had a pretty big episode back in July. We had Brett Cannon and Carol Willing on to talk about how Guido van Rossum had stepped down as the BDFL, the overseer of the Python project. Still involved as a core developer, but not making all the decisions and taking all the weight, right, remember that? Well, things have more or less been on hold, stalled out, until they can somehow come up with, a group of core developers can come up with a way to govern themselves, so for example, Lucas Lange is looking at maybe moving the releases of Python from every 18 months to yearly, which has a bunch of advantages, but that's a change that has to be decided on. They had no way to decide things, so all sorts of stuff like that had just been put on hold. Well, we've covered the different governance models that were being considered. The big news this week is Python now has decided that it has a new governance model and they have decided on which one it's going to be.
 
00:07:12 OKKEN: Yes, it's a, yeah.
 
00:07:12 KENNEDY: Finally. Finally, things can start going. Now, don't get too excited.
 
00:07:18 OKKEN: Yeah, there's a lot of holes left.
 
00:07:20 KENNEDY: There are a lot of holes, so what has been decided is the governance model. They still need to decide how the new governance model actually drives Python, the project itself. So there's like a two-step process. Find out how we're going to make decisions and then the first decision is how does that new organization manage Python. So we're like halfway there, right? I think also there's still elections to be who's going to be part of this thing. So let me give you the rundown by way of Brett Cannon. So Brett Cannon, also a core developer, has been on the show a couple times, and it's the aclusion of the one that I mentioned, and so he did a really nice writeup of what was the problem, where have we been, what are the options, and how they decided. So we'd covered before, like we said, that there was seven governance proposals, one from like, we'll elect a new dictator, a new BDFL, maybe without the FL, for life part, down to maybe we'll have like a panel or something like that. So there was some votes, the votes were open to all core developers, and they decided we're not going to have other people vote who are not core developers, because this is about the core developers governing themselves, and why should other people decide how they get governed? Basically, right, they don't have as much skin in the game. So, people who were deciding sort of their own fate voted, and in the end the winning one was PEP 8016, which is called the Steering Council. So from now on Python will be driven or controlled, or led by a Steering Council, which is very similar to what Django's project organization actually looks like. Brett said even that some of the language of the PEP here was copy and pasted directly from Django.
 
00:09:00 OKKEN: Interesting.
 
00:09:00 KENNEDY: Yeah, so this is a council of five people who will determine how to run the Python project. So the only thing that they can't decide, they basically have absolute power, this group of five developers. However, the one thing they cannot decide is how the council is elected. So they can't go, you know, this council thing and elections, we don't like them. We're going to get rid of those, right? Other than that, though, they basically have BDFL-like powers, right? That's good, it means basically that Python will not, the project will not be leaderless, but it doesn't directly solve how to get the design and things like do we change the release cycle, and things like that, cool, right?
 
00:09:42 OKKEN: Yeah, right, so now we got to figure out who the council is.
 
00:09:46 KENNEDY: Yeah, so the next step is to elect the council. That'll be done Monday, so three, four days from now, three days, and that starts on Monday and then goes to January 20th, and then somewhere around there we'll know. Actually, no, that the nominations. The voting starts on Monday, January 21st, so some time in February we'll know who, which five people are on the Steering Council.
 
00:10:08 OKKEN: How do you feel about this? I think it's the right, not that I, nobody asked my opinion, but this seems reasonable to me.
 
00:10:14 KENNEDY: Yeah, I agree. You have a mic, you get a, that's the power of the mic is you get to just state your opinion, right? No, I think this is totally reasonable. I think there's a couple of things, I thought it was really interesting, the discussion between having an even or an odd number of people on the council, right? Because this way there's always going to be a majority. There can never be a deadlock, all right, whereas if they had been even, you could have to have like a, definitely a win-over majority, right, if there were six instead of five. You always got to get that little extra vote to go through, but yeah, I think this seems totally reasonable to me. I think there would have been a lot of value in finding the next BDFL, without the FL part, right, the next leader, dictator type. I think that kind of might have been my favorite, but it's such, it's just such a risky proposition because on one hand, if you get the right person they can just move quick and it could be awesome, but if you get somebody who doesn't take it in the right direction or a direction that you think is the wrong direction, it could really go off the rails, so this certainly seems like a safe path forward, and it's definitely more community-driven than it has been in the past.
 
00:11:27 OKKEN: Yeah, I don't know if this will slow down. So, one of the things that Brett brought up is they still haven't figured out really how to guide the language itself, for language design, and so yeah, it'll be interesting to watch how that.
 
00:11:42 KENNEDY: Yep, it sure will. So there's a lot of details in Brett's article, so you should all go check it out, but it looks like things are starting to move again, just six short months later. So one of the things you often have to do is work with files and Paths, and all this kind of stuff, and I don't know, you tell me, Brian, am I living in the Path, I still, if I got to work with files, import os, os.path, I still probably do that just out of habit. Am I doing it wrong?
 
00:12:09 OKKEN: You're doing it wrong. At least according to Trey, and I agree now. I am with Trey, so Trey Hunner wrote a blog post called, why you should be using pathlib, and it's basically just a fairly convincing argument talking about some of the different benefits of pathlib over os.path and os, and glob and stuff. I actually didn't know before reading this, I didn't know that you could do glob-like stuff with the pathlib.
 
00:12:35 KENNEDY: And recursive globbing.
 
00:12:37 OKKEN: Yeah, recursive, I had actually looked for that before because in some shells you can do ** to recursively look for stuff, and you can use ** for the glob library, or the glob whatever. But it's built in, you can do rglob with pathlib. It's pretty cool.
 
00:12:55 KENNEDY: That's pretty awesome.
 
00:12:57 OKKEN: Some of the things that are nice about it, he's comparing it to os.path, and os.path, it's really working, it's a string library, it's passing and figuring out strings that represent Paths, but now we have a more functional, the pathlib uses the Path object, which is a more functional thing that all of the Path methods, Path object methods return Path objects, so you can chain 'em together.
 
00:13:22 KENNEDY: Right, I love the fluent API. You say Path and it give it like a directory, you can say, mkdir, and all nice options like parents=True, exist_ok, so it'll create the whole directory chain, it won't fail if it already exists. That right there, might convince me to like put my os.path away.
 
00:13:42 OKKEN: Yeah, and also right off the bat, he shows and example where, how do you import os.path and os, do you import all the little pieces from there, so that you can have shorter methods or do you just say os.path and you have to say os.path everywhere, and it makes for kind of unwieldy code. I copied some of the examples that he had into our show notes, it's just really kind of a cool thing. One of the things I didn't realize, is that if you're opening a file and say like, with open(file_name) as some_file_object: then you work with it, it closes automatically, that all works with pathlib objects now too so you can use a lot of the other standard library things just with pathlib objects.
 
00:14:31 KENNEDY: Right, long as you're on Python 3.6 or above.
 
00:14:33 OKKEN: Yes.
 
00:14:35 KENNEDY: Now this is really cool, I definitely like it.
 
00:14:37 OKKEN: Why wouldn't you be?
 
00:14:38 KENNEDY: Exactly, why wouldn't you be? It would be wrong, not as wrong as the Legacy Python but you know it's okay. I do know that some of the Linux distributions lag behind a ways and if you haven't upgrade that for a while that could be a reason actually. This definitely something people should be checking out, I really like the fluent API and the chaining, that's cool. Right now before we get to the next one Brian, let me tell you about our sponsor Datadog, they've sponsored many of the episodes and they're a big support of the show. So, we're really happy to have them back this year and they're a cloud-scale monitoring platform that brings together metric logs, distributed traces all in one place. Like one of the big problems you have is I made a request to my web server, the web server talked to this service, that service talk to a database. Those all seem like separate things, but if you want to track them all together, you can use Datadog for that. You can trace clients, including support for auto instrumenting, like automatically tracking request through things like Django, Flask, Postgres, and others so you get all the tracking across service boundaries, which is pretty sweet for troubleshooting slow requests and optimizing your Python apps. So you can start monitoring your environment with a free trial and Datadog will send you a cool little Datadog T-shirt, just go to pythonbytes.fm/datadog and get started.
 
00:15:57 OKKEN: Very cool.
 
00:15:58 KENNEDY: Yeah, for sure, thank you Datadog. Now, this next one is actually a two in one sort of thing, because there's a new, newish, let's call it newish library for visualizing stuff, mostly around data science and notebooks, so we've talked about things like matplotlib and Seaborn and other stuff but maybe they haven't heard about Altair. So Altair comes from Jake Vanderplas and Brian Granger who are both really big in the data science space and this is a really cool declarative way to visualize stuff in Python. Have you ever looked at like matplotlib and your like, "Why do I have to do all these things? I just want a line on the screen." You know, there's like so many steps it seems like. Well, Altair seems to avoid that, so basically it assumes that you're working with some sort of Pandas data frame. It take's Pandas stuff and visualizes it really well. So for example, if I had a Panda data frame called cars, I could say, chart of cars markpoints and x encodes x equals horsepower, y equals mass per gallon and it colors it based on origin and boom you got a nice graph. Like really declare, if you just state what your axis are and stuff and it does it. So that's really really nice, right? You said you're actually using it a little bit.
 
00:17:11 OKKEN: Yeah, I actually, we had a project for visualizing your test result data and since I knew about this, and I get to make like calls like that, I said, "Hey, let's try Altair." And one of the benefits of it is this data frame model so the people working with it have had to learn data frames and the result is they're like, "Hey, wait, actually working with data frames makes this easier because we can do a lot of manipulations within the data frame model."
 
00:17:41 KENNEDY: Yeah, that's pretty cool, they're like, "Wait data frames are kind of awesome, we should use them."
 
00:17:44 OKKEN: Yeah, definitely.
 
00:17:45 KENNEDY: That's really cool. So that's Altair, which mean we should spend more time talking about it but the other item I want to talk about is altair_recipes from Antonio Piccolboni who actually is the creator of altair_recipes. So the idea is you can create some of these charts but not all the kinds of charts that you might want to create are easily one linable in Altair. So what he's done, he's created a bunch of helper libraries that will take the data in the similar way I described before easily generate the other types of things that you might want like a boxplot or histograms or things like that, so there's a whole bunch of different examples of different types of things auto correlation, boxplots, heatmaps, histograms, all kinds of stuff that's down to just one line again using his code so, pretty cool. Yeah so basically it's like a wrapper around more additional types of graphs and I'm linking to a whole bunch of different examples in here so in the little section I'll share recipes just click on the examples and you can go see all the different graphs and whether or not they're helpful.
 
00:19:00 OKKEN: Ooh, a layered histogram.
 
00:19:02 KENNEDY: Ain't that cool?
 
00:19:03 OKKEN: That's really cool.
 
00:19:04 KENNEDY: Yeah and Antonio says it's fully documented, highly consistent API, 90% plus test coverage with a maintainability grade of A. So very nice stuff. Do you know how he computes the maintainability grade? Did you see that?
 
00:19:17 OKKEN: No I don't.
 
00:19:18 KENNEDY: I don't either but I'm really fascinated to figure out what the maintainability grade of my other stuff is.
 
00:19:22 OKKEN: Maintainability grade, yeah we should look into that.
 
00:19:24 KENNEDY: Yeah we should definitely look into that. Antonio, send us a note about how you computed that, that's cool. But if you're using, if your looking for visualization and especially if you're using Altair, check out altair_recipes, and it looks pretty cool. What do you got next for us? More testing? More coverage?
 
00:19:39 OKKEN: Yeah, I have been thinking about testing and I kind of do that a lot, a couple of fun pytest plugins that were sent to me and I apologize for not remembering who sent these to me but keep them coming, I love trying out new things. The first one I want to show is, talk about is, called pytest-picked, P-I-C-K-E-D and the name confused me at first but after you start using it it sort of makes sense, here's the idea, you've got a bunch of, you're using GitHub or not necessarily GitHub, any git repo.
 
00:20:13 KENNEDY: Some git repo yeah.
 
00:20:14 OKKEN: Yeah, and you're working with a test for something and you really, you know you're going to want to try to run the tests that you have modified, so git knows this, with git status you can tell which files were modified so this plugin utilizes git status and allows you to run all of the modified test files in one test sweep without having to like specify them or keyword them or anything.
 
00:20:38 KENNEDY: That's pretty cool, so if I have like a thousand test files, that may be a little excessive, but let's just roll with it, and I edit three of them, since the last time I committed to git, I can go run this and it will say well these are the three changed test files, therefore, we're going to run just the testing of those three files in pytest?
 
00:20:57 OKKEN: Yep, you can run just those three or you can run those three first and the rest of the sweep.
 
00:21:02 KENNEDY: Okay, that's pretty sweet. You know what I would like, which is probably a much harder problem to solve but would be awesome, is if you could combine code coverage along with this and sort of reverse it, say like, well these are the source files and the test files that change but the source files that change, what tests touch some line of code in these source files, so what do I need to run to get coverage on the changes that direction. That would be awesome.
 
00:21:31 OKKEN: I think there is something like that but it was, last time I tried it it was a little clunky to use but I'll look it up again.
 
00:21:37 KENNEDY: Yeah, okay cool, but this is really nice, I mean, certainly if the mode that you're in is I'm changing a bunch of the tests and I want to just run those, this is awesome.
 
00:21:45 OKKEN: Yeah, well and the mode for a lot of people developing tests or maintaining software really all together is either writing new tests, when you're in that mode you're definitely going to be having a lot of test files or you're debugging something and you're like throwing some logging, or something like that in the test.
 
00:22:06 KENNEDY: Yeah, I definitely see a good use for this. And you have a two first, that's just the one.
 
00:22:09 OKKEN: Yeah, so the other one is, kind of a new project but I thought it was fun, it's called the pytest-clarity, pytest-clarity, it's just another colorizer so it makes the diffs. If you have assert equals comparison that fails, the left and right comparison sometimes it's a little hard to read and this one is a colorizer that puts the changes from left and right, right on top of each other and colorizes them differently so that's nice and helpful.
 
00:22:41 KENNEDY: Yeah, that's cool, definitely in colors. Colors are awesome. Right, shows you what's different, what's the same. It's beautiful, you know right away.
 
00:22:47 OKKEN: Yeah, the one thing I mean, in conversation with the person writing this, that it defaultly turns on verbose, and for small projects having verbose on which means that every test file is going to get listed, actually every test is going to get listed in the output, that's fine for small projects but when you get into hundreds and thousands of tests, that can be unwieldy.
 
00:23:10 KENNEDY: I can imagine.
 
00:23:12 OKKEN: But you can turn that off with a -qq and the clarity still works.
 
00:23:18 KENNEDY: Yeah, those are definitely nice testing additions. Quite cool, so the last one I want to close out with is a little bit of web security. And we've talked about web security before on the show, various things like the Django Hunter and stuff like that for example but this one has to do with headers. Did you know that when you have a web app it obviously exchanges headers and cookies and stuff with the clients. But there's a whole bunch of things that you should send across probably for to make your website more secure. There's like a handful of them and the OWASP organization has a place that talks about these are the headers you should send, for example about caching certain pages or if you're setting a cookie, that the cookie should only be exchanged over a secure connection so imagine you've got like a site maybe it's a bank, you can log into it if you go to https://bank.com or whatever the bank website is, its going to send maybe a logging cookie but if you open up a browser and you type bank.com and just hit enter, maybe that goes over http and then https but if you don't set the right headers or flags, it could pass that logging cookie over http the first time before it goes over to https. Things like this, you can say only exchange these cookies over secure connections and things like, little details like this but there's a bunch of them and they're hard to remember. One of the guys that was actually listening to Talk Python on Flask where David Lord talked about this thing called Flask-Talisman, which is the plugin for Flask that will automatically do that kind of stuff, it will just take the response, set those cookies, not the cookies, the headers that need to be set and things like that. So it's really nice that Flask has this option, he's like, "Well but why don't the others?" This security guy a pen tester, he's like, there should be something like this for all of the frameworks, so what he did was, he created this thing which I'll tell you the package name and I can't believe that he got it on PYPI, the package name is Secure. You think that would be taken by now but what it is, it's secure headers and cookies for the python web frameworks. It's pretty cool, it supports aiohttp, Bottle, CherryPy, Django, Flask, Falcon, hug, Masonite, Pyramid, Quart, Responder, Sanic, Starlette and Tornado. And if one of those is not in your list, you can actually just sort of feed it the response anyway. Ain't that cool?
 
00:25:46 OKKEN: That's actually very cool, wow.
 
00:25:48 KENNEDY: So it has built-in integration to those things like Pyramid Tweens or other types of stuff you can like plug it in so it automatically happens, but if you don't have it automatically doing it, you can just call the various bits as well. So it sends things like strict transport security, same origin iframes, cross site protection, all that kind of stuff, it just does that automatically and you can also create secure cookies. So you just go to the secure cookie thing and say, I'd like the secure cookie to have this name and this value and it all said that it's over https only that it's over http rather than JavaScript only, things like this, same site origin, same site stuff. So all these little details about getting the security right, are wrapped up and then packaged in a way you can use it cross framework.
 
00:26:34 OKKEN: Yeah, I should check that out.
 
00:26:35 KENNEDY: Yeah, it's pretty sweet.
 
00:26:36 OKKEN: Did you mention Pyramid Tweens? Is that a 12 year old using Pyramid or?
 
00:26:41 KENNEDY: Well, it's 11 to like an early 13 year old, no it's like a layer that you could put in between request response and it's like a thing that gets called before and after responses I believe.
 
00:26:53 OKKEN: Okay, apparently I'm not there in your Pyramid class.
 
00:26:55 KENNEDY: Yeah, I guess not, and I don't think I really talked about it there but you can basically plug it in and say anytime you send a response, call this function and so you can just in that function say, upgrade the response to have the secure headers and the response without doing it all over the place, right? You just plug in this little bit.
 
00:27:12 OKKEN: Okay, cool.
 
00:27:13 KENNEDY: Yeah, it's pretty cool. So if you're doing a Web app and you care about security this is definitely worth checking out. Right, well, that's it for all of our items that we're officially covered, I have some extras. How about you?
 
00:27:25 OKKEN: I don't actually other than I've been podcasting away and I got like seven episodes of Testing Code in December.
 
00:27:33 KENNEDY: That's awesome, I've been listening to a lot of them, you got some good stuff going on lately.
 
00:27:37 OKKEN: And I'm going to keep it up, I'm not going to do seven in January but there should be four.
 
00:27:40 KENNEDY: Yeah, awesome, I'm really glad to see that come along. So I have a, it's good you don't have many 'cause I have a bunch so I'll go through them kind of quick but there was this pretty big bug that came out about SQLite. SQLite is an embedded database that runs and process that happens to be shipped and included in Python. So that got my attention. But it's also included in the browsers for like web SQL stuff that JavaScript can use and that can be embedded in like Electron JS apps for the same reason, stuff like that. It's really a lot of places. Now the problem is, it turns out that there is a bug in SQLite that was simple SQL select commands, you can do very bad things to anything that runs the SQLite that is vulnerable. This was just really recently so it seem like this could've been a really big problem in Python since Python has SQLite, SQLite has this problem and it would've had to been the case that there were some SQL injection like you took user input and you fed it to SQLite directly. There have to be kind of a problem in your code for this to happen but it turns out. I threw this out on Twitter, and some folks came out there and really like, a lot of people shared it, a lot of people talked about it and somebody said, you know, actually that's an interesting thought and Borus on Twitter's like, "You kind of got me curious that maybe this is a problem for Python, let me check." So he took the proof of concept exploits and ran it against SQLite and Python and it looks like it's not a problem, sounds pretty good right? So if you hear that there's this big problem with SQLite, seems like it's not a problem with Python but that's not for sure but it seems that way,
 
00:29:24 OKKEN: And also don't take user input and throw it into a query.
 
00:29:28 KENNEDY: Yeah, exactly it's already, like in order for this to be a problem for your Python app, you already have to have a problem, this just makes it worse. So if this was going to be a problem before, you should probably do all that regardless. Next one, this is a follow up on our AI and healthcare. We talked about AI and the AI analyzing cancerous mammograms and helping doctors get much better at that. And we were speculating, maybe I was speculating that, maybe there won't be a need for doctors, we'll just upload it to the cloud doctor and we get an answer right? Things like that.
 
00:30:02 OKKEN: Hey Google, do I have cancer?
 
00:30:03 KENNEDY: Exactly, send us three pictures, I'll tell you. Well, this guy named Bradley sent us feedback, says, "Hey I really found this interesting, I'm a data scientist at the National Oncology Program and I work directly with clinicians and it's my strong opinion that AI cannot take the job from the medical folks, the MDs. However, it will make it way more efficient for all the low hanging fruit." Says you know look healthcare is both science and an art and AI's going to have a really hard time on the art side of things, also probably the human interaction side of things. Bradley didn't think that there's a big danger that, well, I guess time will tell but that's, he's definitely got a lot more to go on than I do. He works as the data scientist with these folks so that's cool, got insight feedback.
 
00:30:50 OKKEN: Yeah, that's pretty much what we were speculating anyway, I mean it's not something you can break down into an algorithm.
 
00:30:55 KENNEDY: Yeah, for sure. Next item really quick, Python 3.7.2 is out so be sure to get the latest Python 3.7 if you're trying to run that. And if you're running home brew you can just do a brew update and a brew upgrade and you'll have Python 3.7.2 which is pretty awesome.
 
00:31:12 OKKEN: Neat.
 
00:31:13 KENNEDY: Yeah, so I'm already running that on my local machine but not yet in production, it's not on the right Linux version yet. And then finally, I launched a new course Brian.
 
00:31:23 OKKEN: Yeah, I'm excited about this.
 
00:31:24 KENNEDY: Yeah, so I, this is one written by Matt Makai, a Full Stack Python and it's Introduction to Ansible, so that one's been coming along for a long time and he finally got it out, it's really good and I'm learning a lot about all sorts of things also including Ansible, so if you're interested in Ansible, check it out over at training.talkpython.fm or just click the link. Did you come with a joke this time?
 
00:31:47 OKKEN: I did not.
 
00:31:48 KENNEDY: Do you have a joke for us? Well luckily I found a joke, and by found a joke I mean a listener sent us a joke, one of our listeners and I'll tell it to you. Okay, so, hold on, got to zoom in, fonts are small, eyes are old. So, an engineer, a physicist and a programmer were discussing what was the oldest profession of the three. The engineer said, "Look all that matter engineered into amazing constructs like stars, galaxies, planets so obviously engineering." The physicist says, "Before there were planets the matter had to be made from chaos, physics is responsible for all the quarks, gluons, photons and electrons." Not to be out done, the programmer says, "Aha but where do you think the chaos came from?"
 
00:32:33 OKKEN: Yeah, that's good.
 
00:32:34 KENNEDY: Yeah, pretty good. So, definitely, I'm sure we've all caused a little bit of chaos out in the world with our apps. That's a good one.
 
00:32:43 OKKEN: Not to like, we should be done now, but I just remembered another thing. Speaking of chaos, is like, in 2019 more and more browsers were saying let's just try to have all websites be secure so I got hit by this and pythontesting.net is not, doesn't have SSL on it but it's just warning everybody by the way, like Brian might steal your information, I'm not going to do anything with your information.
 
00:33:09 KENNEDY: Let me see, I pull up. Oh my goodness, I got to get out of here man, this is not secure on it.
 
00:33:16 OKKEN: Yeah, what up? So I could just buy a SSL certificate or whatever do the free one and then jump through that hoop, but I felt like it'd be a good time to change it anyway so I'm going to start the process of turning this into a static site generated site.
 
00:33:32 KENNEDY: Oh, you are? Okay, awesome, well that sounds really fun. And that'll be, I know some good sites that definitely run that way so yeah that'll be good.
 
00:33:41 OKKEN: That's all I got.
 
00:33:42 KENNEDY: Well, even though it says not secure I'm still going to go there, it's okay. Alright, great chat with you as always Brian.
 
00:33:49 OKKEN: Yeah, you too.
 
00:33:50 KENNEDY: Yeah, thanks.
 
00:33:50 OKKEN: Bye.
 
00:33:51 KENNEDY: Thank you for listening to PythonBites, follow the show on Twitter via @pythonbytes, that's PythonBytes as in B-Y-T-E-S. And get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way, we're always on the look out for sharing something cool. On behalf of myself an Brian Okken, this is Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.
 
 <|endoftext|>
Michael KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your ear buds. This is one of your hosts, Michael Kennedy. 
Brian OKKEN: And this is Brian Okken. 
KENNEDY: We're here with our first post-PyCon episode. So, Brian, let's just jump straight into it. How was PyCon for you? 
OKKEN: I want to bring up that right away because it was incredible. It is the first one I've been to and I got to say it was even more than I expected. Hard to put in words. We hung out, we had a booth there. Thanks to everybody that showed up to say, “Hi,” apologies to anybody that stopped by and we weren't around at the time. Michael, you were pretty good about hanging out and talking with everybody. 
KENNEDY: Yeah, I went deep into the hallway track, which I mostly ended up spending time at the booth, having conversations with people or at other people's booth talking to them, or something to that effect. That's the real value of PyCon to me. I think the talks are amazing and I really enjoy the key notes and things like that, but the open spaces and these impromptu meetings, that's where it's at for me with PyCon. 
OKKEN: Yeah, actually the open space, that's something I didn't really do much and I think that I’ll have to make sure to do that more next time. They put up – for anybody that hasn’t gone – they put up these boards with just like a whole bunch of empty rooms and you can just sign up for a time slot and if you get it, you have it. They start out fresh each morning, so people just hang out and do things. It's not just all testing related or, not testing related, Python-related, sometimes they do things like tie knots and stuff like that. 
KENNEDY: Yeah, one thing that I went to was, “How to Start a Business,” one that I went to was, “How to Market Yourself as a Developer.” Then I actually ran two; one was a Python Podcaster Meet-up. That was really cool. A bunch of people came. Thanks to everyone who came. Then one on “Out of the Box Ideas for Improving the Diversity of Funding for PyPI.” So, that something that will be coming out later that requires some write up. 
OKKEN: Wow, that’s cool. 
For my benefit as well as the people of listening, I’m going to put a link to the YouTube channel with all of the the talks. Unfortunately, all these like open spaces and stuff aren’t recorded, but one of the things that also I wanted to bring up was that I was surprised how much I enjoyed the lightning talks. I think it's neat to have a full range of people that are really great at speaking and people that they're new to it as well. 
KENNEDY: Yeah, if you want to try your hand at public speaking and you’re new, 5 minutes is not too tough. Although, it's a big audience, it's only 5 minutes.  
OKKEN: Lastly, I wanted to say it's amazing how many people know Michael. (Laughs) Man.
KENNEDY: I also find this amazing. It's entirely humbly. You know, it was amazing. 
OKKEN: Yeah, okay. Well, let's move on. 
KENNEDY: Awesome, okay. So, keeping in the current, latest state-of-the-art like we talked about with many, many things at PyCon, we recently heard that AWS Lambda – which has nothing do with Python Lambda, as it’s just the server-less computing offering from AWS – has started supporting Python 3.6. Someone else who was there at the conference was Matt Makai from Full Stack Python. He put together this little, quick tutorial on just how can you quickly set up an AWS Lambda Python 3.6 function and do some interesting things, like read from the environment variables and things like that to create this little app. 
OKKEN: Nice. 
KENNEDY: Yeah, so basically if you can write a function, like a single function, then you can pretty much write and deploy these AWS Lambda functions. Which if you have something kind of like a micro-service, micro-architecture-type thing, then maybe it makes a lot of sense to do it, these AWS Lambdas. I’m actually going to have a guy tomorrow, a guy named Ryan, come and talk about server-less computing in general on Talk Python. But here's a little precursor, if people want to check this out. 
OKKEN: That’s cool. I’ll be looking forward to listening to that. I was just curious on the Lambda, do you know if the functions you put in there have to have names? 
KENNEDY: They have names, but you basically map them to in points that you can set up. There's all sorts of events they maybe are not even public, in terms of HTTP. They might not be web service in points, it's basically event driven. For example, you can say, ‘I would like this function here,’ whatever you name it, it’s kind of irrelevant, but you have to pick the name, right? ‘I would like this function here to execute when somebody uploads a file to this sub-folder, this bucket in S3.’ So, maybe you're going to do, let's say a video delivery service for a training or something. When you upload a new video, you might want to create an adaptive stream, like a low bandwidth, a high bandwidth version, different formats like MP4 versus WebM, or something like that. You could detect when a file is dropped there and automatically by effectively just uploaded S3, have this code manage and juggle all that in the background and you don't ever have to do anything. So, you can set up these cool event-triggered things, but it could just be a simple as like, ‘Here's a HTTP in point.’ 
OKKEN: I’ll have to try that out.
KENNEDY: One of the things I talked about at the conference was PyPI and the Python Packaging Authority and so on. That was real funding, but one of the reasons they have such a challenge with their infrastructure is because they have so many packages, right? 
OKKEN: Yes, and so you should put some more out there, everybody. 
KENNEDY: Yes, everybody. Let's make more. Let's do more of that. 
OKKEN: There is a pretty good JetBrains article called, “How to Publish Your Package on PyPI.” I think it does a really good job on talking about what all you have to put it into your package. The structuring is pretty good, although I'd like to see them include the source directory in the article, but one of the things I liked was just a discussion of what all the contents of the setup.py file, all the stuff that you got to put in there, your license, your email. I guess it's all pretty obvious, but when you just see it all in an example set up, it can be a little overwhelming, but it's really the minimum amount of stuff you put in there it's just not that complicated to put in there. I also liked that they, I hadn't seen a decent example recently of what you ought to put in your .pyirc file, so I guess it's like a config file so that you can talk to PyPI easily.  
KENNEDY: I think you can put your account information in so you don't have to login every time and stuff like that, right? 
OKKEN: Yeah, and then they talked about using twine to push both to the test repository, I guess, and and then the actual one. That's something that people ought to do also. If you just want to try this out but you don't have a package that you're ready to actually put out there to the world yet, you can use their test server and push things up and try it out. 
KENNEDY: Yeah, definitely make use of the test server. What surprised me is actually how easy it is to put something on PyPI. I found most of the difficulties that I ran into when I did this were actually around packaging itself, just purely packaging, and once you have that solved, it wasn't too bad. 
OKKEN: I actually encourage people to just come up with something and try it out. I have to drink my own Kool-Aid with this one. I still haven’t put anything out there. I’ve got to put a couple of things up there. 
KENNEDY: Yeah, maybe after you're done writing your book, huh. 
OKKEN: Yeah, actually there's a lot of quite a few pytest plug-ins that I’d like to write and put up there. 
KENNEDY: Oh, yeah. That'd be a good set. That’d be awesome. 
OKKEN: Speaking of pythons, pythons live the same place where we there are coconuts, right? (Laughs) 
KENNEDY: (Laughs)So, the next thing that we're going to talk about is called Coconut and there is a tie-in to Python. But you got to go back to the origins, back to Monty Python. 
OKKEN: Oh, right, okay. 
KENNEDY: You know those nights that run around and they've got those coconuts they click together because they don't actually have horses but it sounds like the galloping, basically. 
OKKEN: We should have had some for the show. 
KENNEDY: We should have brought some to PyCon, and just run around with them. (Laughs) Next year, we know what to bring to Ohio. 
Okay, so the next thing I want to talk about is a Pythonic functional programming language. Now, functional programming, you know some people are really into it. Some people kind of stay away from it. To me, it's one of those languages where it's kind of like a good puzzle more than, I don't know, like building blocks. It's more like this thing you have to sort of, you write a little bit of code and then you think about it for a long time, deeply, and then you write two more characters and you're done, or something like this. It's very concise and very interesting to write, basically, functional programming. There's many options, there have been for a long time, Scheme, Haskell, whatever. F# (sharp), Erlang, you name it. But as Python programmers, we have all of our awesome PyPI packages, just as we talked about, and we may have some more after this session. 
So, we have all of those and then we maybe have existing Python code, so Coconut is a functional programming language that is deeply functional and unique, but is a super set of Python, Python 3, specifically. So, what that means is, you can take a given existing Python 3 code and go in rewrite one function or one algorithm, functionally rather than imperatively. And you can use all the PyPI packages because it's just Python. 
OKKEN: So, you can gradually add functional programming to an existing application or something. 
KENNEDY: Right, you wouldn’t have to start over. You have to learn the functional programming concepts where they apply, but you don't have use them all the time. You can just use them where they make sense. 
So, there's all kinds of unique things for Coconut. There's pattern matching, which I'll tell you what that is in a minute, because that's wild. There's, basically, algebraic data types which are immutable data types. Think any time you see a class, replace the word class with data and that becomes immutable, but there's some other cool stuff that happens. Really interesting parallelization operations, because once you have immutable data types, many of the problems that you saw with parallelizing them, these algorithms become what is called embarrassingly parallel, embarrassingly parallelizable, right. If there's no real interaction because everything’s read-only, well, just let it roll. Just fork it out and give the pieces to the little subprocesses or something. 
So, there's a lot of cool stuff but just to give you a sense, I'll tell you about the pattern matching. Suppose I want to write a recursive function or let's just say a function that implements like say, factorial, that's their example they have. You would have a function, it would take a number, it would have a test, it would say, ‘If this number is zero, then return 1. Otherwise, do some multiplication stuff with the current number of plus times the factorial of N-1, something like that.’ And you would do this kind of recursion thing. So, you have these ‘if’ statements for different situations in your function. In Coconut, you can define one function for the degenerative case, and another function for a different situation. For example, your parameters can say, ‘I would like to take an N, but only if the N is an integer and it's greater than zero.’ 
OKKEN: Huh, wacky.
KENNEDY: It's kind of like a method overloading and say C++, C# (sharp), Java, where it might match by type, or type + number of parameters. It does that, but by ‘if’ statement. It’s crazy. It's pretty mind-bending. People, check it out. There's a cool tutorial, it's just pip install Coconut, so easy to get started with. It's definitely worth looking at because it will make you think a little differently, which is always good. 
OKKEN: Well, thanks. I guess I'm just going to go back to packaging again. But one of the things that I have had trouble with is understanding all the open source licenses. I guess I got into open source a little bit when everybody was afraid of the GPL (General Public License), especially in the corporate circles and now I just knew that MIT (Massachusetts Institute of Technology) was not as freaky, I guess. 
KENNEDY: MIT is like super simple and permissive, if you want to use it but it is hard to decide. For these more permissive licenses, for me, it's hard to decide. What if I want some restrictions, right? Like, what kind of offer is useful to people, but it has the kind of protections I would like to have in this code, right? 
OKKEN: Plus, if you start reading it into, it there's a bunch of legalese that my eyes glaze over. So, I ran across a site called choosealicense.com and it's pretty darn cool. It talks about MIT and Apache and GPL, but it also has a cool list of a whole bunch of different licenses and has some color-coded bullets for what you are getting with those and what you're giving up and what rights you keep and all that. I like it. It's good. 
KENNEDY: Very nice. We even have the unlicensed covered there, which is pretty cool. 
OKKEN: Then also, a comment about ‘You don't have to.’ You don't actually have to pick a license if you don't want to. There's nobody forcing you to. 
KENNEDY: Yeah, in which case you pretty much just retain the copyright. There’s somewhat of a problem with that on GitHub, I believe. There's a number of what are meant to be open source projects on GitHub, that just whover created the repo, didn't do the little drop down and say, ‘Yes, pick a license and choose one.’ So, there's the stuff that looks like public open source because it's publicly accessible and it's on GitHub, and you can clone it and do stuff but there is technically no license, so it's not really open source, which is kind of interesting. 
OKKEN: I guess one of the reasons why I picked up on this is because I'm trying to teach people to use simple setup files so that you can make a package pip install-able, even locally. In one of the requirements is you have to fill something in for the license, so you may as well think about it a little bit ahead of time so you can throw it in there.
KENNEDY: Absolutely, it's a good idea. 
Alright, let's round it out with something free for people. A free book. So, there's a book called Python for Scientists and Engineers, and I think this was not free before, but now just became free. So, this is a book if you are getting into using a python for science or machine learning or natural language processing, all these are things, there's a bunch of examples of using it there. Just to give you a sense, there's some introductory stuff and then they've got Image and Video Processing in Python, Data Analysis with Pandas, Audio and Digital Signal Processing (DSP). Of course, you’ve got to Control your Raspberry Pi with Python, because who wouldn't want that. A couple of things on Machine Learning, like building an Amazon-like Recommendation Engine and then a bunch of stuff on Natural Language Processing and Analysis and looking for spam; you know, basically text processing type things. 
So, if learning about those things and dabbling in those things sounds interesting, here's a book with a bunch of applied chapters. 
OKKEN: Nice. There’s lots of cool stuff in there. 
KENNEDY: There’s all these cool things that I would love to know and would love to learn, and have no no applicable use for in my world. You know, like I would love to build a machine learning, sort of something, but I have nothing to turn machine learning loose on right now. 
OKKEN: Yeah, one of the things that I noticed in here is the Audio and Digital Signal Processing section. I think that's pretty cool because it's been pretty hard to get into DSP stuff before Python and some of the engineering tools that came about with Python made it a lot easier, so that's pretty neat.
KENNEDY: So, that's our news for this week. I don't know about your podcast, but mine is definitely going to be abuzz with lots of stuff that we learned at PyCon, so I want to loop it back to the very first thing that you covered. Be sure to go check out those videos. I don't know how many there are, but it's like a hundred presentations, it's crazy, and there's so many good ones. 
OKKEN: Actually, I'm not watching them while driving, but I'm listening to them while driving and then just knowing to get back to the slides later if I want to see that. 
KENNEDY: Yeah, and a lot of those talks, I think you can get like 80% just in audio and it's probably good enough because you might not watch it all, but you're stuck in traffic so why not.  
OKKEN: Definitely. 
KENNEDY: Right on. So, how's the book? I saw a great giant like, floor to head height banner of the book, but what's that mean for the rest of us? 
OKKEN: It was a nice timing. It was hard to get it out, but we got the beta out, available. It's not available in hardback yet, but Python Testing with Pytest is available within a beta. So, the first 5 chapters are ready and the first 5 chapters cover just about everything you need to know. The only thing that's left to wrap up in the last couple of chapters is the configuration files like the INI and stuff like that. And then the last chapter is going to be using pytest with other tools like with Selenium and with continuous integration. These are definitely meaty, nice things, but they are not things that are necessary to get learning. And I have already had one of the comments from Twitter. Somebody bought it and said, ‘Wow, this is like the best thing to learn pytest.’ So, that was good. 
KENNEDY: That’s got to make you feel good after like months and months and months of working in isolation. 
OKKEN: Yeah, definitely. Also, just it has been an incredible experience working with an editor too. It's been good. 
KENNEDY: Yeah, I'm sure it has. Awesome. Alright, well, we will have a link at the bottom of the show notes, so if people want to check it out, they can totally do that.  
Well, that's it for this week. Brian, as always, thank you. It was great to hang out with you at PyCon and once again, thanks everyone who stopped by. We met so many people, it was really amazing. 
OKKEN: Incredible, thanks.
KENNEDY: Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbyes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.  <|endoftext|>
00:00:00 Hello, and welcome to Python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 218. Recorded January 27 2021. I'm Michael Kennedy membrane rockin I'm Brian, we have a special guest, Jeremy Tanner. Welcome, man. Thank you. Thank you for having me. Yeah, it's really great to have you here. You know, we've got to talk a little bit at conferences and stuff. And now that we just don't seem to have conferences in the world anymore. We're gonna have to like drag you into our world to actually get to catch up. It's good. I needed I need a tiny bit of that Portland fix. I love being up there. But I mean, the entire Pacific Northwest, but Portland in particular. So yeah. So where are you in? I am in Austin, Texas. He's in the Portland over the South. But thought that was? Oh, yeah. Nice. All right. Well, maybe real quick. Tell us about yourself, Jeremy. People who don't know you? Absolutely. I like motorcycles. I like suede shoes. I like smoked meat, like Python. I'm currently working in developer advocacy at equinix metal and living in Austin, Texas, raising two awesome tiny copies of myself and trying to sort of write it out while the world is melting. I assume like everyone else's. Yeah. You know, we share a lot of interests like you and I both through motorcycle riding and just a sidebar, like the ability to just jump out on a bike, get away, cruise through the mountains, and just pull back into the garage and have you know, somewhere outside of your four walls a really cool experience. Like that's a really neat, neat thing to do when you're otherwise you're stuck at home. It's we have there's so many like technology guardrails, right, like turning your phone screen to grayscale. So it'll be less enticing turning off your notifications, whatever else. But yeah, the really nice thing about riding a motorcycle is the the guardrails aren't there, and you absolutely have to be paying full attention. So it's not Oh, I'm also thinking about something else. You're like, Well, do you not want to die? Then? Like, watch the Watch the road, be aware of everything? And so it forces everything to the background for however long you can manage it? Yeah, that's such an interesting idea of like, I'm just going to put the world out because I really have to focus on this situation on this curvy road rider. Fantastic. All right. Well, Brian, I believe you have the first item. Something is this about laundry? Or what is up here? constant folding? Of course, yeah, laundry? Well, I do like the little little animated slop holding something. That's nice. Um, no, I brought this up. Because so there's, it's an interesting article about constant folding. So constant folding is when a language replaces your constant expressions at compile time, rather than computing them at runtime. So if I say something like, you know, 24 times 60, or whatever, it'll just replace that will let me Did you just say compiling? Yeah. When I when I compile, like, what does that GC p p y JPY? Like, how do I know? I mean, this is a misconception I think a lot of people have is like languages like Python don't actually get compiled, they do. Well, there's the bytecode compiler, right.

00:03:01 And I, and that happens, I mean, for a lot of guests, if you just have a script, that's just one file. That'll happen every time you run it. So that doesn't really, there's not really a pre thing. But if you've got installed package, or, or lots of stuff that gets run for a long time, yeah, the bytecode will happen once, like code conversion cycles that compiling Yeah, I think so. Um, but he just doesn't compile to machine instructions or composite bytecode, like Java or dotnet. But then what happens is it doesn't compile it, it just interprets it from there on. Right. So yeah, I think there's, there's levels, but it's automatic and hidden, which is cool. Well, see, Python, at the very least has this notion of constant folding, where it just come, you know, comes up with your expressions and does it at at the compile time instead. And it's something that I really don't think like, I don't really think about in Python, I definitely think I know what's happening in in C and c++. We got the pre compiler going on. But the it does happen. And you can see it in action in this, this article talks about it, you can use the disassembler to disassemble a bit of Python code and see what it would look like outside of you know, after the conversion. And so something like you know, if you recommend the one of the examples was the days in seconds, is 24 times 60 times 60 in and then the bike, Python will just convert that to what is it 86 400. Now, the I'm bringing this up, like one of the things this is kind of an interesting article about really how it does it. And the rest of the article kind of goes into, you know, the the implementation on C Python of how the folding happens. And that's interesting. But mostly the reason why I brought this up is because I want people to remember that this happens. So if like For this example, it is way better to put in your code days in seconds equals 24 times 60 times 60

00:05:00 That's really clear, you don't really have to comment it much because people can just look at it. But if you were to manually replace that with 86 400, it's suddenly a magic number then and people won't, you know, in the future, you're like, where did this number come from? What happens if I change it, it's gonna muck everything up. So I think things like this are great. I use it, it talks about, it's not just math expressions, things like string expressions to so you can, you know, if you're going to do a, you know, 30 different dash marks to print across the screen, you can say, like, dash, you know, the dash character times 30. And Python will just convert that for you at bytecode. Time. This, yeah, yeah. I just checked it for strings. And yeah, it definitely says, you know, the final result of the calculation of a bunch of constants involving strings is the answer. Here, the benefit is, if it's always going to be the same outcome, why computer every time you run that function, or do an import? Yeah, and there's some size optimization that happens that Python realizes that some things are so the, in the article talks about the some of the constraints. So if you end up with like, you know, a 4000 character string after doing it, or you know, I think they found the the limit was, it'll go up to 40, days six, but if you make it 4097, it doesn't do the folding at that point. I don't think you have to memorize that it just know that Python does has some optimization, where it says, if the pre computed value is too big, then don't worry about pre compute. Do it at runtime. Yeah, that makes a lot of sense. Perfect. I like it. And you know, it's another cool chance to just play with the disassembler. And understand that a little bit better. Germany ever played disassemble things. No, but was appreciated that the it was a way to avoid a little of the magic number disaster, where head looked back and reviewed a bunch of I think, was physics code. And so often there will be like, Oh, if you're, if you're a domain expert, and you're like, and you're familiar with nuclear reactors, then yeah, you'll you'll know, you'll know why these pieces are here. I need these please name them things. Yes, exactly. Here's the the number of moles of or whatever. And chemistry, like it doesn't make any sense, right? So if you kind of do a calculation, but you don't have to pay for the calculation, that's, that's really nice. I used to do this all the time, with the days and seconds, like the seconds and days, because what I would do is I would go to like a date time, I would say date time dot total seconds divided by seconds in days, well, that's how many days it is, until Paul was on talk Python, the guy behind the daytime stuff and says, Do you know, you can go to a time delta and say it has days equal one and then divide the date time, another time delta by days equals one? And it'll tell you the same answer. Like, that's just crazy. I

00:07:46 know, how am I supposed to know I could do that? So but yeah, this is definitely a cool one. And the disassemblers need to really understand what's happening, like these little constants, you know, load const, or name, load const, just get fed straight through this huge sea of sea switch loop. And that's your program. All right, I got one of these I want to bring up is these are fun little tiny examples of using the disassembler, which is a fun thing to do. Because when you if you're trying to do a larger function, and disassemble it, it's going to be more complicated. But it's kind of fun to look at the output of disassembler. Yeah, yeah, definitely gives you that inside view. All right, I stole this from Brian. It's a good one. It's a good one. So this one is called hip review. And pay per view is really cool. I learned about this from pi coders, the newsletter and the ideas that updating all of your packages that you've got in a virtual environment is a hassle and various ways. One way is I could just not set you know, I could not pin the version numbers and just install the latest, right, but then if I tried to reinstall, it just says, you know, those are, those are up to date. Maybe I see Oh, I know that there's an update for HTTP x, I'll do a pip install dash you PIP x upgrade, and it will upgrade it, but it won't upgrade the things that PIP x installed. Even if I asked PIP X to upgrade itself, you know what I mean? So there's like this, the dependencies of the dependencies and all that become just a hassle, though, there's this thing called PIP review, which lets you smoothly see all the available updates, and then apply those This used to be part of tools, but it's now its own standalone thing that just directly uses Pip. So like all good things, you pip install PIP review, which is very meta menu after preview. And then you can just ask it to do things like just run PIP dash review on the on the command prompt terminal, and it'll tell you, you've got this version of this library, there's a new one available. And that's pretty much equivalent to doing PIP list dash outdated, but then you can also just say and fix it. So PIP dash review dash dash auto, which will just find all the things out of date and update them including the dependency of the dependency of the dependency, which is pretty awesome. It'll also let you do this in an interactive way. So you can say

00:10:00 dash dash interactive and it'll say this is out of date. Do you want to upgrade it? Yes or no? NumPy is out of date you want to update it. pandas is out of date, do you want to update it and so on, and you can selectively opt into that. And then you can even come up with constant spile that says, you know, please don't update these automatically. They're stuck in an old version for whatever reason pinned to a certain version. Do you guys think I hear NumPy and pandas and matplotlib. And it's all the flashbacks, right. I think we I think we met when, in before time when I was Anaconda. And so I mean, since this certainly looks interesting, and it's and solving and solving problems. But on my end, still very much, especially for scientific Python bits. conda loyalist, yeah, backwards, both for package management and for Environment management. Yeah, that's a whole different side of things. And you know, conda definitely managed that quite a bit, right. Like it's all about, you can open up your navigator and create your environments and interact with those in that way as well. So yeah, I think this probably applies more to if you're just doing straight PIP or maybe you're thinking, well, Pipi, and V, or whatever the other alternative would be to use something like dependency bot, where it finds those changes, you pin your version, it says there's now a new version, and then it upgrades it. But that's always going through like some external workflow. And this is just like, I don't want to go through that. I just want to right now find the new stuff and change their doubt. Yeah, I tried this out on a project of mine that uses uses, you know, flit and the pipe project, Tom wants to define the couple pinned versions of things. So I wanted to check to see if they're out of date, and I tried the PIP review auto to just auto update them. And now that that PIP has this dependency resolver, it noticed that my project had some pinned and it said, there is a new version, but there's a conflict with your your project. So just be aware. You need to figure out that conflict on your own. So Oh, interesting. Okay. Yeah, yeah, very nice. Yeah, I've recently run into some issues with the resolver. And then, yeah, we fought over that. Nice. All right. Jeremy, what's your first one? keyboards, my first one is keyboards. And so I have fallen well down the mechanical keyboard, rabbit hole

00:12:16 at the clackety clack version.

00:12:19 Just Just like such, yes. So I suppose the Python tie in is first of all, like, Yes, your your keyboard is probably the way that the bulk of the Python gets into your computer. And so as much as we would like to just plug up jack straight into the brain and think code, it doesn't work that way yet. So it makes sense. So I fall into mechanical keyboards, mostly to try and get my wrists to be less hurty. I suppose for our viewers who are watching with their ears in the future, the listeners, if this is on audio, I'm just showing you my hands, I may show you keyboards, but and I'll have to remember to describe those. That's right, have started to really love mechanical keyboards for ergonomic improvements, and ability to sort of restructure the way that they work for my, for my benefit, most of the keyboards that you'll see connected to computers or using that are like a flat bar shape. Use Qwerty which actually dates everything wrong, everything wrong that you could do. Right. Are you do you know when cordia came into came into usage? Yeah. I mean, very clackety. Right. For the the slow down the typewriter. Yeah. But in it was in 1873. And so like Civil War era, like, that's gonna back in, I mean, within 10 years of the first American Civil War, so when

00:13:39 we were still like, settling our disputes with like, swords, on horses, and so on. And just like, there's always a continues to be a better way of doing things and we keep on working towards the better way, like, the layout of keyboards is sort of a vestige of a past time with different requirements. Kinda like wearing pants now, right? Like we used to be going out and seeing people now. shorts. Yeah. Breathe. Exactly, exactly. So anyway, like with the, what what's useful on the keyboards is, in addition to getting ergonomic benefits, you can change up your keymap. Normal keyboards have maybe 100 keys on them or so. But they really have 200, maybe 300 keys, you have modifier keys, you push shift, and you're like, Okay, now all those keys are now all the letter keys are now capitals, the one is an exclamation point, and so on. And taking the key maps are the ways that you can take and change the those keys to what right put them under whatever you want to do. Yeah, if you want to say the switch to Dvorak, or something along those lines, right, I had a friend who taught himself to vorak. But seeing the QWERTY keys was so impossible for him. He shaved all the letters off of his keyboard because it was either easier to have nothing rather than have the wrong thing there. That's a that's sort of what's going on over here. This is a hollow tree is a 4444 key split. And hey, gotta describe that to people. First of all, what is that?

00:15:00 So accompany a keyboard to just keyboard IO has a mayday I think, gentlemen in the Yes, Pacific Northwest also made a hand wired version of this

00:15:12 jessika keyboard to made a mass market version that's manufactured the instead of soldering everything together and ordering the pieces, you can just get a completed keyboard, which is very nice. And so you hit for this keyboard, you're going to operate largely with layers. And so you don't see as many symbols as or numbers here. And so when you hold down, maybe super or function, it's going to change one of the sides, two arrows, change one of the sides to a number pad, change one of the other sides to the symbols exclamation point at symbol asterisk. And instead of reaching and twisting, like you might on a normal keyboard, where every time we thought of a new thing, like oh, that hash symbol that's going to go to this I need to go the other stuff. Yeah, well, you need to add it on in the keyboard keeps growing here, your your handstand about the same position. But when you put your, your ring finger down on the on the home row Z of your of your left hand, the entire right side changes to different keys. And and so the way that suppose the Python tie in there is that most of these keyboard firmwares are written in a written in C, because you have the little microcontrollers under, that's telling what keys what to be. But there are Python portions and so the the command line interface that qm k, this project on GitHub, quantum mechanical keyboard uses is, is written in is written in Python, some of the tools that you're keymaps are sort of always in flux. And so you can evaluate the ways that you're using your keyboard. So Python can help out there to help you make a heat map of Okay, which which keys Am I pressing most frequently? Let me move those to it. Let me move those to a stronger finger. And now again, because we're sort of home in quarantine pandemic time, it's fun to have this sort of escape room, don't get yourself out of it, there's a little bit of a challenge to remember where that new key is or even assembling. You've got key caps coming from one place and trying to find out what's what new features you might be able to pull down in the firmware from GitHub on another and folks are making different designs you can go with split hand boards that center that up into the interview. This is a for those who are listening, RGB KB

00:17:34 saw the like the sun don't you basically have two separate pieces. Oh, and it has LEDs beautiful. And so you have two chunks one free Tanner, you can position them. Okay, yeah. And so it can open up your open up your shoulders open up your upper body a little bit, hopefully make your wrists less hurt. He was the Yeah, well, I used to I've struggled for and I do math for 20 years, maybe 15 years with RSI issues. And it's mean it was to the point where I had surgery on my right hand for carpal tunnel stuff. And I thought man, what am I going to do I did physical therapy. It was really quite scary actually. And I just what I did two things I got a much, much better, more arrogant namakkal keyboard and only use that like I never type on my laptop because that thing is a kiss of death for my hand. And the other one is I forced my I'm right handed I forced myself to become left handed for mousing, because I use my right hand for the arrows and page down and insert and all that and my fingers already doing all that stuff. Might as well for us one of the sideways the I cannot find a good sideways left handed one. Oh, that's so super hard. It's tricky. Yes, I could either go vertical, or I could go left handed and left handed is working super well for me. But I'm using the little Microsoft ergonomic travel and I love this thing goes with me everywhere. I don't go anywhere without it. So yeah, the best way to fix important thing, you're good. The best way to fix it is to touch your computer less. But if we if that's not if that's not an option, so the I mean the other things that are have beat my hands up and I'm trying to be better about our if you hold your phone and you just scroll and you scroll some more and you scroll some more, you can do it with your left hand instead. Or you can try and not look into the look into the abyss so often. Yeah, I've used voice typing, doing a lot of less Doom scrolling now than I used to. So yeah, thanks for less crazy for your setup. You just type on your MacBook or you got some better me. Yeah. Oh, niece's. Oh my gosh. You are full on over there, dude. Yes. Okay. dishes. Yeah. So like the hollowed out like typing in a crater. Yeah, so I've been using kinesis for like 30 years. 25 years. Wow. And similar. I had problems with with my arms. And I was just like, a couple years into my career and I'm like, Oh my god, I finally get a programming job and I can't do it anymore. So but I switched

00:20:00 To the left handed mouse, and, and now you don't even think about it, some people say like, I don't like to switch the mappings, I don't switch the left to right, I just moved the mouse over and use it with my left hand, and then also the kinesis. And then when the when the whole, like, mechanical keyboard thing started, people were talking about that, like, what's all this about? And then I find out that the kinesis has been mechanical for since it started. So yeah, kinesis is definitely definitely interesting one, although I think I want to get a new one because the the the key, whatever the, whatever the mechanics behind it are,

00:20:36 or the wrong color or something, I want to get ones that I have to push down a little harder, because I find that I rest my hands on my keyboard and it'll start typing stuff. So I like to man, I'd like to be more hard to push down. I think there's probably three things that you can do, you can either crack your switches open and put in heavier springs, you can go if you can get a key switch polar and pull out the switches and plug in. depends if they're hot swappable, or if they're soldered down into the board, and so I am not certain how that one's constructed. But oftentimes when there's a if there's a greater investment in getting the board in the first place, like the Ergo DAX ones are hot swappable, so you can take it polar and I have not in front of me but over and over and have been different key switches that I've tried some that are quieter, some that are louder, some that are heavier, some some that are really light, yet eventually you figure out the soul sort of the Goldilocks situation and instead of a keyboard that's made for to sell millions and millions of units. You've got one that maybe are out of billions of people. There's maybe three like it that are just like yours.

00:21:43 Yep. Magnus Carlsen Magnus Carlsen says he has an old airgo Doc's over in the corner right on. Why is it in the corner, don't put baby in the corner desk. Love those wrists. Yeah, the one that I love. The thing I love about this one is it has such short keystrokes. Like you barely have to move your fingers, which to me a lot of these really nice ergonomic ones. I feel like you've got to move them a lot, which I don't know, it's always a balance. This one works well for me. But all of these things are super fascinating. Yeah, there's switches with their switches with adjustable travel and so over it, you can cut probably more than a millimeter out of it going from two down to either one or maybe even point eight and so well. So this is okay you can you can tune it exactly to what you're after. I tried yours, Michael the I have one of those. Whatever that you've got. Yeah, but Sculpt Ergonomic or whatever it's called. But like the it was it's a Bluetooth one and I can't do Bluetooth keyboards, the the Bluetooth two leg gets me. You'd think that I wouldn't be able to notice. But I noticed and I don't like it. Yeah, yeah. Wouldn't it be nice if you could buy keyboards, wires.

00:22:50 And then I suppose we didn't. We didn't talk about mousing either. We talked about like the actual device. But in QMK, that firmware and other keyboard firmwares. If you hold down a button, the other side of your keyboard can become a mouse. And so both any of you keyboard keys can make it travel diagonally or up and down or can be used as click and so you can replace your especially for traveling, you can replace your mouse with being able to navigate, move the mouse around with keyboard sounds awesome. If you could ever fly again, I can see sitting a little laptop on like the little fold down tray. Put that keyboard on top and you're good to actually get some stuff done. All right. Now before we get on to the next item, let me tell you all about our sponsor for this week data dog. Thank you dog for sponsoring the show. If you're having trouble visualize visualizing latency or CPU or memory bottlenecks in your apps, and you're not sure where it's coming from how to solve it, pick out data dog very seamlessly correlate logs and traces across individual requests. And you can quickly troubleshoot your Python app plus their continuous profiler allows you find the most memory and CPU consuming parts of your production code continuously. Just run it all the time. Minimum overhead, pretty awesome. You'll be the hero that got that app back on track at your company. Get started today with a free trial at Python bytes.fm slash data dog or just click the link in your podcast player show notes. Brian, let's talk about logos. Sure. Um, I tried to pull I tried to pull this up, but we're suffering some downtime. There we go. Um, so the there's a article called reinventing the Python logo. And I thought it was it. I thought it was interesting, mostly by the about the history. I guess I hadn't, I hadn't thought about it too much. So the history really is there have been only two Python logos, the original one which I'm not sure when that came into existence, but it's just sort of some It looks like a bunch of marshmallows stuck together or something. It's it's up there like marshmallows. I get like bright vibes library. Oh, yeah, yeah, you're right. Yeah. So it's like white dots and with like black dots around the outside making the Python word and they're really that's it and apparently that

00:25:00 The bet passed for a while. And then the current logo came into into play in 2006 by and it was designed by Tim Parkin and the logo that we have right now. And I was you know, I kind of got the the the Mayan vibe from the Python icon also are the two pythons. But there's a quote from Tim said the logos actually based on a Mayan representation of snakes, which is very often represented only represent only the head and perhaps a short length of tail, the structure of this snake represents the natural coiling nesting of snake, other snake as seen on the side. I don't know. But having having the symmetry also kind of reminds me of a yin yang symbol or something. Anyway, I like I like it, it's good. But the article then goes on to talk to a talk to a you, designer who came up with a possible change and proposed a change in 2020 Jessica Williamson, and it's pretty. Uh, but you know, I didn't really read the rest. I just thought it was curious to think about should we change it? And I guess I'm on the side of kind of like the way it is, but just curious what you guys thought, Jeremy good. Um, I mean, I've, I've grown I've grown so used to the grown so used to the other one, but I try not to be I try not to be a curmudgeon, and, and like new things. I know, I know, Burger King just did their rebrand and, and even though I'm not a not on the Whopper train, like you get something fresh, I suppose. Python even there's going to be more people using it in the future than I've been I've ever used it up to this point. And so you know, what the what the existing folks think is less of a concern if it if it feels newer or more welcoming. Yeah. It pulls people in, and it makes them feel like oh, this is a fresh language, right? This is like one of the most popular, fastest growing languages in the world. Of course, it has this logo. I don't dislike it, I think it's pretty nice. I like the colors. I like the flair. But I feel like those gradients, those gradients are hard to combine. Whereas like this, this sort of flat color, you can put it in with other things. But like imagine, like the thing you're trying to put the logo on also has a gradient, then you got gradients on gradients either, I just, it seems a little slightly less versatile. I like that. So what I would just like to point out, though, is there are like rules and laws about this logo in ways that are way beyond what the normal person would think. For example, I used to have a logo that looked like the main Python logo, but it had earbuds on however, it didn't have those little holes, right. So there's little holes, there's the eyes, it didn't happen to have those. Well, I happened to be on vacation at a beach with my family and got a cease and desist letter from the PSF because I was violating their trademark. Because I used a logo that wasn't an exact, it was an alteration of the Python logo, not the exact one fear. I kind of felt like, you know, it could have been a little nicer rather than a you know, full on legal like you must stop this now or else we just have a conversation instead of started that way. Well, those are one of those things where if you don't if you don't defend it, then they have you have a case that you can you can start to lose it as to where you're like well you never you never made a case of it before. And so you had you kind of have to Yeah, exactly. Don't separate the snakes don't make one snake bigger you can't write when I put my app in the app store for the training courses. I had to go back and forth and prove that my my new logo which is approved by the PSF I actually had permission to do that. And yet have you all looked at what is in the app stores I there there change of colors. They are you know, funky redesigns. They're like these weird things are slightly different shape like this one.

00:28:41 There's just a couple of pages. There's like 15 companies violating the trademark. And yet with these all presently here, I still had to fight for a week with the App Store people who allowed my approval in there. Anyway, exercises. One is that is not okay. The one of the barbell? Yeah,

00:29:00 totally not good. They're all not good. And I'll put the link in the show notes for those of you guys who can't see it. But boy, it's long story short, there's a lot around this logo stuff that is just Oh, that's cute. Right? It's quite a bit of stuff around at least. Yeah, well, in you know, they're their rules aren't really that complicated, though. They're mostly No, the logo has to appear in the same colors. And it has to it has to be visible and in its hole without something in front of it. So you can't shift that it can't be squished like mine. The perspective was slightly off for some reason. And that was also part of the M. And they're also fairly good about like, you can send stuff to him ahead of time and say, This is what I'm thinking about doing this. Okay, and you can get pre approval for stuff. But yeah, so now mine is approved, and I feel much better about it. But I had no idea that he just came out of the blue. So there it is. But if anyone wants to start forcing those, they should go have a look at the app stores. They're out of control. Alright. What's not out of control is somewhat related.

00:30:00 api.org is pretty awesome, right? So we go to pi API and our use PIP indirectly behind the scenes goes to pi API and does all of its magic. You pip install this, install that. And it would be great if we could put use that as a mechanism to communicate across teams or companies, right? I wouldn't team built some sort of API interface layer and some other part wants to consume it at your company. But you probably don't want to put that in the public repository. It might have secrets, it might just be inappropriate, all those kinds of things. So it would be nice to have your very own right. Yeah, yeah, absolutely. Yeah. So introducing AWS lambda pi API. So it takes pi pi cloud, which is a way to do self hosting pi pi, basically a private repository, but then lets you run that over AWS lambda and a serverless. way. So it's basically free unless it's being used. And there's a ton of free requests, you get an AWS lambda before you get charged, and you don't have to have servers to maintain. So you can basically set up peipsi cloud to run automatically as an AWS lambda, which then you can lock down. That's pretty awesome, right? Yeah, yeah. So yeah, so there's not a whole lot to talk about it

00:31:13 acts like like a caching server as well. So can you get, you probably could you probably could do that with ipi cloud. Okay. It's just re hosting pi bi cloud, which, Yes, it can. I don't know for certain but so you're saying like, you'd like to just set that as the global destination? All right. I want to start my rounds. Yeah, you want to pull the public stuff in plus, like sort of merge your private stuff with it? Right. Yeah, I haven't tried that. But I suspect pipey iCloud does allow that do the security wise, secure wise, it says the the session keys are auto generated and stored in a secret server configuration contains those generated on the fly, the lambda functions can be limited to access the only what it needs. And then of course, you can configure a pipeline cloud to display nothing to non authenticated users. So you basically have to log into it, and then you're good to go. So I think this is a pretty neat solution. I mean, you've been able to do stuff with pi pi cloud already. But being able to put it in the cloud for free at scale is pretty neat. Yeah. All right. Next, Next up, we have not just the basics, but beyond. Yeah, so if you've read some of L Swaggart, other Python books, there's a there's a new one, I believe, dropped January, that's the month that we're in, can can grab from no starch press, or can give a look over at the at the URL above. And so many other books and references are like, here's how to do the thing go on, here's how to do the thing go on. And when looking through beyond the basic stuff, a lot of it is a look through the Python lens, but at being a better developer, and being a I don't think he said, but for myself definitely like a less feral developer. And so, so so often

00:32:57 give us your interpretation of that that's like you're out on your own. you've figured out how to make it work. But you don't necessarily follow the game raised by agree. Yeah, raised by technical raised by technical wolves. So, so often, when you think you That's awesome. When you when you join, when you join a team that's been either working together already, or has been in industry for a while, there's those things that you don't know that you're doing that sort of make that make you look less polished, whether that's in a in a code interview. And so when I elbows over, what's what are what are reasonable variable names, what our code smells, talking about, like me the duplicating code, or what are so you can write something that works very easily. But here are things that it's so much, it's going to be so much nicer to hear from Al like, Hey, you probably don't want to do this, as opposed to hearing from a teammate and a code review. Like, what is 86,000? Like, oh, that's the number of seconds when you multiply by 60. And you do the Yeah, I guess back to the back to the magic number earlier, like, Well, why is why is that bad? I did the math already. It doesn't make sense to do the math the extra times, but you like well, someone's going to have to come behind you and read that later. And no one hates you as much as future you hate to you because it's probably going to be you who comes back to you and reads that later and doesn't remember. And so, yeah, chapter after chapter. It's just so many things that are like, oh, again, like code formatting, like if you if you haven't been using formatting and linting prior and makes it so much easier to interact with other folks and certs have sort of helps you knock those rough edges off that aren't necessarily like this is how you Python but this is how you become a good

00:34:43 open source contributors citizen or these are the things that you need to know to work but you really didn't but you didn't know you needed it. Right. Right. Even probably things like continuous integration and stuff you should probably know or get or or prs or all those if you could have been doing on your own like you can in some organizations

00:35:00 See what many people don't create prs for themselves, they just check in and carry on. Right. So to those kind of things, yeah, this is great. And you can read it online or with the link in the show notes. Or you can go by it. Um, yeah, it's on no starch. You can either get like the E book you can get printed copy, whatever your whatever you're into. Yeah, no, I think I was just looking through the code smells one even people just just review that anything else? This is some pretty good stuff. Yeah, I love the idea of code smells so much, because it's not wrong. Just kind of turns your nose. I got you. This isn't. This isn't so good. But it does work. Yeah. One of the big ones that I run into a work even as a lot is commented out code. People comment something out, and then check it in. And if it's if it's dead, delete it. Well, we might need it later. That's our version controls for we can go back and get it later. If you really, really, really don't lose it, tag it or something. Or maybe create a branch with a name, but just don't leave it in there. Come on. Yeah. Yeah. Or worse. don't comment it out. Just stop using it. But don't delete it. Either. or dead. Yeah, dead function or dead class. Oh, my God. Oh, yeah. I'll see that. Occasionally. Somebody will rename a function like, function foo old. Why did you do that? Well, we're not using it right now. There's better ways to pay for that hoarder type code.

00:36:18 I just have 23 cats. It's gonna be all good.

00:36:22 All right. Oh, awesome. Well, so let's talk about just a few extra things that he wants to throw out there, Brian, anything else? We get a feedback. I'm sorry, I can't remember the guys name. But in Episode 208, we covered PIP CIL, which is a way to list out your dependencies, but only the top level ones and, and I made a comment that be cool to have this but not have it listed chill because I only installed it for this. And so yeah, he added a no chill option. So that's nice

00:36:52 and aware PIP shell. And then just before this, I was on these Microsoft developer twitch channel. So that's a that's a fun thing. The Microsoft developer twitch TV, they do it weekly. But don't watch them because you'll collide with watching us. So you know, oh, yeah. Well, they need to move their time or something.

00:37:14 It's both recorded. It's all good. It's all good. Oh, and now Yeah, piling says he's been using crypto so cool. Yeah, I love the idea of it. But I haven't yet made it into my workflow. Jeremy got a quick extra as you went through out there you covered I think the I think the other thing was Brian's Twitter I looked at it was either today or yesterday that there was the the joke about the machine, the machine learning Twitter bots. And, and yeah, if like any of those that that can be cooked up. Always a good time. It made me think of one of the previous times I was in Portland at one of the conferences. There was both there was talks on Nate Smith had made prosaic, which is a Python, Python for doing cut and paste poetry. And so you have any corpus of information, you can take and chunk it down. And that's paired with a Twitter bot. So I went to look back because it's been a while I have a Twitter bot that's still running, just called hitch underscore Haiku on Twitter. So every hour on the 42nd minute, it takes all the all five books from the trilogy and pulls a five syllables, seven syllables, five syllables out, combines them all together. And, and puts that into the world, I think about 2524 25,000 times at this point. And the machine learning is more wisdom of crowds, like I'll get notifications like, oh, someone's put favorites on them. Maybe Maybe it happened upon a good one in the in the large pile of terrible one. Fantastic. You have to put that in the show notes. The machine learning was funny, I just found out that like there's a bot that if you say machine learning, it'll retweet you. So I tried to install machine machine learning as much as I could and have it retweet. You know, that's

00:38:52 fantastic. You're gonna be able to use the bat.

00:38:57 And then I suppose also on on the Twitter front. Yeah, we just told you not to not to scroll forever. But my, my favorite client just got a refresh. If you use iOS devices. The chat bots, folks have put out a tweet button number six yesterday. Who Nice. Yeah, that's cool. Yeah, I got to explore more Twitter clients. I'm still just a web browser kind of guy. But it works for me. It works for me. All right, I got a quick couple of releases for everyone. Django, three, two alpha one was just released. So that's pretty awesome. A bunch of cool new features coming in Django, you can check those out. My Pi Zero dot eight has just come out and that has Python three, nine support PIP 21 is out. And that drops Python two support. So that's also a good one more step away from legacy Python. And then real quickly, there's elastic, Elastic Search, they change their open source model, which is a very, I'm not gonna say is bad. I kind of support them in this path, I think but it's a very big deal. You know?

00:40:00 AWS and some of the other browser vendors are like, basically selling elastic as a service Elastic Search as a service. And they're like, wait, you just took our stuff and are selling it to other people? Where's we have a corporate sort of thing. But we have no relationship with these people. And that doesn't seem real fair. MongoDB had exactly the same problem. And so they adopted the same license the SSD, or something like this. Basically, it's still open source, unless you want to resell it as a cloud vendor, then it's not. I don't know, how do you guys feel about this? Open Source business models are hard? Yeah, yeah. And it's really hard to put the to attempt to put the genie back into the bottle after and so I think the, the part of that was unsaid was that Amazon said, Fine, take your toys and do it and sell your cellular service. But we'll just fork it and continue to do the thing that they forked Out with the old model before, you know, before it's changed, it got in there. And that was that right? And that was similar what they did with Mongo. I think they basically said, we have a thing that is API compatible at, you know, three, six, or whatever level it froze that right, and then they went on from there. Yeah, it's tricky. I think for some reason, elastic has a relationship with Google Cloud and Azure. And so they don't have that challenge with Azure, but they have no relationship with AWS. So here it is, anyway, it's don't want to go that long. I just wanted to throw that out there as something people should be paying attention to. But people that use it internally or on their own servers. There's there's no problem with, right. Yeah, yeah, that's my understanding. You guys ready for a job? Yes. Always. All right. Brian, I feel like being a manager today. Can you be the developer? This comes to us from Kate maddix. The oil, it comes to us via a guy named Wolf, send it over. Thank you for that. And it's written by Kate Maddox. So all right. You're the developer. I'll be the manager. So I have good news and bad news. Oh, what's the good news? I've discovered that the five second rule only applies to food. Fantastic. What's the bad news? I dropped our tables.

00:41:58 backups?

00:42:00 Oh, boy. Well, did you hear that, like I made I probably have this wrong. But I think that the five second rule, I thought was 10. Second Rule. Depends, varies by age. You know, if you're a little kid, and it's candy, it's probably good 32nd rule. But I think it used to be a lot longer. And I think that it came stemmed from Gaviscon, or at least like or heard this story that gangs kind of had a rule about how long he would eat, how long after how many numbers of days, he would eat meat that had been left on the floor, or left on the ground, or something like that. So you know, probably not good to eat meat that's been laying around for a few days.

00:42:39 The three day rule? Yeah, that's pretty short. Isn't your magic number for number of seconds by number of days by cleanliness of floors? Right? It's 150,000 seconds. No more than that. Come on.

00:42:51 Oh, boy. All right. Maybe somebody can correct me with the real story. So yeah, that's what happens on the show. We throw out bits of information and our listeners back us up.

00:43:01 Thanks. As always, Jeremy, it's great to catch up with you. Thanks for being here. Thanks for having me. You bet byte.

00:43:08 Thank you for listening to Python bytes. Follow the show on Twitter via at Python bytes that Python bytes is in B yt. S and get the full show notes at python bytes.fm. If you have a news item you want featured just visit Python by set FM and send it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian Aachen, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

 <|endoftext|>
Michael KENNEDY: Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is Episode #51, recorded November 7th, 2017. I’m Michael Kennedy.
Brian OKKEN: And I’m Brian Okken.
KENNEDY: And we’ve got a bunch of awesome Python news lined up for you as always. Before we get to that though, let’s say thank you to Datadog.
OKKEN: Yeah, thanks, Datadog.
KENNEDY: Datadog is sponsoring this episode. They’ve got some really cool whole platform monitoring tools, and you get a t-shirt if you do their little tutorial, so we’ll talk more about that in a minute.
Now, I would like to explore the United States with some data science.
OKKEN: Yeah, so I ran across this article called, “Exploring United States Policing Data with Python.” Since that’s actually kind of a hot topic in a lot of parsing some of that data, I thought this would be a fun thing to walk through. So, I walked through about half of the paper. It goes through using Jupyter and iPython and all those fun tools like Pandas and Numpy to grab some publicly available data. It’s in a CSV file that’s zipped. You can just import that directly, or read it directly with the appropriate tools, with a Jupyter notebook and ask some questions like, ‘The race of people that get pulled over more often’ and things like that.
I know it’s a very political topic and I don’t want to get into that part of it. It is interesting but mostly I think it’s a very riveting example for walking through why it’s important for more and more people to be able to examine public data and be able to figure out what’s going on.
KENNEDY: Yeah, I thinks it’s really interesting that you bring this up, this example of working with public data. There’s a ton of data that we could be asking and answering questions about, policing data as an example. Is it fun for you to play data scientist and play with Jupyter and Matplotlib and stuff like that?
OKKEN: Yeah, it really was. One of the things was the example goes through pretty quickly because it doesn’t stop to tell you exactly what all the code does. It just has a code snippet that you just plop into a Jupyter cell and hit shift-enter and it just runs it and plots things. I know I can look that stuff up later. There were a few gotchas that I ran into that I’ll put in the show notes. Since this was my first time playing with Jupyter I didn’t really know that you have to hit shift-enter, but I remember hearing that from somebody else, to get to Turing.
KENNEDY: Yeah, it’s kind of its own world, but it’s really nice.
OKKEN: Yeah, the example starts with – if you’ve never run it before you can walk through some of this – it’s pretty cool.
KENNEDY: There’s some really interesting stuff you can do with police data and data science. I don’t remember exactly the details, so take this as kind of a general idea, but I think on Partially Derivative they had someone on talking about analyzing this kind of stuff and it was something like, when there was some kind of complaint or episode of violence involving some kind of police, it was pretty frequent that the policeman involved in that violence had previously somehow just come off of some horrible thing. Like a policeman who would deal with a suicide and then pull somebody over who was non-compliant was much more likely to have a violent interaction with that person at the traffic stop. So, you do things like say, ‘Well, let’s change our policy so that people who just had some traumatic event get the rest of the day off so they can process that. These are really powerful and important things.
OKKEN: One of the things I want to caution people for is, I’m clearly an amateur data scientist because I just did this one thing and just followed a tutorial.
KENNEDY: I have that title. (Laughs)
OKKEN: Be careful when you draw conclusions and plot things and show charts. Suddenly, it looks more legitimate. Yes, there’s good information you can find but you have to be careful as well. At the beginning of this article, for instance, not all the data is filled in for all police stops, so you have to deal with fields that are empty. What do you do with that? This article deals with it by just throwing them away. It picks one field and says, ‘Well, I can fill that one in, but the rest of the rows, if there’s any empties, just throw them away.’ I don’t think that that’s valid. I think that there’s probably a better solution. If you’re going to publish something, you should discuss what you did to clean up the data also.
KENNEDY: One of the things we’ve talked a lot about here on the show is performance. Sometimes that performance comes in terms of asynchronous programming and you’re waiting on the network and things like that. Where other times you’re maybe looking things like PyPy. So, most people know that there’s all these different implementations and run times for Python, but if you’re a new listener and maybe new to Python, we have CPython which is what most people mean when they talk about Python. We also have a JIT, Just In Time compiler version of Python called PyPy. We have IronPython, we have Jython, we have Cython. There’s all these different variations. One of the ones that promises to take basic working Python code and make it a lot faster is PyPy. You’ll hear people talk about, ‘Hey, you can make your code five times faster with PyPy under a whole bunch of constraints.’
The thing I want to talk about this time on this show is how somebody went and took their code for IoT (Internet of Things) stuff and made it 80 times faster with PyPy.
OKKEN: That’s incredible, 80 times.
KENNEDY: Yeah, and I don’t think they even really changed the code much. They did change one little bit of an interloop but that was about it.
Here’s the deal. This person was working on evolutionary algorithms. They were trying to create, basically, a self-learning adjusting algorithm that could evolve a logic to control a quadcopter, one of these drone things. It was a simulated one, but it could be hooked to a real one, it didn’t really matter. In order to drive the quadcopter, this object basically had to run a certain operation every so often. So often is like 100 times a second, so quite often. They would input this Numpy raid, do some processing on it and output another one, like how much thrust goes to each motor and things like that. So, this is happening a hundred times a second. And they ran it with CPython and the tests that they ran, not just once but a whole bunch of operations, took about six seconds. They said, ‘Okay, let’s try PyPy. Using PyPy makes it faster.’ So, instead of typing Python [Space] my program, they typed PyPy [Space] my program and, it turns out it was – wait for it – 5 ½ times slower.
OKKEN: Oh, no. That’s not faster.
KENNEDY: Exactly. It’s like, ‘Who sold me this bill of goods, man? I thought this was supposed to be faster.’ So, it turns out that the integration with Numpy, which is what they’re using, actually some of the C interop stuff is quite a bit slower, so they actually used this PyPy implementation of Numpy. It’s called NumPyPy instead of Numpy and that worked, that made it faster so now it was two times faster by switching out the imports and the libraries, so that’s pretty good.
But they said, ‘You know, we actually think we could do better.’ So, what they did is that they started profiling it and they looked at where it was slow and they said, ‘We can actually just rewrite this algorithm, just a tiny bit, so it’s more friendly to the JIT compiler.’ And they got it to go 80 times faster than the original CPython+Numpy version.
OKKEN: Oh, that’s nice.
KENNEDY: It’s awesome. That was even 35 times faster than the native PyPy+NumPyPy version. I think it’s a really interesting lesson.
OKKEN: Yeah, nice use of profiler, too.
KENNEDY: Exactly, that’s the point I was going to make. It’s one thing to throw PyPy or some other technology at it, but it’s not always going to be this silver bullet that solves your problem. But PyPy plus a little attention to problem solving, that made a huge difference for these guys.
OKKEN: Yeah. You said that this was a simulation?
KENNEDY: Yeah, their data is a simulation.
OKKEN: Okay. I don’t know whether or not you can PyPy on a little tiny quadcopter controller.
KENNEDY: I guess it depends on your definition of tiny. If it’s Raspberry Pi, I think you probably could. If it's Adafruit style, that might be too small. I actually don’t know.
So, the next one is an interesting one that I saw go by and I saw that you picked here as well. It has to do with the longevity of Open Source projects.
OKKEN: Yeah, this is actually a Wired article called, “Giving Open-Source Projects Life After a Developer’s Death.” I hadn’t really thought about that too much before. But as the article goes on, we’ve got more and more critical projects using Open Source projects and there’s a lot of them that don’t have that many maintainers, or sometimes just a handful. Really, how do you deal with that? Part of the article is just talking about this as a problem, but then also there’s possibly some solutions. I was just wondering if we had any solutions. I also had some terrible puns I was going to throw in. ‘What to do after you hit your corporeal segfault (segmentation fault) and raise an end of life exception.’
KENNEDY: (Laughs) Yeah, it’s definitely something that people really want to think of. I guess if you’re in a business they do talk about, ‘What if So and So gets hit by a bus? Will that kill the business?’ Well, if this Open Source Project is used by many businesses, it could be that it kills a lot of projects, a lot of companies.
OKKEN: Yeah, so I didn’t know this was out there but apparently there’s a place called libraries.io that has a ‘bus factor’ evaluator for different libraries. So, you can plug in a library that you depend on and look up it’s ‘bus factor.’
KENNEDY: Really?
OKKEN: Yeah, how many of the core developers would have to be on a bus that got hit before the project went away. But one of the things that it did bring up, I looked up some of the Python stuff and some of them are core things that even though there’s a handful of maintainers I think it would get picked up anyway because it’s part of the standard library. There’s definitely others that are of concern and one person points out that perhaps we could build some more things into GitHub or PyPI or other places to maybe have errors put in place. You could say, ‘If I don’t check in for six months, then transfer ownership to these people.’
KENNEDY: That’s a pretty cool idea. Almost like an escrow for Open Source.
OKKEN: Yeah, like if you get a big investment account, you’ve got to list who gets it if something happens to you so maybe something ought to be like that for Open Source projects.
KENNEDY: That sounds like a project somebody could create and integrate with GitHub.
OKKEN: Yeah, maybe. One of the other solutions that I have seen is like the pytest community for a lot of the plugins, trying to encourage people to once you get quite a few users of your plugin to push it over to a development group on GitHub. Then anybody in the group ban maintain it if necessary.
KENNEDY: Yeah, that makes a lot of sense. You could always fork the repo and just
say, ‘The real one is here.’ But I can see a lot of skirmishes around, ‘No, your fork is not real, my fork is real.’ People could fight over ownership.
OKKEN: Yeah, and that’s doable on GitHub, but you can’t really do that on PyPI that I know of. I don’t know how to transfer ownership on PyPI.
KENNEDY: Yeah, I think you’ve got to contact them directly and lobby your case, right? Which doesn’t sound like a great long-term, widespread solution.
OKKEN: I don’t have that problem currently, of having any super popular packages.
KENNEDY: Yeah, that’s cool. Definitely worth thinking about.
Before we get to the next topic, let me tell you about Datadog. So, performance and bottlenecks, these don’t just exist in your application code. Just because your code is slow, well, you could be waiting on the database. The database could be waiting on some Linux internal behavior. Who knows, right? These are layers upon layers across systems that we really build our apps with. Datadog lets you view all of those with one whole thing.
Let’s say you have a Python web app running on Flask, it’s built on Mongo, hosted on a scaled out set of Ubuntu servers running Nginx and Micro WSGI. Datadog will let you view and monitor all these things like one system. So, that is really super awesome and the more you scale out the more diverse your system gets, the better Datadog can help you. They’ve got a Getting Started tutorial. Just take a few moments and if you finish it, they’ll send you a sweet Datadog t-shirt. So, check that out at pythonbytes.fm/datadog and see what you’ve been missing.
OKKEN: I still have to do that. I need that t-shirt.
KENNEDY: Yeah, we’ve got to get our t-shirt.
So, maybe this is the wrong season here in the Northern Hemisphere. (Laughs) Maybe this is going to resonate more with our Australian friends. This next project I want to talk about is a solar-powered, Internet-connected lawn sprinkler.
OKKEN: Oh, nice.
KENNEDY: Lenin, one of our friends of the show sent this in and said, ‘Hey, I created this really cool project I’d like to share with everyone.’ I thought this was a really neat example so I thought we’d throw it in here. The idea is he went and got this little tiny Adafruit Feather HUZZAH board. And this is like a little tiny microchip type thing but it has WiFi, so that’s important. You plug it in somewhere and talk to it and it works with MicroPython. So, MicroPython is the Python that works in the smallest devices. I’m not sure if you can get PyPy to run on this one, but MicroPython is so super level. It basically is the operating system. Your app is basically the operating system. So, you can take a Lambda function and connect it right to a hardware interrupt directory. That’s how low level. That’s insane, right?
OKKEN: That’s nice, yeah.
KENNEDY: And he combines a couple other interesting things. He combines Home Assistant, which is the biggest home automation project in Python, like a really cool app that integrates tons and tons of IoT and smart home things. And he gives a really nice list of, ‘Here’s every single piece of hardware I used. Here’s the solar board I used. Here’s the container for the Feather HUZZAH board.’ It’s just a really nice example of a small, compact IoT project.
OKKEN: And useful and not creepy. I like it.
KENNEDY: Yeah, exactly. The more we seem to go back and forth on these little IoT things, I really want to create one that goes on my front door that used machine learning to determine what type of person is on my front door before they ring the doorbell.
OKKEN: Yeah, or dinosaur.
KENNEDY: Yeah, or dinosaur. That’s right. And also, I put a link in here to Talk Python Episode #108, where I had the guys from Adafruit come on and talk about a whole bunch of these different projects. Nice job, Lenin. This is a cool one.
OKKEN: And shout out to Adafruit too for doing all sorts of cool stuff with hardware and software. I like that.
KENNEDY: Yeah, they have a big educational aspect to them. Not just education-education, but teaching people who want to learn about IoT. I’m definitely planning on playing with some of these little devices in MicroPython. It just seems really fun.
OKKEN: Okay, so I am going to be perfectly honest with this last one. My last thing that I was going to talk about was going to be another packaging story but I kind of went down a rabbit hole. So, instead of getting into that, that’s my homework for next week. I've already set up what I’m going to talk about next week.
But what I want to highlight is some books that came out. There are some new Python books that came out recently.
KENNEDY: It’s a big week for Python books.
OKKEN: Yeah, we’ve got Python Tricks from Dan Bader. That came out. And Matt Harrison’s Illustrated Guide to Python 3. I’m going to read, at least peruse, both of these. I just started Python Tricks and I like the format; it’s cool. And then I’m going to take a read for Matt Harrison’s book. The cover is awesome. Actually, I want to have that around my office, then other people can look up Python3 stuff pretty easily.
KENNEDY: It seems really nice. I looked through it as well. The illustrated aspect is cool on Matt’s. Congrats, both to Dan and Matt on this. This is cool.
OKKEN: Yeah. Then the last thing, I was on Twitter and I was talking with a handful of people, authors. There are some Python books out there that really could use some Amazon review love. So, I’m going to drop a link to my book and Harry Percival’s Test-Driven Development with Python, which has been out for awhile but it’s only got six reviews. And I know a lot of people have read this stuff.
KENNEDY: Yeah, Harry’s book is really great. ‘Obey the testing goat’ and all that stuff.
OKKEN: And also, the Greenfields’ Two Scoops of Django. I know a lot of people who
have started Django or have gotten a lot better at it using this. So, go out and show some Amazon love to these.
KENNEDY: Definitely. I think it really helps if you’ve read a book, to write a review. If you've taken a class, give a review. These things actually make a big difference.
OKKEN: Yeah, it really does. And we’re all trying to do things the right way and trying to support the community.
KENNEDY: Awesome. Well, the last one I want to talk about sort of harkens back to the first one that you did about the data science space and the Anaconda Distributions. You probably know that Anaconda distribution is an alternate distribution for Python. It’s basically CPython but instead of being a stand alone Python where you pip install stuff, it comes packaged with most of the machine learning, data science and popular libraries you already need, pre-compiled for your machine. So, if you want to use some weird package that requires a 4-tram compiler or something, you can just install it. Either it’s come with Anaconda or you Anaconda install it and it actually downloads to the binary version, so there’s no worries about it not installing correctly.
OKKEN: Yeah, there’s also both paid and free distributions but even the free one is one of the few multiple package distributions that is completely legitimate to do within a company, as long as you’re not reselling that itself.
KENNEDY: Yeah, that’s awesome. So, the news about Anaconda distribution is version 5 is released. They have a hundred packages updated or added. They have Jupyter Lab alpha preview included. Updated MKL, that’s the Intel high performance compiled stuff, so it uses the Intel low-level speed ups for the machine learning and computational stuff. New compilers for MacOS and Linux. So, what is that? That’s Clang and GCC, respectively. But what’s important here is they flipped the flags on the compiled stuff for all of these things to use the newest and most compatible flags for security. So, the stuff that gets compiled out of her is less likely to suffer from things like buffer overflow attacks and stuff. So, that’s really cool. The compiler is now a little safer for you. They’ve got updated conda-forge and some other things that create another channel that has to do with this new compiler thing I talked about and so on. So, pretty cool.
OKKEN: I still have on my to-do list to go check out Jupyter Lab. Have you done any of that?
KENNEDY: I have not checked out Jupyter Lab.
OKKEN: Okay. It looks fun.
KENNEDY: It definitely does. There’s a lot of cool stuff happening with Jupyter and
social coding and stuff these days. It’s exciting.
Well, that’s it for my news this week, Brian. Anything else you want to add?
OKKEN: I did find out last week that Python Testing with pytest is available on Safari Books Online. It’s now there.
KENNEDY: That’s awesome. Tons of people have that available to them as part of their company, right? So, they can now get your book that way.
OKKEN: Yeah. I don’t think I do. I’m going to check it out. People can check it out. I have no idea if any of that money comes back to me with that, but I’m glad that a lot of people can read it.
KENNEDY: I think one of the things that’s great about creating something like a book or a course or whatever or even a podcast per se, is that people use it and enjoy it, right? You put a lot of energy in creating it and if it just sat there, digitally silent, that would be sad.
OKKEN: Yeah, it would be.
KENNEDY: Cool. I’m glad it’s out there and yet another channel for people. Alright, well, Brian, thanks again for everything this week and talk to you all later.
OKKEN: Thank you. Bye.
KENNEDY: Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues. <|endoftext|>
00:00:00 Hello, and welcome to Python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 178. Recorded April 15 2020. I am Brian Aachen. I'm Michael Kennedy. And this episode is brought to you by Digital Ocean. Who's first? I think my got my notes wrong. Yeah. Well, I want to talk about something really quick before we actually get to the first one. So we'll see. Okay, I just want to tell people about the YouTube channel. And obviously, if people are watching on YouTube, they might know about the YouTube channel. But most people subscribe to our podcast and we are multicasting and repurposing what we're doing here on YouTube. We talked a little bit about it last time. So basically, each individual item is now a separate YouTube video and you can watch Brian and me talk about it if you want to consume in that format, have a little bit of video and admire Brian's awesome shirts, because he's got a bunch of gonna be wearing throughout these different shows. And it's gonna be awesome. Oh, you didn't have to set it up like that, man. I only have like one good shirt. So love the shirt. For the first video. We said that was like several comments about dude, your shirt is awesome. Yeah, go figure. Okay, so

00:01:08 Python also but some fashion shirts in fashion? Yeah, yeah, it's a Python byte set. FM slash YouTube. People could check that out. Well, tell me about strings Python. I mean, Michael,

00:01:19 I'll tell you about Python strings. You know what strings are confusing man, especially when they're about numbers, and dates, especially dates. So this seems to be like a problem that vexes me permanently. And it's, you know, we talked about is programming googling, right? Like, our consensus was, you know, maybe in the early stages of your career, there's a lot of googling, but no, not really, you mostly just sit down and you think about the problems and you write the code, and you evolve the code. Like, there's a lot of reading code before you actually do much writing anyway. Yeah, but this topic, in particular, I'm all about googling this all the time. So Python has a date time dot sturb p time for string pars time, do you give it some piece of text like Wednesday, April 15, comma 10, colon 30 am without a space, I want to take that and turn it into a date time. So I can maybe compare it to something else, right? Like another time, how many days is that from now is that in the future is in the past, I just need to store it in the database as not a string, but a date time because I want to order by it. I don't want it to be alphabetical. Right? There's all sorts of reasons you need to get a date time from strings or go in the reverse. And yet, the format that's ster p time has a, it has a format string that tells it how to look at the string and then pull the pieces out. So would you know about that example I told you about like Wednesday, April 15 10:30am. That's definitely something I google every single time every time and it's never quite right. So just for those of you listening, you really want to know it's percent a space percent capital A B, space percent capital H, comma, space percent, capital M colon, percent s, AM, whoa, who would ever come up with that? Well, I mean, these are intentionally short. Yes, I know. So that like they don't take up too much room. But they're, and they sort of make sense. It's just it's arbitrary, whether it's a capital Y, or lowercase y, or capital D, or lowercase E, right? And there's documentation you can go find like, if you want the three letter date, day of the week, that's a percent a lowercase and whatnot, but putting it all together can be tricky. So what I want to tell you about is this website by Blache Len eaglin. And it's, let me see what the URL is. It's pi stir f time.com, which, of course, is linked in the show notes. And the idea is you put the text you want the pars, like Wednesday, a 15, April 2020 at the time, or whatever, you put that in there, and you hit go and it will tell you that complex string that I told you was the right answer to my parsing problem. Yeah, it's awesome. Yeah, you just put in like the the output that you wanted to have happen. And it tells you the magical incantation, right, right. Or the the format of the thing you want to parse and depending on whether you're trying to go to that string, or from that string, but yeah, super, super handy. This bad boy is bookmarked for me for sure, because this is way better than googling. I can put it in there. It gives me a quick, quick answer. I can throw it into a Python repple and see, hey, did it work or did it not work? It's really easy. Yeah. Nice. Yeah. So not super complicated, but very handy. So people can bookmark that and try it out. Well, I want to tell you about something easier. Also, I gotta gotta thank jack. JACK McHugh has sent us a few suggestions and they're usually pretty darn nice. And here's this one's from jack pandas dash book a book Boca. Oh, I forget to say that. I love the logo, pandas bouquets and I say book I don't know. You know, but it's like that F stop difference where like the person in a portrait is like

00:05:00 But the background is faded. Yeah. And the logo is pandas clear bouquets like in the background faded. It's beautiful. That's pretty cool logo. So I'm going to quote some from from their website, or the readme, it says pandas bouquet, provides a bouquet plotting back end for pandas, geo pandas and pi spark DataFrame, similar to the already existing visualization features of pandas, importing the library adds a complimentary plotting method plot underscore Boca on data frames and series. Okay, so that's, I mean, it's already built in and all it provides is plot bouquet, another function, what's the big deal? Well, it's so cool, it's so easy. And I was I tried out some of these examples this morning. And it's just a little tiny bit of code. And you call like, you've got a DataFrame. And you call plot bouquet on it, and it pops open, like an interactive graph that you can look at everything, it's actually pretty incredible, you have to do something a little different, you plot, okay. But if you want the normal plotting to do the same awesome stuff, though it's built in, you can set an option, one of the pandas options to switch out the plotting back end. So that's neat. So apparently, what it's really doing is switching out the back end. And to me, I mean, it's plotting is not terribly difficult. But this interface, at least for me, it makes it a lot easier instead of having to work with frames and plots to just call this thing. And then all the different options you can have, you can, you know, different points. Normally you don't want it to look like an Asterix instead of a point or something. All are different color, different scale or different titles, all that stuff is options, you can pass into the plot function. And the other thing that I that I like few more things. One of them is you just win your pip install pandas dash polka, it pulls everything in, because it's all the rest of the stuff is dependent on it. So you get all of it just for a simple install. And it also generates a generator, it's able to do this interactively. But you can also generate with notebooks, yeah, you can generate notebooks. And you can also generate standalone HTML files with this in it. This is really cool. And yeah, the fact you can generate a lot of HTML, there's probably ways to plug it into flask sites, you know, Python websites, and whatnot. Pretty straightforward. And the interactive bit is super nice. I mean, this is not about pandas interaction, per se, this is just bokeh, right? Being very interactive, but you can zoom, you can pan as you move around, you know, like, it'll show you the marks on the graph. And you can hide, you know, sort of hide and show elements. And there's even a cool example where they're showing the stock price of Apple versus Google. And as you put the cursor along, it has the Apple logo next to Apple and the information like a little like card that talks about it over time. Man, this is nice stuff. And all you got to do is pointed at a DataFrame. Not bad. Yeah. And they've got a whole bunch of examples on their GitHub repo with a bunch of working examples, too. Obviously, for the examples, the data is just sort of random data that they've thrown in there. But you know, once you know how to get your data, this does the rest of the work for you. So it's cool. Cool. Yeah, it's a great one. And thank you, jack for recommend it. And yeah, it's a good one, Brian, for pulling it out. We've had digitalocean as a sponsor for a while, and we really want to thank them, they've really helped us out a lot. And they're plus, they're pretty darn cool. So thank you, digitalocean, for sponsoring this episode, and many others. And in the past, we've told you about a lot of awesome things with digitalocean, like their one click Install Kubernetes cluster support, their amazing news Support Center and help documentation has been around for a while. And our podcast runs on digitalocean. We're thrilled with it. And so if your business or your side project deserves great hosting and growth that will grow with you and let you scale affordably, I really definitely want you to swing by Python bytes.fm slash digitalocean to grab the $100 credit for new users. But there's something else I want to tell you about digitalocean that's really cool. They've got something they've started recently that's called the hub for good. And it's designed to support COVID-19 relief efforts were digitalocean through this as supplying $100,000 in infrastructure credits for new not for profit profit projects. They're also giving 50 K to COVID-19 relief fund a their own really fun, but still it's really cool. And they're also trying to raise awareness for COVID-19 related projects, and provide learning for developers and also provide visibility for these projects. And so I headed over there this morning and checked it out. And there's a bunch of cool projects starting out that are related to COVID-19 is not just this sort of stuff, but it's things like there's even a platform to help teachers interact with students during

00:10:00 Florentine. You want to pull projects through this? So thank you. digitalocean. Yeah, that's a great project. And obviously, the infrastructure is great. And we'd love it. But this is this is very cool, too. I didn't know about this. That's pretty. Yeah. So speaking of not knowing, you know, it's, I feel like I've been kind of exploring the Cave of Python, which is large and vast. And I just come on, like a whole nother area. I mean, I just think it opens up like, what is this? How am I not known about this? And this is MB Dev. Have you heard of NB dev? No, yeah. Okay. So let me tell you about it. I'll get your impressions later. So NB dev takes notebooks, and basically makes them on par with writing proper Python packages, and solves all these different problems. It lets you generate what's got to be some of the best documentation period for that library that is sort of backed by a notebook. So it lets you develop, like full Python packages and libraries and notebooks where you can have all your code, your unit tests and your documentation all in one place. But then you can take it and pip install, you can upload it to PIP and make it a pip install of a library that people have no idea that it came from a notebook. Wow. Is that crazy? Or Wow, that's awesome.

00:11:16 Yeah, yeah. And, you know, you think about this idea of notebooks and to me notebooks, like burst on the scene in the 2010 ish era, maybe 2012 2011. Like that timeframe. But this project References This concept envisioned by Donald Knuth, way back in 1983. That says notebooks finally made literate programming this concept by Donald Knuth, I think so, you know, the old is new again, but in a really cool way. And to me, that seems like just such a massive upgrade to notebooks. So notebooks have a bunch of challenges. In my view, like, I can't use a proper editor with it. Like if I don't use PI charm or VS code, and all of its navigation, and it's cool, get blame and like, history. And just like all this stuff, is just not present. Right? documentation. I think that actually, it really works well there. Right. But it's, it doesn't tie the documentation of the notebook to like parts of functionality that might be created by the notebook, which is cool. One of the biggest problems with notebooks, it's a benefit, but it's a big problem is, if you run a notebook, it stores the output in the notebook. So if you had like a bokeh plot, or you had like a print of a data frame that is in there, and now it's part of it. So if I'm working on a project, and you were working on the same project, and we both run the notebook, at different times, or the same time, but separately, and for some reason, generates different results. That's a merge conflict and get, right. So basically, you cannot use notebooks in like a sane way with Git. Because anytime you work with it, if you're not careful, and like don't remove all the output, before you save it, there's going to be a merge conflict. So this project has a git pre commit hook that will remove that problem. So right before it gets committed, it'll automatically do the cleaning of that metadata output. So it'll never have that as a conflict. It also has an ability to like a seal, I go, just accept it, I just accept all the metadata changes, minor, just right, or whatever, right. So it also has a COI to automatically fix that. But if you do have those problems, but it also has this pre commit hook to avoid them entirely nice. That's a nice use for pre commit to Yeah, it's super, super clever. So if I write a function in the notebook, I can put hash export in that cell. And that becomes a public function in the package. Oh, cool, right. So I write like documentation and pictures, and I say hash export. Now, that's part of my library that I'm building. It also lets you create the structure for Python packages. So you have like the setup, py. And you can do the build wheels and whatnot, automatically out of that. And it uses this export ID stuff, you can have your unit test in your notebook, which is pretty cool for the things that are in there. And then finally, you can edit it, you can take the edited library or the library, export it right and then edit it with PI charm, or VS code, and then reverse export it. So what you can do is like, say, push the changes that I've done with my editor back into the segments of the notebook where that code came from, man, okay. I'm a little confused, but I got to try it out. Yeah, you got to kind of read through it to get the sense, but there's just a bunch of stuff. Like all these things seem like yes, you should have been able to do that with notebooks, but obviously, right. That's not their origins, right? They can't do everything at once. But all of these things seem awesome to me. Yeah, yeah. So in order to get started, it's going to basically create a Git repo for you as my understanding either on GitHub or Git lab. So you got to follow the Getting Started instructions, and then you click a button and it'll like generate the repo in the right structure, or you can use the Seelye tooling to generate like the right repo with things like the git commit pre hooks and whatnot. And if you're going to read the docs, check out in B dev

00:15:00 fast.ai cuz this comes from fast AI, people the same one as the build the fast API framework. So some of the docs render better. There's certain things on GitHub that like it says, and here's a cool picture. And it's just like source code. It's not quite right, so,

00:15:17 so maybe check out the final link at the bottom in this section to get to if you're gonna, like browse through it, but it's basically, you get the same thing out of GitHub anyway, this, to me seems like a massive improvement for notebooks, and sort of brings them more into, I can do things like for example, you can now have your notebook and its tests running as part of continuous integration. So these notebooks are now like full participants in ci CD, you can upload, you can create packages and put them on pi pi. There's all sorts of neat stuff. The documentation, if you have a cool graph as part of your notebook that can become the documentation on pi pi, or read the docs for this function. I mean, it's crazy cool how this is like taking some of the awesome parts of notebooks, like the doc side and turn that into the help docs, and then also letting you export the functionality still as a proper CES type thing. Yeah, definitely check this out. I do not even know this existed. Like this is awesome. Well, I don't know how long Oh, I mean, it looks like it looks like five months. Semi is my guess. Okay, so we're not that behind the ball or not behind. Yeah, but this succeed? Yeah, it's very fast. It is pretty cool. So I think this is probably pretty solid. Yeah, I agree. It's definitely got some solid people behind it. So very cool. Very cool. Anyway, NB Dev. quite neat. I want to talk about something a little not neat. A little light hearted. So this is sort of a serious topic. But this is a article from Sebastian, entitled, stop naming your Python modules utils. And I don't think we've I don't know if we've covered it before. But it's good advice. And it's something that happens. Basically, a lot of projects public or private, will at some point end up having a utils.pi or a utils package or something. And this article is just saying, resist the urge. utils is arguably one of the worst names for modules, because it's very blurry and imprecise. Some of the names did not say what such a name does not say what the purpose of the code inside is. And on the contractor utils module can well contain almost anything by naming a module utils software developer lays down perfect conditions for an in cohesive in one cohesive, whatever code Bob. And I have definitely seen this in action, I have been one of the culprits before of having a pulling out a little helper function that I had in one file. And I wanted to use it in a different module. So I didn't know where to put it. So I stuck in a utils. py added a couple more. So there's just a few methods. And I come back six months later, and there's like, a couple dozen, just junk drawer functions from all over the place in there. So if you start people add junk to it. So Sebastian lists a few excuses. It's just one function. But it grows, there's no other place in the code to put it. Well try harder. And I needed a place for company comments. I don't really know what that means. But name it company or something. And also Django does it? Well, I don't know, if you're a well, maybe they shouldn't have, but they haven't now, so they're not going to change it. So the advice is to try name, try grouping your utility functions, and naming them based on the role of how you're going to use it, or possibly group them in themes. And also, if you see a utils.py, crop up in a code review, just request that the person rename it to something else, if possible, instead of a CI rule to break the build, if you see that file name.

00:18:59 Yeah, so what are your thoughts on this? And utils? See, I agree with Sebastian, absolutely. I understand the challenge, because like naming things, and software is hard. But naming things and software is super important. Because, you know, when you you think about like even just like function names, or class names or whatever, right? Usually, what will happen is you'll get like a crummy, vague name, and then a comment describing what they are doing. And you're like, Well, why don't you just make the name a little bit longer. That says what it does. And utils is kind of like the generic catch all of saying, like, well, I couldn't come up with a name. So here it is, we're just gonna drop it here. And in my code, I have like tons of different areas of which I organize it, you know, sort of like sub modules, I guess, if it's a sub packages, if it's a package, but not sometimes it's not technically a package. And I tried to come up with names that are meaningful, right like, I have something called number converter that will like try to parse an integer or return it

00:20:00 Default Values sort of throwing an exception, or they'll try to parse some other thing, or maybe it's called conversions.pi, or whatever. But it's not like utils. Right? Like there's, there's usually some kind of better structure you can find that will help you do this. But you know, there's that joke that, you know, naming things in computer science. That's one of the hardest problems. Right? And I, I do agree with that. But yeah, it's, it's worth the effort when you get it figured out. If you don't believe me, you can just try it sometime. If you're working on group project, just put one function in utils. And you will see it grow.

00:20:33 Like the broken window. Theory of software. Yeah. And misc doesn't count either. If you'd name it misc, it's just as bad. That's right.

00:20:44 Yeah, there's probably some synonyms here in the code world, that dog cat. So yeah, awesome. I want to tell you about this one next, that helps with performance or understanding that performance more specifically, of your code. So I don't know if you how much profiling you guys do your work. How much does performance matter to you guys? matters a lot? Yeah. Yeah, I'm building things that go into testing in a production line. So every millisecond that it takes takes it a millisecond longer to get something shipped. So yes, matters. Yeah, matters, I suppose mostly spend my time on the web. And obviously, it matters there. Right? Like, every hundred milliseconds, I think Amazon measured is like 1%, loss of orders or something ridiculous like that. Right? Like, so. Yes, understanding your performance is good. We've had good good in quotes, profilers for Python, and they typically tell you about this function spent this much time. But another challenge is, my program is using too much memory or worse. It's something long running like a web app or some background process. And it's like growing. It's like, sort of leaking memory. Why is that? So I came across this project called scaling, which is a high performance and high precision CPU and memory profiler for Python. Cool. Yeah. So it lets you either analyze CPU time, or it actually lets you on a line by line basis, say, here's some memory, what line made this? And where's it going wrong? Yeah. And so that's cool. But one of the challenges for profiling is when you're profiling your code, you can make it you don't get the same behavior. It's sort of like the Heisenberg uncertainty principle, right? It does one thing, but when you measure the profiler, you've changed it. So now you kind of got to say, well, that part where was the network, that was 50%. But now you made this the computational bits way slower. So that network part looks just like 20, right? Like it's, you're affecting it. So for example, if you use profile the built in profile, it can make your code 30 times faster, or as simple scenario, than running it normally. But you can use C profile, which is the C base one that's built in, and it only slows it down by 1.65 times. So that's not too bad. There's a line profiler that's 11 times slower. And there's a whole bunch of other ones. There's a memory profiler that's like, over 1000 times slower to the scaling thing has a nice comparison to all these things. It says, Well, how does scaling do? And it claims that it's got this built in library that's much faster. So for CPU stuff, it's 1.04 times the speed, so like, 4%, slower? And it does that through sampling? Right? It doesn't do instrumentation, it doesn't rewrite the stuff, it actually just asked frequently, like, Hey, where are you in the code, but it still gets per line analysis of that, which is pretty cool. And then the memory one is like another 10% slower, because analyzing memory is hard. But yeah, there's all sorts of cool stuff you can do with it, the overhead is not too bad, the precision is pretty good, too. Like I said, it gives you like line by line level of how much time you're spending in various places. It also is interesting in that it separates out the time spent running Python code from native code, including like the base libraries and stuff. So usually, like, I can only affect the Python stuff, the other stuff is not a thing I can deal with. So don't tell me about it or punish me for it. Or maybe I do want to look at it right. Tell me about that. So that's pretty cool. Also, the memory stuff, I think, is pretty cool. So it says it points to specific lines of code responsible for memory growth. And it is important, it does this through a special memory allocator thing that comes with it. And so while you can pip install scaling, you can inspect the memory allocation, that way, you have to go and install it directly and do some more setup. On Mac OS, you can do brew install, there's instructions in there on how to do that. On other lessons, I have no idea what you do. But you can't run the memory allocation directly. You have to you can't just say pip install it and then do the memory allocator there's something other like lower subsystem that has to get installed

00:25:00 for that to work, yeah. And memories interesting one because it's a it's a difficult one to chase down with Python. Yeah, it's very hard in Python because everything is a pointer. Everything is an indirection. It's not like Well, here's the block of where we allocated this object, or whatever, right? Like it's, it's pretty indirect. And so and you don't typically have a hold of pointers in the like, the dress sense of it, like you do in C or something. Right? So it's Yeah, it's challenging. Yeah, I would love to see this integrated into pi charm and VS code. Oh, yeah. Right, right. Now, it just gives you, it gives you like a cool tabular text output or file output. But if you could just right click and pi charm and say, analyze what scalene that'd be sweet. Yeah, I wonder. And that also, that would solve some of the install things. So if you have to install it separately out something integration with Python or VS code would be cool, right? Like right now you can do profiling, and it's really awesome in PI charm, but I'm pretty sure it uses c profile. So yeah, who knows, someday there? They will. We're talking about others. I don't know about vias code, but I do know, backing up a little bit. I do know that pi charm does open notebooks. Okay. So awesome. Yeah, back there. Anyway. Yeah. Nice. I want to tell you a little bit about testing. Also, I'm really surprised that you're and you're covering so. Okay.

00:26:17 Yeah, it's interesting. Lately, you've been covering the testing articles. I know. Isn't that my role now? Now? Go ahead. This is great. Tell us about it. Yeah, this is a person named Carolyn that wrote an article called from one to 10,000 test cases in under an hour. Beginner's Guide to proper that's productive. And imagine if Carolyn was getting paid by the test, right, like, we're evaluating your bonus for the year, like, I wrote, five times, many tests. Anyone else? And I just started this month.

00:26:47 I would tell us, if I was paid by the test case, I would definitely use hypothesis on every project.

00:26:54 So how did you do this? What is this property based testing? Okay, so hopefully people have heard of property based testing, but it is. So the, it's as opposed to like, what do we call it? example, based testing. So and this is kind of how she goes through this discussion. It's it says, the article is really just a really excellent introduction to property based testing and using hypothesis. And it's, I mean, she's using hypothesis in the example. But the The intent is just property based testing, because you can, it's the same sort of strategy with every every other type of property based testing library, she just happens to be using hypothesis and Python. So that's nice. But the she starts off with an a unit test example of just doing she has like a string sort, or not a string sort. But let's start a list sorting thing. And if you were doing example, based testing, you just pick a few example, test example, test cases, or you would take the input, and you know, what the sorted output should look like? And you you know, run it through the function and make sure the output sort that is equal or equal to the expected one, how would you do this with property based testing. And before she goes in, she does give an example of how to write some sort of test like that in property based testing, but she stops and pauses and, and talks about kind of the different mindset, you can't test against an exact example. Because you don't know what examples coming in. So you have to think about properties. So like on a list sort thing, you don't have the exact answer, but you could check to make sure that the link, or should be the same. And that you can use sets on both the input and output to make sure that the contents of the both are identical. And then you can go through the answer and make sure that element wise, every element i is less than or equal to i plus one, you know, there's ways to test sort without, you know, without just knowing the answer, but it takes a mind shift a little bit. And I think actually, that's one of the benefits of property based testing is thinking in terms of that. Also, I also think it's nice that she talks about how this isn't a replacement, for example, based testing, it is a complement to it. And so you can mix them together. Then she goes on to introduce some of the aspects of hypothesis, like there's some cool strategies, like some lists and some integers, and being able to set the max examples to, so you can set how many, and that's where you can just set it to 10,000. And wham, you have 10,000 test cases right away. But, and just let hypothesis come up with the examples. The real meat of the article, which I really appreciate is just the how the hard part of property based testing isn't the sum of its syntax. And she does cover the syntax of how to get this done. But it's also just how to think about the properties how to the coming up with what properties to test for is the hard part. And so taking a little time to talk about that I think this is a great thing. I'm also glad she threw in that. One of the things you could you should check for with tests.

00:30:00 Property based testing is making sure exceptions get raised are expected exceptions. So if you throw garbage in or different cases that don't make sense, you should know what kind of exceptions are going to come out. And that this can be caught with your tests with hypothesis. And then also a great use for all of this is to implement whatever functionality you wanted in a very simplistic but possibly slow or memory, Huggy way or something. And then you can compare the elegant version and the slow version within the tests to make sure that they come up with the same answer. This is also great if you're doing a refactoring you can refactor part of your system, and make sure that the old and new way act the same. So it's just a good introduction to all of this, ya know, property based testing is it's You're right, it's such a mind shift. And it's, I don't know, I haven't fully embraced it yet. But I feel like there's probably some places where it would really be interesting and useful. And I probably should just look into it, you know, I don't know, I get stuck in my ways. And then I just I keep going that way. At the end, she talks about if you're not using Python, what options you have as well, which is kind of cool, right? So just like he hypothesis is cool in Python. But if you're in TypeScript, we got fast check, we're on dotnet. They don't have dashes, or A's, or T. So there's Fs check. And in Java, there's this and c++ and rust, and so on. So if it looks like you could use the same thinking and ideas across different parts of your stack, if you're having different technologies in there. This is another example of if it shows up in every language, it's probably something you should be paying attention to. That's a really that's a good rule of thumb. It's like yeah, if I see it all over the place, right? This is a general CS sort of thing. That's important. Yeah, you know what, what else I like about going through stuff like this is you come across things that you didn't know about, right? For example, you'd think that I would know about JSON, it seems pretty simple, like the JavaScript Object Notation. But apparently, there's like a JSON five as well, which allows things like comments and whatnot, and multi line strings and single quotes and elements that are not quoted for the keys and so on. And there's a whole cool library for JSON five support as if you want to have like a little bit more human friendly. json. I had no idea that was a thing. Yeah, neither did I. And I was just like, why can't I put a comma in JSON, this is driving me crazy. So what I do is I have like a field that says, comment or like double slash in quotes. And then I have the string that is the comment because you can't actually have comments, but you can have ignored keys and values. So that's how I have comments, my JSON. But anyway, she talks about using the JSON five library that's part of Python to support that or not, it's not built in, but it's a Python library you can use to do that. Pretty cool. Yeah. Nice. Yeah. Well, I guess that's it for all of our items, right? Yeah, it is. Got anything extra for us. Yeah, I totally did. But you you nabbed it and put it in your section. So go for it.

00:33:00 That tells you found the magical things there. Yeah, I want to get this one out of the way. First, as some sad news. Have you you've heard of Game of Life, right? Yes. Yeah. Conway's Game of Life. Yeah, Khan was Jake came of life. Well, Conway, john Conway, is, I'm going to link to an article that's a nice a nice article talking about the game of life and john Conway, but just an announcement that he is one of the victims of COVID-19 died from it recently. So that's sad. Yeah, it's definitely sad news Game of Life is a kind of a excellent thing to have in the computer science realm. Pretty neat. So that's add something that's happy is GitHub is now free for all teams and individuals. So that's pretty cool announcement. That's really awesome. Yeah. So previously, you had to pay to have collaborators on a private repo. I think maybe you could have some but not a ton, or private, I think like that. Yeah. It's like evolving it first, you had to pay for private repos, then you didn't, but then you had to for collaborators. And yeah, but that's awesome. So it's a much more free. And then also, for people who still pay GitHub, like me, it's half price. It's 40. It's, I don't know, whatever four divided by nine is. It's now 44% of what you're paying before. And people wonder like, why would you pay for GitHub organizations? If you have an organization? So like talk Python, and the related training, authors and content. There's like a GitHub organization for talk Python. Have people collaborate on that you still have to pay, but it was $9 a month per user. Now it's $4 a month per user. So that's also bonus. Yeah. Pretty cool. Yeah, that's happy. Yeah. So last thing I wanted to bring up is that the pike on us 2020 Online is now live. So there's a welcome video, and more. There's some talks linked, and there's more on the way Yeah, there's a nice welcome video from Emily Morehouse that she basically kicks off the virtual conference in this conference. I don't know if that's right word for it.

00:35:00 This

00:35:01 thing, this event is not like a lot of online virtual conferences like on Saturday, we're all going to meet and then the talks are going to be these three hours and whatnot. It's like, it's like a rolling release of information and videos that then you get to consume over the next couple of weeks. So yeah, you're linking to the basically the, the landing page for like stuff as it happens, right? Yeah. And I'm recommend, so also recommend checking out the so if you go to any of that, like the welcome video, and then go up and find the pike on us 2020, top page and look at the videos there, then you can see them all listed as well. But they're they're rolling out there's and I know that they're not all recorded, so some will come later. For instance, I'm still I don't know if I will, but I'm still playing and recording my talk. And posting it just trying to figure out when to do that. So yeah, yeah, cool. Anyway, I'm definitely looking forward to checking it out and see what comes along. There's also it's worth mentioning that there at that link, there's a place that has like the virtual Expo. And the expo hall is actually my favorite part of the conference is because you get to walk around and meet people and just, you know, see what's going on, and you see all the companies and what they're doing. But one of the things that happens there on Sunday, in normal times is there's the like hiring job fair thing. And all the job fair stuff is already up there. So if people are looking for a Python job, there's like, many, many links of this company's hiring for these four positions, click here, this company's hiring for this position. So if you're looking for a job, you want to get in there quick and grab the good ones and apply to them. Yeah, one of the things that's missing is, how am I going to last an entire year with no new t shirts? I know.

00:36:48 Well, you're gonna have to be up in your game there and this video version here. I know. I love all my own swag. Yeah, exactly. Like how do you even do that? How do you even find a good texture like that you buy? I knew that there but

00:37:04 well, you want to know something that wasn't funny as I almost forgot to put a joke in our show notes here. Oh, no. So I pulled up the terminal and I typed pi joke because I've PIP x installed pi joke. So it's, it's right there in the command line anytime we need a lab. This one is about QA software quality, folks. And it's a take on a traditional one. So you're all hit with this UI thing. How many q A's does it take to change a light bulb? I don't know. They noticed the room was dark. They don't fix problems. They find them.

00:37:36 Oh, dear. That's bad. Right? Yeah, that's definitely why QA and development should be one team.

00:37:42 Yeah. All right. Well, yeah, a good joke, nonetheless. A good joke. Thanks. Well, this was lovely today. So thanks for talking with me. Yeah, absolutely. Thanks. As always good to chat with you. See you later. Bye. Thank you for listening to Python bytes. Follow the show on twitter at Python bytes. That's Python bytes as in V yts. And get the full show notes at Python bytes at FM. If you have a news item you want featured just visit by thumb bytes.fm and send it our way. We're always on the lookout for sharing something cool. This is Brian Aachen and on behalf of myself and Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.

 <|endoftext|>
00:00:00 Hello, and welcome to Python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 199, almost 200. Brian, I noticed almost recorded September 9 2020. I'm Michael Kennedy. And I'm Brian McCann. And this episode is brought to you by us, we'll tell you more about the things that we're doing and what we have to offer later. But for now, I want to talk about not any huge announcement, but a very, very small announcement. That is also kind of huge, very cool. Yeah. So micro, you might say, you might say it's microscopic, but it's a big deal to micro Python has just had a new release. And this is significant, because the last release from micro Python was December 19 of last year. So it's been, what is that almost 10 months since the last release. So if you care about micro Python, this is like a pretty big deal to version 113 is out. And one of the major things is that has improved async IO async and await support. And it has cool Bluetooth improvements. And it even comes with the pep five to six. That walrus operator Oh, nice. Yeah. So there's a lot of stuff going on here. They basically, micro Python, as you can imagine comes with a micro async IO module, you a I'm guessing the U is really a new you async IO module that's supposed to be more compatible with C pythons. async IO. So the main idea is that the task object, you can use a task object for each co routine, which allows you to have like unbounded queues of work and stuff like that. Whereas the previous I think you had to pre allocate it for some reason. I never tried to do async IO on micro Python, but apparently it was a little bit wonky. And so now it's more consistent. Another thing that I thought was interesting about this release, Brian was they went through an auto formatted all the code in the entire repository. And if you look at their repo, there is Python and micro Python, but a lot like C Python, it's a lot of C as well, right? I think it's like 80% C or something. Okay, so they auto formatted the Python code with black and now it probably won't surprise to many people, but they auto formatted. C with it's that communities equivalent of black and get ready for the name. uncrushed defy they UNHCR justified the C code, okay, do you know this? No, actually, I'm writing it down. Because I'd like to check this out. Isn't that great? So you can basically configure how it formats your C code, and it's like black, it's like, you know, it just runs automatically and fixes your C code. And boy, if you thought Python code needed some fixing, I bet you the C code. And there's more variety in there, right? Yeah, there's I've seen some ugly C code in my day. Yeah, for sure. For sure. Because with the like the curly braces and semicolons, you have a lot more flexibility in how you format stuff. Whereas Python forces some of that structure upon you. Or they also added blue kitchen. Apparently, blue kitchen is a Bluetooth stack. And so they added a micro m you Bluetooth module as an alternative to the nimble stack as well. And there's a Unix port, and you can build the Unix port with Bluetooth support for either these bindings, that's pretty cool. That comes with new events. So if you're doing like Bluetooth discovery, and things like that, you can like scan for Bluetooth stuff more easily. It also came with a big memory leak fix for arm chips, which is big in the small space, ironically. So apparently, there's certain memory that was not reclaimed by the garbage collector and other types of things. So if you've, you know, and at the same time on these very small devices, you care a lot about not wasting memory, right? It's not like you got 32 gigs, like my laptop does. So like whatever, right? It's gonna matter if you lose memory on like a little micro Python chip. And also they set it up. So you can run parallel tests against multiple micro Python targets. So I'm guessing like different chips and different devices, you can just say go test them, run it synchronize across two or more micro Python targets. There no, that's to speed it up or to like, test the whole thing on different platforms in parallel or whatever. But it sounds like a good improvement. And it does come with a few breaking changes. So people can check that out. Anyway, if you care about micro Python, and I'm guessing this may make its way over to circuit Python as well, at some point, knowing that those projects are really close. So anyway, this looks really good if you're doing big stuff on small things. Yeah, it's good to see this going forward. And thanks to Matt Contini for sharing this in bringing to our attention. I wish I was better at remembering names, but somebody I had on testing could brought up respects and or respects I should stop Are you SPX. It's a utility for marking out the Python HTTP library. So that somebody brought that up, and I had never heard of it before. So I figured we'd bring it up here. So with requests if you want to mock it, there's a whole library called responses.

00:05:00 And cleverly named a bit hard to search for. And then with HTTP x, if you want to market there is respects, I'm going to name it response x. But we just the other part, you just don't write it. It's like the opposite of a silent E. It's, it's not written, maybe.

00:05:18 So I get, it sounds like a great idea. Well, interestingly enough, when you write the two imports out, there's the same number of characters. And maybe that's part of the reason why they did that. Anyway, that quickstart is like chosen, it's really quick. It's just, it's a really just a few lines of code to mock out a request response call response call, you can do things like things that you would expect, like an assert that something was actually called the, and what the status code was, and things like that. But you can also have custom content. And you can return JSON content, of course, there's some examples. What I like is the documentation is pretty nice you, there's some examples on how to use it with both pi test and unit test, including how to set up like a mock API fixture for pi test. So you can have multiple tests using the same mocked endpoint. And there's a bunch of nice things about it. Like for instance of if you want to mock out a whole bunch of different URLs, you can use some regular expressions to just set what what URLs you want to catch with that. And then also, the content that you return from your mocked object or marked request, is you can have a callback that can generate that on the fly based on what you pass in it. If you have a HTTP x based application, you definitely need to know about this for testing. Yeah, absolutely. And one of the things that's challenging about testing the ACP x is the async stuff, right? And so this is a really cool way to get in there and just make it work right there. Just put a decorator there, and it just mocks it out for you, like, like you would expect. Looks very clean. Yep. Pretty easy. And there's a lot of magic going on under the hood to make that a clean interface. But I think they did a good job. Yeah. So HTTP x comes from sort of an async derivative of requests, which I think is a really fantastic library. And I've done some cool stuff with HTTP. So yeah, I'm a fan of this is great. Now, before we move on, let's talk about a couple of things we got going on, that people can check out that will definitely help support the show. And they might find interesting, I know that you've got some updates for your book, as I write Yeah, the Python testing with PI test book, just a minor, the book itself has a minor update. So there's, it wasn't a big enough change to change the hardback version, but the ebook will be updated. I don't think the hardback is going to be updated. But it's, um, couple lines of code in a couple of code examples in chapter five. So it's a very minor thing. But the big difference is the code download. So we've updated the code download. So even if you're working with the hardback book, or using the old version, and don't update the ebook, please redownload the code, it'll make the your learning experience better. And the main changes that I've pinned the dependencies in the target project, or the example project, so that so that everything worked better. Good, there was a tiny DB is a database that I use in the project. And it had some incompatible changes. And instead of trying to update everything to use the new, the new TDP, I just pinned it to an old version. Yeah, that makes sense. I mean, it's not like you're trying to teach people tiny dB, you're like, here's a dependency, we're trying to get a renter around or something. Yeah. So it's that's not important to the content of teaching people how to write tests. Yeah, that's the problem of creating content the world moves on. And they're not always compatible with what you did. I'm about to Yeah, over talk Python, we've got a whole bunch of stuff coming. And so what I'd like to encourage people to do is just to go to talk python.fm, or training dot doc python.fm. And right there, you can at the front of the training site, you can just enter your email. So if you get a bunch of announcements, because I believe we are working on five or six courses right now are under active development. We've got all sorts of great stuff and other going through it just sign up to get notified when those come out. Very cool. Indeed, indeed. So a while ago, I went on this Twitter

00:09:25 journey, let's say I don't know how to really explain it was like I posted a quick question that led to a ton of feedback. And then, Wow, so many pieces of information and ideas and variations were sent around what I was trying to say like I'd like a dictionary that contains objects that I can access, say with different keys, like I'd like to access by, put a bunch of users and access them by ID, but maybe also by email or by city and that will come with a bunch. So it was it was like this sort of exploration there and one of the recommendations that came over sort of around that is like hey, you should

00:10:00 Check out this thing called get pie. Okay, I don't know where the name comes from, but it doesn't tell a lot about what it is. But it's a vectorized Python dictionary and set implementation. And vectorized. As in, it matches up perfectly with NumPy. And so pandas and all the things that are built upon NumPy, to plug straight into them. So imagine I want to have a dictionary that has data in NumPy. But lets me treat it like a regular Python dictionary, or a set and things like that. So that's what this is, it basically brings a super high performance Python dictionary and set implementation that automatically integrates into the Python scientific ecosystem, which I think is pretty cool. Yeah, yeah. And it's built upon this thing called parallel hashmap. So parallel hash map is apparently the current state of the art unordered map set with minimal memory, overhead. And super fast runtime. So like a C binding. And so this is just a Python wrapper on top of this C library, that's a super fast dictionary and set. So that's pretty awesome. And here's another one for you, Brian, for your c++ adventures. The integration between get py and parallel hash map is this thing called pi bind 11.

00:11:19 So pi bind 11 is a compatibility layer between c++ 11 and Python. So if you want to write like modern c++, and then plug it in easily to Python, here you go. Nice. Yeah, that's pretty cool. Okay, there's two classes, GP, so get pi GP dot dict, and GP dot set. And they're designed to be basically similar to the standard dictionaries and sets from Python. But there's a few differences. So check out the docs. And then I threw in a quick little example here that has two NumPy arrays. And you can say, here are the keys here, the values, put them together. And then you can just access different values. And it's also typed, which I think is kind of interesting, right? Like it has like an unsigned eight bit integer or something like that. Much like NumPy is, but it's more like a Python array, where you specify the numerical type than it is just an unbounded list. Right? So there's some interesting stuff going on. does it solve your problem that you're looking for? No, not at all.

00:12:22 It's very interesting. There's still neat. Yeah, yeah, it's so neat. Speaking of neat, we already talked about Black Swans, but it's pretty neat. Let's talk about it again. Yeah, this was sent in by john Hagen. And he mentioned that I mean, I pretty sure we've mentioned eyesore before. I know we've mentioned black. But a lot of projects use both. So I sort will search your imports. So you don't have to. And then just so it's consistent, they're consistent. And they're alphabetically sorted. And then there's some others, right. And there's Pep eight recommendations about that I believe about like grouping stuff that comes from the library from standard library versus externals and whatnot. Yeah. And so it's so you don't have to think about it, you can just use nicer. Black also is becoming more and more popular, I think, or it's just constantly very popular. for reform. It's all of your code, but it includes the import statements as well. So there was this issue that some projects wanted to use both eyesore and black, and there is in they kind of fight with each other right out of the box, if you run ice, or you'll have one answer, and Black will do something different in some cases. So what do you do? Well, there's black hat, a configuration page. And we'll link to this in the show notes that has documents what settings you have to set for eisert, so that it's compatible with black. They also do that for like eight and piland, which is nice. But flaky and pilot are not that complicated. It's the eyesore that there's like six settings you have to change. But I sort five just came out. And I sort of five has what they call profiles. And so if you run eisert with profile, black, black is one of the built in profiles, it will sort the imports such that they're compatible with black. Nice. So now if you use ice or with the black profile, and black also you they won't fight with each other anymore. That's very cool. And black holes also came up with some new changes. So if you're interested in black, check those out. They're huge changes, but some minor fixes. The profile feature is pretty cool. And even if you don't care about black, I think you should check it out. They do apparently, Django pi charm, Google OpenStack clone adders and hug are other profiles that are included. And also they're just good examples so that you can look at how different projects are configuring their I sort. You can configure yours if you want. Yeah, I really like it. That's super cool. And it is nice to have the top of your files nice and clean and organized in some certain way. It's interesting. There's a lot

00:15:00 Have a lot of people do different linters or code reform matters. But this combination of eyesore plus black is something that's becoming more and more common in a lot of projects. Yeah. Yeah. Very cool. So I have something interesting for you, if you were to think of the influence of Microsoft Excel, relative to the influence of like all of in human genetics and the genome science of the world, and they got into a fight, who would win, like a superhero? This seemed like apples and oranges. I have no idea what they did get into a fight and excel one. So here's the story. There's an article that was sent over by Chris Moffitt. He's the guy who wrote the moving from Excel to Python and pandas course over talk Python. So we did a bunch of research into like, all these funny things, and weird things around Excel. So he sent this one over, and I thought I'd cover it because it's fun. So, on the verge, there's an article that talks about how scientists have renamed human genes to stop Excel from Miss reading them as a date.

00:16:02 Okay, is that crazy? Yeah, yeah. So you think it was just like, formatting and stuff like that. So there's like 10s of thousands of genes in the human genome, and each gene has given a name and a numerical code, and then use to talk about it. So like, this one controls like what color of hair you have or whatever, right? So over the past year or so, 27 human gene genes have been renamed all because Excel kept rereading them as symbols, their symbols and states. Okay. Well, the examples are important. Yeah. So like, March one.

00:16:38 No spaces. March one is a one of the genes, right, but it gets converted to Oh, three slash, oh, one slash the year? Or if you're in Europe, oh, one slash, oh, three slash the year, right. Either way, that's not what you want it. So

00:16:55 March one actually stands for a membrane associated ring, CH type finger one, which of course, is the first of March.

00:17:03 Now it sounds funny, like we're making fun or whatever. There's a study in 2016 that examined the genetic data shared alongside 3600 published papers, and found that one fifth of them, which, what is that that's like 700 papers were affected by accelerators. Yeah. Isn't that messed up? So there's a scientific body in charge of naming genes called Hugo gene nomenclature committee, who knew there's a committee for naming genes. But apparently, they published new guidelines for naming genes. And they said, you have to consider what happens if you type into Excel. If it gets reformatted. That's not okay. better pick a new name.

00:17:48 So they put like weird suffixes and stuff on the things to make them work like March one is like March one in one or something like that. Anyway, so why do I bring this up on the Python show, you know, so much of this work that people are doing there can totally be solved by pandas and Jupiter notebook, and stuff. And so I, you know, the guy who was quoted in there is like, Hey, I made these mistakes, when I was in grad school, because all I knew how to use was Excel. So here's a bit of a, an example, along with a plea to help folks are over using Excel to take a step forward, and use you know, something like pandas and Jupiter, and you know, you're gonna be able to do a lot more cool processing. Anyway, which I think is great. Yeah. Also, one other thing, if you think the geneticists have a exclusive right to these mistakes, there's a really cool article, blog post over on Oracle's blog actually called the 10 costliest spreadsheet, boo boos in history. And they're really hilarious in the like, thing. God, this didn't happen to me. Well, in just like, awesome stock photo that they have this too. Yeah. It's so bad. Yeah. It's like perfect. It could just come out of Excel. Yeah. So some of them are fairly mundane. But others like in my five, the British intelligence agency bugged over 1000 wrong phone numbers, because the 000 in the last three digits of the number got, you know, Miss stated, oh, no. Yeah. Or Eastman Kodak was forced to reinstate financial results for two quarters by from, yeah, 2 million and 13 million respectively, due to a spreadsheet mistake. Yeah, there's just all these crazy examples of stuff just going wrong. Like, oh, sorry, that was a billion dollar mistake, because we were off by, you know, some random thing. Anyway, there's a bunch of errors like this. And it's really interesting to think how you might use the Python tools to not have these errors. Yeah, I think Excel has too much influence over the world. It does. But if you were going to use Python, and you had a Jupiter notebook, would you run it in your downloads folder.

00:20:00 That's definitely not. Yeah, so this is another this a kind of a, an interesting and shocking really think about it before, but glyph has written an article called never run Python in your downloads folder. It's not just about that. Okay, so there's your advice don't run Python in general. But I think it's a good article to spread around and in read, because it's a nice short tutorial on how sis path works, how it's populated. So Python has this thing called sis path. That is, that's where it looks up. So if you say import something or mostly that where it's importing things, also the dash M for something, if you say dash m, and then some module, where does it find that, and it finds it in lots of places. One is, is the normal system include directory, or the system packages. But there's other places too. And one of the places where Python uses is the location you're in when you run Python. So little example he talks about, a lot of people are now using instead of running PIP directly, they run Python dash m Pip, which I also am including that in my advice, usually, because I'm tired of trying to fix people's errors when they're Python and their PIP are pointing to two different places. that's frustrating. So what happens if you run Python dash m pip install something, some wheel in your Downloads directory? Well, normally, everything's fine, except if there's a malicious, fake IP py in your Downloads directory that happens to have gotten there, because somebody wrote some malicious JavaScript code to stick it there. It's possible. I don't know if it would happen, but it's possible. It's more likely now. Yeah, especially now. Thanks, thanks, Cliff. But then it's gonna run that instead of the PIP that you expected to run, which is, is bothersome. So this is hidden, there's some extra advice in here, I encourage everybody to read the whole article, understanding how the Python PATH variable works as well. Because sometimes other, you know, applications will, in the end, if the installer of an application can change things and change your Python path, it shouldn't. But sometimes they'll do that out of convenience. So occasionally, look at your Python path and make sure that there's nothing weird in there. And maybe contact application developers or if they're doing something odd. If you are mucking with Python path recommendation is, but absolute path, don't put anything relative in there. You want to be able to have complete control over that the problem with the Downloads folder is not that the Downloads folder has weird permissions, or higher permissions or anything of that nature. It's just that web virus malicious ness might, it's most likely to drop the payload there. And the Python path plus that operation or that aspect is what is likely to lead to trouble. Yeah, right. Like you wouldn't say don't run it in your documents folder, unless you copy virus Python files in there.

00:23:10 Yeah, in the example, it was real of like, sometimes, like, let's say you're behind a firewall or something like that. And pip install just doesn't work. And you haven't figured out how to do proxies yet. And you really just need some package, you might just download the wheel somewhere. Okay, you might have that in the wheel might be fine. But put it somewhere else. Don't leave it in your Downloads directory, put it someplace else. And please use virtual environments that'll help things as well. Yeah, absolutely. Good advice. And definitely another thing to be aware of. Internet. It's a scary place.

00:23:44 Yes, but we also good place. It goes both ways, because we do love it. That's it for our main topics. But I do want to share two quick things. And they both have to do with the internet. Number one is we just passed 5 million downloads, Brian. Wow, that's awesome. Yeah. And we're in the top 150 or so of all tech podcasts in the world. So just want to say thank you, everyone that's helped to make that happen, because that's kind of a milestone. So that's really cool. Yes, thank you, indeed. Also, I recently finally broke down and got a Wi Fi mesh router. Or routers, can you say singular router. It's got to be plural, right? So one of those routers where it has a bunch of different stations and they all work together. But because of the way it works, you don't actually have to connect to different ones at different places. It's just all one Wi Fi. And man, I got this a Linksys Wi Fi six mesh router, which is quite pricey, but man it is so so awesome. So people are like suffering from being home all the time that I Gosh, I gotta get better internet. My internet was actually pretty good here but we started getting a ton of radio interference from different sources and that would degrade it and stuff. So I have my recording area office above my garage. It's like little studio

00:25:00 apartment thing we built above the garage, which is a separate building across from the house. In over here, if I go speed test, I get 400 megabit measured off my Wi Fi now, that is solid. Okay, so how far was your, or the mesh nodes? It's probably 50 feet, but it goes through like several outside walls through like a couple inside wall. It's like there's layers, it's kind of go through. But now with the mesh, I could put one of the nodes much closer to the wall that I'm close to, that spans like that gap between houses, okay. And how are they talking to each other? They have a like, their own channel, and they do some kind of like, back channel Wi Fi six thing. So anyway, to be recommendation. Yes. How about you any extra stuff? You wanna share the world? No, just I'm sort of sick of COVID and fires and all that sort of stuff. Yeah, man. It's, it's looking a little smoky outside. And yeah, the whole West Coast. And my sympathies go out to the folks in Northern California. I just had a meeting with someone and oh my gosh, is it smoky there, it looked like night, in the daytime. In the background, I could see their window. And it was it was dark as if they were in like a different time zone. But they weren't not good. So hopefully, hopefully that all ends soon.

00:26:13 But before we end this episode, I got a question, Brian, for you. Are you a real programmer? Like a real one like a hardcore? I mean, you do c++? So I put you a little closer. Oh, my God, this posture syndrome players every time I get that question to? I don't think so. Well, let's go to XKCD and answer it. Okay. Okay. XKCD has this cartoon called real programmers. And it starts with two people debating about what kind of editor they're using, right? It says, there's somebody working and they're using nano, the editor and the person. nano for real, real programmers use Emacs. And then Brian walks in. Hey, real programmers use vim. Come on. Oh, yeah, we're real programs use EDD. No, no real programmers use cat and just stick it on the end. Real programmers use a magnetized needle in a steady hand. Excuse me, but real programmers use butterflies. Everyone turns and looks at the person. They open their hands and they let the delicate wings flap once the disturbance ripples outward, changing the flow the eddy currents in the upper atmosphere which acts as a lens that deflects incoming cosmic rays focus in the strike the derive platter and flip the desired bit. Nice. Of course, there's an Emacs command to do that.

00:27:31 Oh, yeah. Yeah. Command x, command m command butterfly.

00:27:39 Nice. Yeah. cmca cx. See MC and butterfly. Indeed. Damnit. Emacs. They say?

00:27:48 Does anybody use Emacs? Yeah. Well, I didn't know. But I'm not a real programmer because I don't use butterflies. I'm sorry. No, I use butterflies. Okay, well, we're in the jokes section. I gotta share a terrible joke that my wife came up with the right okay. 99 bottles of beer on the wall. They ain't bottles of beer. Take one down. pass it around. Now. Everybody's infected. morons.

00:28:12 That sounds like college here in the US. I think that's what they're doing. With all the news. I'm watching. Oh my gosh. This sorry. Yeah, these jokes are the 2020 jokes. Oh, yeah. So this won't make sense in the future. Yeah, yeah. So in the future, when you speak to a historian, and you say, oh, you're a historian. What do you study? Oh, I actually study the year 2020. Like that won't be enough. You have to say well, Which part do you study like the beginning?

00:28:43 Do you study the financial crash? You study this crazy election? Do you study the pandemic like you got to be spec. That year is not enough to say what your specialty is? You got to pick one picker?

00:28:55 Right? I study the fly the fires. Oh boy.

00:29:00 Well, good talking with you. As always you as well catch you later. Thank you for listening to Python bytes. Follow the show on Twitter via at Python bytes events Python bytes as mb yts and get the full show notes at python bytes.fm. If you have a news item you want featured just visit Python by set FM and send it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian Aachen, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

 <|endoftext|>
Michael KENNEDY: Hello and welcome to _Python Bytes_, where we deliver Python news and headlines directly to your earbuds. It’s Tuesday, May 30th, 2017 and this is Episode 28 of _Python Bytes_. I’m Michael Kennedy.

Brian OKKEN: And I’m Brian Okken.

KENNEDY: Brian, can you believe that we've done 28 episodes already? 

OKKEN: No, I can't. I was telling somebody about the show recently and I said, ‘Oh, we've only done like, gosh, we've done like, 27 episodes already.’ 

KENNEDY: Yeah, we've done over half a year. In the history of Python podcasts, I think over half a year's worth, over twenty episodes, makes it one of the longest running podcasts of all time, actually. A lot of the other ones, they sort of cut out in the early twenties. 

OKKEN: Yeah, that's true. 

KENNEDY: Talk Python and Podcast.init, they’ve been going on for a while, but still. 

One of the primary rules or documents or enhancements, that tells us how we should write or code is PEP8, right?

OKKEN: Yeah, definitely. Everybody that's really into Python knows about PEP 8, but sometimes when you mention, ‘Hey, you should follow PEP 8,’ to somebody new, it's not really that easy to get them up to speed. It's not that hard to read, but I didn't know about this thing called pep8.org and I just stumbled across this recently. It's from Kenneth Reitz and it's easy to use; it is the just PEP 8, the style guide. It's a nice web page, styled nicely. It's got red for bad examples and green for good examples, and it's got a nice index on the left that you can click through. 

KENNEDY: Yeah, it’s definitely a really nice and navigable thing. You're right, the green ‘Do this’ and red ‘Don't do that’ and even little touches, like the code samples that demonstrate good and bad – basically any of the code samples that demonstrate anything – are color coded, which is surprisingly delightful.  

OKKEN: Yeah. I also like, because there’s an index there, they're all anchors in the web page. So, you can take one of those and if you want to mention a particular guideline to somebody, maybe a co-worker that's not following it, you can email them that link and say, ‘Hey, could you read this?’ 

KENNEDY: Exactly. Yeah, put that in your git issue response, like, ‘I'm willing to take your PR, but hold on. You’ve got to fix this first.’ 

OKKEN: Yeah, but one of the things that I always want to mention when I talk about PEP 8 is don't be a PEP 8 bully. The first line of PEP 8 talks about hobgoblins or something like that. 

KENNEDY: Yes, blindly following rules is the hobgoblin of little minds, or something to this effect. 

OKKEN: Yeah, so somebody might have a decent reason for not following PEP 8, so tread carefully when you try to get somebody to follow it. If you haven't stumbled across PEP 8 before, which is kind of hard to think this is possible if you're listening to this podcast, it does describe itself as being the style guide for the standard library for Python. But it's a lot more than that. Most open source Python projects follow it to some degree, don’t you think? 

KENNEDY: Right, yeah, and you can set up linters that will mention violations. So, for example, I think Cookie Cutter, if you do a PR back to them and you do something like say, write an 81-character line, it will fail the automated build and say we're not going to accept it because it fails Flake 8, or something to this effect. 

I suspect everyone, pretty much everyone’s heard of PEP 8, but I'm not sure everyone is actually taking the time to read through PEP 8. I think that this thing is more readable, so if you are in that group, then go check it out, pep8.org. 

OKKEN: So, what's next? 

KENNEDY: I want to talk about asynchronous stuff. Is it surprising? I always talk about asynchronous stuff. 

So, there's this new project called Tokio. And at the heart of asyncio and async and await stuff are the things called async event loops and whatnot. This is one of those; we’ve previously spoken about sanic and some of these faster web frameworks. Their magic was that they run on top of this thing called uvloop and uvloop is, I think, implemented in C and is an alternate implementation of this internal asyncio loop. Well, Tokio is a similar concept but implemented in Rust. So, Rust is a compiled low-level language like C. I mean, you can debate that it’s low-level; I feel like it is. It's closer to the medal anyway, it's a compiled language and it's supposed to be a little better for threading, a little better for memory management and safety, so it's a little bit of a safer, more modern, low-level way to implement this. I just thought it was kind of an interesting example that you could go check out and say, ‘Here’s an integration of Python with Rust.’ 

OKKEN: Okay. So, it's a Python thing? 

KENNEDY: Yes, you use it from Python, but instead of having a C extension, you have a Rust extension. 

OKKEN: Okay, that makes sense. It took me awhile to catch up. 

KENNEDY: Yeah, so like the heart of the asyncio event loop is written in C when you're looking at a uvloop; here it is written in Rust. So, here's an interesting internal bit, but you basically plug it into your Python code and then you can you work with the async event loop, like you normally would. 

OKKEN: Okay. And I'm guessing it might be pronounced ‘Tokyo,’ but I’m just guessing.  

KENNEDY: Yeah, okay. Tokyo. You're probably right. (Laughs) 

So, yeah, cool. The project is still super early stage development, so if you're into Rust or you want to play with Rust… a lot of people ask me, ‘Hey, I want to do something open source. Is there an approachable small project?’ This thing’s pretty early days, so it's probably not too complicated to jump in and play around with, if people are looking for some project to get involved with. 

OKKEN: Well, that's great. 

KENNEDY: Yeah, absolutely. 

Tell me about some boilerplate. 

OKKEN: I've got another project that is fairly early, I guess I was just assuming it's fairly early in the project, but I came across this a website called Python Boilerplate. It’s python-boilerplate.com and it’s addictively fun, at least right at first. I wouldn't try it on a phone, actually I haven't tried it on a phone, but it's got a whole bunch of push buttons and stuff and you can say which sort of boilerplate you want to have it spit out. You can select Python 2 even, or Python 3. Luckily, it does default to Python 3. You can say whether or not you want, whether it's an executable script or and whether or not you want argparse stuff in there. Which actually, somebody that wants to add argparse stuff, it's kind of nice to have some built in boilerplate with examples. 

KENNEDY: Yeah. So, it's a little bit like what Cookie Cutter does for large projects, where you can say, ‘I want to generate kind of a starter code, a starter skeleton,’ but it's more like that, but for command line apps, CLI apps, right? 

OKKEN: Yeah, smaller little projects. It even puts together a preliminary, like for instance if you add Flask or Pytest, it'll add your requirements.text to it. It's a similar vein as Cookie Cutter, but a little more interactive and it's fun. 

KENNEDY: Yeah, I like it. People should check that out. So, that one's fun. 

We recently went to PyCon. It was awesome, right? 

OKKEN: It was very awesome, yeah. 

KENNEDY: Hopefully, this year people will take us seriously when we say, ‘Get your tickets before it sells out.’ (Laughs) 

Anyway, one of the things that's really cool, that I really liked from PyCon was the presentation that the folks from Instagram did. Luckily, this is all on YouTube, so people can check it out. 

So, Instagram, they're probably not the biggest but they're one of the biggest, by traffic number of users, whatnot, consumers, or users of python for their web apps and their backend services. They seriously use Python. They use Django and many, many places. They had found themselves in a bit of a situation, like many, many of our listeners probably find themselves, but to a degree that is way, way higher. So, they've got hundreds of millions of users, who knows how many thousands of lines of Python and they were stuck on Python 2.7 and Django, I think they said, 1.3, which is years out of date. It is quite out of date. The current one is 1.8. The one people working on is 2. The big news about Django 2 is, it's only going to support Python 3, right, that was the big news there. 

So, they said, ‘We somehow need to get onto Python 3. A lot of companies have this huge bit of code, and so well, I'll throw my hands up in the air, we just couldn't possibly switch. It is just too much work, it's too much risk.’ 

If you watch this presentation, there's almost no way you can look at this and go, ‘Oh, there's no way we can switch to Python 3 after you see what they went through.’ It's really intense. So, for example, they don't believe in branches in there git repo. 

OKKEN: Wow, I must have missed that. That's interesting. 

KENNEDY: Yeah, it's interesting, right? Because I think, to some degree, rightly feel that the further you are away from master, they’re calling it, the more it's going to be hard to integrate that back in; the more you could introduce trouble by merging that back in. So, what they do is they use feature switches so if you’re working on your feature, there's a config on your dev server that says, ‘Enable this feature,’ but in production it might be turned off. So, they're shipping, they said they check in to the master branch quite often, like many times a day, and within hours of that check in, it is pushed to production. Even if the features are not done. So, now they have this huge, huge branch of Python code where lots of the libraries and modules and stuff are shared across different services, in different servers. It runs on our old version of Django and Python 2.7, and they’re like, ‘What we're going to do is, we're going to upgrade to Python 3 and we're not going to branch. We're going to keep shipping on this main branch and convert it to Python 3. We’re going to upgrade like, years’ worth of Django. We’re going to keep shipping on Python to production and so on.’ 

And so, the process that they went through and the little steps that they took and the testing procedures they went through to make this work, was really, really interesting. Basically, I'll give you guys the summary but if you want to watch the video, I highly recommend it. It's really a concrete roadmap for every large project, every large company with lots of users in traffic. to switch. So, they said they got between 12% and 40% performance improvement, depending on where you look. I like to say, the web tier versus the async Q tier and so on, and I think like, 30% better memory. Just straight across the board, everything was better and they haven't even started using the asyncio stuff. They're super happy now that they can switch to the new version of Django, something cool comes out in terms of performance, they like Python 3.7, some function call becomes much faster, they just get that. They don't have to go, ‘Well, that would be nice.’ They basically said they get to be part of the forefront of Python once again and they’re happy about it.  

OKKEN: Didn’t they start converting their code base so that it could run on Python 3, but they were still deploying on Python 2.7? 

KENNEDY: Yes, exactly. And then eventually one of the steps they made was, ‘We're going to make all the developers run and develop on Python 3, but still deploy to Python 2.’ So, that was one of the main checks and balances; the developers will start hitting these bugs locally and we’ll never push it out. And then they didn't push it out to production fully then, they pushed it out to just Facebook employees, and then they pushed it out to .1% of their users to see how that worked. Then finally, they switched to 20% and then they pushed it all the way out. Something like that. It was really interesting roll out. 

Then on their testing, they had at first, there was a bunch of tests that couldn't be fixed. So, they set up like, ‘These are the tests that are included in the automated build.’ And slowly, as they migrated tests, they added them to also include this, so they would not regress back to be broken. They kind of chopped their way through that. Then eventually they said, ‘Okay, the default is new tests all have to pass on Python 3 and the old ones are going to go into the exclude list, until we get the failing one to zero.’ 

OKKEN: I really liked the presentation and I liked how they talked about a lot of the points that they went through. I think the example is a good example for any project but I also really liked just the reality that it's not trivial. 

KENNEDY: Yeah. It was like six months or four months or something huge. 

OKKEN: But very doable, and while in production. That’s pretty cool. 

KENNEDY: Yeah, and they also kept shipping new features, that was one of their requirements. So, they shipped a bunch of new features at the same time. 

I bet they use at least one underscore in their code when they did that. 

OKKEN: Probably several underscores. We’ve featured Dan Bader on this show a lot, but this is a pretty cool article. “The Meaning of Underscores in Python.”

KENNEDY: I think this falls into the realm of like what you said with PEP 8, right? A lot of people are seeing these, but maybe they haven't really looked specifically at what it's about. 

OKKEN: Yeah, and also, he goes through pretty much all the different meanings but one of the things it took me a while to understand, is that when people say, ‘dunder’ they mean something with two underscores on both ends. Shortened of double under score. 

It's a good list. He talks about the leading underscore meaning, that it’s sort of, by convention, private or for internal use only. I added a note in our show notes, that doesn't apply to named tuple. Named tuple has its functions starting with leading underscore, but you can still use them. That's what they're for. 

KENNEDY: Nice, yeah. I was just comparing with somebody today and said, ‘What does class_ (underscore) mean? Why is the underscore there?’ 

OKKEN: Oh, yeah, right. So, that's the trailing underscore. It's because somebody doesn't want to collide with a Python keyword or something. 

KENNEDY: Yeah, exactly. You can’t use class so class_. 

OKKEN: I do like that convention a lot better than having ‘my class’ or ‘this class’ or something like that. 

KENNEDY: I know, that really bugs me. 

OKKEN: And one of the things that a lot of people don’t, that I was surprised by when I first learned about it, is a single underscore by itself. 

KENNEDY: Yes, that's my one of my favorites. 

OKKEN: That’s a ‘I don't care’ variable that you can, like if you have to assign something to a variable but you’re not going to use it anymore or use it at all, that's a decent one. And you don’t get a warning for that, if it's something assigned and never used. 

KENNEDY: Exactly, it's meant to not be used. Yeah, the couple of places that I see that, like a tuple unpacking when you don't care about all the values, which is kind of good. If you say, ‘I just want to do a loop from 1 to 10, but I don't care about the number, I just want to do it 10 times,’ you could say, ‘for underscore in range 0, 10’ whatever. Things like that. 

OKKEN: That's a good use for that. 

KENNEDY: Yeah, yeah. The other place that I really like this is where I have function signatures I have to match, but I don't care about the variables. For example, in the web methods, a lot of them take request as a parameter. If you don't put the request parameter there, the framework will fail to try to pass it, and won’t match it and it will crash and all that. But I don't care about calling the request variable to working with it, so you'll get a Flake 8 violation you're not using it, so underscore. 

OKKEN: In that case, can you use it multiple times? Like, can you have multiple parameter names that are _ (underscore)? 

KENNEDY: I think so, yeah. I mean, you just blast away the previous value store and underscore, but if you're really using it as like, ‘I don't care,’ then that’s fine. 

So, the underscore is definitely good. If you're not familiar that, check out Dan’s article; it's a good one. 

Let's close this out with a little bit of a look towards the future. We talked about recently, the Stack Overflow tools, trends tool, and when Stack Overflow released it, one of the things that they featured, right up in the front, was language popularity for a few languages, including Python. It looked pretty good, right? 

OKKEN: Yeah. 

KENNEDY: Yeah, so I want to come back. There's a guy who wrote a _Medium_ post that actually dug into this quite a bit and played around with it, and said, “The Future is Looking Bright for Python.” And he basically took that tool and did a little better analysis with it then than we did. There's one chart that they put up as a standard chart at Stack Overflow since we covered it, called the Most Popular Languages trend chart. That's got like 15 languages or something silly; it’s really completely overwhelming but if you hover over the language and names, it highlights them and dims the others so you can actually see it. 

What’s really interesting is, if you go through that chart and you hover over the languages, there are only like 2 languages that have upward trends and recently. And which one is the most steeply upward? Has the most positive derivative? 

OKKEN: Well, probably Python.

KENNEDY: Of course, it does. Actually, by quite a large margin. There's also a trend chart on there for Python 2 versus Python 3, and last year Python 3 overtook Python 2.

OKKEN: Oh, nice. 

KENNEDY: So, same kind of idea with this trend, but just digging in with a little more detail and it is kind of interesting. I thought to be fun to tie that together with the Instagram story, so you can go back to your company or your boss or whatever, and go, ‘End-of-life in 2020 for Python 2. Django is no longer supporting Python 2. Python 3 is growing here.’ Just like all the good stuff. Bring it all together to help get a little more Python versus Legacy Python in the world. 

OKKEN: Yeah. I definitely don't hear… a couple years ago we still heard people coming up with good reasons to stay on 2.7, but I don't hear anybody talking about that anymore. 

KENNEDY: Nope. We've definitely crossed over some sort of boundary, for sure. 

OKKEN: Well, hopefully also in the future, it will bring us at least another half year of _Python Bytes. 

KENNEDY: I'm pretty sure we can at least get another year. 

OKKEN: So, that's all of our topics, but any news for us, Michael? 

KENNEDY: No real news for me. I'm just recording podcasts like crazy, trying to get ahead for the summer. Like i was just telling you the before I opened the show and hit record, I have like 8 episodes of _Talk Python To Me_ I’m recording over the next 6-7 days. So, there's going to be a whole bunch of good stuff lining up and I'm excited about what's coming. 

How about you? 

OKKEN: I'm kicking off some more recording also. The book is still going strong and I’m doing a lot of work on that. I recorded an interview this morning and I'll have at least a couple coming out in the next couple of weeks, so _Testing Code_ is not dead. It will come back. 

KENNEDY: What was the topic? What did you record on today? 

OKKEN: Actually, I recorded somebody that does mobile testing, so mobile application and mobile and responsive web page testing. It's a company that offers a service that you can rent a device. Somebody tells you that your website or your web application or something doesn't work on this particular device. You don't have to go out and buy it, you can go and rent it; I think their prices are like, 10 cents a minute, or something like that. I have no idea what their prices are actually, I can't remember. But it's a commercial product. I want to make sure that testing code isn't just about open source stuff; it's also companies that are helping out that area. 

KENNEDY: Yeah, that’s cool to cover the whole whole spectrum. Can you imagine what their data center must be like, with a thousand different phones running? 

OKKEN: I also asked him silly things like, ‘Okay, so I operate my phone with my finger. Are you paying somebody to move their finger or something?’ They said, ‘No,’ they've got that he figured out, automated. 

KENNEDY: Perfect. Well, Brian. Thanks for her sharing the news this week and meeting with me. 

OKKEN: Yeah, thank you. 

KENNEDY: You bet. Bye.

Thank you for listening to _Python Bytes_. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbyes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues. 

 <|endoftext|>
00:00:00 KENNEDY: Hello and welcome to your Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is episode 93, recorded August 30th, 2018. I'm Michael Kennedy.
 
00:00:11 OKKEN: I'm Brian Okken.
 
00:00:12 KENNEDY: And Brian, you know last time we had some awesome drop-the-mic stuff. I think, we're going to do it again, aren't we?
 
00:00:17 OKKEN: Yeah, I think it's some really interesting things today.
 
00:00:21 KENNEDY: Absolutely. So before we get onto them though, I just want to say thanks to Datadog. Datadog's sponsoring this show. Check them out at pythonbytes.fm/datadog. I'll tell you more about that later. Brian, a lot of people get into programming, and kind of in air quotes there, by doing scripting around the shell and stuff, right?
 
00:00:39 OKKEN: I think so, I think that's why some people, like in the IT world or...
 
00:00:42 KENNEDY: Like Bash or even BAT files.
 
00:00:46 OKKEN: Or lots of of DevOps roles.
 
00:00:49 KENNEDY: Yeah exactly.
 
00:00:50 OKKEN: At that point where I learned Python I was doing a lot of C++ development and, writing little utility scripts in Bash and Perl and stuff like that, and so one of the things that I did, you know I want to try to learn Python by writing as much Python as I can. And so I started doing more and more, more and more of my utility scripts in Python and so I think that was a good way to just try to jump in and solve little problems. I could have written it faster in Bash 'cause I knew that, or in Perl, but learning how to do things in Python is good. So there's, it's a GitHub repo that's called Replacing Bash Scripting with Python. And I think it goes through a lot of stuff that, a lot of the issues that you need to do, that you normally write in the little utilities, and how to do that in Python. So this is fun. Talks about dealing with files, reading and writing files. Dealing with standard in, standard out, standard error, things like that. And writing the command line utilities.
 
00:01:53 KENNEDY: Yeah things like, dealing with exit codes. So if you shell out to some other process, you run a command, knowing whether it failed or it worked right? Things like that?
 
00:02:02 OKKEN: Yeah and how to pipe between commands, if you're going to pull things together, and then it doesn't jump into a lot of the really cool stuff with Python, but it's a good start. But it does introduce people to the path library and shutil, I don't know how you pronounce that, shutil, s-h-util? Mm-hm. And those are things. And then a lot of times I'll may be using sed and awk and grep and things like that, and how to go about replacing that sort of stuff with regular expressions with Regex. And so this is just fun. I like it, to be able to, if you're writing a little utility and it's up to you as to what language you write it in, this might help you write it in Python.
 
00:02:43 KENNEDY: It's cool and I think one of the real key things to actually making programming stick when you're trying to learn it, or even at learning a new programming language, you know some other kind of programming, it's to have what you're doing be relevant. To you right? Like if you work in a DevOps world and you're like, well I'm going to go learn Python so I'm going to do this data science project, that may be totally irrelevant to you. So having this as a resource for people who generally do scripting and automation type stuff, this is really cool.
 
00:03:12 OKKEN: Yeah and then also you're going to, the stuff, when you're learning the stuff you start out writing isn't, just to be frank, and it's the same with everybody, it's not that great to start with. So starting small is good so you don't have something huge to rewrite later.
 
00:03:27 KENNEDY: True, I guess a lot of people, I know I did one in the earlier days, went through the experience of going back and reading code I wrote six months ago and going, wow that's bad. But then that same person who looked back badly on the old code, six months further down the line you look back and, yep that's, that's bad too, just in a different way right? But eventually you get there but yeah, having the small stuff definitely helps.
 
00:03:53 OKKEN: And I've heard a lot of people like in a DevOps world where they just, you start writing one or two of your scripts in Python and then you can just, you add to it, as you learn more stuff you can do more powerful things. And having, like you said, having it be relevant to your job is important for what you're doin' for learning.
 
00:04:13 KENNEDY: Yep, it's a really cool find. I'm glad you brought it up and I'm sure it'll help a ton of people.
 
00:04:17 OKKEN: Now this next topic I'm pretty excited about.
 
00:04:20 KENNEDY: I'm honestly kind of beside myself about this one. This literally could be a game changer and, so this is called PyIodide and I don't know if you've heard of it before. I had not heard of it until just, beginning of this week I think actually. So Iodide is a project by Mozilla and it's sort of, think of Iodide as a competitor to Jupyter Notebooks, where the concept of Jupyter Notebooks is you have this webpage and it's like a view into a Jupyter server, and then when you execute code, that code executes on the server. Which is a little sketchy because if you're letting people run arbitrary Python code on your server, that's not amazing so maybe you're using some sort of docker thing to spin them up and shut them down. It gets complicated right? Well Mozilla wants to make this environment available to everybody but in a distributed fashion. And so the goal is to bring this environment to the browser and when you execute code, it executes on your browser, client side. So you can do whatever you want. Well that's cool but the problem is a lot of people want to do data science in Python and Python, while it's had some JavaScript options for running code in the browser, they've always been like, well you can kind of do this and it's mostly like Python, and so on. Awhile ago, as in two weeks ago, we asked the question of, will there be a PyBlazor? Remember Blazor is the .Net community's attempt to bring the .Net CLR, their equivalent of CPython, into the browser with web assembly and make it run there. And they're making that actually work which was kind of blowing my mind and giving me a lot of hope that maybe, maybe somebody could do it for CPython right? And what do you think, do you think it'll happen?
 
00:06:07 OKKEN: Well, it's a nice dream.
 
00:06:09 KENNEDY: I agree, it's a nice dream. But, sometimes dreams become reality right? So PyIodide is an implementation, a running version of all of CPython, an exact bit of CPython, same thing, in the browser. In web assembly.
 
00:06:28 OKKEN: That's so cool.
 
00:06:30 KENNEDY: Is that incredible or what? My mind is blown. So I reached out to one of the contributors, Michael D., and asked him, this is really CPython, running in web assembly, in the browser? And he said yeah, yeah. So Michael works for Mozilla, this is a Mozilla project, and they're trying to bring all of CPython, at least the data science part of it, into the browser. Now there's a few things that it won't do, like you can't open a socket. Obviously TkInter doesn't work 'cause what does that mean in the browser right? There's some parts of CPython that are not there but if it's permitted in the browser, it's identical to CPython and that, I think, is amazing.
 
00:07:13 OKKEN: That is amazing. I can't wait to play with this.
 
00:07:15 KENNEDY: I can't either and so, they also want to have the data science tooling there and so things like NumPy, Matplotlib, and so on, they have heavy dependencies upon C. So you can't just bring it over and run it in this web assembly version of CPython, so you have to take the C code that supports things like NumPy and Matplotlib, and get them to compile to web assembly themselves. So they've also done that. So you have native NumPy, native Matplotlib, on native CPython, client side, in the browser, with web assembly. And it's fast.
 
00:07:49 OKKEN: I'm still trying to get my head around this. How could it be fast?
 
00:07:51 KENNEDY: I know it's , it's like binary stuff executing, and it's also not that big right? The download, I noticed using the web tools, when you go and interact with this page, it downloads like cpython.wasm right, the extension for web assembly, and it's 2.5 megs, right? And on my connection that's like one and a half seconds to get that thing up and running. And then it doesn't have to parse it like it does like two megs of JavaScript . Make sense of that right? Effectively compile it. It just takes it and runs it 'cause it's already compiled.
 
00:08:23 OKKEN: Okay that's, okay, so that's not nothing, but that's pretty cool.
 
00:08:27 KENNEDY: It's not nothing but it's not, it's not that bad and you know you could cache, somebody could setup a CDN for that thing and cache it, like say, Mozilla.
 
00:08:34 OKKEN: Yeah. Like, say Mozilla .
 
00:08:38 KENNEDY: So I think it's awesome. I want to just say thank you Mozilla and Michael and team for workin' on this 'cause this, this is amazing and this could really, really change, it could really expand where Python is broadly applicable. Now I think it's worth pointing out, this generally is built with the concept of making data science work in the browser, right? Whereas this PyBlazor thing, the Blazor, my imaginary PyBlazor thing that I made up, that was around building single page apps, more of the web side of programming than the data science programming side of programming. But this thing does have extensions to let you work with HTML and the DOM and events and stuff like that. So you could, it's not a long shot to go from this, to having an interactive, rich application for a web app, in Python.
 
00:09:33 OKKEN: Yeah. So it's still not quite where we want but, really cool.
 
00:09:37 KENNEDY: It's really cool and, I mean it's totally working for what they're trying to do but I'm just thinking, if I want to say replace a react thing, or an AngularJS thing, with Python, there might be a few more steps to get that angle of stuff working. But it shouldn't be that far because we already have the CPython runtime working, which is really what you need, and the integration with HTML.
 
00:10:03 OKKEN: Yeah so this is cool. I want a lot of people to grab this and run with it.
 
00:10:07 KENNEDY: Yeah I think this really opens up the possibility for some amazing stuff. Once again, thank you Mozilla and also, I just want to reflect a little bit. I think it's really ironic, or interesting coincidence, at PyCon 2018 as we mentioned when we talk about the Blazor thing, I think it was Tim Callahan, I'm still forgetting the name, but somebody from Mozilla came and gave an impassioned presentation as the opening keynote of, please let's find a way to use a web assembly to get Python more capable in the webspace and specifically in the browser, client side. And I think it's just pretty awesome that Mozilla another team in Mozilla, actually is the one that implemented this. So that's really, it's really amazing. So these guys working on PyIodide, they may want to document their stuff right?
 
00:11:01 OKKEN: Yeah you're so much better at the transition thing than I am. I'm like, oh, next topic. I personally like, I like Markdown, I write, even when I have to use, to be honest, when I have to use Microsoft Word, I write in Markdown and then I convert it to Word. Anyway I don't why I was talking about Word but, so reStructuredText is not something that comes natural to me. But there's a lot of Python documentation that's written in reStructuredText. So if you're going to contribute to an existing project, you can't say, well I can't do any of the documentation 'cause it's all in reStructuredText text. Convert it to Markdown.
 
00:11:35 KENNEDY: Just use Markdown. No we're not rewriting all of this in Markdown.
 
00:11:39 OKKEN: Right so whether or not you like it, reStructuredText is part of the Python world so this is a wonderful, there's a wonderful article from Simon Wil, oh I always said his name wrong. I always thought it was Wilson but it's Simon Willison. A subset of reStructuredText worth committing to memory. And that's a noble goal but instead of committing it to memory I'm just going to bookmark this article. But it's, he's got the necessary things for easy documentation. You got paragraphs, headings, bulleted lists, how to do italics and things like that. And then of course for documenting code you need, how to do inline code and code snippets and images and internal references and things like that. And there's a lot covered here but, one of the issues that I always had was, the tutorials on reStructuredText. reStructuredText can do a lot, and it's kind of overwhelming and you don't need all of that to understand enough to help document a Python project. So this is great.
 
00:12:43 KENNEDY: Yeah it's cool. These are the five or six things you need headings, links, bulleted lists, numerical lists, images, things like that right?
 
00:12:50 OKKEN: Yeah and then how to get your code in there.
 
00:12:52 KENNEDY: Yep, yep exactly. That's great I'm going to make use of this, the one that you're sharing here, because I'm workin' on a project where I have to write a lot of reStructuredText and, yeah, I basically have doubled my knowledge of reStructuredText by reading that.
 
00:13:05 OKKEN: Yeah and I mean,
 
00:13:08 KENNEDY: 'Cause like you, I do Markdown most the time.
 
00:13:09 OKKEN: So most, to be honest, most of the time when I needed to do something in reStructuredText I would just find somebody else that did something like that and copy it and not know why I was doing these things. So having a little a, little primer and tutorial is good.
 
00:13:25 KENNEDY: Yeah and it's great. Speaking of finding things. Let's talk about Datadog really quick. So if you have issues, performance problems, bugs, things like that with your application, you should check out Datadog. So they're sponsoring this episode. And it's a monitoring platform that brings together metrics, logs, request traces, all in one place. And they have this new feature called Trace Search and Analytics and it lets you break down the usage of your Python app around performance. For things like, show me all of the operations that this customer or this user did, or all the requests that go to this URL, and aggregate the performance of that, which is pretty awesome. So start troubleshooting, optimizing your Python apps today with a free trial and Datadog will send you a free cute little t-shirt. So check them out at pythonbytes.fm/datadog. So I have a theme for the rest of this, rest of the items I've chosen Brian. So, have you ever heard that some software has security problems, people can break into it? You know, even though Python's not compiled, Python code can have it too right?
 
00:14:28 OKKEN: I assume so, yeah.
 
00:14:29 KENNEDY: Well our friend Anthony Shaw told us about this cool project's, little app you can run, it's really a lyncher basically you run against your program, called Bandit. So Bandit is designed to find common security issues in Python code. So what it does is you point it at your project and it'll load up each file into an abstract syntax tree, run a bunch of analysis over that AST, and then it'll generate a report and it'll tell you things like you're misusing the telnetlib, or you're using eval, or you're doing try-accept-pass and eating errors.
 
00:15:07 OKKEN: Oh.
 
00:15:08 KENNEDY: Opening a sub-process with Popen with shell equals true. I actually don't know what's wrong with that but I should probably figure that out. But apparently it's bad, shouldn't do it, and that's error 602. So it'll tell you, for example like I wouldn't know that that's necessarily bad. I know I've heard it before, but I don't remember why it's bad. So it's pretty cool and it just has a whole bunch of errors it'll find, security lapses, it'll find and tell you about them.
 
00:15:34 OKKEN: So this is something that you, is like a static analysis, it's not running your code? It's looking at.
 
00:15:39 KENNEDY: No, it's static. Yeah it's static analysis.
 
00:15:42 OKKEN: That's cool.
 
00:15:43 KENNEDY: Yeah isn't that nice?
 
00:15:44 OKKEN: Yeah, neat.
 
00:15:45 KENNEDY: Yeah it's like I see you did a try-except and you just ate that error and that can actually cause other types of problems. Maybe you should have validated something, but instead you just keep going. Things like that.
 
00:15:54 OKKEN: So this might be good, even for non, I mean it's definitely important for Python projects that have a interface to the web, or like a web application, but you could use this for a lot of stuff. Not just that.
 
00:16:08 KENNEDY: Sure.
 
00:16:08 OKKEN: So.
 
00:16:09 KENNEDY: Yeah, yeah it definitely lets you know when you're doing things wrong in a different category say than probably Flake8.
 
00:16:15 OKKEN: Yeah, neat.
 
00:16:16 KENNEDY: Yeah and because it's, you could easily integrate this type of thing into a continuous build, integration pipeline.
 
00:16:21 OKKEN: Yeah, I'll definitely have to check this out. Cool.
 
00:16:25 KENNEDY: Yeah this is, it even probably has a little testing angle to it somehow.
 
00:16:27 OKKEN: Maybe, yeah.
 
00:16:28 KENNEDY: Maybe. Awesome, alright what you got next for us?
 
00:16:31 OKKEN: Well last week we talked about what Netflix was up to with Jupyter Notebook so I'm, and I mentioned that I've kind of been trying to learn more about them so, one of the, we had somebody submit another, it's another repo, but it's a whole bunch of Notebooks. So it's, what he's put together is, learn Python 3. I think I even have got the wrong link here. Learn Python 3 with a Jupyter Notebook. And so I was actually playing with this, this morning and it was just a blast. So we have, it's got beginner and intermediate Python concepts. And you just sort of like can walk through it, and one of the things I had to learn of course is to, at first is just to, how to do this? How to clone, I cloned the repo and just ran, and then installed Jupyter and then ran the, just say, what is it, you just say Jupyter Notebook, or something and it opens up a web browser. And then you can click different Notebooks and run them and see what they do. And the thing that really intrigued me that, a bone that he put in there for me to try to grab is, there's two topics on testing and I've been asked this before of how, can you run pytest within a Notebook? And I didn't know if you could or not. I heard rumors, but there's two examples in here of how to, two Notebooks that have tests embedded in them so you can run your tests within, so you can define a function or something in a different cell, and then write a test for it in another cell. And then run it.
 
00:18:09 KENNEDY: I think that's really cool and I had no idea how to run pytest either in there. And I always sort of saw that as one of the weaknesses of Notebooks. I have lots of respect for them but one of the things I don't really like is it's hard to do like, how do I run tests against this code? How do I get a code coverage report? Of the code, mind you, when a Notebook is doing things like that right? Seem much easier when you have a set of files that you can call directly.
 
00:18:35 OKKEN: Yeah and I'm still not, so this is running pytest within the Notebook and I'm not, I think there's also a way that I haven't figure out yet to take a Notebook and run, if there's tests inside of it, run the, run tests against it.
 
00:18:48 KENNEDY: Yeah there may be, and the stuff that Netflix talked about last week, allow you to basically take a Notebook and execute it as if it were a function with an input and an output. And that in some sense would open up a testing angle, just by itself right?
 
00:19:02 OKKEN: Definitely. And especially if you save the output somewhere, that'd be great. Anyway it was just really fun. It's fun to look around. The other thing that I like, as an example, is there's the examples of how to do pip install within a notebook. It has those at the top 'cause it doesn't assume that you've installed pytest to begin with.
 
00:19:23 KENNEDY: Oh yeah that's cool.
 
00:19:23 OKKEN: And it shows that. And then it's using another pip installable package called the ipytest which is how it's running pytest within the Notebook. So, it's cool.
 
00:19:34 KENNEDY: That is really cool. Nice find. Alright last one, I said I was on a bit of a theme. So we talked about Bandit. And Bandit let's you find code that is being either used in a bad library or is using a bad pattern, like try-except-pass, things like that. This next one takes a different angle on the same sort of problem around security and integrity of your application. And it's called detect-secrets. So their sort of tag line there is, an enterprise-friendly way of detecting and preventing secrets in code. And this is actually released from Yelp. So on one hand, using code badly, that's a problem. But also putting hard-coding passwords and other things like that into your code, can be a problem right?
 
00:20:21 OKKEN: Yeah, definitely.
 
00:20:23 KENNEDY: And so the enterprise-friendly aspect I think comes from the fact that it says, alright look we assume that your code is just messed up. There's all sorts of badness in here. What do you do if you find yourself in a hole, and things keep getting worse? First thing you do is stop digging, right? Before you get out of the hole, you just stop making it worse. So there's a lot of mechanisms in detect-secrets to say, let's not make this worse. Let's prevent new secrets from going into the code base.
 
00:20:51 OKKEN: Oh nice.
 
00:20:51 KENNEDY: Now we can start to peel off, start to remove some of these things that are hard coded in there, but let's go and set a baseline and go, alright if we get any new detections of secrets being entered, that's going to fail the build. But the way it is now, we're going to accept it. And then we can make pass after pass to actually take away some of those and reset the baseline.
 
00:21:10 OKKEN: Okay interesting.
 
00:21:12 KENNEDY: Yeah it's pretty.
 
00:21:13 OKKEN: Also there's some things--
 
00:21:13 KENNEDY: Pretty interesting right?
 
00:21:14 OKKEN: That look like they're secrets that should be detected but you've inspected the code and said no, this one's fine.
 
00:21:20 KENNEDY: Yeah exactly. And that baseline thing will let you say, I approve of these, but not anything else.
 
00:21:26 OKKEN: Yeah, cool.
 
00:21:27 KENNEDY: Which is pretty cool and they also show you how to set it up as a git commit hook. So as you know from the testing space, one of the challenges is, you can have awesome tests, but if no one runs them or worse, one or two people on the team are very passionate about them and a whole bunch of other people hate them and refuse to run them no matter how much you talk about it, the people who care about the tests suffer from the neglect that the people who explicitly ignore it right? Maybe that person enters some problem that'll fail a test but they don't run their test so they don't know. You get it, you try to run your test, and then you're hit with their problems as well right? So this git commit hook here basically means everyone on the team is going to be basically running this as part of a check-in.
 
00:22:11 OKKEN: The whole idea around git commit hooks is interesting. There's a lot of interesting things people are doing, like making sure that, like there's a, black has a git commit hook as part of it, or attached to it so people can make sure their code is still black before they check it in.
 
00:22:25 KENNEDY: Yeah that's the one I was thinkin' of as well. And it can even automatically reformat your code. To the group's format, as part of the check-in right.
 
00:22:33 OKKEN: I would be curious to know if there's any other, I'd like to have people let us know if there's other git commit hooks that we haven't talked about, that are helping their teams out. Maybe they'd help other people out too.
 
00:22:43 KENNEDY: Yeah it'd be fun to collect a list of use cases of what people are doing. Yeah, if you're doing something cool like git commit hook check out pythonbytes.fm/93 and put a comment at the bottom. That'll be in the show notes, and sort of blow the show notes for everyone to come see. Alright well, that's all of our items for this week. Brian you got anything personal you want to share? Before we're out of here?
 
00:23:04 OKKEN: No, I guess, pytest came out with a new version the other day, which kind of blew me away because I had submitted a very minor bug, but I had submitted a bug to the project. And I only submitted it like five days ago. And it's already now in a, fixed, and in a release. So that's amazing.
 
00:23:24 KENNEDY: That's a really good turnaround time. That's awesome.
 
00:23:25 OKKEN: Yeah, that's fun. Anything with you? Got any news?
 
00:23:29 KENNEDY: Nothing I'm ready to talk about. I'm working on a couple of new projects, one that I'm doing reStructuredText for. Couple of new courses are coming down the pipe, things like that but nothing ready to talk about just yet.
 
00:23:41 OKKEN: Alright.
 
00:23:42 KENNEDY: So how's that for a long winded no?
 
00:23:45 OKKEN: Well it was fun talkin' to ya'.
 
00:23:47 KENNEDY: Yeah, you as well. And thanks for everything and see you later.
 
00:23:50 OKKEN: Alright bye.
 
00:23:50 KENNEDY: Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes. That's pythonbytes as in b-y-t-e-s, and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pytonbytes.fm and send it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.
 
 <|endoftext|>
00:00:00 Hello and welcome to python bytes where we delivered by the news and headlines directly to your earbuds. This is episode 257. Recorded November 3 2021. Hates November cool. I'm Brian Aachen.

00:00:12 I'm Michael Kennedy.

00:00:14 I'm more or less a car buff.

00:00:15 Well welcome Morley. We haven't even really meant other than a few seconds ago. So can you tell us who you are?

00:00:22 Yeah, my name is moralistic carbo. And I met Michael Kennedy a couple of weeks ago at a PI Bay event in San Francisco,

00:00:31 a fantastic 5am. And for people who cannot see it, they should go to pixabay.com. And just see the graphics is the conference outside at a food cart area. So awesome. So great to see you there.

00:00:41 Right. And so I help Grace law organize that event. She and I've been working over the past couple years. And it's it's it's fantastic community. And I've been in sub Cisco for the past three years. And I'm actually I work for the Defense Department. And I do I lead a software development team. And we work on optimizing software processes. And on the weekends, I'm a martial pilot. So I do fly and I do teach student pilots. So that's, you know, speaking who I am.

00:01:11 That's so awesome. That's cool.

00:01:14 Oh, my side jobs a professional pilot. Yeah. Including

00:01:17 jets, right. Yeah, I

00:01:19 did fly. A couple of corporate jets.

00:01:21 That sounds so fun. I think that's so neat. You know, it's good to get away from the keyboard and the offices, especially when with COVID happening in, everything's harder to get out around. Like, you really get away, you get up in the sky.

00:01:35 I do get away. And but you got to be careful, right? Because you go in across different ecosystem, right? So you got to make sure that you're well protected that you take in all the precautions that are required to not get sick, but it's an adventure. I do like to get around

00:01:53 a teddy election since you invited James Bond, I think I think we may have actually Yeah, how's it? Where do you park your Aston Martin? No, seriously, let's, let's kick this off. Brian was something also more like a you also were involved with Django stuff, right? In San Francisco?

00:02:07 Ah, yes. Just a little bit. By the way. First, I do want to say thank you very much, Michael. So many years ago, I was overseas and I was in Qatar at a time and I got started learning how to code. And Python was the language that was was was, at least from my perspective, you know, something I can use in my data science perspective. And working with you through talk Python to me was extremely helpful for me, learning how to code, just just being with a community. And I think that was extremely helpful. It's, it's gotten me, it's gotten me in different places, all because I learned and federal learn how to code and got involved with your podcast many years ago. So thank you

00:02:47 for that. That's amazing. Thank you so much. It really means a lot in, it's easy to forget, Brian, and I just sit here at our desk and chat about stuff. But it really helps connect people, especially if they're new, or they're coming from places where there's not a big community, they can drop into it, it helps people get more integrated, quicker. And I think

00:03:07 yeah, and it's just the way you guys talk, right? I mean, it's just you're talking to me, as opposed to talking to an audience or, you know, a group of large, you know, you know, proud or something like that. So, you know, I'm listening to a podcast, and I'm going, this is relatable, and I can actually go out and in and do a little bit more research in a package on a topic that you guys are talking about. It's really good. This

00:03:30 fantastic speaking packages.

00:03:32 Let's talk about Django.

00:03:33 Yeah, let's let's start with Django here. So I don't do that much Django. Do more on the microframework side of things. But Django is super important. And when cool stuff happens there, I want to make sure to give it a shout out. So we're Django for I mean, a beta, but still Django for morlais. Have you been tracking this? You excited about this?

00:03:53 I am tracking it. I'm excited about it. Yeah, absolutely. Yeah. Yeah. Super cool.

00:03:57 So Django 4.0. Beta one was released. I feel like it was Django one for a really long time. And then Django two and then you know, you know, blow the doors off, go 3456. Right, we're gonna be at Django. 20 cent enough, right. But there's really good news. The beta one, zero means feature freeze bug fixes, only type of thing is out. And if you're interested in this, you can try it out. Now. notable changes here for what's coming on. First of all, it's only compatible with python three, eight and beyond, which is pretty fantastic. And if you want older support as an all the way back to three, six, you got to go back to Django three, series, three, two. So I think that's pretty interesting as well, the rapid adoption of new Python, right? This is like two years of Python and not more. So things that are new. There's stuff about time zones, which I'm not going to bore you with. But database stuff is cool, right? One of the things that I think Django is really renowned for is its web front end, plus database integration, right? Wouldn't You say somewhere? Oh, yes, absolutely, yeah. Yeah, I think it's the not just the well, you have an arm that's built in. But you've got the admin sections that know about the models and all kinds of stuff. We're actually going to come back to that as well, later in this episode. But one of the new things is functional, unique constraints. So like, I can only insert this record, if there's not already one that matches, say, the email address for a user. So now you can do is you can create functionally unique constraints with expressions and database functions. So for example, you could have an index, which is a unique constraint where you have the lowercase of the first name, the lowercase of the second name, the sending, I guess, for the index, but that doesn't really matter for the constraint. And then you can give it a name like first name, last name must be unique constraint. So that's pretty awesome. Right? You can say, I can't have two users with the same name. I'm not sure how practical that is. But you know, as an example, that makes good sense. Yeah, poor and poor Joe Smith, or Michael Kennedy, for that matter, like, probably getting enough make it in after a couple 100,000 users. Let's see they have the script, password hasher. So you do not hopefully you're not storing raw passwords. Every time I see a website that says your password cannot be more than eight characters. I'm like that better not be a VAR char eight field. I don't know what you're doing. But I'm starting to get really worried because the size of the output of a hash is always the same size, regardless of the input. Anyway, so new password hash, or that's more secure and recommended over what was previously the default a PB k d, f two, right? It's however, not the default, because you have to now install open SSL 1.0 or above, which is not super high, but it's still not super new version. Alright, then Redis. There's now a dedicated built in Redis cache as the caching tier. So you can set up caching in Django and say, cache here. Now one of the options is Redis. Yes, you could do that previously. But now it's like a built in thing. So you don't have to do that outside of school. Yeah, that's cool. Right? That's very cool. Yeah. And then template based form rendering. So enhanced customization of forms, form sets, errors list and so on using the template engine. So pretty cool. Not a huge bunch of changes. But they all sound really nice.

00:07:18 Yeah, the support the support of which Python versions is pretty big. But I mean, come on people. It's an application, you can pick your whatever Python version you want.

00:07:26 So now that's right out there in the live stream, Alvaro. Hey, says, I guess that dropping versions helps to reduce the number of wheels to build and also to test right probably. So CI is probably faster, you can take advantage of some of the newer things, and just count on them being there, which is great. Yeah. So speaking of versions, Sam Morley. Hey, Sam, great to see you again. So getting my boss to agree to drop Python 3.4 was a task. That's it's been a while since three four is out. I actually remember I think where I was. I was out in Redlands, California, that came out which is pretty interesting. Anyway, I don't know why that came to my mind. This stuff exciting to you more ladies. Someone does more Django than probably Brian or me.

00:08:08 I know. It's very exciting to me just just being able to see just the iterations of Django is very, very helpful to the community. I started with Django three. So this is this few. The Russians have been very helpful. Especially Redis. Absolutely. Yeah,

00:08:22 the Redis is exciting. Yeah, for sure. Right? Well,

00:08:25 um, I have to apologize. I don't remember who pushed us this way. But somebody on Twitter said, Hey, you guys should maybe talk about pi once in a while, like just by itself, that P why the application. So pi or pi dot exe, it's a the Python launcher. This is been bundled with python three, three. So it's been there for a while. But I've kind of to be honest, I kind of ignored it because it's a Windows only thing. And I work in multiple. I do work on Windows, but I also work in Mac and Linux and multiple environments. So I really don't want to change my workflow just for one. So but the idea is, is that you just type pi and it picks the latest version that you have installed on your system. It's kind of neat, but I don't didn't really get the get the feel for it. But then. But then Brett cannon wrote this thing called PI launcher. That is the same thing. But it works on Mac and it works on Linux. And it works on a whole bunch of other stuff like Arch Linux, and really anything that Russ can run on I think it works on which is like almost everything. So this is pretty this pretty neat. But why is it neat? So I'm like Still, why did Brett spend time making this work? And so I started changing my workflow for this. And I kind of say it's kind of life changing. The big thing is I don't have to care where pythons installed anymore. So I have this set up on my on my Mac. I've got it set up on I included it in the install on Windows. And then you just say, pi. Like for instance, you can say pi dash dash list. And you get like all of the sets, I don't have the example here, but you get all of the versions listed out. And it lists it tells you where they are to, but you don't really have to care. And in the pie launcher version on Linux or Mac, it shows the paths right away. On the Windows version, you have to say list paths, but it's still pretty easy if you want to know where they are. But basically, you don't have to care where things are anymore. So and I also don't have to care where they are in the path, like in my path variable. So the Python version I want, is it the first one, the second one did did somebody did I install something and mess it up, like if i pi install Python 310. But I also want to test on three, six, so I installed three, six later, where does that show up in the path, I don't have to care anymore. Because my workflow is two is mostly around virtual environments. So I say, like Python dash, M, V, and V. And I create a virtual environment. And I create it with the most recent Python version, no matter where they are in the path where they're located. And then if I want to test like, three, eight, something on three, eight or three, nine, I can either I can just type pi, Dash 3.8, or 3.9. And then it just automatically runs that version. So I can run a script in python three, eight, easily like that, or I can run it with, I can create a virtual environment, a three, eight virtual environment really easily. And then, then I still basically I don't have to care where things are installed anymore. And I love that. So yeah,

00:11:37 the other thing that I really like, sorry, if I missed you hearing you say this is once you create the virtual environment, subsequent calls to pi will use that environment long as you're either in that directory or in a subdirectory ever under it. So you don't have to activate the virtual environment, like long as traversing up the hierarchy hits a dot v, v and v directories. Okay, that's the that's the most appropriate Python.

00:12:03 Does it work though?

00:12:04 That's what it says like see the code sample right there. Look right underneath the, what's the next paragraph, right? It says subsequent uses a PI will then use that virtual environment as long as it is the current or higher directory. No environment ACTIVATION REQUIRED.

00:12:16 That's pretty cool.

00:12:17 Yeah, that's very add.

00:12:19 It's so nice, because that way, you can set up your file system. You don't have to remember to activate it like certainly not common, but it is not also uncommon that I'm like pip install this. Oh, it went wrong place, you know.

00:12:34 Yeah. Configuration. It's extremely important. Right. So this is this is very good. Yeah. Very good.

00:12:39 Yeah. And Xerox machine. Hey, says what's the main difference from this to pi EMV? I think that that's one of them. Right? Pi NV you've got to do pi EMV run. You've got to like start the shell. And it's kind of fun. I think this one is sort of, it's more like Node packages or node modules like as long as they find something they're like, Okay, that's the project I'm in. Let's run.

00:13:00 Yeah, DPI, EMV does these shim things to change which which you can set up which one you find and I just that, that makes it weird to me. It's makes my my system have state that I have to remember.

00:13:14 I I've activated python three, seven. So now that's it stays that way. Yeah, totally change that. Right. So

00:13:19 anyway, this has changed my life for the better. And it's, it's great. So Thanks, Brett, then. And now. I use it on Windows too. So

00:13:28 fantastic. All right. Up next. Oh, I almost closed. Close what you're talking about more? Yeah, you're on the data science side of the world. Yeah. Now. So bring us some data science news.

00:13:39 Now this is good. Right. So this is this state of AI report. 2021. It's a pretty extensive report, it comes out every year, just surveying across the world, really just the trends on on data size. And so the very top there, it has the actual report. It's a it's a PowerPoint version. But in this report, it highlights just the the need for transformers being used not just for NLP, right, so forth, you know, looking at text, but it's also looking at audio, it's also looking at video and it's also looking at like, you know, protein transcription, for example. So it's transformers are going beyond what they were intended to be, which was just primarily just NLP.

00:14:25 Right? Yeah. Give us a quick definition of a transformer. This is yeah, like you say, out of the natural language processing, right of ML, right,

00:14:33 right. So it's a it's basically a sequence to sequence so it's taking text from say, English and converting it into an equivalent text into French or something else, right. So having a natural language processor transformer that can do that in a rather efficient basis, is the whole idea of transformer space. It's basically take in a in tokens or this sequence from one language than other language. And so what this is saying now is that it isn't just constrained to just NLP right. So now you can use it for looking at large datasets that are audio or large datasets that are, you know, imagery, and then converting that into something that's that you intended to do stick in those models, transfer learning, essentially taking the transfer learning from one model into another set of models, as essential, what is this talking? The idea here is that you're moving away from just an LP that you use any for computer vision assays on there, and even protein structure prediction. This is important to me, because I actually, Michael, I don't know if we're still early, I spent some time in Qatar and I was I was studying Arabic there, right? So I would spend like hours just just going through like transcription datasets and stuff. So now, you know, having a transformer that can actually do that faster and maybe more accurate than, and in the past I think is extremely helpful for somebody like, and the hugging phase transformer from a Python perspective, is an extremely popular package on GitHub. And most people it's got about 53,000 likes at this point. Oh, stars at this point.

00:16:17 Well, that's, that's comparable, the Django and flask level of pop? Yes,

00:16:21 yes. Yes, yes. And therefore in partnership with AWS. And so you know, you can spin up resources to enable a VST use Huggins face transformers. And again, don't transformers have models that you can use for transcription, you can use them for a vision, a computer vision, or even like it's saying here for protein structure predictions. Yeah,

00:16:43 cool. I'm very excited about what ml can do for medicine, and biology research, I think, you know, machine learning, and like recommendation engines and all sorts of stuff, have good sides and bad sides and all kinds of things. But on the medical side, it seems like just mostly good, right? If you can say, actually, we can cure this disease, because we've understand how to create something that will bind to this protein, because now we know its actual shape. Yeah, that's great.

00:17:09 That's, that's incredible, right? So predicting those shapes for fruits in the system. Before I studied chemistry, in college, and in a little bit of biochemistry, I was in college. And in knowing just structures for proteins is like, extremely important. But it takes a long time to model those. The structures right now you can do to pretty easily on our Asian transformers, get to the thing.

00:17:31 Now, there's probably less well known ways around more like physical chemistry as well, right, like trying to understand different kinds of batteries and things like that, potentially, you know, don't get all the press. Well,

00:17:41 I'm thinking that maybe we're not too terribly far away from universal translators, and you're in air pods. That would be cool.

00:17:48 Yes. That would be actually pretty amazing. I mean, we're pretty close with Google Translate. You can speak to it, and then show it to someone and their language, and then they can, I can think you can make it read back and like, you can really clumsily do it. But yeah, you're envisioning it's just like natural conversation, right? Yeah. Yeah.

00:18:05 and have it be in their voice too. Yeah. But that's

00:18:08 pretty cool.

00:18:10 Yeah, you gotta wait five seconds for to calculate a deep fake then you can start talking.

00:18:14 Well now but like, our our kids are gonna be like using these things. Probably. Yeah,

00:18:19 no, I think you're totally right. They're absolutely awesome. Yeah, good pick. They're morally Great. Before we thank our sponsor on just give a quick shout out to John Sheehan's comment here that Python launcher the PI thing the brain spoke about. Looks like a nice package and a better alternative to the PI alias I created on my Linux laptop. Oh, man, you and me both. I, my DS HRC is full of alias this alias that many of them started with P to do something with Python.

00:18:47 Yeah, I mean, I used to list like pipe like makeup aliases for PI three, eight by three, nine just to and then I couldn't remember if I had a.in it or not. Was it 3.83? Anyway?

00:18:58 Yeah, yeah. Cool. All right. Before we move on, though, I do want to tell you about our sponsor shortcut. Thank you shortcut formula clubhouse for sponsoring the show, check them out at shortcut, comm slash Python bytes. Or Brian, do you know what else that people can do? Now? What we've started adding chapters, Chapter images, Chapter links, so I guess you could even click the chapter link right here in your podcast player or in the podcast show notes. So that's pretty awesome. But however you get to them, you know, thank you to shortcut for sponsoring this episode. They've built simple project management tools that grow with your engineering team and don't get too complex but are not too simplistic. So some of the highlights include team based workflows so individual teams can use shortcuts, default workflows, or they can customize them organizational wide goals and roadmaps lead, like the overall organization define workflows and then tie these smaller team ones into the larger workflow and kind of get a big organization wide view VCs version control integration. So works with GitHub, GitLab and Bitbucket, and it can tie them pay your items in your project management back over into what's happening there. And you can even do that from the command line, which is cool as almost all web apps should have, but many don't. Shortcut has a bunch of keyboard so you can use their power bar and use hotkeys all over their webapp to just zoom around because like someone like Brian, who would rather be in vim mode and not take his hands off, the keyboard can cruise around this, he does iteration planning will automatically schedule how that should go along. If you don't want to customize it, so give it a try over at shortcut comm slash Python bytes, because you shouldn't have to manage your project management. So yeah, thank you shortcut for sponsoring the show. Now, let's go back to Django. And I'm going to tie this together. So morlais has a background in Django, Brian, you have clearly a bunch of testing. So let's talk about testing. Django models. Okay. Okay. Yeah, so one of the problems you might need to do in your test is you are going to create some data models. And then you want to do stuff with them, right, you want to pass them off to a function or whatever. And so that can be a bit of a hassle. So I want to tell you about model bakery, which are smart fixtures for better parenthese Django test. That's not quite there. But for better tests for Django code. So the idea is, it's like, Faker or mockery or something like that, but for Django, ORM models, and it specifically understands things like relationships, and whatnot. So pretty cool. You can come over here and do things like you've got your Django model defined as it does, right? Dariush models has fields, which are columns, like email fields, character fields, and so on. And then when you want to use it, you just go to the baker and say, make a, you know, in this case, it's like a shop, online, e commerce shop Tuesday, shop, purchase history is the namespace of the class. And then guess what, it'll populate it with customers and emails and all kinds of stuff. That's cool, right? Yeah, this is very cool. Yeah. And then you can also set up model to model relationships. So you can say, I want you to, when I create a purchase history, for example, it also has a products. So you can say make the model to model relationships for me and mock those out as well. So then, in your test, you can work with your purchase history object and say, dot products. And then you know, loop over them do count, whatever. It's like a collection of sub related models that were baked up for you. You can even go and say, prepare, when prepared something to bake. When, when you ask somebody gives you a product, I want you to create a product of five of these. And then as you make a purchase history, also use those five as the related object instead of guessing or randomizing or whatever. It's cool, right? That's very cool. Very cool. Yeah. So if you're out there writing tests for Jango, specifically, the relationships I think, is where this is pretty interesting. But it's kind of interesting all over, right, it'll, I suspect, it'll do things like create emails, if the model says, here's an email field and integers, if it says, here's an integer field and just take care of that for you. It's very

00:23:16 cool. So is it? Is it another, like a another fake system? Or is it using fake or something under the hood? You know?

00:23:24 Yeah, that is a good question. What kind of project? I guess I don't know. Like Alright, so let's go check out the requirements here. It's just Django. It has the only requirement is Django, Django. It doesn't use like, baker or anything like that. So I'm guessing it's its own thing.

00:23:44 Nice, isn't it? Yeah. Cool. That's very cool. Yeah.

00:23:48 Thanks. All right, Brian. You gotta cover this next one, for sure. What?

00:23:52 Yeah, I'll cover this one. Yeah, that's one of my goals.

00:23:56 So good comeback.

00:24:00 So Ned Batchelder is the maintainer for covers pi. Excellent tool. And he's, he's great person to have at the helm there. But he, he's says that he's got had requests for, like one of the things you can do with coverages, you can incorporate it in your, your testing tool, chain and CI and stuff to say, the coverage has to be at a certain level. So you can say, SB 100%, if you want to do that, where you can say, well, at least what is the current percentage, and we want to make sure that we don't drop it. So like, let's say you're at 75, you want to make sure that we don't drop below 75. But he's had requests for per file thresholds, which is an interesting idea. But instead of giving us per file thresholds, he's he's got like this proof proof of concept thing called goals.py. And it's just a snippet that you can download yourself and try it out. But it's a little tiny script, but it it uses the coverage data after the fact so cover just generates a report. And then you can do things on it. But this, what this goals thing does is it kind of acts like another stage. So you can, you can set up these in your pipeline to check for these. And if, and it'll have an exit code that indicates to your CI system that it failed. But, for instance, you can say, all of the, I want all my tests to be 100% covered, but my source code, maybe 85%, for those, and but like maybe the HTML part of it, I want to really want like, all the code that is dealing with HTML, that I want to make sure there's really tested. So I want 100% coverage there. But in general, if you can 90%. So he has an example set up to do just what I said, of that. So there's these glob groups that you can say, you know, the 85% for everything, that's a python file, except for the tests, and then have a

00:25:53 different stress status. And so the way you basically do is a CLI thing. And then you pass in, yeah, file patterns, like star.pi, or star HTML startup UI, or whatever. Right. And you can even do knots, which is interesting.

00:26:07 Yeah. And one of the things he's talking about is just he wants to, wants to have people try this and say, Is this kind of does this satisfy what you wanted? Or is there something else that's needed? Do we really need per file? I actually would hate to have per file? Because, yeah,

00:26:23 yeah, one quick way to like accomplish per file is just to put the file name as the pattern, right? I mean, so like, this is a superset of per file testing? Yeah, potentially.

00:26:34 But I believe that he's probably right that there's, and there's a link in here, just say, if you want to comment on this, go to the original feature request and do a comment. But there, it's probably right that like, it's not really a profile thing. It's that there's different sections of the system that you want to have. Yeah, no specifics. Or, like, for instance, with a knot, you could say, well, everything except for there's this one file that I know it's a problem, but we don't care about it, maybe exclude now,

00:27:00 I'll go over who wrote it quiet, nobody understands it, we're not touching it. To us about it, we have no intention of touching it. Or maybe it's

00:27:09 the splash screen, like, you know, some things throw up a splash image. And, you know, really, if that's wrong, who cares? sort of thing. But

00:27:17 anyway, cool.

00:27:18 Yeah, it's a good one, I find, and I like the generalization of it. Well, then that Alright, morlais. So there's a lot of stuff about economic news these days, especially d phi d phi m, and coin and

00:27:32 NF Ts. Right. So it's already out there.

00:27:36 Yeah. So my brother is an artist and worked for a long time doing just like insurance stuff and project management stuff and is now started getting into NF T stuff. Because finally put in his master's degree in art to us, which is fantastic. Yeah, it's a crazy world.

00:27:51 It's a crazy world, and just the thought about like, making digital assets, volume digital

00:27:58 scarcity, right, like,

00:28:00 digital, as you could call it. Right. Right. Right. And and over the past, I mean, I've been looking at this over the past six months or so. And I'm just curious, I'm just, you know, where does this go in terms of like, how can you use digital assets as scarcity, but you know, provide value eventually. So artists can actually kind of get paid now or, or, or, or make make use of their they are making that make it available out there and they get value from it. So a cerium dough is like one of those blockchains that pretty much I think about, I want to say 80 to 90% of all NF T's reside on if they're in blockchain, or if it's popular. Yeah. And so of course, the language there is solidity. But to interface with the blockchain. There's this library called Web three the poi, right. So instead of instead of using JavaScript, you can use with web three, WA to actually interface with Ethereum blockchain. So basically, you can write smart contracts there, but you can also get information from the blockchain itself or post information into the blockchain. So this is something I found in a mature walking into an athletic board I shared with the community.

00:29:14 Yeah, it's interesting. Yes. So there's a theorem.org/python. For Python tutorials. There's a quickstart. Right? So yeah, right. If

00:29:23 you were allowed, you can see what it takes to actually get it install and use it for some of the protocols that are required, though. It's actually pretty good. I've used it just a couple of times. I'm still playing around with it, but I think it's a instead of using something else, if you familiar with Python, this is a very comfortable transition if you're curious about blockchain or Aetherium.

00:29:44 Yeah, so you could build your own platforms and your own integrations, not just own a theorem coins,

00:29:50 right. So you can do the old swap contracts, right? We should just logic essentially, send ether or CB ether or or if it's NF T's again, how do you in face with a blockchain with cryptography. So, though, web 3.0 web 3.2 I think is extremely helpful. Oh,

00:30:09 yeah. Yeah. It's neat to see Python applied in some different places. Yeah.

00:30:13 Everywhere. Everywhere, right?

00:30:17 Yep. Cool. All right. Awesome. Yeah, that's a great find. Pretty cool. Yeah. Very cool. Brian, it's time for extras extra. What do you got for us? Would you line up for us here?

00:30:26 I actually don't have any extras today. No extra. There's

00:30:29 no extra extra extra read all about it. No. All right. I'm sure I got to cover here. As you might imagine, so I want to give people an update on McFly. I mentioned McFly. A little while ago, McFly. Sweet, it's allows you to install it. And it's kind of like reverse search of your shell commands be that bash, Z shell fish, whatever. But way better, right? You get like an emacs interface to your history. And you can delete it, you can edit your history. So if you miss type something and you want to save it, or you see like, oh, Jesus put the password in there, I want to get that out of my history file, you can do that, too. You just hit Ctrl RF you install it and it gives you this is awesome, interactive view. I just wanted to tell people that I've been playing with this and totally loving it like, now I've taken it first spin for a while. And I really, really dig it. I've even set up the fuzzy matching. So it doesn't have to exactly match what I've done in history, which is pretty cool. So I can now with some experience, give that a thumbs up. Nice. Nice, nice. Also a couple exciting things about Python web conference, if you're looking to speak somewhere, and you want that somewhere to be on the internet, you should check out Python web comm it's like a five day conference. It's one of the biggest virtual conferences going these days, I think. And it's interactive presentations or live presentations over the internet, and then chat and so on. So we've had Calvin, one of the organizers of it on before. And the the news is they've extended their call for papers out into November, November 15. So you got 12 more days, maybe 11 If I'm slow releasing this one. And also, I'm gonna be talking about flask and htm X over there, because I'm still psyched about that. So that's next year, early next year, but people can check that out. What else have I got forest Brian. So the new MacBook Pros like the super expensive macbook pros have come out. There's an interesting review. I'm not super thrilled with it. But over ours, they usually do a pretty good job. But I do want to read a fun quote from it. And they say rest assured if you didn't like the direction that Apple has been taken with the MacBook Pro for the last five years, this laptop feels like an explicit apology for all that the result is is the best lot best laptop money can buy for many use cases, provided you have a lot of money. But one of the things that I've found pretty interesting is the power supply for that thing is 140 watts. Oh, wow, that's insane for a laptop that you carry around the power supply. So I came across this thing called inker Nano 265 Watt. And it's it's, if you put it up next to that's not it's, it's well hold on. It's barely bigger than the brick that used to charge an iPhone. I can American break not a UK break, which has got to be giant because the size of the plug. Right, but it's like super small and light. And yeah, it seems like it's not enough. But with my I got a MacBook Pro Max, and I've been using it and this 65 Watt thing will charge it just fine. So unless you're doing like machine learning, or video exporting, or something that completely nails it like this will charge like 25% and an hour. Even though it's supposed to take 140 Watts, you can give it this little tiny thing. So I haven't done enough to really give it 100% Like Absolutely, that's gonna work all the time. But my new plan is to travel with this tiny little thing and walk along US BC or Thunderbolt cable. Interesting, right?

00:33:50 That's really interesting. Yeah,

00:33:52 could you put two in there?

00:33:54 I don't think maybe it'll catch fire. If you do that. I'm not gonna do that. But like here you have the picture. Like it's like less than half the size of the the charger, which is pretty interesting. Yeah, that's a 60 watt charger right there, not the 140 Watt charger 40. Right. And finally, I want to say that if people who have an in one on one MacBook Pro, you can pretty much not have FOMO about this thing. Like as far as I can tell my Mac Mini and my much more expensive MacBook Pro are exactly the same speed. Oh, really? Okay, as you almost always except one thing I found is for outputting video, I found that I could re encode or I could encode the videos for a talk by them training more efficiently. I re encoded the entire library, which is like 20 220 230 hours in multiple formats. It took 14 days of compute time not I got around to do it in 14 days, like start it finished 14 days later. And it's actually three over three times faster with in one max. So So that's like three or four days. Yeah, it's only five days, which is still a long time. But it's way better than 3014 days. Yeah. So I think also this will have a really interesting knock on effect for ml more than Right, right. It's got like the onboard machine learning block, and it's got a 32 core GPU. I think there's a lot of stuff that's going to be coming along. That's pretty interesting there.

00:35:20 That's No, no, no, it's absolutely that you absolutely right, I have a friend who works for Google does the same thing with that I do. And he and I were talking, I have just the did the little version of MacBook Pro. And I wasn't going to wait for another one to come out. But it has a lot of the components and model capacity that I need to do my work instead of just putting yourself on like AWS, and now you can run them locally. And it's extremely powerful. So this is this is a good paper once and when

00:35:52 the new stuff is quite it's seriously impressive, as Sam has set out there. I totally agree. Fair presser. Yeah, more than anything else you want to throw out for people while you got the mic.

00:36:02 You know, I just want to say thanks to you. And Brian. Right. So again, I've been listening to you guys for a very long time. And I've come this far, partly because I've been listening to you guys just the encouragement I think you guys every day, every time I listen, you guys, you guys, you guys are talking to me not to a large group of audience, I think it's extremely helpful to see you guys be part of the community. And shout out to pi pi Bay in San Francisco. Those guys are real Korean, I call thanks for coming out there and talking. This was a great trip three weeks ago, as abuse goes. I was brilliant. So well. Thank you guys for the work that you guys do. And we'll continue to listen to you guys and be part of the community.

00:36:38 Yeah, thanks. Yeah, really appreciate that. Thank you. It's, a lot of times we put stuff out there, and there's not a lot of feedback. But you know, people are out there listening, then then you meet folks and talk to them you like actually, that it has an impact, which is really great.

00:36:50 You know, for me as a particularly impact, right? So like, like I took a journey and that it's I am at where I'm at today, because again, partly because of the work that you guys do. I'm listening to you guys doing a lot of research and following up on a lot of the topics that you guys have on the show. So it's it's taken me a long way. Because this gives I listen to you guys a lot.

00:37:09 Thank you so much. And I pray and we pray for a joke with a smile.

00:37:14 Well, well, I just wanted to comment that maybe the next version of Mac Book Pro might you might have to charge it in the laundry room, because that's the only one with a plug. That's strong.

00:37:26 Yeah, it's a 240 volt. Yeah, that's right. Yeah, it's but the thing is, it almost never runs at that, right. It'll go for like 1415 hours. It's only if you're doing like insane stuff. Also, you can plug in three, Thunderbolt USB, three things. And each one of those it will provide up to 15 watts of output from the laptop. Oh, wow. So I think it's also trying to pass Yeah, I think it's trying to pass through 45 watts. So it needs a charger that can account for how much does the Mac need plus 45 More watts, right? Because you plugged it into all these vulnerable thingies. Okay, anyway, I've been trying to think about why it really someone that so Hi, Chris May is gonna hook us up to like, a level three DC fast charger charge. I think I'm five minutes on the car. Alright, so this one comes to us from the variable x k CD. And it's talks to us about programming standards. How standards proliferate CAC chargers, very timely character encodings, instant messaging and so on. I'm talking I'm thinking network protocols. Remember, this is a follow on from the joke of what is soap. And rest and what the heck was wrong with soap? I know. GPRC is better than rest. Ah, the torture never ends. Okay, so this is a follow up from that. And here it is. A man or woman developer say you're talking says situation. There are 14 competing standards 14 Ridiculous. We need to develop a one universal standard that covers everyone's use cases. Yeah. Soon. situation. There are 15 competing standards. Yeah, yeah. Yeah.

00:39:12 The only thing going in the other direction is cellular standards. They seem to be a really blessing. So but Wi Fi is going crazy. Anyway, it's just one standard, but it comes out with a new version about every six months.

00:39:24 Good thing. They don't bake those into hardware and chips and stuff. Oh, wait.

00:39:30 That's a good thing they do. I'd be out of business if they

00:39:32 didn't fact like I think the testing never ends. Fantastic. Yeah.

00:39:36 Thanks, Michael. Thanks, Morley. This was a really fun episode. Yep.

00:39:39 Thank you very much. Thanks

00:39:40 for the invite. Appreciate it. And thanks, everybody on the chat and on on the stream for watching.

00:39:46 I'll Bye bye.

00:39:47 Thanks for listening to Python bytes. Follow the show on Twitter via at Python bytes. That's Python bytes as in BYD s get the full show notes over at Python bytes FM. If you have a news item we should cover just visit by them by sight FM and click submit in the nav bar. We're always on the lookout for sharing something cool. If you want to join us for the live recording, just visit the website and click Live stream to get notified of when our next episode goes live. That's usually happening at noon Pacific on Wednesdays over at YouTube. On behalf of myself and Brian Aachen, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

 <|endoftext|>
00:00:00 KENNEDY: Hello, and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 119, recorded live from PyCascades in Seattle. All right, it's great to be here, and this episode is brought to you by Datadog, tell you more about them later. Right now I have a bunch of special guests, none of whom are Brian Okken. More about that in a second, but we have Trey Hunner,
 
00:00:23 GUESTS: Hello.
 
00:00:25 KENNEDY: Dan Bader.
 
00:00:25 GUESTS: Hey, how's it going?
 
00:00:27 KENNEDY: Eric Chou.
 
00:00:27 GUESTS: Yo.
 
00:00:27 KENNEDY: All right, and all of us are here at the conference, and we thought, why not put something live together for you? Now, Brian Okken decided to punish his teeth by having a painful root canal, and couldn't join us in some sort of last minute emergency, and that's really unfortunate, 'cause he was looking forward to be here. So everybody, Brian we miss you.
 
00:00:44 GUESTS: We miss you, Brian!
 
00:00:46 KENNEDY: Right on, well, let's go ahead and kick it off. I'm going to do the first thing here, and, have you guys heard of this thing called Dropbox?
 
00:00:53 GUESTS: Yeah, a little bit. They have something to do with Python.
 
00:00:55 KENNEDY: Anyway, obviously, Guido works at Dropbox, it's a huge Python center of the universe there. And what's really interesting is, they're finally migrating to Python 3, and using some of the tools that Guido has personally worked on, with mypy and static typing, and all of that. So that's our first item, and if you had to guess how many lines of code is the Dropbox code that you're working with, you know that little box in your menu bar, your task bar, that's also client-side Python, which is interesting already. But it's over a million lines of code. So they started way back in 2015, a little hack week side project to prove whether or not maybe they could do it. It turned out, it's going to be hard, is what basically they said, and officially it started the first half of 2017, and the real thing that helped them do this, which I think is interesting, is mypy. Have you guys heard of mypy?
 
00:01:51 GUESTS: Yup. Oh yeah.
 
00:01:52 KENNEDY: So mypy is, it takes the type annotations or type hints and verifies that this function says it takes one of these and you're giving it one of the same things, that sort of thing.
 
00:02:02 GUESTS: Did Guido actually, I don't think he started mypy.
 
00:02:05 KENNEDY: I don't think he started it, but he definitely works on it.
 
00:02:07 GUESTS: One of the original contributors, I think. Did he start it, was it started for Dropbox specifically? Or for the Dropbox codebase? Just curious.
 
00:02:15 KENNEDY: Yeah, I don't know either, but I know that it was an important thing he's working on.
 
00:02:18 GUESTS: I'm not sure, but I just want to, it seems like Dropbox has been migrating away from the public clouds for a while, and that they've been focusing on just getting things right. So this is probably one of those things where they think for the long term growth it's going to be better than relying on somebody else's infrastructure.
 
00:02:34 KENNEDY: Right, absolutely, it's very interesting they're stepping away from some of the cloud hosting that everyone else is running to the cloud, they're like, ah, well, we can make cloud. That's pretty interesting. So, let me throw this out for you all co-guests and audience members and listeners. One of the very first things they say in this article is, well, once we were armed with mypy, the first few steps we took was to port our custom fork of Python to 3.5.
 
00:02:58 GUESTS: What? That's big.
 
00:03:02 KENNEDY: Like, wait what? There's a, they don't run normal Python? What kind, they drop Python? What do they call it? It's pretty cool.
 
00:03:09 GUESTS: It's pretty cool, it cross-compiles to Perl, and then, it doesn't. Everyone does it.
 
00:03:14 KENNEDY: Yeah, so I'll just kind of wrap this up here, but basically, this article that we're covering goes through all the steps of Dropbox moving over. And I feel like, if people are going to take the Python 3 as modern Python, and other Python as legacy Python as a legitimate thing, the guy who created Python had better work at a place that uses Python 3, not Python 2.
 
00:03:34 GUESTS: For sure.
 
00:03:35 KENNEDY: So I'm super happy to see that's moving along. And also that Guido was a pretty big part of it. All right, so let's see what's up next here. Eric?
 
00:03:42 GUESTS: Basically, I want to talk about what I feel was underserved community in Python. I come from a network engineering background and been focusing on network automation, using Python and I think we've gotten to a point where we're big enough to be noticeable, like it's actually material for the amount of community. I mean, we have new terms, such as net dev ops, or NRE, not to be subtle differences from the site reliable engineering followed by, network reliable engineering. We have some some popular libraries from Netmiko, NAPALM, who's been on your show before, and I can't even pronounced that new library Nornir, I think? N-O-R-N-I-R, we'll have the link in the show notes. Yeah, there's a lot of free resources out there for people to practice on, for either a network engineer who wants to learn more about Python, or developers who want to learn more about network engineering. I think coming of age, I mean, hopefully one day we're going to have a subculture of Python, just like the data analysis community, for network engineers. So, that's, I want to bring to everybody's attention you could do it for fun, do it for profit, and, you know, it's a welcoming community.
 
00:04:49 KENNEDY: Yeah, and you linked to a bunch of resources in the show notes that people who are in to that can check out, and, yeah, Python's a mosaic and there's so many people doing different things and here's just another part of it, right?
 
00:04:58 GUESTS: Yeah absolutely, I mean I'm super excited about this 'cause I think, as you mentioned multiple times on your show, it's like, you get started early, or started easily but you don't hit that ceiling. I mean, I've been doing this for five years and I haven't found that ceiling yet it's adapted to me, so, Is that a sign of growth, that the Python community has seen? Where now, it makes sense to have an itch for network automation specifically? I think people are still trying to figure out, how this thing's going to go, which is with lots of changes presents more opportunities for people, and Python kind of just emerged in this de-facto and speaks to the versatility and the power of the language. I think we're in that phase, we're trying to figure it out, and we just kind have this trending versus, nobody has the right answer but, that means at the same time, that's where the opportunity lies. You know, you could figure it out, you could drive that direction, and I think the developer actually has a huge advantage that everything is virtualized, everything is abstracted away from the physical so, that's my thought at the moment, you can see I'm not very clear either.
 
00:05:59 KENNEDY: I think it's super interesting you pointed out how everything is abstracted, and sort of cloud programmable, it means like, Python has a better chance in a network space if it's not all hardware and boxes and stuff, right?
 
00:06:08 GUESTS: Yeah for sure, I think one of the challenges for network engineers such as myself going in to the cloud, is the fact that there's no longer broadcast domain, you know, your NIC is actually physically attached to you, so, things I would have took for granted that were fixed, is no longer true, so you get to have a network NAT gateway, that's just arbitrarily attached to your virtual subnet. Which, you used to, I think if you work in the traditional enterprise, the first thing you do when you get the new team is like, you subnet it out, you give it the IP address, you subnet, but, those are all virtualized nowadays, so, you still need to understand the basics, but that basic used to take years to master, now it's just a matter of reading a doc. So, yeah, hopefully, you guys come say hi if you see me at AnsibleFest, at Cisco DevNet Create, at some of the Juniper events, come say hi, let's talk, and, I think we could potentially make a great community out of it.
 
00:07:03 KENNEDY: Yeah, put Python on the wire?
 
00:07:05 GUESTS: Yeah, for sure! Buy you a Python beer! But it's funny, Python really is a mosaic. I didn't understand, well, I understood a lot of the terms you were using, but what they actually mean, I don't know. Because I don't need to know what they mean, in the space of Python that I am part of. This next thing I've got is kind of related to the fact that Python's a mosaic, it's part of the web side of the mosaic of Python, which gets, maybe more, reputation than it deserves in the sense that, there's a lot of folks using Python for the web, but it's not all you can use Python for, at all. I mean, data science is huge. But, if you have to process data, and it's not in a database, and you are someone who's familiar with Django, there's a thing called Alkali, that Kurt made, I can't remember Kurt's last name, Kurt's like, Kurt's in the room, and we actually, its, Kurt Neufeld! So it's funny being at conferences, you sometimes just meet the people who end up making the things that you're using. Alkali, I'm not using but it looks kind of fun, because I'm familiar with the Django ORM, and Alkali is meant to take structured data, maybe an RSS feed, maybe a CSV file, maybe JSON data, maybe some random homegrown thing that you've got, on your team or in your company, and allow you to use a Django ORM-like syntax to query it, and also to save it, maybe in some other format, even. So, it's as if you're working with a database, but you don't actually have a database behind the scenes, you've got some structured file. So it's, kind of does that all in memory, which is fun.
 
00:08:31 KENNEDY: Right, so maybe you're working with XML, and you don't want to learn XPath, or you don't want to write regular expressions against CSV files,
 
00:08:38 GUESTS: Who wants to learn XPath, man?
 
00:08:40 KENNEDY: Nobody!
 
00:08:41 GUESTS: Rhetorical question.
 
00:08:42 KENNEDY: Hey man, the '90s are calling, they want their API back!
 
00:08:46 GUESTS: Here's my style sheet, says nobody ever.
 
00:08:48 KENNEDY: Yes exactly, so, I think this is a cool project Kurt, I definitely like that you can point it at, even like, something like an input on an HTTP service, and turn that into effectively a Django database. And I've heard that there's a branch working on indexes, which will sort of complete the performance side of things.
 
00:09:06 GUESTS: Ooh, that would be really fun. Well there's pressure now. Yeah, no pressure, no pressure. It's going to be released tomorrow, I heard? I'm just kidding, it's not going to be released tomorrow. It's a long night for Eric. He's shaking his head. Long flight home, I don't know where from.
 
00:09:18 KENNEDY: Right, before we moved on to our next one, let me just tell you about our sponsor, which makes all of this happen, so. This episode is brought to you by Datadog, and, Datadog, they're really awesome. They let you track, the performance, and errors and requests not just within your Python app, but across all of your infrastructure, so if you're doing a Kubernetes thing, and you've got a Flask app and it's talking to Nginx, and it's talking to PostgreSQL, you can tie all the performance of that entire system together, not just profiling your Python code, which is pretty awesome. So, check them out at pythonbytes.fm/datadog, get a cool free t-shirt, you get to try it out, it's awesome. Okay so, the next item, that's Dan.
 
00:09:57 GUESTS: Oh, sweet, yeah, so, quick update here, the CMU, Carnegie Mellon University, launched an undergrad degree in artificial intelligence. And apparently that is the first AI degree offered by a US university, and when Mike told me about it, I was really surprised because I thought, well, you know, AI is kind of been a big buzzword for a while now, and why didn't anybody else come up with a degree before that? But I guess it always takes a little while to do that, and, I don't really know what goes in to that degree, or, how the curriculum really differs from, let's say like your average computer science degree, or a data science curriculum, but I just felt it was an interesting development.
 
00:10:38 KENNEDY: Yeah I mean,
 
00:10:38 GUESTS: I'm sure they've used a lot of Python,
 
00:10:38 KENNEDY: We've had computer science forever, well, first it was like Electrical Engineering but I'd work on computers on the software side, eventually I got a real degree like Computer Science, and then we had like Software Engineering, but now, I think this is a big landmark, like the first artificial intelligence, like a Bachelor of Artificial Intelligence, think of that, that's crazy! And one of the things the Dean said is you know, of course we'll do CS stuff, but we're also going to focus on things like computer vision, language processing, huge databases and how to help humans make better decisions, automatically, it's pretty cool.
 
00:11:10 GUESTS: So, I'm waiting for the day where, we have an AI, get a Bachelor's degree in AI. Just so we can call it a day, and we're done. Or an AI teaching the Bachelor's degree in AI? Yeah, even better, that would be so sweet.
 
00:11:24 KENNEDY: My professor is a jerk! It's written in Fortran.
 
00:11:29 GUESTS: Yeah, so, do they use Python at all? I'm guessing you're learning Python, it's got to, it must be, right?
 
00:11:34 KENNEDY: It's all Java, no, I don't know, it's got to be Python, right? Alright, so you all might know that maybe I've been on a rant about async and await, and asynchronous programming lately, and the next one, have you also heard that I've talked about GUIs? I've mentioned this twice, I think, that Python should have better GUIs? Well this next one is kind of like, these things come together, which is awesome. So, Florian sent this over to me and it's PySide2, and Qt for Python, the Qt framework, that has an event loop, you know, a button gets clicked or a timer runs, or something like that. Well somebody built some layer that you can plug that in to async and await. So you can have async def button_click_handler(), that integrates with your other async operations happening on your GUI there, it's pretty awesome. There's some examples on how you do it, it's super simple, I linked to one about, downloading some stuff and whatnot, so. If you're doing anything with Qt, and you do anything with async, then check this out, that's really a nice one.
 
00:12:33 GUESTS: So that one, usually I know, I haven't done Qt in a while but GTK uses kind of an object-oriented, event loop there, right? Where it's classes, so it's taking a class based syntax, and allowing you to use the new asyncio syntax right?
 
00:12:45 KENNEDY: I think it's mixing the GUI event loop, and the asyncio event loop, together. Because otherwise I think they would run independently. I think you basically can't have those run on the same thread, or something to that effect, right? The async event loop would block the GUI loop or something to that effect.
 
00:13:01 GUESTS: Cool, alright, so the next item we've got on the list here. Yeah guys, we're at Python 3.7 now, 3.8 is coming out pretty soon, so we're kind of running out of minor number space, guess we can always create more, but whatever, it's a good intro. People have started thinking about what's going to happen with Python 4.0? Like, what would be some cool features that we would really want to see? And so, our good buddy Anthony Shaw wrote, a really interesting blog post about four things he wants to see in Python 4.0. And, it's a pretty short read, but there's some interesting ideas in here so we're just going to go over those points here. Number one is he would love to see just-in-time compilation as a first class feature. Right now, you've got some alternative Python interpreters, like the Piston project, or PyPI, I guess is the most well known. That actually feature just-in-time compilation and it could bring a huge speed-up compared to the plain, bytecode interpreter setup that CPython uses. So I guess the idea would be, is there some way to bring this into core Python? And apparently there is, and we already have this in some way, or at least we have the infrastructure to be able to plug in something like that. That one would be really big, because I know there are some companies that, the reason they're able to use Python for what they do, is PyPI. The fact that it really speeds up with that just-in-time compilation. Yeah, I think it's a big one, right? Like, performance, I think the more people use Python, the more relevant the whole performance story becomes for people, because then it's like, it has a huge impact if you have a small improvement.
 
00:14:30 KENNEDY: Yeah absolutely, and there's tons of attempts to solve this problem, there's Rust Python, and there's Grumpy, and there's, all these different attempts on solving it, and PyPI, like Trey said, is really awesome, but it has this limitation where, when it, kind of, when it gets to the C interop stuff, it can slow down, or it doesn't necessarily work with all of them so it, kind of falls back, then. With Pyjion and the work that Brett Cannon and those guys did, it's really awesome because that's a plug-in to the normal CPython, so it wouldn't be like an alternative thing. So yeah, I would love to see this as well. It'd be great.
 
00:15:00 GUESTS: Yeah, great idea. Alright, item number two is, on the wishlist is a stable .0, like a stable 4.0 release. Is that a lot to ask? I don't know, man, you tell me! I feel like this one, this is because of 3.0 history, right? There were lots of breaking changes, the initial was, kind of a rewrite of the language from my understanding, although, I'm not a core developer, I don't know. The central point of that, in the blog post here is that, well, you only have one chance to make a first impression really, and so, maybe Python 3, kind of bumbled its way into life, or whatever, I think now we're super happy that we have it, but, I don't actually really remember about the .0 release or the .1 release. I don't know if anyone does. Yeah, it's like, let's not talk about that let's just move on. No, I'm sure it was great. Alright, static type hinting, I think that's a really good idea too, you know, we've got mypy, but it's optional right now. And, it would be kind of interesting to see, that, integrated into CPython or the core language if this is really the path forward. And I'm not actually sure what the roadmap says there.
 
00:16:02 KENNEDY: Yeah, I don't know either, it's pretty interesting, I think static typing is super valuable, I think having it mean something in the language, that would change the zen on Python, wouldn't it? I mean, because it's so much about the duck typing, and you don't have to worry about it, it's like, whoa, compilation error, we expected, IRunnable of, whatever, right, multiple templated thing, and yeah, I don't know.
 
00:16:25 GUESTS: Really change the face of the language I think.
 
00:16:28 KENNEDY: Yeah, I like what he's recommending here, I'm not so sure about the required static type hinting, maybe a mode to run it where you can check it, I mean, we have data classes, which do some validation, in a sense.
 
00:16:38 GUESTS: You're wrong, Anthony. No like, we're We're just, some really interesting thoughts about this, because, you know, what should go into, because obviously it's a big release, right? If you're talking about Python 4.0, it'd better be like, a really really noticeable improvement, otherwise people are going to go, like, oh. Which would be nice too, I mean, If it's just a 4.0 release and everybody's kind of, there's no upgrade hump, like we had from 2 to 3, that's kind of nice too. Well he does mention the idea of static duck typing, putting an iterator in there, as opposed to a generator specific type of thing, but, I don't know how you would really make that a truly generic thing.
 
00:17:14 KENNEDY: Yeah, well, as long we don't end up with a Python 3 death clock. We'll be in a pretty good place.
 
00:17:20 GUESTS: Nice, okay, so, the next item we have here is a GPU story for multiprocessing. So I guess the idea is that a lot of workloads that people use Python for these days are actually running on GPUs, you know? A lot of the deep learning stuff's all running on GPUs these days, and so, wouldn't it be cool if Python 4.0, actually had some facilities to run stuff on the GPU, for, like, parallel computations, and had it built into the language, wouldn't that be sweet? It's an interesting idea, for sure.
 
00:17:47 KENNEDY: Maybe like another decorator, like an @GPU? On your method, and you just,
 
00:17:50 GUESTS: And we're done.
 
00:17:52 KENNEDY: Add some type hints.
 
00:17:52 GUESTS: Boom. Yeah, and the last item here on this really interesting list is, number five, is, more community contributions. And, I think Anthony is saying that he's already seeing, you know, a lot more involvement from the larger community and now that CPython is hosted on GitHub, and, there's less barriers for people to contribute I guess, to the code, and, just seeing more growth in that and seeing more people involved in the actual development of CPython would be pretty sweet. And I totally agree. What do you think, Eric? Well, a lot of these features, I haven't been coding long enough to have a strong opinion about, one way or the other, but, I think, to me, obviously optimizing for hardware and who will say no to that? But, to me, the 4.0 story would be big in terms of this would be the first major release without having a BDFL. And, how we, I guess, we will figure it out by then, how 3.8 came about and all the PEPs, but this would be a major release where it's determined, I guess, by the committee. So it would be kind of interesting and, just see how that transition's going and, hopefully for the long term, and, 5.0, 6.0. I feel like, even outside the core developing team, Python naturally has had more community involvement over the years, and it'd be nice to see that with the 4.0, because even this podcast, you know, you mentioned __pypackages__ recently, and that's something that, that's not a PEP that's actually ready. That's something that it may or may not make it into Python, that's a discussion that normally happens, not behind closed doors, but in an open space that no one looks in, which is the core developer mailing list. Whereas it's on a podcast now.
 
00:19:25 KENNEDY: Some random people in Portland dug it up and talked about it on the Internet.
 
00:19:29 GUESTS: Getting all the dirt on your Python.
 
00:19:30 KENNEDY: Yeah so, that's it for all of our main items, just a couple of quick extra ones from me, one, I did an async webcast which is available, so if you want a one hour review of what async and await means, and why, I think now is the time for async in Python and you don't have to switch to Go, it's already awesome, like, just use it. So you can check that out, I'll link to that in the show notes. And then, if you happen to be somewhere near Tel Aviv or Israel at least, the first week of June, they're having PyCon Israel, which is pretty awesome, and call for proposals is open, just a couple days ago. So yeah, those are my extra items, any of you guys, got anything else?
 
00:20:06 GUESTS: Yeah, quick announcement, we're working on a new book for Real Python and we're going to release through Real Python, it's called the Python Basics Book. It's like a beginners' book for people who want to get into Python in the first place, and, Mike actually wrote the foreword for it. And, it's great, but it also kind of duplicates what we had said in the intro, so that means we've got to rip out a bunch of stuff and then use his foreword as a new intro because it's so much better than what we had. Thank you, Mike.
 
00:20:30 KENNEDY: You're welcome.
 
00:20:31 GUESTS: And shameless plug for the book. Thanks for making more work. So the only thing I have to share is that, some things in my world I'm, I have a goal for myself to write more, because writing blog posts takes me so much time! And so that's something that I'm just announcing publicly here, only so that I will commit to it over the next quarter or so. And there's some, kind of, big things that folks on my mailing list know in the Python works that are going to be coming up soon.
 
00:20:57 KENNEDY: Yeah, sounds great, so, I guess we got to close this out with a joke, so, we got a whole list of jokes here, and I'll just grab two for you guys. And let you all, see what you think here. So, why did the angry function exceed its call stack size? It got into an argument with itself.
 
00:21:14 GUESTS: I don't know, so,
 
00:21:17 KENNEDY: Oh no, oh no, there's more. Well wait, why the developer ground their child? As in, you can't go out, you're in trouble, you stay home for the week? They weren't telling the truthy.
 
00:21:29 GUESTS: Mmmm...
 
00:21:29 KENNEDY: And with that, I think we're going to close it out. 'Cause that's, what are we going to do with that? Alright so, Trey, Dan, Eric, thank you all for being here. And everybody, thank you so much for coming. PyCascades was great, Brian we miss you, and, see you all later. Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes that's Python Bytes as in B-Y-T-E-S, and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way, we're always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.
 
 <|endoftext|>
00:00:00 KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode 160, recorded December 4th, 2019. I'm Michael Kennedy.
 
00:00:11 OKKEN: And I'm Brian Okken.
 
00:00:12 KENNEDY: And this episode is brought to you by DigitalOcean. Check them out at pythonbytes.fm/digitalocean. $50 credit for new users. Let's start with a topic that we've covered quite a bit, Brian, type hints. Or do you call them type annotations?
 
00:00:25 OKKEN: I usually call 'em type hints.
 
00:00:27 KENNEDY: Yeah, I go back and forth, and the article you're going to mention actually says you can call them both. But yeah, it's kind of funky that they don't have a definitive name. Maybe they do and I just don't have certainty around it.
 
00:00:37 OKKEN: Yeah, one of 'em's wrong, and whatever one I'm using is probably the wrong one. So we have covered it a lot, and there's a lot of tools that we've talked about, like Mypy and others. So hopefully we've convinced everybody that they should at least do a little bit of type hinting? If you're in that boat, then this article's perfect for you. Al Swaggart wrote an article called "Type Hints for Busy Python Programmers" and that's everybody, right? I mean...
 
00:01:01 KENNEDY: We're all busy.
 
00:01:01 OKKEN: We're all busy. I really like the article. It's kind of a, when I first went to it, I was a little shocked because there's a lot of words there, but it reads like a conversation. It's a conversational thing, as if it's a programmer talking to an expert. So that sort of tone of, I think I should do this, but what do I do? And so he just sort of walks through a whole bunch of questions with it. He covers using Mypy and typing as the two modules you need and how to use those, and there are other tools, but really, most people are using Mypy, and that's what, Al's saying that. I don't know if most people are using Mypy or some of the other tools. I don't think there's any way to gain statistics on that. But I think Mypy's a good way to start. And a reminder that using types doesn't affect runtime. It's, you have to run a tool like Mypy to get it to work. And so I don't think he covers this, but I think that people should hook a running Mypy into their tox system or into their continuous integration pipeline to make sure that these are met.
 
00:02:09 KENNEDY: Yeah, everything's hanging together, yeah.
 
00:02:10 OKKEN: Yeah, there isn't any compiler to catch you. So one of the things I liked about it is that it gets you started and it covers some of the basics, but there's, as I've started running it, started using type hints, the exact things that I've run into, Al covers. For instance, you got a function that takes an integer, but it also could be None, or the default is None or it's optional or something. How do you deal with that? There is stuff built in the type hint system for union, so you can say it's either an int or None, and there's optional parameters. And then a shout-out to stuff that, if you kind of get into it and you might, like, if you're passing callables or sequences around, yes, there are ways to type that. And so I think this is actually just a really great quick read and it'll get you started pretty fast.
 
00:02:59 KENNEDY: Yeah, I really like it. I love the conversational style. It seems super approachable and it's kind of from the skeptic's perspective. It seems a little bit like, oh, I want to do this, but what about, I don't know if I'm sure about this. Why can I do this? And yeah, it seems like a lot of fun. I'm definitely a fan of type hints these days not for the Mypy reasons. I understand that makes sense for very large projects. But for me, like, the editors are just so much better if you can just give them these little hints here and there. I'll give you an example. Like, for the database for Python Bytes, we're talking to MongoDB with Mongo Engine, and the way you specify it is much like SQLAlchemy, or even maybe more so like Django ORM where you say this column is a Mongo Engine column of type such-and-such. Well, the type editor, the editors think the type is a column, but it's not a column. It's probably a datetime, or it's a string, or it's a list, or it's anything but what they think it is. And so you can use type hints to say this column is an integer and it's equal to one of these column things.
 
00:04:01 OKKEN: Oh, okay.
 
00:04:02 KENNEDY: And that'll tell all the editors when I hit dot on this, don't tell me it's one of these column things. I don't want to know that. I want to know what its value is, 'cause that's what I program against when I run it. So there's just all these different angles that make it super valuable.
 
00:04:12 OKKEN: Oh, I'll have to take a look at how you're using that. That's pretty cool.
 
00:04:15 KENNEDY: Yeah, for sure. Speaking of cool, another thing that we have beaten to death but is very tough and leathery and has not died is the ability to create an application out of Python code, right?
 
00:04:24 OKKEN: Yes.
 
00:04:26 KENNEDY: Well, I stumbled across this thing. I don't believe it is new, but it actually is interesting on layers of interest here called auto-py-to-exe. auto-py-to-exe. Okay, so this is a GUI, and it's built with Eel. First of all, what? It's a GUI Python thing built with Eel. Remember Eel?
 
00:04:48 OKKEN: Kind of, remind me.
 
00:04:49 KENNEDY: Yeah, it lives in the ocean. Some of them are electrical. You shouldn't touch them. No, wait, hold on. It's a library for making Electron-like HTML and JavaScript GUI apps with Python.
 
00:04:58 OKKEN: Oh, okay, it says electric snake, got it.
 
00:05:02 KENNEDY: Yeah, Electron, elec, yeah, exactly. So it's very much like that. I think it's for kind of simplistic ones, but it certainly works for this app, which is pretty cool. So here's a Python app built in Eel. That's cool. And it's kind of meta in the sense that its job is to make other Python applications out of native Python code.
 
00:05:20 OKKEN: Okay, interesting.
 
00:05:20 KENNEDY: Okay, yeah? So what it does is basically, this is automation over top PyInstaller. And you might think, okay, well, I could just pass the command line arguments and just do that. But there's something really nice about having a GUI say here's the icon. I just put the icon into the app. And now here's the name I want for the title and such-and-such, and here are the additional binary files or additional resource files I want bundled and shipped with my application. We're using this JSON file and we're using this, I don't know, this image that we're going to embed somewhere. Just include those. And so there's all sorts of settings in this auto-py-to-exe where you can just pick all that stuff out and you don't really have to be an expert at all with PyInstaller, but you can build pretty nice stuff. Like, there's a checkbox. Do you want just a loose set of files or do you want it bundled into a single .exe that I can just give and it'll contain Python and the dependencies and all that.
 
00:06:11 OKKEN: Okay, this does sound neat, yeah.
 
00:06:13 KENNEDY: It's pretty neat, right? Yeah, and so really, people want to, if this sounds interesting to you and you want to find out, hey, is this cool, is this interesting, there's a three-minute YouTube video. You can just check that out.
 
00:06:24 OKKEN: Okay, cool.
 
00:06:25 KENNEDY: So I put the link to the three-minute video at the end. People can click on that and watch it, and then within three minutes, you'll decide whether or not this is useful for you. But some of the conversation I saw people say, yeah, I know it just automates PyInstaller, and that's cool, but there were things I couldn't get to work with PyInstaller, but doing it here, it worked fine. So I feel like there's a lot of value in this.
 
00:06:42 OKKEN: Yeah, nice.
 
00:06:42 KENNEDY: Yeah. Speaking of value, DigitalOcean, they are adding a lot of value to all of the hosted things of the world, including our stuff that's hosted there across all the different sites and whatever. I believe we're doing 15 terabytes of traffic a month through DigitalOcean.
 
00:06:55 OKKEN: Wow.
 
00:06:56 KENNEDY: That is not messing around. That's a lot. So been rock solid. The other thing that they have that they're just launching is the Kubernetes container, their own container registry for things like their Kubernetes service. So we've got Docker Hub and places that you can put your containers, but that's on the public internet and things like that. It'd be nice to have a private little one for your private code that you want to make sure doesn't somehow leak with a, you know, making it public or private on accident or whatever. So you can use their DigitalOcean Container Registry and have nice, private container definitions. It's pretty cool, among other things. So check them out at pythonbytes.fm/digitalocean. Like I said, $50 credit for new users to get started playing around with this. Speaking of playing around, I have never played with Sphinx.
 
00:07:41 OKKEN: Oh, you never have?
 
00:07:42 KENNEDY: I haven't, I've had no reason to do it, but it seems like something that's useful. Maybe I should learn about it.
 
00:07:46 OKKEN: Yeah, so one of the things, like, so what I've wanted to use Sphinx for, so Sphinx can be used for building up documentation. It makes a documentation website based on either rst or markdown. Or not, rst and...
 
00:07:59 KENNEDY: Restructured text.
 
00:08:00 OKKEN: Restructured text, yeah. Thanks a lot, programming world, for having two things that could be abbreviated rst. In the C++ land, there was some auto-documentation tools to where you could take, and I know other programming languages have this, too. Where you can take information about the structure of the program and automatically generate some web documentation about how to use it and what the parameters are for different functions and stuff like that. So you can do that with Sphinx, and that's the thing I've been wanting to do, and I've tried several times and failed, and it's usually because, probably on my part, but the tutorials get me part of the way and then they reference a bunch of documentation and stuff, and I don't want to become a Sphinx expert. I want, that's kind of the point of this. I want to be able to just point it at my code and go, "Go do it." And, like, for instance, pulling out, so what does a function do, what do the different tests do. I'd like that to be embedded in the docstring so that when I'm coding, I can make sure that that's correct and then that's just automatically generated. So what I'm highlighting today is an article called "How to Document Python Code with Sphinx." It's a short tutorial by Moshe Zadka? That's a cool name. And so walks through, it has a little example of a little module with a docstring and then the small example of how to set up your index.rst. And I like markdown better, but this is so short, I'd probably just use the restructured text version. Points out that you need a few extensions. You need autodoc, napoleon, and viewcode. And then it just gives you the conf.py file you need to make this work. And then how do you generate this stuff? Well, there's this long, weird command. It's not that weird, but I don't want to memorize it. So this tutorial also shows you how to set up a tox.ini file with this Sphinx built in, so you can just say tox and your docs get rebuilt. So I like this tutorial and I'm going to give it a shot.
 
00:09:59 KENNEDY: Yeah, it's a really cool thing, and automatically generating your documentation, not terrible at all.
 
00:10:04 OKKEN: Of course, it doesn't cover, like, okay, well, now that you've generated it, it's a bunch of web pages and stuff. Where do you put that? But for internal documentation within a team, you got your own way to do it, whether you're pushing it into a small web server or just leaving it with your code or whatever. So leave that to the user.
 
00:10:22 KENNEDY: Yeah, or put it on DigitalOcean. Or not, GitHub pages, right? That's one thing you can do. You can put it on Netlify. A lot of options for just hosting HTML.
 
00:10:30 OKKEN: Yeah, or throw it into a GitHub cluster, or a Kubernetes cluster. I don't know, maybe not.
 
00:10:37 KENNEDY: That's right. So something that's always amused me is the association of Python ecosystem and language with snakes. Because that's not what the origin, right? That's not what Python is named after. It's named after Monty Python. All these apps and stuff should have, like, medieval knight type of names, but they don't. So I'm going to tell you about one that is called Snek. Snick? Snake? S-N-E-K, Snek. I don't quite know the right accent to put on it to pull that off, but Shnek. It's pretty awesome. So it's a PowerShell module for integrating standard CPython, just Python code, and various packages with PowerShell. So if you're doing anything on Windows, any sort of automation or advanced shell stuff, you're probably using PowerShell, although the regular terminal's getting better, as well. And, you know, the story of Python on Windows has always had a little caveat, or maybe a little star, like, yeah, you always do this, except for on Windows, you type this other thing. And it's slowly getting better, right? Steve Dower's done a lot of work to improve that with the Python installer that comes off the Windows 10 store. It has python3 as a command and not just python, and so on. But here's one more thing that you can do to make working on Windows with Python better. If you do anything with PowerShell, you can write scripts now that have sections of those scripts or libraries for PowerShell written in Python, and it uses this library called Python for .NET, which is a new, modern way to share the entire vast library of .NET and all the objects you might put there with Python code. And similarly say, this Python thing returns some funky .NET type that could be converted so it looks normal to the rest of the PowerShell land, which is generally .NET stuff. So if you're doing stuff with PowerShell, check this out. It's pretty cool. The syntax is funky, but, you know, it's PowerShell syntax, so there you have it.
 
00:12:36 OKKEN: Yeah, well, okay. So I think that people can't be blamed for doing the snake thing because our logo is two snakes.
 
00:12:43 KENNEDY: I know. I think that that is absolutely true.
 
00:12:46 OKKEN: I think it should be maybe some cheese.
 
00:12:48 KENNEDY: Yeah, exactly. Or maybe a shield. I don't know, whatever. I don't mind having it be a snake. The snake is cool and there's the python snake. It's just funny that that's not actually the name.
 
00:12:57 OKKEN: No, a killer rabbit would be nice.
 
00:12:58 KENNEDY: Yes, a killer rabbit would be fantastic. If you just got an exception and that appeared as an emoji, that would be beautiful, yeah. Or maybe a failed test in PyTest, right? You could write a plugin that unleashes the killer rabbit and all that. Alright, we're going down a bit of a hole, so maybe get us out and talk, get us back to the databases.
 
00:13:17 OKKEN: Okay, so databases. Since in Python world, one of the things we like to do is use pandas because pandas makes dealing with data so much easier with dataframes and stuff. And also one of the things with databases that we can use is SQLAlchemy if it's a SQL-based database, and most of them are. So you can just take pandas and put it together with SQLAlchemy and put it together with your database and just slurp your entire data tables into pandas dataframes and then manipulate 'em there. So you're good to go, right?
 
00:13:50 KENNEDY: Right, unless you have, like, five gigs of data. Then you're good to swap and be very slow.
 
00:13:55 OKKEN: Yeah, or terabytes of data. That'd be bad.
 
00:13:56 KENNEDY: Yeah, very bad.
 
00:13:59 OKKEN: So all hope is not lost, because, I'm going to guess, Irina Truong wrote this article called "How to Use Pandas to Access Databases" and it's really great. One of the recommendations she uses is don't be afraid of the command line for SQL because you can play around with queries and look to see how big the shape of your data is to start with, which is a good thing. But then goes on to tips on how to put this together correctly, like, and I'm just going to read out the highlights, but there's examples of all these, so I think it's great to have a look. Don't grab a whole table. Limit to just the fields that you care about that you're going to actually use. Tables often have a lot of columns that you don't need, so don't grab everything. Limit the number of records. You can either use the limit field to say I only want to grab, like, a thousand elements or something. You can also combine that with just the number of fields. But also, you can also pick out, say, I know I'm going to already throw away all the rows that don't have a particular value in this one fied, so you can limit that in your query. One of the things you'll often run into with SQL databases, of course, is the need to use joins, and the quick recommendation there is let the database do that. Put it in your query. Don't do the join within pandas, because you can do it with pandas and SQLAlchemy together, but don't. It's going to be slower.
 
00:15:23 KENNEDY: Right, load it all in memory and have the datatable merge it. That seems probably not like the best way to do it.
 
00:15:29 OKKEN: Right.
 
00:15:30 KENNEDY: Databases are pretty good at joining stuff.
 
00:15:32 OKKEN: Yeah, and, I mean, if you find, of course, it didn't talk about this, but if you find you're doing that a lot, you can kind of restructure some of your queries within, I think you can build that in, make a join be faster? I don't know. I'm not a database person, so.
 
00:15:46 KENNEDY: You could put indexes. You could write a store procedure and call that. There's a couple options.
 
00:15:50 OKKEN: Okay, you ask Michael how to do it. Anyway, maybe not. So a lot of this is we're caring about memory, so how do you figure it out how much memory you're going to use? And I didn't know you could do this, but there's, she has a tip of using a query called memory_usage and then summing it. It says, I don't know what the field comes back, but you can do a query and grab the memory. But you do a small query, just 100 rows or something, and then take that, and then you can use that to estimate the total size when you're going to read out 1000 or 2000 or something. And then the last one I actually didn't quite follow, but I think I kind of followed. The tip is that the types get converted, integer types get converted to 64-bit types, I think, and you don't really need that for a lot of stuff, so there's a, I'm calling this out because it's definitely for the user, read this if you need it. But there's a little bit on using chunking and then combining that with specifying what pandas types to use so that you get smaller data footprints.
 
00:17:01 KENNEDY: Yeah, yeah. So, for example, maybe one of the columns in the dataframe, just the way it came back from the database is a 64-bit type integer, and you know everything would actually fit into an unsigned 16-bit integer. Well, that'll save you, it'll be a quarter of the size of the data if you make that conversion, right? So, got a million of 'em, a quarter of the size of a million is possibly meaningful.
 
00:17:24 OKKEN: Yeah, I mean, a lot of stuff that, like, for instance, a lot of stuff I'm, one of the tables I deal with has a number, numbers for the different, specifying which kind of result we're looking at, for instance, and they each have a number code. There's only six, so the number can be one through six. I don't need 64 bits to store that, so, yeah.
 
00:17:46 KENNEDY: For sure.
 
00:17:46 OKKEN: So that's good. Do you use pandas with SQLAlchemy in any of our, when you're doing it?
 
00:17:50 KENNEDY: Nah, not really. There's a few times I've been thinking I should probably try to do some BI, like graphing-type stuff, maybe about popularity of episodes or things like that. Figure out what they actually release our podcast on. But I haven't done anything like that, no.
 
00:18:06 OKKEN: Okay, but you do use SQLAlchemy, though, right?
 
00:18:08 KENNEDY: Some, but not for the main site, because that's MongoDB.
 
00:18:11 OKKEN: Oh, right, yeah.
 
00:18:14 KENNEDY: But I'm using something, I'm using Mongo Engine, which is super equivalent. Yeah, yeah, yeah.
 
00:18:17 OKKEN: Nice.
 
00:18:17 KENNEDY: Cool. Yeah, I suspect there's probably some interesting MongoDB integration with pandas that I just don't know about, but I don't know any equivalent there. Well, this next one I'm going to cover is very similar to what you talked about. It talks about how do I basically efficiently work with data from this one source, databases, and how do I not just select star from all the tables into pandas and work on it. Another problem you might have is you might have JSON data. JSON is sweet, but one thing JSON is not very obviously good at is streaming data, right? Because how do you know where the closing curly brace is? Maybe you've got some key and then it's got an array of stuff, and the closing bit of that array is not until maybe 500 megabytes down the file. That's a problem potentially, right? So if you load it with, if you just load up a, you know, import json and do a json.load, give it a file pointer, it's just going to hoover that all up and jam it into one giant dictionary and spit it out. But if it's huge, obviously what you want to do is iterate over it and process it item by item, yeah? I mean, that's what you would do for a regular file if you could take it line by line, but because it's this formatted thing, it's much harder. And something I ran across the last time, time before, we were talking about some other project, and it said, oh, this project uses ijson. I'm like, wait a minute, what is ijson? That's interesting. So ijson is an iterative JSON parser with the standard Python iterator interface. So what you can do is basically point it at a file stream, some search expression, kind of, in the JSON document, and then it will stream those back to you generator-style, one at a time.
 
00:20:02 OKKEN: That's so cool.
 
00:20:03 KENNEDY: Yeah, so there's a little example I put in the show notes. It says imagine we've got some object called earth in our JSON document, and it has a bunch of continents, and within each continent, it lists out, say, cities and states and so on. If that was huge, probably it's not, but if it were, you would want to iterate over it. So you just go to the ijson and go, give me the items from this file for earth.europe.item, and item is just a way to say stop there. And then what you do is you just say for thing in whatever came back from that load that you did, and you just iterate over it in a for in loop.
 
00:20:39 OKKEN: That's really neat. And it's doing, like, I was looking at the website. There's an example with grabbing it from a URL, because that's, you might be getting it from an API endpoint. So I'm guessing that it's not grabbing everything from the endpoint at first.
 
00:20:55 KENNEDY: It probably depends on how the endpoint is set up, or even maybe how the object that's querying it back. So I think they're using urllib or something like that there. If you would set that up to do streaming, then you pass the stream over to ijson, then it would probably stream it from the server and never keep it all in memory at once, anyway. That'd be cool.
 
00:21:13 OKKEN: Yeah, that'd be cool.
 
00:21:15 KENNEDY: Yeah, but there's probably several layers you got to set that up as.
 
00:21:17 OKKEN: I'm using generators and iterators more and more because this lazy, doing lazy work is awesome, and it speeds things up quite a bit sometimes.
 
00:21:26 KENNEDY: It's so awesome, and you basically no longer have a memory issue no matter data you have. You might still have a time issue, but you're not going to run out of memory, right? You're just going to blast through it one at a time instead of blasting through them all and then working on it.
 
00:21:38 OKKEN: Oh, nice, I got to check this out. Cool.
 
00:21:39 KENNEDY: Yeah, so people, if you have large JSON, bring out the ijson. Alright, well, that's it for all of our main items, Brian. I have, for some reason, it's like a crazy news week, and I actually decided to not throw a bunch of stuff in here, but to save it till next time, because I just don't want to overwhelm everyone. But yeah, I've got a bunch of stuff to talk about. How about you?
 
00:22:01 OKKEN: I am just kind of in a lull after Thanksgiving.
 
00:22:07 KENNEDY: Still in the turkey coma?
 
00:22:08 OKKEN: Turkey coma, yeah. My head's spinning. There's a lot of stuff coming up in the next couple months, and I'm pretty excited about.
 
00:22:15 KENNEDY: That's awesome. Yeah, I'm trying to juggle between getting over that holiday break, doing all the Black Friday stuff at Talk Python Training, and then getting ready for vacation. It's a lot. But in that little gap where I'm really still paying attention, there's a bunch of stuff that I ran across this week. So first of all, let's start with this. Django 3 was released.
 
00:22:32 OKKEN: Oh, sweet.
 
00:22:35 KENNEDY: Yeah, so that's pretty cool. And Django 3, there's a couple things that are important about it. One is it has official support for MariaDB, which is pretty cool. The other one is that it begins the journey to the async world.
 
00:22:49 OKKEN: Dun dun dun.
 
00:22:50 KENNEDY: Oh, we'll cross over to the ASGI world. Yeah, so things like async and await are now making their way to Django. I saw some messages from some of the developers there saying that this is not like the full story. This is the first steps. So we got a long ways to go, but it's first steps, right? It's great to see them moving that way. So, but you get super high scalability if you need it. Most people actually don't need it, but if you do, it's cool to say the answer is not, well, now you move to Go or Node. It's you put the async keyword in front of your view method and you're good again.
 
00:23:23 OKKEN: Yeah, I'm excited to watch this. And actually, the Django 3 release, I had dipped my toes in Django before, and I wanted to sort of wait until, I knew that 3 was coming, so I was sort of waiting for this to be official before I started up again, so now I got no excuse. I can get started.
 
00:23:38 KENNEDY: Yeah, that's awesome. Speaking of excuses running out, the death clock does toll, doesn't it? Pretty soon, the death clock is going to toll for Python 2.7, or 2 in general, and in particular 2.7. And as part of that, Python 2 will be removed from Homebrew.
 
00:23:56 OKKEN: Wow, that's big.
 
00:23:56 KENNEDY: Yeah, that's pretty, it's just another sign that, you know, you probably shouldn't be using this. It used to be installable. Homebrew install python@2, or two, or whatever the keyword was. Yeah, that doesn't work. Not yet, very soon that's going to stop working. So, that's cool. Big news, although I'm not really sure what spin to put on it, so I'll just give you the news, is Guido is stepping down from the steering council. And this came to us from Vincent POULAILLEAU.
 
00:24:21 OKKEN: Right, it's a thing. I don't really know how to spin it other than that.
 
00:24:25 KENNEDY: Well, yeah, I mean, basically, from what I got out of doing a little bit of reading is there were new elections to reelect people to the steering council, and Guido didn't put his name in the hat. And people said, "He didn't put his name in the hat. Here, let me put it in there for him." And then there was the conversation that followed that, you know, a lot of people are enjoying being part of the steering council. I've been on that part of Python for a long time, and it's just not fun for me right now, and I've earned some fun in the programming world. So I want to work on projects and not politics and all that kind of stuff, so I'm going to let someone else take it. And he also said, "The reason I'm comfortable doing this is it's in good hands. The people already, the other council members there are great, so you all don't need me. I'm still going to be around and working on stuff, "but I just don't want to be on the steering council." So anyway, thanks, Vincent, for sending that over. That's big news, but that's about all I got to say. There wasn't a whole lot written about it, really. GitHub is freezing open source for hundreds of thousands of years to preserve it for humanity. That's pretty awesome.
 
00:25:25 OKKEN: Yeah, so the GitHub archive program, I watched this video.
 
00:25:29 KENNEDY: It's well done, right? It's like a polished little video.
 
00:25:31 OKKEN: Yeah, so I don't know what to make of it other than it's a thing. They're going to put a whole bunch, all the, as of, like, they've already put a bunch of stuff in there, but I guess next spring, they're going to, or when, next summer or something, they're going to go up and take all open source code on GitHub and digitize it into these films, these weird...
 
00:25:54 KENNEDY: Microfiche code. Digital microfiche or something that'll last for very long.
 
00:25:58 OKKEN: Yeah, it's supposed to last 1000 years or something like that. And they're going to put it in, like, some cave in, on an island somewhere.
 
00:26:05 KENNEDY: Greenland? Iceland? One of those two, I can't remember.
 
00:26:07 OKKEN: Right, so why?
 
00:26:09 KENNEDY: To preserve it, I don't know. I'm pretty excited. I have over 100 public repos that are going to be up there, though. That's going to be awesome. I'm excited for them to get pulled and...
 
00:26:16 OKKEN: Yeah, if all of civilization collapses, we're counting on future civilizations to be able to find this cave and figure out some technology to read these microfiche things.
 
00:26:30 KENNEDY: Wow, those ancient creatures wrote in a very weird symbol form.
 
00:26:33 OKKEN: Yeah, okay, well, good luck, future selves.
 
00:26:37 KENNEDY: Yeah, yeah, good luck, future selves. Hopefully they got some hints. But anyway, that's pretty cool. And the last thing, I had talked about this Python for Decision Makers course that I'm working on, and basically, it's the high-level of why Python, when to use it, what it's good for, what it's not good for. I'm also going to do a live webcast that people can check out after the winter break. So mid-January, I'm doing just a free webcast. People can sign up and come ask questions and we can just share our thoughts on whether Python makes sense for whatever they're doing.
 
00:27:07 OKKEN: Awesome.
 
00:27:08 KENNEDY: So people can check that out.
 
00:27:09 OKKEN: Nice.
 
00:27:10 KENNEDY: Click the link and register for free.
 
00:27:11 OKKEN: Cool. That's a lot of stuff, man.
 
00:27:11 KENNEDY: It is. I think we should wrap it up with a joke, though.
 
00:27:14 OKKEN: Yeah, let's do that.
 
00:27:15 KENNEDY: As is our tradition now. Alright, you go first.
 
00:27:18 OKKEN: Okay, so. Okay, a web developer walks into a restaurant. He immediately leaves in disgust, as the restaurant is laid out in tables.
 
00:27:27 KENNEDY: Oh. Must've been a NoSQL web developer. Doesn't want that relational stuff in there. Yeah, that's pretty funny. That comes from a joke API that Ninjutsu sent over, so appreciate that. And this next one is, well, also from there, but I kind of like it so I'm going to cover it. So last time when we were talking about pint, you talked about using prefixes and suffixes for variable names, like, if I'm going to have something in meters, I'd use an _m potentially, or centimeters, _cm, whatever convention you use. So what is the best prefix for global variables?
 
00:27:59 OKKEN: I'm not sure, what? Maybe g?
 
00:28:00 KENNEDY: That would be, yeah, g. g_, something like that, if it's global. Or hash. Like, you shouldn't have global variables, so let's just comment those babies out.
 
00:28:11 OKKEN: Comment those out.
 
00:28:12 KENNEDY: Pretty sweet, yeah. Thanks, Ninjutsu, for sending those in. Those were funny. Alright, Brian, well, thanks, as always.
 
00:28:17 OKKEN: Thank you. Bye.
 
00:28:18 KENNEDY: Yeah, bye. Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes. That's Python Bytes as in B-Y-T-E-S. And get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.
 
 <|endoftext|>
Michael KENNEDY: Hello and welcome to Python Bytes, where we deliver news and headlines directly to your earbuds. This is Episode #48, recorded October 18th, 2017. I’m Michael Kennedy.
Brian OKKEN: And I’m Brian Okken.
KENNEDY: We’ve got a bunch of awesome stuff lined up for you. We’re both dialing in from Portland, Oregon. We’ve scoured the Internet and we’re going to start with some graphs. But before we do, let’s just say really quick, a thanks to DigitalOcean.
OKKEN: A big thanks to DigitalOcean.
KENNEDY: They totally blew S3 out of the water and they’ve got an awesome thing called Spaces. We’ll tell you more about it later. Right now I want to hear about cool graphs.
OKKEN: I came across this last week. A website called python-graph-gallery.com, the Python Graph Gallery, and it is cool. I was describing it as graph examples x (times) your head explodes with options. It’s got all the different types of graphs you want to do. There are all sorts of graphs that you see around the Internet and to help you visualize your data.
KENNEDY: You’ve got kind of the standard ones like histogram and stuff, or connected graphs or corelegrams. Yeah, there’s amazing stuff here. And they all come with iPython scripts, right? You click on them and get the details.
OKKEN: You dive down into exactly what you want to do and then you can go in and it shows you exactly how to make those plots in Matplotlib and, I think, in iPython, but that’s the same thing, right?
But also, they’ll explain how to do something and they’ll have alternates and reasons. And there’s some opinion there, some of the graphs they don’t really like and they’ll tell you why they don’t like them and what some good alternatives are.
KENNEDY: Yeah, another thing that’s cool about it, you go to one graphic, ‘Huh, I think I need a bar chart’ or something like that. They pull up the related ones. ‘Oh, this one is way cooler. I didn’t even know about it. Maybe I haven’t read the Tufte ‘Visualizing Information’ book. I don’t know all of the options.’ You can discover them. I like that.
OKKEN: Yeah. And it includes some of the extensions. I just dove into ‘Seeing How to Do a Vertical Histogram’ and it mentions that you need to have the C-Born library and use it for these.
KENNEDY: Looks pretty cool. And I guess there was some R ones out there. An R part that’s tied to it somehow as well if you do R. I’ve been thinking a lot about doing some stuff recently that would require some cool, interactive graphs, so this definitely catches my interest. So, check out the Python Graph Gallery. That’s cool.
Moving onto the next one… Brian, do you know what Kinesis streams are?
OKKEN: I don’t. I do have a Kinesis keyboard but I don’t think that’s related at all.
KENNEDY: Those keyboards are wild. I have the sculpt ergonomic mini thing from Microsoft. I used to have one of those.
But Kinesis streams are these things that AWS released. The idea is you can stream tons of real-time data through it and apply filters and transformations and get additional real-time insight. Under the description it will say things like, ‘You can continuously capture and store terabytes of data per hour from hundreds of thousands of sources such as web clickstreams, financial transactions, social media feeds, IT logs and location-tracking events.
This sounds like a really cool service. You can sign up for AWS. It looks like – at least the folks that sent in this recommendation say – it really requires Java right now for the API to do it, so they felt that that was wrong. So, the created this thing called pynesis for Python APIs talking to Kinesis streams. How about that?
OKKEN: That’s great.
KENNEDY: Yeah, so if you’re out there and you’ve got tons of data streaming in – especially if you’re already an AWS customer, you already have an account and you already work there, maybe your apps run there – then it’s really cool. This library does some cool stuff. It works for 2.7 and 3.6. It has a Django extension helper and it automatically detects shard changes. This thing can do sharding and it will adjust for that. It will create checkpoints and even has a dummy Kinesis implementation for testing. How about that?
OKKEN: That’s great. And this is an Open Source project, too so you can extend on it if you need to.
KENNEDY: Right on, yeah. It’s pretty new but check it out. Thanks for pynesis. I forgot the guy’s name who sent it in over, but thank you. It’s awesome.
So, one of the more mysterious things I think in Python, relative to other languages like C for example, is how memory works. I can see I call malloc or I call free. In Python I just do stuff and I never run out of memory. That’s kind of cool.
OKKEN: Yeah. It is cool, but it has some down sides. A little bit, I guess. Not really.
KENNEDY: At least some complexity, right?
OKKEN: Yeah, well it hides that complexity from the users. Especially when you have an application or a service or something that’s a long-running Python application, you kind of have to care a about what’s going on and make sure that you don’t continually grow in memory.
There’s an article that we’re going to link to called, “Things You Need to Know About Garbage Collection in Python” and it just came out recently. I sat down with a cup of coffee this morning and I really read it and tried to grok it. And I think it helped me a lot to understand.
There’s two levels of garbage collection. There’s the automatic stuff that. If an object goes out of scope and disappears then Python can reclaim that memory. And there’s something about, it treats mall objects under 512 bytes a little different to save time and that’s cool.
But there there's this other thing that detects looks and other dead memory because in reference counting you can have objects point to each other and you can get these loops of memory that just sit around forever. So, there’s this other system, the generational garbage collector (GC), that goes through and looks for all of these dead items and cleans them out. That runs periodically, but that one, you can control of you need to, if you really can’t handle it going off and doing its own thing. You can turn it off and call it yourself once in awhile if you need to.
KENNEDY: What’s really interesting is one of the benefits of C or C++ really, is total deterministic behavior. But the drawback is you’ve got to manage it manually. With reference counting, you get, also, totally deterministic behavior. You run it many times, it’s going to behave the same way exactly. So if you’re doing something that’s timing that really mattered, that’s cool. The reference counting GCs, or reference counting algorithm, has the problem of cycles. So, if I had a parent-child relationship, they’re always going to have at least one reference, because parent knows the child, child knows the parent. That thing’s never going to go to zero and will leak, so you have this secondary market sweep garbage collector-type thing that comes in. I think it’s really interesting how they’ve chosen this combination. The market sweep garbage collector is similar to .NET or Java, which that’s all they have over there, right?
OKKEN: I don’t know.
KENNEDY: Those two basically work in this generational garbage collector way, very similar – I don’t know if it’s exactly the same – but it’s similar for Java and .NET but that’s not the main way it works. But that’s actually pretty interesting.
OKKEN: The article here doesn’t go into too much depth, but deep enough to where you can understand it. I knew that you could mess around with stopping the garbage collector or the generational one and controlling that yourself, but I didn’t know how to do it. It’s really not that complicated. It’s a few lines of code is all.
KENNEDY: Yeah, there’s a couple of neat things about this article. One is, there are some very nice specifics, like did you know that objects that are equal to or smaller than 512 bytes have a different allocator and mechanism? Knowing that cutoff and those sorts of things, knowing when the GC kicks in and when to turn it off. There’s also a lot of references, like ‘If you don’t know more about this, read this section.’ I think this is a great place to start this exploration.
OKKEN: And at the end it talks about how to find these cycles that are bad. You kind of want to get those out of your code if you really want to care about this a lot. And it talks about how to go looking for that stuff and visualizing it so you can try to find these cycles in your code and get rid of them. It’s cool.
KENNEDY: Yeah. The other thing to consider when you’re thinking about this stuff, especially if it kicks in to the actual market sweep cycle, garbage collector-type thing, is algorithms and data structures. So, you can have a data structure that is like many objects that point at each other. Think of like linked list type of things. There’s tons of work to process those if you’ve got ginormous ones. Tons of work to process and determine if that’s garbage, right? You might be able to use a sparse array or something that uses almost no pointers but stores the same data and is more efficient. There’s a lot of interesting things to follow and explore here.
OKKEN: Yeah. This is mostly a concern with people who have long running Python applications. For short running things it’s not a problem. You don’t really have to care about it.
KENNEDY: Also, another final thought is you said you can turn off the garbage collector. I think, was it Instagram that turned off the garbage collector in their system? I feel like it was Instagram or Quora, one of these people. One of those companies turned off the garbage collector and they the we're able to get much better memory use on Linux across the processes and actually was better off letting the cycles leak.
OKKEN: In this article you can determine it yourself. You can have pre-determined times where you’re going to go out and let it run.
KENNEDY: Yep. Pretty interesting.
You know what else is interesting? Spaces.
OKKEN: (Laughs) Yes.
KENNEDY: Spaces is pretty awesome. This audio that you guys are listening to came over DigitalOcean’s Spaces. If you’re familiar with S3, this is like S3 but way better. So, very deterministic pricing, you pay $5 for a terabyte of outbound traffic, no inbound traffic, and beyond that it’s like 1/9th the price of bandwidth and traffic for S3. So if you’re using S3 now, definitely consider Spaces. They’re doing really cool stuff there, all the APIs, all the libraries and the tools that work in S3 also work in Spaces. They’ve made that sort of a compatibility layer for them.
I’ve been using it. I really, really like it and I definitely encourage you to check it out at do.co/python. Help support the show and, like I said, it’s pretty awesome.
Let’s talk about the web for a little bit. Many times we touched on asynchronous programming of one variety or another, threads, multiprocessing, asyncio type of things. But the truth is that on the web, almost all of the things, all the frameworks, are built in a way that cannot take advantage of that at all, or very rarely, because they’re built upon WSGI (Web Service Gateway Interface). And that basically has a single serial function call for each request and that’s that. There’s really not much of a way to expand or to change how web processing works. So, if you want to do some async and await on database calls or against web services, you can do that with requests, for example. That’s basically not going to have any effects. There’s still going to be blocking somewhere along in this WSGI requests. There’s no way for the server to take advantage of that. Some of the servers use threads like Micro WSGI but it’s not nearly the same level of benefit.
So there’s this article – or series, I guess – to come out here called, “WSGI is Not Enough Anymore.” I’m referencing part 1 and part 2. Part 1 really lays out the problem. Basically, there are 2 problems. One is concurrency, which I just described. The other problem is that HTTP isn’t the only protocol anymore. So, things like web sockets and other multi/bi-directional communication, binary stuff is happening. That’s also supported by WSGI. This article and series explores how we solve this with event-driven programming and they’re not quite done, they’re still working on it. I thought it was a cool thing. So, the next session or next thing that's coming out it is talking about libraries to solve the concurrency problem in Python and then onwards to the he other things.
OKKEN: Wow, that’s very interesting.
KENNEDY: I can’t wait for the day when these things really unlock because we talk about things like async and await. They’re pretty but really hard to make practical use of. Once the web server requests themselves can participate in these async event loops, then it’s on. It just breaks open and all sorts of amazing stuff can happen.
OKKEN: I guess I didn’t realize these frameworks couldn’t take advantage of web sockets. Or can they with add-on libraries or something?
KENNEDY: Yeah. You’ve got to set up some kind of separate server. I can’t remember what it’s called, unfortunately, but it can send it over. Like, ‘We’re going to upgrade this to a socket so send it over to this separate process, separate server-type thing.’ It’s a lot of work to juggle these different protocols right now. It will be nice when that’s more seamless.
OKKEN: I’ll have to follow along with these, this is great.
KENNEDY: And for now, we can use things like queues even, for an asynchronous concurrency. Drop off a little job and pick it back up.
OKKEN: I was looking for a queue, a last in, first out (LIFO) queue. I needed that for a project I was working on. I just needed it as a data structure. I didn’t have different producers and consumers, I didn’t have one part of the program where I was collecting stuff and another part where I had to get it out, last in, first out.
So, I was looking around and there was an article from Dan Bader and it’s called, “Queues in Python.” I guess I’ve just forgotten about a lot of this stuff. It goes over lists using, ‘How to use queues in Python’ and ‘How to use a list,’ ‘How to use a queue library,’ there’s actually a built in library. And the collections.deque also is something you can use. The deck is a doubly-linked list. And it talks about pretty much how to use them.
It’s a pretty good article and it mentions that you can use all of these for last in, first out. I didn't quite know how to use those so I went ahead and explored a way to use these three for a last in, first out queue and threw it in the show notes.
KENNEDY: Yeah, that’s really cool and really simple. I think, knowing about data structures and especially knowing about the built-in ones is really valuable. I feel like we’ve been doing Python for a long time, but I still continue to constantly learn about these things.
OKKEN: It’s good to come back when you start using the data structures you’re using all the time and you need something else. Going ahead and looking what’s around is neat.
I was also curious about timing, so I went ahead and on a sample program and timed all these with some huge objects I was throwing in there to see if any of them were faster or slower. With small objects they’re all kind of about the same and with large objects it looks like the collections.deque is a tad bit faster for my use, but none of them are really out of the ballpark slower. To me, the deque has the best interface because you can iterate over it and it looks cleaner. But that’s my opinion.
KENNEDY: Yeah, that’s really cool. Thanks for pointing that out.
I want to close this out with something kind of meta on our podcast. I want to talk about a new podcast. A guy named Mark Weiss created a podcast called Using Reflection: A Podcast About Humans Engineering. So, he started out interviewing Jesse Davis from MongoDB and one of the main Python guys in the space. There’s a really cool interview about him and if you are thinking about looking at these notable people and how they’ve become leaders within their companies or within the industry and you want to explore that journey with them, this is a pretty cool podcast. I thought I’d give a shout out to it.
OKKEN: I listened to a couple episodes and I like his interview style. It’s very conversational and laid back. It’s cool.
KENNEDY: Yeah, it’s like you just kick back and grab a coffee with the two guys and you just don’t say anything because they can’t hear you. (Laughs) Or you can say something but they still won’t hear you.
OKKEN: (Laughs) Yeah.
KENNEDY: Check out Using Reflection, it’s a cool podcast.
So, I guess that’s it for our news this week, Brian. Anything else you want to share with the people?
OKKEN: I got nothing this week.
KENNEDY: No more book writing? You’re just hanging out at the zoo now, huh?
OKKEN: That was fun. If your idea of fun is trying to herd 6 eight year-olds around a zoo for day, then it was fun.
KENNEDY: Give me a tricky bug, I’ll take that instead. (Laughs)
So, last week I announced my free MongoDB course at freemongodbcourse.com and that thing has been going super well. Over 5,000 people have taken that course in a week. That’s pretty amazing.
OKKEN: I have to admit that I was doing your longer Mongo course and I thought I’d watch this first. I started it myself. I’m one of those sign-ups.
KENNEDY: Cool, you are like, I don’t know what that percent is. (Laughs) Cool. Very nice. People seem to be enjoying it so I’m glad that everyone could take advantage of it.
OKKEN: I’m glad you put that out there. It’s really cool. People should check it out.
KENNEDY: Thanks. Alright, well, I guess until next week, Brian.
OKKEN: Yeah, talk to you next week.
KENNEDY: Talk to you next week.
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes. Get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues. <|endoftext|>
Michael KENNEDY: Hello and welcome to Python Bytes, Python news and headlines delivered directly to your ear buds. Today is Wednesday April 12th, 2017 and this is Episode #21. I'm Michael Kennedy. 
Brian Okken: And I’m Brian Okken. 
KENNEDY: We're going to tell you about all the cool things that we found this week in the Python eco-space.
 
But before we get to that, Brian, let's say, ‘Thanks.’ 
OKKEN: Well. thank you, Michael. 
KENNEDY: Yes, you’re welcome. Thanks to Rollbar, actually. 
OKKEN: Oh, yeah, yeah, definitely. Thank you, Rollbar. 
KENNEDY: Yeah, thanks. Thank you, Rollbar. They’re sponsoring this episode again and if you want to check out Rollbar, get some special deals, it's Rollbar.com/pythonbytes. We'll talk more about them later.
Brian, let's talk about some profiling. 
OKKEN: Doug Helman, he's the guy that did the Python Module of the Week – I don’t even know when that started – for Python 2, and I can’t remember when he started the third one. I don't know if we've mentioned it on the show yet but it's a really good resource. It’s PyMOTW.com (Python Module of the Week). He goes through a lot of the standard library and just does a little page on how to use different bits of the standard library and this recently put up a profile and pstats. It talks about Profile and C Profile for basically just for if you have a piece of your code that you think might be slow and how to Profile that and figure it out.  
KENNEDY: Yeah, definitely. I think this is awesome. You know, Doug, way to go. Very, very cool and keep going with that. We’re going to be checking out, of course, as you roll out new ones. 
I definitely want to encourage people to think about profiling. I've been doing a lot of work recently on certain parts of my web app where performance is somewhat important and things have changed. For example, I switched out the database back end and depending on how that was working, it used to be fast but became slow in some situations. Maybe I needed to restructure the way my data was stored maybe I needed new indexes or whatever. Even just profiling the web application itself actually can tell you a lot about not just where your Python is slow but where the web services you're connected to are slow, or the databases you're talking to are slow, or you can see something like you made 600 requests to the database during this page load. You can really bet there is probably some sort of lazy loading problem going on right. So, sometimes just a cursory glance at profiling stats will tell you like, ‘Oh, I didn't realize I was doing that wrong’ and you quickly fix it. So, definitely check that out.
OKKEN: The built-in profile stuff in C Profile works great for a lot of this stuff I work on, but I'm not often working on web stuff. Are those the right tools for something like web applications or are there other things that you search for? 
KENNEDY: One of the things that can be challenging about profiling web apps is there's a lot of startup code that runs and that can be like computational. So, if you try to profile your apposite starts up it could be swamped with actual, just-getting-the-thing-going traffic. Then you hit a request for a page and it's small enough it doesn't show up, so maybe you got to hit it 100 times, or you know something to get it to happen. So, what I do – I don’t know about the other frameworks, pretty sure they must have something like this – but in pyramid, by default there's a little red box on the right side in the development mode and you can click on it. It will take you to – it’s called the Pyramid Debug Toolbar – it takes you to the back there and one of the options is to turn on profiling per page request. You just check a box and then request a page. It'll tell you how many milliseconds it took and if you click on it, it will give you the output from this just for that page. 
OKKEN: That’s pretty cool. 
KENNEDY: You don’t have to do anything. Yeah, it’s super cool. 
OKKEN: Alright, well, thanks.
KENNEDY: Yeah, sure. 
Speaking of the web, we have a new project coming out that I wanted to bring everyone's attention to. I don't know how old it is, it's like weeks, maybe months, I'm not sure; It's not very old. 
It’s by Tom Christie. You may know Tom Christie from the Django REST framework. He came up with something called API Star, and this is an alternate REST framework. So, Django REST framework has been around for like, five years. It's very popular and well-known, it’s highly used, but it's also very much wedded with the Python 2 prior-web world. It's from 5 years ago, and it's based on stuff that was sort of put in motion before then. If you want to explore some new and interesting ideas, you can't really do it and that's what Tom was saying. So, he actually came up with this thing called API Star and it has got some slick features that are really worth looking at. It’s really new, so I don't know if it's quite ready for primetime; I just honestly don't know, I'm not saying it's not. But the idea is, he calls it a smart web API framework designed specifically for Python 3. It’s super easy to get started. Just pip install apistar, apistar new – template minimal. You can either run it or run the test straight away.  
So, I thought you'd like that little API star space test. That's pretty cool. 
OKKEN: Yeah, and a nice interface, too. It looks really clean. 
KENNEDY: Yes. Here's where the magic comes in. It's all about the type annotations. So, in Python 3, you can say like, I could define a function called, ‘Show query parameters’ and I could have a thing called ‘query parameters’. If I wanted it to be of type, http.QueryParams, I would say :http type QueryParams.
That tells Python, not at run time but at design time or development time, ‘Hey, this thing supposed to be a query params instance’, right? 
OKKEN: Yeah. Okay, that’s cool.
KENNEDY: Okay, so check this out. If you put a parameter on that API method and you say it is one of those and it's available as part of the request, it will automatically come into your system regardless of what you call it and where you put it. It looks at the type, hence the type parameters; ‘So, the thing you're saying, this thing called query params? I have one of those in the request.’ Similarly, if you return something from there by default, your return dictionaries like all these web frameworks in Python do, but you can also use type annotation as to say, ‘No, this return is a response.’ And then return something else, actually using the type annotation to control how the processing of their quest is done. Similarly, you can put things in like your url, so like, /users/seven. Normally that would all just come in as a string, but in this API, you can say, like as a function on your rest method, you can say, ‘user_id:int’ and it will take that thing and convert it to an int, out of the url, and pass it in. So, there's all this really cool stuff around type annotations that I really love. And, not only that, it's faster than Sanic. So, very cool. Good job, Tom. 
OKKEN: Yeah. I know you said that already and I kind of went past me without me recognizing it, but the built-in testing with PyTest, yay! 
KENNEDY: It's awesome, right? 
OKKEN: Yeah, definitely cool. 
KENNEDY: Yes, it's a really new framework. Check it out. It's already got quite a few stars on GitHub. API Star. There's a link in the notes and some little example code as well. 
OKKEN: Alright. 
KENNEDY: But that's about fast web frameworks. Sometimes we don't care if things are fast, right? 
OKKEN: Yeah, so actually we we're kicking around the idea of talking about this last week and decided not to but we're putting it in now. It's an article called, “Yes, Python is Slow, and I Don't Care.” 
Actually, I never really noticed it being slow for what I have it for, but basically that's kind of the point of the article. Fast is great. Having Sanic and API Star be super-fast, of course that's wonderful. But there's a lot of Python uses for Python and for other programming, that the most expensive resource is not your CPU. Actually, it's very seldom your CPU anymore, so therefore you usually don't really have to care about the speed of Python and I'd have to agree. A big chunk of this article is, ‘You should be optimizing for your most expensive resource and that's your people.’ Your people are way more expensive than your computer time. 
KENNEDY: And so are bugs.
OKKEN: Yes, and definitely, so are bugs. I know that myself, we have, at work, we use Python for our testing and it's because we can write smaller test code. The time our tests run, is all in iO time. It's communicating with instruments, it's not sitting in our computer. So, I can have small, elegant tests that I can read well is way more important than how fast Python is.
KENNEDY: Yeah, you’re talking about testing devices and hardware. The same thing applies to the web. Usually waiting on either a database, a web service or a socket somewhere, and the timing usually doesn't matter, right?
OKKEN: Yeah. Well, of course you wanted to be fast but the slow part isn't the Python. 
Actually, I guess that ties in with the other articles we've had so far. Developing an API quickly and elegantly is going to eliminate mistakes better. If you can do that with less code, great. 
KENNEDY: Absolutely.  And if things are slow, there's always options, right? You could write it in C. You could write in Rust. You can write in Cython. You could take that little bit and do something. Or just change, if you start at the beginning, profile it and change your algorithm. It very well may be that, that makes a huge difference. 
OKKEN: Yeah, it might be you think it's Python, but like you said, it might be your database or your accessing some resource or something. Figure that out. 
Then, if it really is Python, which I think there are rare cases where it really is. But if it is there's options, with Cython, taking a look at Intel's offering, or Pypi or something.
KENNEDY:  Exactly, I just saw some stuff that Pypi is supposed to be getting quite a bit faster still. And of course, they got that big grant from Mozilla to make Python 3 work much better so, all sorts of goodness there. 
OKKEN: Definitely.
KENNEDY: Now before we get to the next item, let me tell you about Rollbar.
You guys probably heard me talk about it before, but I've been using Rollbar for a long time. The idea is, you basically put a few lines of code into your web application. If ever there is an error, it will automatically capture all the information that you need about it and ship that over to Rollbar and then send you a notification all sorts of different ways you can get notifications and it comes with all almost all the context you need to actually solve the problem. For example, it might have the stack trace and the local variables in the url, and all those sorts of things that you might not even have to debug your code. You can just look it and go, ‘Oh, dear. I need to check for this’ or make sure that's not done or whatever.  
So, if you want more reliable web apps just be sure to check out Rollbar.com/pythonbytes.
OKKEN: Wonderful. Thank you, Rollbar. We have Rollbar to thank for why Python Bytes website is always up. 
KENNEDY: That's right, absolutely. It's integrated in all the sites. It's beautiful. 
So, one of the things that, I kind of want to take it back to the basics for a minute, okay? One of the things that I think people many people know about but a lot of people don't, is hashing. When to use hashing, how to use hashing and things like that. 
So, there's a nice article called, “A Quick Introduction to Hashing” by Gerald Nash and this is specifically for Python developers. It has some nice examples of like, if I want to hash a string using say, sha256 or something like that for the hash, how do I do that? What does that look like? 
OKKEN: Can we back up a second? What is a hash? 
KENNEDY: Sure. So, a hash is a little bit like encryption, in that you can look at the hash and basically, it's obfuscated, right? You don't really know what it is. But unlike an encryption, it can't be reversed. It can be un-hashed. You might take a 10-megabyte set of data and hash that into 256 characters or something like that. The idea is, if you have the same input and you run the hash over and over again, you should get the same output. Even if it varies slightly, you'll get a totally different output not a little bit different but dramatically, like unrelated, sort of-type of thing. 
So, it’s used for verifying messages, verifying download files are not tampered with, but most importantly, it’s used for passwords. Storing raw passwords in a database, not the best. So, we typically hash them, but there's all sorts of other interesting uses you can use for hashing. In my websites, I have the static files, JavaScript, CSS images etc. basically, cached like, super-hard; they’re cached for a year, at least. I think maybe possibly longer. So, if you go to the site and you come back later, it's not going to go back and look again. What I do, the technique to make sure that nothing ever shows up stale on the site – you’d have to wait a year for it to come back together – is I put a little hash of the raw files at the end of the url of every bit of static content that I have. So, it caches it, but it caches it with the fingerprint of it embedded. If the file ever changes, it instantly generates a new file and it pulls it out. So, hashing is used for all sorts of good stuff. 
It's great little article and shows you guys how to do that. If you're not taking advantage of hashes, they’re super easy. Here's a nice way to see how to do it. 
OKKEN: Wonderful. 
This is a very fun article – I forgot to write this person's name – but there is an article called, “Wedding at Scale: How I used Twillio, Python and Google to Automate My Wedding.”
KENNEDY: I feel like I missed this opportunity when I got married. 
OKKEN: Yeah and this is just fun. Actually, the modern person's problem with like, how to invite people and I love this article. The nerd in me likes it. There's no way I would have had time to figure this out when I was trying to plan my wedding, but if you’ve got the time, it's great. He threw all the potential guests and their phone numbers into Google Spreadsheet and then used Python and a Python package called G Spread to access the Google Spreadsheets and pulled that out. With Python, he used Twilio and SMSd people an invitation to the wedding. And then not only that, left urls for people to get back to him; there's urls and there's also replies. He set up a Flask app to collect everything, of all the replies to that. And then he even goes on to sending out reminder texts and having people select which food option they wanted; it's pretty incredible this story. 
KENNEDY: Yeah, a real mashup of a of bunch of cool technologies. That's awesome.
OKKEN: Yeah, it’s cool.
KENNEDY: Nice. I have another fun one for us, for our last item here today. I have to be careful about how I speak about this device, because my understanding is speaking of it causes it to do things. So, let's call it the Amazon virtual assistant thing that sits on your desk, alright? 
OKKEN: Okay.
KENNEDY: There's a guy who created a framework for creating what are called skills on this assistant. You can teach it to do new things. The guy who wrote this article is Neil Stewart. What I thought was really interesting was, he was visiting a friend or something like that, and they had one of these assistants. He thought it was really cool, he’s like, ‘I'm ordering one.’ But he decided like, ‘I'm going to challenge myself to build a new skill for it before it even arrives.’ 
So, as developing for hardware that's a pretty interesting idea, to develop for it before it exists in your hands, right? 
OKKEN: Yeah, we do it all the time. 
KENNEDY: The thing that he came up with is something called VoiceOps. He has a bunch of AWS (Amazon Web Services) accounts and whatnot, and he can ask it things like, how’s status of AWS servers and what not. It will tell him how many running and stopped instances there are, what RDS (Amazon Relational Database Service) databases are on his account and things like that.
So, that's a pretty fun skill to add to this assistant. 
OKKEN: Yeah, I didn't know you could do that, add skills to it. That's pretty cool. 
KENNEDY: Yeah, and apparently, you can do it in Python, which is even cooler. He looked around and saw that there's a few things, but he wasn't really happy with it so he decided to create a new framework called Python, the name of the thing (Alexa) and it's also on GitHub. The article here that we have linked, this one actually has a bunch of cool examples on how to affectionate, he has a hello world type of thing. He also links to something called Echo Shim. 
Echo Shim allows you to create one of these skills, put it into AWS and on their lambda system on Python and then test it in the browser without even having hardware. 
OKKEN: Cool.
KENNEDY: Yeah. So, pretty fun projects if people are into that assistant thing and Python. Check it out. 
OKKEN: I will check it out. That’s neat.
KENNEDY: Do you have one of those things? Any of those, like a Google Home or any of those types of things? 
OKKEN: No. Actually, that whole concept of like letting some other company just listen to my house I don't like the idea.
KENNEDY: Yeah, I'm not there yet either. I'm not super crazy about privacy and what not. The location’s on my smart phone stuff, but that somehow like crosses a little bit of a line to me. I don't know. I'm sure I'll be over it someday. 
OKKEN: Plus, I don't trust my kids to not just order a bunch of stuff all the time just by talking to it. 
KENNEDY: Yeah, after what happened the first time I got a phone that had Siri on it, I know what the kids did to that thing. This is even more accessible to them, so I'm not sure I want that anywhere near my kids. (Laughs)  
So, that's it for the week. Brian, what you got going on with you personally? 
OKKEN: I had an interview with Casey Rosenthal from Netflix on chaos engineering that I finally got edited and out last week on testing code, so that's out there. 
KENNEDY: Like Chaos Monkey, Chaos Gorilla, all that kind of stuff they do at Netflix?
OKKEN: Yeah. Basically, we tried to talk about not just what they're doing there but the concept of taking steady state measurements and doing experiments that might change the study state on a system, as opposed to traditional testing methods. It's pretty interesting. 
KENNEDY: Nice. I’m definitely going to listen to that. That’s great. 
OKKEN: How about you? 
KENNEDY: So, I spent the weekend reworking a bunch of my web stuff around the training courses, training site and so on. I rebuilt a new player because I wanted to surface the closed captioning a little bit better for people, things like that. I did a bunch of JavaScript and whatnot. The other thing I did is, I added full text search to the whole site. So, you go there and you can search into the videos even, into the text of the videos, so it's beautiful. This is what I was actually thinking about when we were talking about profiling. When I first wrote this, I wrote what you might think of as naively, I wrote it and it's all backed by like a bunch of text data and MongoDB. It’s not using full text in Mongo, it’s using something else that I've done. But basically, the back end is Mongo and there's a bunch of data in there, like 10-megs/20-megs, I'm not sure exactly how much of text that I wanted to search. I ran and thought, ‘This would be nice and fast.’ It was like 600 milliseconds a page, which like is acceptable maybe for other people. For me this is not acceptable. I'm like, ‘No way. This is not going to stay. What is wrong with this?’ So, I spent a lot of time in the profiler and I’ve gotten it down to 47 milliseconds. 
OKKEN: Oh, okay, cool. 
KENNEDY: It's more than 10 times faster. That's like, 10.5 times faster by using the profile. It was just, you know, ‘This part is slow. How can I do this differently?’ If you want to see the fruits of that profiling, you can click the link at the bottom. 
OKKEN: Cool. Can we get that text search on Python Bytes? 
KENNEDY: Yes, absolutely. We're getting full text search on Python Bytes soon.  
I think we need it, though. We have a bunch of transcripts that we have interesting stuff in, we've got a pretty solid show notes for this podcast; I think we need a full text search. So, yeah, we'll be sure to announce it shortly. 
OKKEN: Okay, great. 
KENNEDY: I need one more weekend, I guess. 
OKKEN: I’m adding work to you, on air. Sorry about that. 
KENNEDY: That's all right. It's on the road map. 
Brian, thanks so much for finding these things and sharing with everyone. 
OKKEN: Thank you. 
KENNEDY: You bet. Catch you next time. 
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbyes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.  <|endoftext|>
Michael KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. It’s episode #68, record February 28,
2018. I’m Michael Kennedy.
Brian OKKEN: And I’m Brian Okken.
KENNEDY: And we have yet another bundle of amazing stuff to share with you. I’m super excited about the ones I’ve got. How about you Brian?
OKKEN: I’m really excited. I had to kick some out because there’s too many things to cover.
KENNEDY: I think I changed my list four times this week because I’m like, ‘Oh, this is a great list. Oh, no, this one’s more important. This one's even better.’ It’s awesome.
Before we get it, I just want to say thanks to DigitalOcean for sponsoring this episode. Check them out at do.co/Python. Right now, I want to hear about PyPI. There’s something wrong with it? What’s up here?
OKKEN: (Laughs) So, I’ve had this on the list for a long time, a project called “dumb-pypi.” It’s not really that dumb, though. So, you can have your own repository. There’s a bunch of different ways you can set up your own server so that you can serve your own packages. Like, if you’ve got a team or you’ve got proprietary code that you don’t want to share with other on normal PyPI, you can have your own. But, you have to have a server running. And a lot of the generation of the server code is tied to it, so there’s a Flask version and there’s various versions. This one is just a flat file creator, so this package, dumb-pypi, will take a directory full of wheels or zipped packages and create a directory that you can just stick on any server and have it be served up for an index. It doesn’t do any caching, it doesn’t go through to PyPI and grab things that it’s missing, so you have to manually do that yourself. But if we combine this with what we learned in Episode #24, that you can just do pip download easily and download your own files somewhere. This combined, I’m using this at work now to create a really simple PyPI server behind our firewall; I don’t have to give it permission to talk to the outside world, it’s just a bunch of files.
KENNEDY: It’s actually really cool. So, you could even put it up on Amazon S3 or somewhere like that, right?
OKKEN: Right, and actually there is an example… I think that is the example on the website. The package website, GitHub site, does have an S3 example and it’s super fast and slick. And it doesn’t do anything like updates or anything, you have to rebuild everything yourself, but you can set up a cron job or something to do some of this.
KENNEDY: Exactly. Just do it at night when nobody is around.
OKKEN: (Laughs) Yeah.
KENNEDY: Just update it daily. How often do these packages change, right?
OKKEN: But for instance, I’ve for all of our test code that we’re creating virtual environments and then pulling in test packages and different packages. That stuff, I don’t want to update it all the time. I want it to grab certain versions that I know are there, so something like this is perfect.
KENNEDY: It looks really cool. I think it needs a better name than dumb-pypi.
OKKEN: (Laughs) Yeah, it does.
KENNEDY: ‘Clever but doesn’t do anything PyPI,’ how about that? (Laughs)
OKKEN: ‘No server server.’
KENNEDY: ‘Server-less PyPI.’ How about this? C’mon.
Awesome, okay. So, the next thing I want to talk about is something ‘for humans’ and if I said it was ‘for humans,’ who would that mean?
OKKEN: Kenneth?
KENNEDY: That’s right, Kenneth Reitz. So, he’s got all of his ‘things for humans.’ He’s got “Maya:Datetimes for Humans.” “Records: SQL for Humans.” Obviously, Requests. So, he’s out with a new ‘human’ thing, and this time for web-scraping. So, he created this thing called, “Requests-HTML: HTML PArsing for Humans.” When I looked at this I thought, ‘Oh, is this maybe a replacement for Beautiful Soup?’ Or something like that, some kind of extension to Requests. But in fact, it actually depends upon Beautiful Soup. It’s a library that puts a different API on top of combining Requests plus Beautiful Soup, plus something called PyQuery, which lets you run jQuery-style CSS-selectors. It does a bunch of cool stuff. Some of the notable features are it has full JavaScript support, which I’m taking to mean that it will parse and execute the JavaScript necessary. So, if I hit an angularJS page, instead of just seeing curly brackets everywhere, there’s data that would have gone in there, which is a big deal with web scraping. If you just use straight-up Requests plus Beautiful Soup, you just get the markup where those bits would execute when it does, right?
OKKEN: Yeah.
KENNEDY: The CSS-selectors, XPath Selectors, Mocked user-agents – so it pretends to be real browsers so people don’t know that you’re trying to scrape their sites, it’s kind of interesting – it used connection pooling and cookie persistence. So, you can login and go do a bunch of stuff at a site and you can do it without reconnecting all the time. So, that’s pretty cool.
OKKEN: Yeah. It keeps a session open. That’s what people often did anyway is Requests plus Beautiful Soup and tying it in with one API is great. Actually, I like the idea anyway of somebody saying, ‘Hey, these tools are great but I wish the API was different.’ So, just write another package that uses others and write a better API then.
KENNEDY: Yeah, it’s a little like Flask, what Flask did, but for Requests and parsing.
OKKEN: Kenneth has a good eye for APIs.
KENNEDY: That’s for sure. People definitely seem to love his APIs.
So, I’ll leave you with the final tagline from their website.
“The Requests experience you know and love, with magical parsing abilities.”
OKKEN: (Laughs) That’s nice.
KENNEDY: (Laughs) Yeah, not bad, right?
Cool. So, what’s up with this phoney number thing? Is that some prank calls to make? (Laughs)
OKKEN: This was awesome. So, Twilio does their Twilio blog, where people can write for them. I think we’ve talked about it before. They do a pretty cool program where they give you an editor even, to help you out with it. But this article is basically a Twilio project. This is a phone number proxy. The idea is, you imagine situation like, for instance, you’ve got a meet-up or some temporary event and you want people to be able to text you because you’re not going to be around your computer all the time. You want people to be able to text and you want to text back, but you don’t want to give out your phone number. Well, this project gives you a little proxy so that you can set it up with Flask and set up a server with Twilio and give out a temporary phone number and have it be attached to your phone. And I’m going to definitely have to try this out because it looks fun.
KENNEDY: Yeah, that looks really cool. I think that program they have is awesome. One of the challenges of getting started blogging is nobody knows about you. You put all this effort into writing this thing and you put it out there and ten friends who are willing to follow your tech stuff off of Facebook glanced at it, right? (Laughs) So, here’s a way to appear on a major, major blog and highlight what you’re doing and maybe jumpstart your other tech stuff, like you could link back to your blog or something like this.
OKKEN: Having somebody work with you to polish it up a little bit is a good idea. Often when you tap your friends for that sort of help they’ll just tell you, ‘Oh, it looks great. Put it up.’
KENNEDY: Yeah, very cool.
OKKEN: But this project is pretty neat. It does encourage you to do some of the paid part of Twilio. I think for something like this, it’s a good idea.
KENNEDY: Yeah, very nice. Good article.
OKKEN: Before we get to the next, let me just tell you about DigitalOcean. They’re doing some really amazing stuff. The thing I like to highlight, they just upgraded all of their things and left the price the same. By upgraded I mean doubled all of the stuff, at least. For example, you can go to DigitalOcean and get a Linux server with all variety of Linux machines, Linux distributions, with four gigs of RAM, two CPUs, eight gigs of SSD, for $20 a month. That’s insane. That is a crazy thing. That used to cost $40 and they just said, ‘Nope, that’s now twenty bucks.’ It comes with four terabytes of free traffic. If I were to transfer that over S3, which is nine cents a gigabyte, just that bandwidth would be $368 at S3. That’s including your $20 server. So, really awesome stuff. Check them out over at do.co/Python. Check out what they’re doing, help support the show. Everybody’s getting good stuff. Thanks, DigitalOcean for that.
Alright, I kind of want to go on a Jupyter-like notebook rant for awhile, Brian. The news around this stuff is just coming in fast and furious. There are so many things going on with notebooks right now. This is a world I don’t really live in. I’m much more, ‘Create a Python project and have like ten related files’ or run stuff on the command line or my editor and not put it in these cells because that’s just not my world. But I see how powerful it is for people who are exploring data and being more iterative with their code. In the last couple weeks, they’ve got a lot more options.
OKKEN: They’ve been in the news a lot right now.
KENNEDY: I’ll start with one for this one, then we’ll do another one in the final segment. For this one, I want to talk about something that’s brand new called, “Datalore.” Have you heard of Datalore?
OKKEN: I have not.
KENNEDY: You’ve heard of PyCharm, right? So, this is like PyCharm in a notebook, online, hosted. It’s from the JetBrains guys. It’s in the Cloud, you just go sign up. It has this intelligent editor just like IntelliJ plus PyCharm has, with the cool autocomplete and intelli-sense. It comes pre-installed with a bunch of stuff that you need, like Matplotlib and so on. It has collaboration, so you can login and – kind of like Google Docs style – work on it together. I don’t know how real-time it is. Do you actually see every character going in or do you have to refresh it? Does is automatically refresh? I’m not entirely sure of the level of collaboration but there’s some ‘real-time multiple people working on the same notebook’-type of collaboration; I have to check that out. It has integrated version control. Say you’re a student or engineer, but you’re not like ‘git-push on the command line’-type of competent, right? You go there and just say, ‘Create me a save point’ and it basically just saves it and tags it so you can get it back. Things like that. Pretty cool.
OKKEN: That’s great. The JetBrains, like the diff URL for version control is really great, so building that in here is cool.
KENNEDY: Yeah. They’ve got some really cool stuff. Finally, this might be pretty big for some folks, depending on what you’re doing. They have incremental calculations. So, if you’re doing machine learning and training and all sorts of analysis, there’s a bunch of cells that work together to generate that data. They actually have figured out how to track the dependencies between where that data comes from. You have to rerun the entire thing if you’re changing the model. It only reruns that parts that depend upon something you’ve changed.
OKKEN: Oh, that's awesome.
KENNEDY: It’s pretty cool, right? So, if your computation takes two minutes, but this little part’s really quick because it uses mostly finished data, that’s a really big deal, I think.
Anyway, Datalore, it seems like it’s in beta. I don’t know what it costs, if there’s a free thing or whatever, but it’s a Jupyter notebook-like hosted service from JetBrains, which I thought was pretty cool and worth talking about.
OKKEN: Yeah, neat.
KENNEDY: Nice. I have no idea how to get started on this next one.
OKKEN: (Laughs)
KENNEDY: I’m just going to say the name. Bellybutton.
OKKEN: Bellybutton, yes. For personal lint.
KENNEDY: (Laughs) What’s up with this?
OKKEN: Yeah, I think it’s a play on words around linters and where lint usually shows up. We have things like pylint and flake8 and pycodestyle, which used to be called PEP8, that I use all the time and love. But there’s times where you have extra requirements for your own team or your own project and it’d be cool to have something like pylint, but just with your own rules in it and that’s where Bellybutton comes in. It’s a way to create rules around for static analysis or style. One of the examples I thought was great, let’s say you’ve got a library with some functions that your team uses but you decided some of them are dumb and deprecate them, or maybe there’s a better way to do things. You can add some of these rules to Bellybutton to say, ‘Hey, this code here. You need to change it this way.’ And actually give exact examples of how somebody should change it and I think that’s a really cool idea. I wanted to bring that up.
KENNEDY: Yeah, awesome. Bellybutton. It sounds really cool. These linters are really great and I typically think of them in the context of continuous integration and team-wide things. But that’s a cool way to make your own overrides and whatnot.
OKKEN: Yeah, and anytime where you’ve got coding style within your team, if you can automate and take the person out of it and take that out of your code reviews, it helps with team dynamics to just have the computer say, ‘Hey, change this code’ instead of having your co-workers keep telling you to change your code.
KENNEDY: Yeah, that’s a really interesting dynamic, isn’t it? People are willing to take petty, nitpicky criticism from robots and automated systems way more than from your manager or whoever.
OKKEN: Yeah. And, ‘We’ve already had the discussion about what our style is. This is what it is. I don’t want to keep opening up the discussion, so just do it.’ (Laughs) Manager speak.
KENNEDY: That’s right, cool.
Alright, are you ready for notebooks galore, part 2?
OKKEN: Oh, more notebook news. Yay.
KENNEDY: Yes. So, our friend of the show, Daniel Schwartzstein, posted something on Reddit. Some news that has to do with free hosted notebooks in Azure. This would be pretty much a direct competitor to Datalore, right? So, they are now supporting Python 3.6 Jupyter notebooks in Azure and there’s a nice conversation over on Reddit about that. You go over and read more about it and so on. Basically, if you just drop in on notebooks.azure.com, then off you go. You can work with it right there. That’s like straight up Jupyter notebooks, I believe. That’s pretty cool, right? Free, in the Cloud, powered by Jupyter. I’m telling you, this is a space that is so blowing up right now.
OKKEN: Yeah, we better pay attention to it more if people are fighting over it.
KENNEDY: Exactly, there’s big companies fighting over it. Speaking of big companies who want to fight over it, have you heard of Collaboratory?
OKKEN: No. Great word, though.
KENNEDY: It is. So, this comes from the research group at Google, colab.research.google.com. This has been around for a little while and people have been kind of dissing on it a little bit because it’s been just Python 2. However, it is now Python supporting, not legacy Python but modern Python. So, that’s really cool. And since the time that I took this note to talk to you about it today, they now have also launched GPU support.
OKKEN: Wow.
KENNEDY: You could do your notebook and say, ‘I want to do some machine learning. Oh, yeah, run this tensorflow, this training process on a GPU.’ And you can basically hit command shift P to make it run on a GPU. How insane is that?
OKKEN: That’s cool.
KENNEDY: So, that was pretty cool. Are you ready for some more notebook news?
OKKEN: Yes.
KENNEDY: JupyterLab is ready for users, it’s now open.
OKKEN: What is JupyterLab?
KENNEDY: So, Jupyter is something based on Jupyter notebooks. But it’s more than just… We’re going to have to put this with a ‘grain of salt.’ Probably, everyone out there knew better than I do, but it’s like a hosted Jupyter notebooks, which is really cool. But it also enables you to use text editors, terminals, datafile viewers and all sorts of other stuff that’s not just in the notebook. So, you could SSH in, do stuff behind the scenes, or something to this effect. They’ve got some cool pictures. It’s almost like this crazy IDE. You’ve got your files on the left and then on the right you might have a map, a couple of JSON files and a CSV in like an Excel thing, all in the same window.
OKKEN: Oh, okay. Well, that’s neat.
KENNEDY: ANd you can build extensions and plugins, so that CSV thing is probably a JupyterLab extension. Yet another really cool thing going on there.
I guess the final tip maybe from the very first one from this segment. Daniel said, ‘One thing that can happen is login to the Azure notebook, so of their dependencies are a little bit old, like Pandas or Matplotlib or something like that.’ He shows you how to import pip and then execute pip inside your notebook, to force it to upgrade the dependencies in your project.
OKKEN: Oh, okay. We’re going to put this snippet in our notes.
KENNEDY: Yeah, the snippet is in there but you can basically, it shows you how to, from code, run pip to upgrade stuff. Which I think is interesting and useful especially outside of just notebooks. But it happens to be, if you don’t get a remote into the servers, you still want to upgrade stuff. That will be helpful.
OKKEN: Yeah, nice. Cool.
KENNEDY: Alright, that’s a lot of notebook news. Probably more next week.
OKKEN: Probably.
KENNEDY: (Laughs) It’s really cool though to see so much innovation and creativity around this stuff. It’s kind of a ‘paradox of choice’ problem going on. If I wanted to get started on one, what the heck would I do? But there’s a bunch of good options here.
OKKEN: Definitely.
KENNEDY: Awesome. You got anything extra you want to let everyone know about this week?
OKKEN: Just that maybe I should spend more time paying attention to Jupyter, but other than that, no.
KENNEDY: (Laughs) Yeah, Jupyter’s pretty cool. JupyterLab is exciting. Collaboratory is exciting. Notebooks on Azure is exciting. Datalore is exciting. Yeah, I’ll have to pay more attention as well.
OKKEN: Do you have any news?
KENNEDY: No news. Well, when this episode goes out, there’s a very good chance that I’ll be at PyCon Slovakia. And if I am and you hear this, feel free to come say ‘hi’. That’d be cool. I think that’s the right timing. I’m pretty sure; I’m trying to line it up that way.
Well, thanks for getting all this stuff together, Brian. It’s great stuff.
OKKEN: Yeah, thank you.
KENNEDY: Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We’re always on the lookout for sharing something cool. On. Behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues. <|endoftext|>
00:00:00 OKKEN: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode 166, recorded January 22nd, 2020. I'm Brian Okken.
 
00:00:11 KENNEDY: And I'm Michael Kennedy.
 
00:00:12 OKKEN: And this episode is brought to you by Digital Ocean, we'll talk about them more later. But do you want to get into the quantum stuff? Or, what have you got for us first?
 
00:00:12 KENNEDY: Yeah, how about that? There were many crazy ideas in programming, right? Like, infrastructure as code, or infrastructure as a service, and all the cloud computing things. And, you know, there's this really cool quote from William Gibson, the science fiction writer, is that, "The future is here, it's just not evenly distributed." Which is pretty cool. And I think this thing we're about to talk about is a little bit about making that way more even. So, Amazon, AWS, the bookstore, is announcing quantum computing as a service.
 
00:00:56 OKKEN: Okay, we were expecting this to happen.
 
00:00:58 KENNEDY: Yeah we were, well, the thing is though, quantum computers are so early stage, they're so specialized, they look more like science projects than they do any sort of computer. They're not in square boxes, they're usually like dangling from the ceiling with all sorts of wires shooting out of 'em. You know, you can't go get a quantum computer. But there are quantum computers that can do limited amounts of computing. And so learning to program them is something that might be a good idea, right? Like, I have no idea what programming a quantum computer's going to feel like, 'cause it's just the conceptions, I just haven't formed it fully in my mind. Do you have a good sense of what it's going to be like?
 
00:01:39 OKKEN: No, well, I think we're at the punchcard stage still.
 
00:01:42 KENNEDY: Yeah, yeah, exactly. So this new service called Amazon Braket from AWS is a fully-managed service that allows scientists, researchers, developers, and people just interested in quantum computing to begin experimenting with computers from multiple quantum hardware providers in a single place. So there's a handful of people creating these quantum computers and they have different capabilities and whatnot, so you can actually select more than one provider for your quantum computer. So, we all know about bits, right? Bits are zero and one, on off, that sort of thing, that's the conception in my mind that it's pretty easy for things to work. But quantum computers use a more sophisticated representation known as a qubit or a quantum bit, and each qubit exists in a state of one or zero, but because of its quantum nature it also in superpositions of one or zero, which means it can simultaneously occupy both states. So it's basically a two-dimensional vector, of complex numbers of all these different states, which means it has way more data representation and computing power than just zero or one. It has near-infinite. So, this service is built to give people some basically hands-on experience programming this. So I linked to the Verge article talking about this. I also linked to the direct announcement. Now, Brian, do you see that code section down there, that little example?
 
00:03:09 OKKEN: Yes. I have no idea what it's going to print.
 
00:03:12 KENNEDY: I have no idea what it's going to print either, but if not carrying, one, the computational output is, what does that remind you of?
 
00:03:20 OKKEN: Python.
 
00:03:21 KENNEDY: It definitely looks like Python. And in the announcement you can say, "And here you can use a notebook to explore writing in this Braket, service Braket language." And yeah, so I don't know if this is literally Python or it's just very very much like Python, but, if you're a Python developer, you can get into this pretty easily I would suspect.
 
00:03:39 OKKEN: Yeah, it definitely looks like it's a notebook or something.
 
00:03:42 KENNEDY: Yeah, so, if you want to know how quantum computers work, if you want to play with programming them, check this Amazon Braket thing out. I've not checked the pricing. It seems like it might not be that cheap, but, yeah, it still looks pretty nice...
 
00:03:56 OKKEN: Well, I think they're really trying to make it available to people that, in a researcher student situation, so it's probably not terrible. But I dunno.
 
00:04:05 KENNEDY: Yeah, yeah, who knows, but it's definitely interesting, and people who are interested can now go and just fire up a quantum computer in the cloud and, with through a Jupyter notebook, play with it, which is pretty awesome.
 
00:04:15 OKKEN: Yeah! So let's go from quantum to virtual.
 
00:04:21 KENNEDY: Yes, let's do it, do it, take us away.
 
00:04:23 OKKEN: Couldn't resist, but, not really that cool. But anyway, virtual environments, right, with Python. I know that both of use virtual environments...
 
00:04:32 KENNEDY: All the time.
 
00:04:33 OKKEN: I still have coworkers that don't, and I know that some people still, I don't know, there's a lot of old guides and tutorials on how to use virtual environments, and I really didn't know I needed this, but, Brett Cannon wrote a quick and dirty guide on how to install packages for Python. And it is mostly just basically walking people on how to use virtual environments. I, of course, already know how to do that, but I think it's good to have something like this available to throw to people that aren't using 'em yet, 'cause it's pretty short and simple. One of the things I love about the article is it uses the --prompt flag for creating a virtual environment, which will make it so that your prompt variable, or the prompt isn't just venv, it's something useful for you to see it.
 
00:05:17 KENNEDY: Yeah that is super cool, I love that recommendation about the --prompt. In the article, Brett shows you how to have it take the current working directory as a default, right? So it'll automatically grab that for you, which is cool.
 
00:05:33 OKKEN: I've got a little Bash snippet that I use that essentially does that in my environment. He hints at, that in Python 3.9, there's going to be an improvement, that instead of having some code that looks up your current directory name, that you can just pass in a dot for the prompt, and it will just name it that, which, I'm looking forward to that, that's cool.
 
00:05:57 KENNEDY: Yeah, that's really cool. Maybe I just want to start running 3.9 beta, just for that.
 
00:06:02 OKKEN: Maybe. Have you started playing with 3.9 yet?
 
00:06:05 KENNEDY: No I haven't.
 
00:06:06 OKKEN: Okay.
 
00:06:07 KENNEDY: I'm still actually, I'm still trying to decide what version I want to use, because traditionally I use Homebrew, and something went wrong with Homebrew for Python 3.8, so if you try to install Python 3.7 from Homebrew, sorry Python 3 from Homebrew, you still get 3.7, which is frustrating, but I haven't decided that I'm wanting to break away from that just yet. But it's starting to get to the point where maybe I'll just go to 3.9.
 
00:06:31 OKKEN: I dunno, I just still use the installers from the python.org site, but...
 
00:06:35 KENNEDY: Yeah, I'm going to be back there too. But yeah, this is cool, and it's nice to have this, this is real clear and concise and, yeah, thanks Brett.
 
00:06:43 OKKEN: So, do you know what else is cool? Digital Ocean is pretty cool.
 
00:06:46 KENNEDY: Digital Ocean is awesome.
 
00:06:47 OKKEN: Yeah, so Digital Ocean's sponsoring this episode. They have awesome infrastructure and an awesome product, and we use them for our services. Do you have a memory-intensive workload? Something like high-performance SQL or NoSQL databases, in memory caches like Redis, or indexes? Some kind of large data analysis runtime? Well if so, you need Digital Ocean's new memory-optimized droplets, or at least you should check them out. So check them out by going to pythonbytes.fm/digitalocean, and get a $100 credit, and that's back, we used to be lower but now it's 100, yay.
 
00:07:22 KENNEDY: Yay, well done Digital Ocean, thanks for supporting the show. Sometimes, the best thing you can do Brian is just say no. Alright, it's easy to say yes to everything, but, you say yes to something you're actually saying no to something else.
 
00:07:35 OKKEN: Yeah I've heard that, that's like, kind of like the whole pointing your finger and three point back at you, and stuff like that, but.
 
00:07:41 KENNEDY: Yeah exactly, so, this next thing I want to talk about is something that made the rounds last couple of weeks, and it's pretty interesting. It's the article that sort of lays out a case against the no code movement, and it's entitled Say No to the no code movement, by Alex Hudson. It's funny, I don't know, I might be showing my age, via my gray bits in my beard or whatever, my goatee, but he starts off by talking about, 2020's going to be the year of no code, a movement where you can write business logic, even entire applications, without having to train a software developer. I feel like I've heard that before, last century even. How about you?
 
00:08:18 OKKEN: Well, yeah. Are we talking like round trip stuff like UML round trip things?
 
00:08:23 KENNEDY: Yeah I was thinking of like Visio and some of these other business intelligence, draggy droppy things, that we're going to, quickly replace us as software developers, and we're just going to be out of a job. So you probably shouldn't study that, 'cause either outsourcing or this no code stuff is going to crush our jobs. And, I dunno, I feel like software has been pretty good over the last 20 years.
 
00:08:45 OKKEN: Yeah, that's weird, so.
 
00:08:47 KENNEDY: So the reason I'm bothering to cover this though, is I do think it's interesting that, this is something of a trend, and I think that Alex does a pretty good job of laying out what some of the issues are. It's easy to get sucked into wanting this, but it's also good to maybe know where like, hey, this might make sense, to try this, this no code idea. So, examples include Salesforce. Right, with Salesforce you could sort of wire stuff together to make things happen. Other examples were Zapier, were doing things.
 
00:09:20 OKKEN: Yeah, maybe if this then that.
 
00:09:22 KENNEDY: Yeah, If This Then That. I feel like Zapier actually, Alex gave it a pretty good vote, and I agree as well, because it's not so much about trying to write software with Zapier, it's about trying to just do integration. I feel like no code integration isn't terrible if something awesome like Zapier can do it. But, basically, the idea is like look, people want to transform business processes into the software domain. And they might want to do that because change control, like how do you change your business and understand how it works is now a software problem. It's easier to innovate on what makes the business distinct 'cause now it's, like, these are the things we do, everyone does this, but this is our special sauce right here. And there's a cool quote from Satya Nadella, that says, "Every company is a software company these days." And so there's a lot of pressure to take maybe traditional companies and organizations that don't have a software team, or they have a very small software team that's too busy just keeping the lights on, to help everyone else with their little issues, there's this temptation to say, "Okay, well what is our no code story? How do we get some systems that just let people write code." Excel sort of played that role to a large degree. So the article's good for laying out some of the issues. Starts out well, the first assumption is that writing text, like writing business logic in text form, is something that everybody hates, right? Outside of the software development community, if I'm an accountant, and I want to write text logic, because, you have to be accurate in things like that, right? If you had boxes you could drag 'em together, that might be better. So, talks about how, it's a simpler abstraction, that's really easy to work with. Or it's simpler syntax, and in both of those cases, you really run into the problem of well, you can do the simple little thing first. Like think of a visual, like a flowchart, right? If you could just run a flowchart. Well for a really simple problem it's fine, but if you try to solve a real problem, you have a flowchart with a thousand boxes and lines going everywhere. That's not going to help you. Another example of the issues you run into is that, many of the no code advocates are building significant systems by pulling together off-the-shelf apps and integrating them. This is kind of like Zapier. But, Zapier I think, even while it's still good but, the problem is, all the logic becomes implemented as a configuration of all these external systems, and you're limited by what they can do and what they can accept, and so on. Yeah. He said look, if there was a better way to create software than writing text, most of us would just drop it like a hot rock, I would be like "Yeah okay, what's next, let's do that." It would be great. It's not that we love typing so much. So I guess, in conclusion, it's like where does the no code stuff fail in practice? Well you get like 80% of the way there, and then you're like "Well all these edge cases make this so complicated." Or you end up with all the little edge cases and details that is like, this little graphical whatever, is so complicated that it's worse than text. Things like that. But where it might be useful is for little proof of concept demonstrations and, things like that. Like hey, here's the happy path of the main thing we want to do, I threw this together with something like Salesforce or some other BI tool or something, and look what we got. Then you could go rewrite that with Python and matplotlib, or whatever it is you're trying to solve. So I thought this was an interesting take on the whole no code movement, and I also thought it was interesting that like, this year's going to be the year of no code, when, I remember hearing that in the 90's.
 
00:13:00 OKKEN: Yeah actually, my first job at HP was using a visual language for measuring systems, and it was, I think we should at some of the failures of the 90's, because what happened is going to happen again. Like you said, you have systems that go 80% of the way, but the corner cases make it so that you still have to be an expert at this tool to do it, so you still hire programmers, but they only are gaining experience with this one tool that they don't even really like, and they can't transfer to any other job, and that's terrible, it's not good. Plus, visual stuff is sort of really fun when you get started, but you quickly need a wrist brace. Working with a mouse all day long is really actually fatiguing to your hands.
 
00:13:47 KENNEDY: That's a good point. I hadn't even thought about that, but oh yeah, for sure.
 
00:13:51 OKKEN: There was a program called V, VE now, I don't think it's even in place anymore. It was a visual thing, and we used to joke that, if you buy the boxed set it comes with a wrist brace, so.
 
00:14:02 KENNEDY: Yeah, that's not good. You know, this next item that you got comin' up here, I checked this out, and this is some deep stuff here. Tell us about it.
 
00:14:11 OKKEN: So this isn't really a topic that we normally cover, but it's also something that I was pleased and surprised to see come up with the North Bay Python. I'm going to highlight Sha and his full name is Shadid Wallace-Stepter, I think, but he says he goes by Sha. He spoke at North Bay Python and, we're linking to an article that is his article but also includes a link to the video of the presentation at North Bay Python. And it's called What I Learned Going from Prison to Python. And, it is Python-related, but the Python take comes in the end, like the last few minutes. It is a 40 minute video but you can even just listen to it because there's no visuals. I'm not going to really summarize it too much, other than this is an amazing story, and people need to listen to it. He's talking about how he went from a generational poverty situation to crime as a teen, it's interesting that he talks about one of the reasons why he started doing some crimes. It wasn't because he needed to, it was because he had zero control over the rest of his life, and that made him, it was something he felt he had control over. And then that gets him to the point where his best friend dies on his shoulder by being shot, and then he ends up in prison, and spends 19 years there. 19 years of a 27 year sentence. But, this fight that he had to do to just, to fight against the entire system trying to keep him in poverty or keep him in prison, it is an incredible story of, for him, but I think it also talks about how, regardless of your politics, poverty and the prison system in our country is broken and we need to fix it, so, that's what I wanted to highlight.
 
00:15:58 KENNEDY: Yeah, the thing that touched me from this, was I think for the first time maybe ever, I understood why people would go down some of these paths. Because, people make some of these decisions, and they're just so clearly a bad idea, you know what I mean? Thinking of like, drug addicts for hard hard drugs like heroin or meth, or people who are burglarising houses, and armed robbery and stuff, and just think, man, there's got to be a better way. But listening to his story I really understood it, and I didn't get all the way to the end, so, it's awesome that Python, it sounds like, helped him move beyond that, but do you have the last bit of the story? Or are you going to give away too much?
 
00:16:46 OKKEN: No, I don't think it'll give it away. I think, he ends in a very positive note on talking about the open source community. He eventually gets into, he goes from studying law to studying entrepreneurship, to meeting Jessica, I'm going to get her last name wrong, Jessica McKellar.
 
00:17:01 KENNEDY: McKellar?
 
00:17:02 OKKEN: McKellar. Yeah, McKellar,
 
00:17:03 KENNEDY: That's right.
 
00:17:04 OKKEN: Although he said, he met her in a journalism setting but she was, not very good at journalism or wasn't a journalist or something like that, but anyway. She's a great person. But one of the things that people face when they come out of the prison system, especially if they came in in a poverty situation, is, they've got no skills and no job history or things like that, or they may have no skills. And even if they do have skills, who's going to hire 'em? But the open source community is just a, everybody's welcome. In coding, there's more situations in coding where, I don't, either of you can do the job, and that equality of background of just, it's just about whether you can get stuff done, it isn't just about that, we also have, you have to be able to communicate, and things like that. But we don't really care as much about your college pedigree or anything, it's either you're a great coder or you're not. And that's a cool story. And he even equates the open, he was shocked by the open source community just working on stuff and giving it away. But he apparently, there was a program at San Quentin that O'Reilly gave a bunch of laptops there so that people could watch some of the O'Reilly training videos there, and that's how he learned Python, so that's cool.
 
00:18:23 KENNEDY: Yeah, that's super cool. Yeah, I loved the story, and it was really different. So, I'm happy he shared it, and I'm happy you covered it. Speaking of covering things, have we covered the GUIs?
 
00:18:32 OKKEN: I don't think so. We should probably cover GUIs.
 
00:18:34 KENNEDY: We probably should. You know what I really like about our listeners and our audience is, they really help round us out, you know what I mean, Brian? Like I'll bring up one thing, I'm like, "Oh, I heard of this one thing, can you guys believe this is a thing?" And they're like, "Here's the seven others, and here are the trade-offs, and did you know about this?"
 
00:18:54 OKKEN: Yeah, and "I can't believe you haven't covered this already!"
 
00:18:56 KENNEDY: Yeah, exactly, so I've already got a bunch of stuff on queue that has that take to it. But here's one called, QUICK, QT5-based GUI generator for ClicK, so ClicK is an argparse-based command-line interface tool or framework I guess, where you put decorators onto functions and say these are some of the arguments, these are required, these are not required, and these are the types, and so on. And it lets you write command-line interfaces. And so QUICK will take those and naturally understand the message given to ClicK, or argparse, and then create a GUI out of it.
 
00:19:39 OKKEN: No way!
 
00:19:40 KENNEDY: Yeah, that's pretty cool, right? So you don't hardly have to do anything other than throw a quick.run and give it a function or something to that effect, and off it goes.
 
00:19:49 OKKEN: Oh that is cool. Yeah, totally going to try this out.
 
00:19:52 KENNEDY: Yeah, it's not super popular. Like, it's got 62 stars and four contributors. It was changed this month, so, that's cool, but just the example. So it's a little bit old, but I think it's an interesting take, and an interesting idea, and now, if it's going to work for people they can definitely check it out and contribute to it. So on, so, yeah, I think this is a nice one. It's based, or inspired, not based on, inspired by Gooey, G-O-O-E-Y, which is also really really nice but you have to be a little bit more explicit on how it presents the UI for Gooey. You got to say "I want a calendar widget for this thing", or whatever. But yeah anyway, it'll even let you still run your standard ClicK-based CLI app the same, but then if you throw in a --gui it'll turn it into a GUI, even if you just want to change the command-line arguments. Which is, yeah, it looks pretty nice.
 
00:20:43 OKKEN: Yeah, a GUI it, it's an interesting function call.
 
00:20:47 KENNEDY: Yeah, so thank you Ricky Teachey for sending this along, and recommending it. It's a good one.
 
00:20:54 OKKEN: Yeah, thanks. Okay, we're not to jokes yet, but I have kind of a funny one coming up. So it's interesting, so, there's a couple of articles, I think it's in a series. Falsehoods programmers believe about time.
 
00:21:08 KENNEDY: Wait, what is the title of the blog? Infinite Undo.
 
00:21:14 OKKEN: Oh really?
 
00:21:16 KENNEDY: Yeah, it's all, it all fits together, I love it. Sorry, keep going, there's a second follow-on one.
 
00:21:20 OKKEN: Must be a Vi person. More falsehoods programmers believe about time, Wisdom from the Crowd edition. So, I'm sorry I can't find your name on the blog, but, wrote this article about falsehoods. The interesting thing is very few of them have links to tell you why they're false. But, these are all assumptions that are wrong. I mean it starts with, there's always 24 hours in a day. There are things that we just sort of know are kind of wrong sometimes, like when we change the time, it's different. Months have either 30 or 31, a week begins and ends on the same month, and I think these are, he's coming from the standpoint that he's debugged and tested code that had these weird assumptions in them that broke. And then it gets into some stuff that I'm going to highlight just a handful, but there's a whole bunch. A system clock will always be set to the correct local time. And if that's not true, well it'll be set to a time that's not wildly different from the correct local time. And if that's not true, well at least it'll always have a consistent offset in the number of seconds. And yeah no, that's not true either. I've been bit by this, where we had systems under test be not even on the same day. And there's the following other one, let's see, the day before Saturday's always Friday. I had to look this one up, because I'm like, isn't it? Isn't Friday always before Saturday?
 
00:22:38 KENNEDY: Alright, what's the deal there?
 
00:22:40 OKKEN: Samoa decided to change which part of the international timezone they were on so that they were the same day as Australia.
 
00:22:49 KENNEDY: And that gap swapped it, like it swapped on Saturday but it happened in the middle of the week or something like that?
 
00:22:55 OKKEN: Yeah, it happened like Thursday night, and then the next second it was Saturday morning. So they skipped Friday once.
 
00:23:03 KENNEDY: That's some serious Daylight Savings action going on there.
 
00:23:05 OKKEN: And then the number 81, the last one on the second one is, I think it's just thrown in as a joke, I hope. Software will never run on a spaceship that is orbiting a black hole. Do we have spaceships that orbit black holes?
 
00:23:18 KENNEDY: Not yet. Not yet, but you can have legacy code, you're going to have the black hole bug that you got to go back and fix.
 
00:23:24 OKKEN: Yeah, and then what I didn't highlight was that there's not an int to time, didn't put a link in for this, but, did you know that, if you have a 32-bit time counter, it's probably going to break in 2038 or something like that?
 
00:23:37 KENNEDY: Oh wow, think of all the consulting opportunities.
 
00:23:40 OKKEN: I know, it's like Y2K all over again.
 
00:23:42 KENNEDY: Exactly. Exactly, yeah, that's interesting. Real-time obviously, you think, doesn't stop, probably won't stop for us, but computer time. Computer time is, it's a whole different deal. Yeah, this is really interesting, and like, you highlighted a few of the 81, and then that didn't even touch on the more falsehoods. Pretty cool. I get a little nervous every time I get near a timezone, so, with code.
 
00:24:08 OKKEN: Yeah, I always use a timezone package, or a time package, to deal with that for me, because I know I'm going to get it wrong.
 
00:24:14 KENNEDY: Yeah, absolutely. So, I must've forgot, because I feel like last time we, a couple of weeks ago, we did cover REMI, which is a GUI framework? Right, and so REMI, yeah I remember, you brought that up. So REMI's cool, and it lets you write Python code that then gets turned into something that has an HTML representation. But then you can hook events from HTML back into your Python code. Right, it's kind of like Electron JS, but swap out the JS for Python, right? Well, we got a message from the creator, David. And he said, "Hey, thanks so much for covering that. You threw out that like hey, it would be awesome if this was an added editor, or something like that." So, yeah, you just look, a /editor in the repo. There's a drag-and-drop WYSIWIG editor for this UI.
 
00:25:03 OKKEN: That is so cool. I haven't tried it yet, but it's neat.
 
00:25:05 KENNEDY: Yeah, it looks really cool. It's like, pretty much like what you would expect. You've got all the widgets you can drag and drop in there, and size them, and set their colors, and set all their CSS properties, and then also wire up button to existing functions, or JavaScript events to existing functions and things like that.
 
00:25:24 OKKEN: You can totally waste an entire afternoon and look like you're workin'.
 
00:25:27 KENNEDY: Yeah, exactly. Yeah, like here's some of the no code stuff that is good. So it's got a little, a little walkthrough example of creating a Hello World button clicker, type of GUI app, but yeah, it actually looks pretty killer.
 
00:25:40 OKKEN: I don't want to diss people that actually work in the world of creating really good user interfaces, and that's needed, and I applaud them. But there's a lot of us nerds that just need some kind of GUI that just sort of works, and that's good enough.
 
00:25:55 KENNEDY: Yep, alright Brian, I have queued up a joke. A visual joke that we'll have to describe through here, and because this is about testing. I'm going to let you take it, it's really simple, but it's quite funny.
 
00:26:10 OKKEN: I actually peeked at this before, we're going to link to a Twitter post that somebody did of this little video. Says two unit tests, zero integration tests. And I guess, I got to say, I'm a huge fan of these unit test pass, integration test fail things, so send them my way if you find 'em. This one's hilarious.
 
00:26:28 KENNEDY: So let me describe a little bit, I'll set the stage. There's one of these super-powerful hand dryers, and there's a trash can, and it's not like a trash bin that you move around, it's affixed to the wall, right? Okay, go ahead.
 
00:26:42 OKKEN: Alright, and then right next to it it's a place where you can grab, napkin, or your paper towels also to dry your hands, but they've put one of those, the hand dryers that blows down, and it turns on with motion, and so as soon as you throw away a paper towel, the dryer blows all the paper towels out of the garbage.
 
00:27:01 KENNEDY: It's super-strong, not just the one you tried to put in the garbage, but every paper towel that was previously in the garbage, is now blasted around. Two unit tests, zero integration tests.
 
00:27:13 OKKEN: Yeah, the creative people that got the garbage liner to stay in there in the first place, it's hilarious.
 
00:27:21 KENNEDY: It got a little or something sticky on there to keep that thing in place. That's pretty funny.
 
00:27:25 OKKEN: This reminds me of, I was at a company where we switched from actual plants around the office to plastic plants. But nobody canceled the watering service, and so the watering service just kept going around and watering all the plastic plants, once a month. Or once a week, or whenever they did that. So, anyway.
 
00:27:44 KENNEDY: Yeah, that probably didn't turn out well after they filled up. That sounds...
 
00:27:50 OKKEN: Weird. Well thanks Mike.
 
00:27:53 KENNEDY: You bet, thanks for being here, as always it's fun. Bye everyone.
 
00:27:56 OKKEN: Thank you for listening to Python Bytes. Follow the show on Twitter at pythonbytes, that's pythonbytes as in B-Y-T-E-S. And get the full show notes at pythonbytes.fm. If you have a news item you want to feature, just visit pythonbytes.fm and send it our way. We're always on the lookout for sharing something cool. This is Brian Okken, and on behalf of myself and Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.
 
 <|endoftext|>
00:00:00 Hello, and welcome to python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 280, recorded April 19 2022. I'm Michael Kennedy.

00:00:11 And I'm Brian knockin.

00:00:12 And I'm Pat Decker. Welcome, Pat. It's great to have you here. Well, thanks for having me on.

00:00:17 Yeah, it's really excited that you and I were chatting a bit about less new programming languages a bit over email. And, yeah, it's just fun to just have you come on and share some of the things that you're passionate about and, and whatnot. Tell people a bit about yourself.

00:00:32 Oh, I get started with computers. We back in the day high school, I had an apple two computer at school, eventually got to number 64. At home. I did Pascal on cards at Iowa State University. And I did a dino did a Data Processing program at Kirkwood in Cedar Rapids, and got my first job out of there, out 30 years ago or so. So I've worked mainframe and PC COBOL C, and a little bit of Python here and there.

00:01:04 Fantastic. And it sounds like you're doing DevOps type things today.

00:01:08 Yeah, the company is like many gone from onsite in their own data center to 80% or so. I'm running on AWS. And so I get to share your same frustration with AWS interface in Python. It's not always

00:01:25 obvious how that works. It's updated every week. And I know the way it is updated every week has got to be some code Gen is running somewhere that regenerates it, and it's just never quite discoverable, right, it's fine. Once you get it working as long as you don't touch it or have to understand it. These are not the sign of a fantastic API, but it's cool to get to work and ended up in AWS. Cool. Well, great to have you here. Now Brian, before we jump over to your first topic, I just want to say this episode is brought to you by merger phi. I am psyched about what these guys are offering merger phi is super cool. It's all about automating get collaboration. And I have a lot to say about Git. But I want to start with pie because I love pie. banana cream pie is my favorite. I'll take a cheesecake. Does that count as a pie? Is that what we're talking about? No, we're

00:02:14 talking about HCT HTT pie. And the the delegate pie, the website actually lists in their readme tells you exactly how they wish you to pronounce it right off the bat. Ah, nice. Tt py. Anyway, it's a command. It's a really cool tools command line tool. And I think we've covered it before. For, for interacting with. It's especially useful for API's. So

00:02:40 you don't we it's one of the first things I install on any server on my Mac. If I get a new one, I straight at this thing. It's fantastic. Yeah,

00:02:45 it's so fantastic that it had 60 This is what I want to cover. I'm sorry to laugh. It had 60 54,000 stars on GitHub, and then it lost that but it didn't. That didn't. So what a cliff. So how many does that have now? Right now? If we look, it's got 16 My gosh, way back? Yeah. Actually, this morning, when I looked it was just 16.0 1000. So it's gotten 100 stars, just as I was researching this. So anyway, the that that's one of the I just gotta guess where I want to shout out to these guys have it's a cool tool. If you're doing API's check it out. And also if you've started before restart, because they, they deserve it. And what happened was they accidentally put their repo private for the somebody was trying to do make it private, make something some other test repo private, and they accidentally put the main one private. And if you're even private for a second, you lose all your stars. So warning, don't make your public Sunday. Oops,

00:03:56 wow, that is too good warning. It's a great tool. But a good warning. It does have a danger zone, Danger Zone, this is going to happen. But unfortunately, the warning is equivalent. If there's zero followers, and zero people interested in or you have one of the most popular things on GitHub, like it shouldn't be like, this is super duper important. You're gonna lose 54,000 github stars. Are you doing it?

00:04:20 Yeah. Well, and also, I mean, if if you work with a lot of GitHub repos, and you're like, like, maybe you made something public for a talk, and then you're making it private, because I don't know, that talks over or

00:04:33 whatever. You just don't want to maintain something like I'm just done with. If you're working

00:04:37 with it a lot. Maybe you've seen that warning so many times that you're not really reading it anymore, and double checking. So I guess this is just a warning, double check if you can see that warning box. Make sure you're on the right repo.

00:04:51 Pat, what do you think about this?

00:04:53 And it's pretty tragic. It's kind of like those end user license agreements where we all see them so often, they just automatically click it Big

00:05:00 Yeah, exactly. The confirmation dialogues and stuff you're like, well I have to copy this and paste that there. I just can't continuous I'm gonna just you know, instead of warning danger people I think people see I want to get my work done so click here to get my work done and then Oh, no. Yeah, yeah, yeah. Well Brian, I believe you have at least helped a little bit. David out in the audience's staring at right now.

00:05:23 Oh, I forgot to start off. So I'm gonna go start you better get in there start Boom. Alright. Plus,

00:05:27 to me, I was gonna start myself. But I'm not logged in any my browsers for some reason on this account. So no story enough to start it later. Okay. Also a little bit out of order. But I want to also just cover this other thing. We are generally not 100% of the time because there's still a little bit of long tail stuff happening. But generally, we are moving our livestream and recording the one where David said, I'm starting right now. Thanks for being here, David. That recording is now moving to Tuesdays at noon pacific time. So if people want to come be part of the live show, see the video version, as well as Dinesh make comments or whatever. Not Wednesday, Tuesdays in general, but check for the next week, couple weeks because it is still like some pre scheduled stuff.

00:06:11 Yeah. So how do people find out when it's coming up next?

00:06:14 I would say the best way is just to subscribe to the YouTube channel. And then you know, okay, I hate to save, push the little bell for notification. So it'll tell you like, hey, this thing's coming up. And it'll let you know that we've gone live. Yep. Yep. I don't have a great better way. Maybe we could do a mailing list. But it's it's a little a little tricky.

00:06:31 But usually stick around on Tuesday, Pacific, Tuesday, noon, Pacific will be recording.

00:06:37 Yeah, they if you check YouTube, once a week, you'll see it scheduled pretty far out. And then you can get a reminder for just that one thing, you know, to always get messages. Okay. So this is a fun one, how you mentioned some of the older programming languages. When I was in college, I was studying chemical Chemistry, Chemical Engineering, Math, all these different things. And as part of that, they said, You're gonna have to take a programming class, I'm like, super, what's it going to be like C++ or something? Remember, this is like, early 90s. So that was a good choice then? And they said, No, you're going to take the most important programming class you're ever going to take in your career, you're going to learn Fortran, I'm like, wait a minute. No, no, no, I don't want to do that. That doesn't sound like the most important thing ever. But nonetheless, that was one of my first courses I had to take I went to a couple eventually got to take some C++ but for general is where it started. So here's an article that was recommended to us. By him, it makes sure get the name right. gallon, Swint gallon is PhD researcher and said, Hey, here's a really interesting article. The article I don't believe is by them. But it's, it's about the sort of, I think it was something in their lab they were talking about, it says the title is the counter intuitive rise of Python and scientific computing. Why is it counterintuitive? Because Fortran is fast. And what you want to do is process lots of data and you want to do it fast. So here's a really interesting story of people who were doing older stuff like Fortran and C, sort of were forced in, coerced into doing a little bit of Python, and accidentally made their super computer stuff go, like 100 times faster, or something in Python, rather than in C or rather than Fortran, which is a counterintuitive result, right? Yeah. So I think that I'll cover a few details of this article, just put some highlights. But the reason I'm bringing it up articles that have like a tool or something is I think this would be interesting for people to share, if they're in a situation where they're like, oh, Python is no good. This is such a slow language. It's like doing math is like 1000 times slower than C, I don't actually notice but it's a lot slower. Right. So it goes through here. And here's a couple things in our laboratory, a polarizing debate rages since has been raging since 2010, summarized by the question, Why are more and more time critical scientific computations, formerly performed in Fortran now written in Python, a slower language, Python, a slower language? So Python does have the reputation of being slow and specially around math? I think it's honestly it's earned it. Unfortunately, I would really love sidebar, I would really love to see Python adopt something along the lines of value types that can be boxed back to pi. Long's, right, so like, on the stack locally, it's a number but it gets complicated, but I think that would actually solve a ton of stuff anyway. So So yeah, plain Python is slower than Fortran. But when you do computational stuff, you don't do plain Python. What you do is you do NumPy, Sai, pi, Basque. All of these things are written in C with a thin coordination layer in Python as part of its API. Right. So here's a like a, some graph you can see on the article and it says, here's like, you know, 10 to the one versus 10 to the minus two. So what is that 100 times faster if you scythe on or number or NumPy and so on. So pretty interesting. It also shows guess what shocker. PTTD news alert. Fortran is somewhat less popular than it used to be. Oh, no. So there's that interesting story of this project, nicknamed projector written in, written around 2010. So modern, in quotes Fortran by somebody named Bob. So Bob worked on this project. And there's apparently I mean, find the numbers here. It's like 1.5 1000 lines of Fortran code. So a lot of Fortran code like a lot of complicated math bits, the kind you kind of don't want to touch after it works. And it's gonna do, it's trying to project something 1000s of multiple multi perforations of combustion liner on the ton to a 3d complex shape made a millions of polygons. So that might get complicated when you multiply those numbers together. And it turns out, Bob soon discovered that he was going to use NumPy. And this thing called a KD tree. Because there's a bunch of people working live the only new pythons like, here's a Python version you can use and he thought this is gonna, this is gonna be rough, it's going to be super slow. So he went and ran it after he got it done. And the Fortran version ran and six hours and 30 minutes, the Python version, four minutes.

00:11:23 Wow. So what happened is Python 100 times faster? No, Python is easier to work with and has much many more built in algorithms and data structures. This KD tree thing was using a different data structure is a different data structure that has Oh, login complexity, where's the Fortran version, because it's so hard to write code in, they just wrote it in the simplest way they can make it work. So O N, and when you have billions times millions times 1000s o log n wins, even if it's a slower language. So if the conclusion was Fortran would have been faster if they had implemented this KD tree algorithm in it, but the people working on it, they're like computational scientists, not PhD data structure type people, right? Like, they're already super busy just trying to do the programming and not working on like cutting edge data structures and optimizations and stuff. So it was very easy to try one new thing in Python, which would have been very hard, and Fortran and because big win. So anyway, I think the debate about performance, developer speed versus execution speed, but also straight up execution speed. I think it's really interesting in Python, and it's, it's hard to be nuanced enough. It's always there some little interesting wrinkle like this.

00:12:40 Yeah. And if you're really, you're going to encode everything anyway, it's also faster in assembly, so just write assembly.

00:12:49 There's a downside. Yeah.

00:12:52 I've always wanted to stick to this one processor I really loved forever.

00:12:57 But it's this is interesting. I like it. But it's sort of reads like a commercial. So Bob was programming scientific computing. And he was not happy in Fortran. Bob tried Python, and now he's happy.

00:13:12 Well, I think Bob unwillingly tried Python. And eventually he was happy. Like, it sounded like he didn't want it. He was dragged through. Yeah, I know. It does read a bit like that. But I think it's an interesting story. That what do you think you've had you've a bit of a historical perspective on all this?

00:13:26 Yeah. I didn't didn't go to school for chemistry. But I bet Fortran is not popular among chemistry students. Is

00:13:31 it now? Not anymore? Sure.

00:13:35 I did a little benchmark. The other day, I was trying to just see how, how fast some eff storage was on AWS versus EBS. And so I wrote a Python script to do that, and wrote 10 million records out. And I thought, well, maybe Python is going to be slow. So I thought I'll just whip up a quick thing in Rust here. And as it turned out, Python was 10 times faster at that, too, on the same exact hardware. And I'm not sure why that was. I may not have done something that was optimal for rust, but there it is. 10 times

00:14:07 faster. Now. That's super interesting. I've seen Python just rip across like OH S type, stuff like that. It's pretty good. All right. Well, what's your first item? Pat, are we off to the metaverse? Or is the metaverse off to us?

00:14:18 I stumbled across this the other day. We we've you've had Lucas longer on the show the the programmer in residence and it looks like they're gonna get another year due to a donation from a meta of $300,000 to the Python Software Foundation. And it was

00:14:37 SMAP is fantastic. That's, that's a really big deal.

00:14:41 And Python is very important to meta Facebook's parent company now, um, because much of their infrastructure is built on it pytorch In particular, they use it a lot. So their internal implementation of Python has come Old Cinder, apparently, which I think I've seen mentioned a few times. But they would like to see continued development, and they're going to fund it, which is awesome.

00:15:08 Yeah, that's really neat. I think Cinder is a fantastic thing they've created. And it's, it's interesting, it's open source in the sense of like, maybe the better term would be source open. Like, here, we're gonna put this out here. We don't expect any contributions. And we don't, we don't want to put it out there as like a project to grow on its own. But we think it might inspire people. So here's the source. But what they have contained in there is amazing. There's just so many optimizations and different things. I think they might even have that value type thing I discussed in there. I can't remember. But yeah, that's a really cool project that they're working on. So this is great. You know, I think lukesh Langa has gone sort of full circle, right? He was independent, that he is at Instagram for a while, which is, you know, part of meta, and then left to sort of do his own thing and found his way to this developer in residence. And now meta is sending money so that he stays there. That's like an interesting circle, I think.

00:16:06 Yeah, that's good. i It's so it seems tenuous, though, that we have, like one year at a time that we don't die. Now, we don't know if we're going to have a developer and residence lawyer than another year. It's like a postdoc.

00:16:17 Hopefully, it's a game and tagless, the Microsoft coming next or something?

00:16:21 Yeah, exactly. That'd be great. And I think there are a couple of organizations doing that. So I know that there was a talk about having multiple folks sort of participating in that group, which would be great, because I know there's way more work than Lucas can do on himself. He's quite busy. Navarro in the audience has a fine name. proposal here, the PSF developer and residents should be called the PSF, Dunder underscore, underscore, dir underscore underscore, I hear why am opening up PEP well down. Just kidding. Gotta give him more work for something silly like that. But that's pretty awesome. The PSF Dunder Dunder. Cool. Well, thank you, Pat. Now, before we move on to the next item, let me tell you all about our sponsor today. And like I said, I'm really excited about this. I'm actually doing a bunch of work on some git presentations. And so I'm just trying to think about what's the workflow with Git, and how can we work better, especially doing team type stuff. So merge, FYI, is a service that will help you and especially your team be way better with Git. So it's an amazing tool to make you and your team be more productive with GitHub in particular, it's all about leveling up all requests. So some of the features of their platform that you hook into your repositories are automatic merges. So you can set up conditions for an automatic merge and merge a file will take care of merging the PR as soon as it's ready and passes all the details. There's automatic updates. So if you have multiple pull requests, it'll merge the pull requests serially on top of each other. So there's no way to introduce a regression. There's also merge queues. So if you've got like a long CI process, and things are slow, or you've got lots of code, you can set up priorities and have the most important ones merge fix, like bug requests or bug fixes, especially if they're security fixes, they go right here right to the front, those now, that's awesome. They also have something called backport. To merge, if I will copy the pull request to other branches once it's merged if you set that up, so that you can ship bug fixes to multiple branches, feature branches and whatnot, automatically, or even older versions, right version one of your app versus you know, to do whatever have those automatically merge those bug requests, bug fixes in super cool. So merge, if it does all these things automatically, they would otherwise have to do manually. So you save time, you you and your team will focus on projects that matter. The most modify is coordinated with any CI and it's fully integrated into get up. They also have a startup program that can give your company up to $21,000 of credits. So if you're doing a startup, and you want to use them to help grow, and reach out to them for sure, do that by going to Python bisetta FM slash modify, sign up for a demo and get started. The link is at the top of your podcast player show notes. So just click it. Thanks to modify for supporting our show. Very cool project. Yeah, I Brian, what's the next one? Well, we were

00:19:20 talking about data science a little bit and people using Python for data science. But one of the things that people use when they're doing data science, plus other stuff and DevOps and whatever, is a dashboards, dashboards in Python. That's one of the powerful reasons to use it. And there's so there was a, there's a couple things I wanted to discuss around dashboards. Both of them come via suggestions from Mark scope Madson. So thanks Mark. First is the easiest way to create interactive dashboards in Python. Obviously, it's their opinion, but it does look pretty easy is to use a HV plot dot interactive. So this is an article Oh, that talks about how to do this. And it really looks nice this, this, this panel looks pretty good. You know? Yeah, that's great pulling data out, you got dark and light. And you've got the the controls on your

00:20:12 sliders. Yeah. Okay.

00:20:15 So this is, uh, this is just using some pre canned data, but you can use obviously your own data. But the the article is pretty short. And one of the things I love about it, of course, is it's got a animated GIF to show you exactly what you're getting into. And then also a video. So the, one of the authors, Sophia just reads the like pretty much goes through the article and talks about it and shows the demo of everything. So that's nice. It's only like six minutes. I was watching it this morning. So really cool, if you want to try in, so he plot is part of the whole of his family of tools. So a lot of people are already using that. Or if you're not check that out. Cool stuff. Yeah,

00:20:58 it looks great. The other, I always want to have good use cases for this. And I just I don't find myself doing lots of dashboards and stuff. But every time I see them, like, well, what can I build a dashboard for that would be great to have this will.

00:21:10 So I have some use cases for dashboards, but I don't really don't want to spend a lot of time on it. And I think even though this is like six minute video of how to get through it through it, I think that probably I'd have to set aside maybe a half day to figure out something to make get it usable. But it does show that once you understand what you're doing, you can do with you can throw together dashboards pretty quickly and, and be able to, well, one of the we didn't see in the demo, one of the dashboard items was in the controls is like let's say you've got a whole bunch of columns or, or some different elements in the in a column in a row that you are in a column that you want to filter out. So there's ways to filter your data so that you're looking at different stuff. And I was like, I have an exact use case for this. So I'm pretty excited. The other. The other thing around plots is maybe HP plot or dashboards is maybe HP plot isn't the right thing for you. Well, we've got another thing is the PI Data global 2021 There's a video stream up on YouTube called the Python dashboarding shootout in showdown. And so this is different, a whole bunch of different presenters talking about building dashboards in Python using either dash or panel or Viola, or ao or streamlet. So watch different people do it. So if you want to watch some do use something other than HP plot this, watch this video. One of the things I love about this as if you're only used looking forward to one of them, as one of the commenters on this video put up hyperlinks to each of the different sections. So you can just hop right to the video part that you want to watch. Yeah,

00:22:50 that's great. So let's see it I love these dashboards is definitely one of their powers. I do anything with them. Sorry, Bryce

00:22:57 are some some pre built dashboards to monitor the Eks cluster in Grafana, and elastic. But this is another option, it'd be good to do something ad hoc, to get a quick and dirty maybe like a quick one out

00:23:13 to Brian D just like grab a panda's data frame and then make it interactive?

00:23:19 Not quite, but it's almost I mean, this this this is built to go really closely with Panda's data for him. So the the code is, you know, you're doing some some filtering some pipeline processing like group bys. And, and selecting indices in what index you're gonna use. And then, yeah, it's pretty much interactive at that point. But the some of the code around us is building the widgets for the controls.

00:23:46 You got to define the UI and how people interact with it. God, yeah,

00:23:49 it's not it's but it's pretty easy. I can't manage. I mean, it's not obvious, because so you have to, it's good to watch a tutorial or something. But it's also not difficult. And then putting it together. Yeah. So most of the code in here is not the interactive plot, because that's that's kind of already happens. But it's the widget widgets. Back. Cool.

00:24:10 Thanks. All right. I think you all will be excited about this. I think this is quite a neat project. Now, let's see, this was sent over by Dave Chevelle, or actually is posted over and is by Dave Chevelle, too. I don't know, Brian, do you ever use entry points in Python packages, you know, you can set up pip install a package. And then if you have that Python active, then you can just type a CLI command. That is one of the entry points there. I'm talking about, Yeah, do that all the time. That's great. But there is some overhead to set it up. Right? I've got to install it as a package and whatnot. This project called Source pi allows you to basically turn any function into a CLI command, straight CLI command in one line. So let me show you talking about and it doesn't involve packages and installing or anything like that. So imagine you've Got some file here. And it's got a function just a def function, pi grep is the example here. And it has a pattern, which is actually a regular expression pattern note, the typing has grep data with, which is a list of text inputs. So could be a string or something. But it could also be like something piped or standard in or something along those lines, right? So if I have this script that just does that work with those that type assigned data, and I have eyesore source pie installed, I can say source this file here. And what it will do is it'll actually add up the, it'll expose those functions like pipe, grep, and so on. So then I could just type by grep. Now tell me how it works. And somewhere in here was the example running it out right here? I think it is. So what you can do is you can just run pipe grep against now as a function, right as a CLI function. So it has all sorts of pool features. For example, it has this type handling. So type hints that we talked about, can be used to coerce inputs off the command line into like integers and patterns and IO streams for like files and standard in and such. Let's see, it just takes basically any function like this and turns it into something you run on the shell. And then you can also go down. And you can do like I believe there's some sort of class based way to work with it, and so on. But yeah, this is pretty neat. What do you think?

00:26:26 I guess I'm confused at how it works with the normal source command.

00:26:30 But that is a good like, how does it not break? Normal sort? Yeah, that's a good question. It is a good question. Like it doesn't replace it for a while you've got it installed, or does it extend it somehow? Yeah, I don't know. I haven't looked at it enough to understand how it either coordinates or overrides. Sorry. No, it's a great question. Yeah, I haven't played with it. But it's, it's really important. You would want to know, because you want to break your your regular source step. I'm sure you could alias it if for some reason it conflicted. But I don't know. I think I was.

00:27:05 So I think this would be really helpful for aside from that, if, if that's all working great. Then aside from that, I think it's a very useful way to have like, a handful of little tools for for a project to be able to use that. If you're trying to share it with other people, I think packaging it the right way to have entry points is probably the right way to go.

00:27:26 Yeah, yeah, you want to do a more formal like a pip X style. But this feels way more ad hoc, right, like Pat was talking about his little script that he built a test, some stuff could run this, and then just call those functions as if they were built into bash, or C shell or whatever. Definitely also also worth pointing out it has built in native async support. So if you have async functions, and you source it, then you can just call, call it as if it was a regular Command Line command. And it's, it's still just takes it and runs. And Kim Fenwick, who's been a co host here before, has a clever thisis I suspect it wraps the normal source command and hands it over to the normal source if it is in Python. Good idea. Probably. Yeah, probably. Although, like I said, I haven't really looked at the mechanism there. But this looks like a cool project. It's got all sorts of supported types, like JSON unions and Date Time objects and all kinds of stuff. So check it out. If you do a bunch of kind of ad hoc stuff with Python on the command prompt terminal, how's it strike you, I know that this might touch some of the things you're doing in your world.

00:28:30 Right now. Just yesterday, one of the guys was contacting me because he needed to go and cycle through a list of addresses to to hit an API and this, this could be something you'd use, like that consume this file and hit the API with each example. And away we go.

00:28:47 Yeah, absolutely. Yeah, this looks great for putting in little making those little scripts, even with Python, like literally scripts. I know a lot of people call everything Python scripts. But this is really for those types of files script. Yeah, a single file thing, not like a 20,000 line flask app. Right, that thing starts to stretch the terms of what script might mean, but this is exactly for those things. Yeah. All right. What's your final one pet?

00:29:12 least this is similar to what you just covered. Actually, you've talked I think a little bit about it before conch shell combines the best of bash shell and Python and the Linux terminal terminal. I ran across. This

00:29:23 is way more than what I covered. This is like another low here.

00:29:27 It takes it to another level. Yeah, I ran across the dawn. It's Foss, which is a nice site for open source type things. In a nutshell, what what it does is provide you with a new shell, where as they demonstrate here, you can use straight Python. You can import JSON, for example, and define a variable or a table, print, print that out and format it the length function here, but you can also then mixing in regular bash functions, where we, for example, here at curls from a website, the result comes back. And the length function tells you the length of that curl.

00:30:11 Oh, how interesting. And what are their little bit like, almost like a ginger Django template. But in your terminal, right, you put a little dollar to say, here's a bit of code to run on the shell, you know, shelter out here,

00:30:26 the one famous statement they have is, you know, I always forget how to do a for loop in in bash. But in Python, it's pretty easy. And they have kind of a rule that it evaluates to Python first, it officially evaluates to Python and executes as Python. If it doesn't, then more or less executes as bash. And I do have a link, we could we could put in the show notes to to a video demonstration from from their homepage. And the guy does a spectacular home demonstration with autocompletes. And, and they have what they call contributions. And that also begins with an exe. So it's like a plugin or an add on, but it's a contribution. And it is get aware. And it is a virtual environment aware. It sounds like a killer environment. But it would take some getting used to I have a lot of muscle memory to overcome to take full advantage. I think

00:31:27 it's cool. Brian, have you played with this?

00:31:29 You know, I tried to play with it a couple of years ago, but I but now I haven't. But I do want to. And I think one of the things, I didn't give it a fair shake, I think it would be good to just say, for a week, maybe I'm going to try to just use this instead of pulling up my normal terminal just to see if I can get used to it. That's

00:31:47 the thing. I think you have to immerse yourself probably. And it is about five years old. I think it's fairly mature.

00:31:52 Yeah, and yet, also, the less I write bash scripts, the more I wish that I bash scripts were more like Python scripts. So

00:32:02 now they are in there. Yeah, this is great. A good find. And it's something I've also wanted to play with but haven't. Nice. Brian, you got any extra Do you want to share with people?

00:32:13 I don't this week?

00:32:15 I thought I didn't. But then I did. I just wanted to do a quick follow up. Okay. I was just thinking about a couple episodes ago, where we talked about the March Madness package tournament that Chris May had sent in. And I was thinking, you know, it's probably done now, isn't it? Let's see who won. Because I think we were at the point where we were at the Elite Eight, or we, or I believe we were at the Elite Eight. So we had a showdown between NumPy and PyPI. NumPy crushed it. We had a showdown between pandas in requests, and has crushed it. And it was an all data science finale. And NumPy and pandas with the head, went head to head and it was pandas 55%. Taking the winter. So I just wanted to do a quick follow up on that very important news. We have a champion.

00:33:00 It's good, but try using Pandas without NumPy that'd be tough. I was bad. Do

00:33:07 you have anything else you want to get a give a shout out to

00:33:10 I do have one extra column. Okay, quick, like, oh, it's easy to bash Microsoft. But they've been involved in they bought GitHub, the have lots of our Python core developers working for them. And they have this rewards program. And they want you to use Bing search, obviously. But what you can do is choose a charity to get points to, you can also get like a $5 gift certificate to AWS or Amazon or something for yourself if you'd rather. And everyday, you just kind of click on these little links and, and I just got five points or 10 points. And oh, now we got to do a quiz. I'll come back to that later. And, and as you do this, you accumulate more points each today. And those points then can go to your charity, and I did the Red Cross for a while. And I did the CDC during our lockdown year there. And you can also donate to the Python Software Foundation. So that sound that's cool, so we can all contribute.

00:34:10 So if you're Googling stuff with being set up the rewards, with the vague set of rewards to go to the PSF you might as well right, that's, that's fantastic. Awesome. Well, thanks. That's a good one. I got a joke for you all here. And I know Brian, you do as well, but I feel like this one, I better take this one because I don't feel you're in a position to to make an unbiased decision here because it's so close to your heart. Okay. All right. Okay, so this one is over on the Reddit programming humor one, and it poses a question, what seems like a straightforward question for a piece of software. How do you exit Vim? And it types it are some you know, couple interesting options here you get colon exit seven burns center the people think you typed colon exit, they're wrong. You type a colon wq, which I guess if you want to make changes, cool, save your changes and exit you could do most people got that one. And then you could do colon quit 7%. Again, you could click the Close button hard for non UI app, but or almost 20% of the people said, You know what, the way you restart Vim, this horrible thing, I can't get out of it. I'm gonna restart the computer. I'm traveling, I just gotta get out. I tried command Z, or Control Z, and it just background it and now what's it doing? It keeps coming back. And

00:35:34 I think people clicked restart the computer to be funny. I

00:35:38 know they did. I thought and I pulled it up as a joke to be funny as well. But no, there you go.

00:35:45 I don't know the Close button works for me. i

00:35:50 Well, it closes the terminal, right? Yeah. Yeah.

00:35:53 So I mean, who doesn't?

00:35:55 You got to say, Do you want to terminate the running program? Right, it gives you like a warning that you're doing it wrong.

00:36:06 Not hard. And actually, I haven't I don't use straight Vim, except for on the command line. You're right. I guess I do that on the command line. But I do essentially use Vim within PI charm or VS code as well. But yeah, that made me elation. Yeah. Okay, it's fine. So I, I wanted to share a joke also, because I just thought this was so funny. I could stop laughing this morning. So ran across this tweet by mediocre superheroes. It's a little cartoon thing. So. So the guy you know, finds a genie. Genie says three wishes. Hey, can I wish for more wishes? Not with me? No. Fine. I wish you couldn't count. The genie done how many wishes? Do you have left? A billion? That sounds right. I love it. Anyway,

00:36:58 voice around an old joke.

00:37:02 So that's great. Anyway, oh, quick. Bit of audience feedback as well. Henry Shriner says, restart the computer. Isn't that how you get out of email? Also true? Yeah. Yeah, what key cord do I hit to get out of that one?

00:37:20 Fantastic. It's probably control something.

00:37:22 Yeah, I bet involves a Ctrl K something somehow. Anyway, thanks for everything. Brian. Thanks for being here. Thanks for the jokes and pen. It was great. You could join us. Yeah. Thanks, Brett.

00:37:32 Thanks for having me on,

00:37:33 guys. Bye, everybody. Bye, everyone.

 <|endoftext|>
00:00:00 KENNEDY: Hello, and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 158, recorded November 20th, 2019. I'm Michael Kennedy.
 
00:00:11 OKKEN: And I'm Brian Okken.
 
00:00:12 KENNEDY: And this episode is brought to you by Digital Ocean, Digital Ocean's awesome. Check them out at pythonbytes.fm/digitalocean, tell you more about that later. But Brian, I find that Python is making it's way into all these different areas, not just traditional computer science or maybe data science?
 
00:00:28 OKKEN: Right, there's an article that I saw that's kind of interesting, I mean there's not a lot of details, but essentially it's saying that Python is replacing Excel in banking and investing. The real title is, "Python Already Replaced Excel In Banking," but we've got some interesting quotes from here, so I'm just going to read it out. This is from the article, "If you wanted to prove your mettle as an entry-level banker or trader, it used to be the case that you had to know all about financial modeling in Excel, not any more. These days it's all about Python, especially on the trading floor." And it goes on to talk about how a lot of different modeling that used to be done in smaller cases in Excel, but it would take like a few minutes to run the Excel modifications and analysis, now they can do even way more data and have it done in like a second or two. So it does make sense in cases where split-second decisions change how you react to the market, that you'd want to have speed and ease. So Python makes sense to me.
 
00:01:36 KENNEDY: Yeah, that's really interesting, I'm sure it's used in a lot of the data science stuff like NumPy and whatnot, to make that fast. Deep down below, the whole trading, algorithmic trading, high speed trading, all that kind of stuff, the latency that those folks care about is crazy, right? Like if you could get it from four milliseconds to three milliseconds, we'd really appreciate that, right? And they'll actually rent servers that are nearly co-located to the stock market to reduce the actual latency, or set up alternate direct connections over microwaves, there's all kinds of crazy stuff, and so if you can go from minutes to seconds, that already seems like it would make a big difference to these folks.
 
00:02:11 OKKEN: Yeah, and also being able to go from minutes to seconds and while incorporating more data.
 
00:02:16 KENNEDY: Yeah. Super cool.
 
00:02:17 OKKEN: I'm imagining like walking through the trading floor and seeing some guy in a hoodie sitting with a laptop on the floor, I mean like, I don't understand this but, you know. Whatever.
 
00:02:28 KENNEDY: Five years ago that person would have been arrested, now people are like, "Hey, I need some help man, can you give me some advice on this trade?"
 
00:02:34 OKKEN: Yeah!
 
00:02:35 KENNEDY: I have a little personal experience with this, Python replacing Excel in banking and trading. I can't talk about the details, but I did teach a class to a bunch of folks working on the European stock market, and they actually couldn't even take the class during the day, because they had to be there while the market was open. So we had the class in the evening for a week over there, and they were all really into learning Python because they had been trying to analyze how their day went and do this kind of analysis that you're talking about in Excel, and they were just like, "We can't do this anymore, we have to get better tools." And Python was the answer for them as well. Pretty cool.
 
00:03:09 OKKEN: Oh, that's great. Interesting.
 
00:03:10 KENNEDY: Yeah. Another thing that I think is really, really good news, is something that GitHub just announced. GitHub has announced a ton of things while you were not with us last week, when we recorded in Florida, we talked about how GitHub has added code navigation to all of the source code there, much of the source code you go in there and click on functions and classes, and say, "Go to definition in Python." and that's pretty awesome. So give it a week and GitHub launches Security Lab, to help secure the open source ecosystem.
 
00:03:42 OKKEN: Wow.
 
00:03:43 KENNEDY: So you've probably heard about bug bounties and these bounties paid out to security researchers before, I would guess? Yeah, so it's pretty much like that, is my understanding of it. So, it's like a bug bounty program to go and find bugs in open source libraries, but what's kind of cool is it seems like the folks paying out that money are not the open source projects. Like, Apple might pay out a huge amount of money, like $100,000 for finding a big vulnerability in iOS, or Microsoft might, or whoever, but who's going to pay to find that security bug in Flask, or wherever it is, right?
 
00:04:20 OKKEN: Oh right, yeah.
 
00:04:23 KENNEDY: So it seems like that this is to pay for those types of things. So it says, "Organizations as well as individual security researchers can join, a bug bounty program with rewards of up to $3,000 is available to compensate bug hunters for the time they put into searching for vulnerabilities in open source projects."
 
00:04:40 OKKEN: Oh, that's neat.
 
00:04:41 KENNEDY: Cool right? Yeah, so apparently this has been in beta since, for a little while, when was it exactly, a little while, not very long, anyway the founding members who were part of it have already found, reported, and helped fix more than 100 security flaws already across the open source ecosystem. That's pretty cool. Another thing that's interesting is the bug report, in order to count, must contain a codeQL, like SQL, but codeQL or something? I don't know. CodeQL, which is an open source tool that GitHub released at the same time. Remember we talked about it, their semantic code analysis engine? And what it does is basically this is a query that runs against source code, that will uncover the vulnerabilities in dependent projects.
 
00:05:30 OKKEN: Oh, okay.
 
00:05:30 KENNEDY: So if I find a bug in Flask, I don't know if there is one, but let's just say, I'm just picking a random project. I find a bug in Flask, and I submit this, I submit a query to GitHub so that they can go find all the projects that depend on Flask that have out-of-date versions of Flask that need to also subsequently receive warnings to get their stuff updated.
 
00:05:48 OKKEN: So do they then notify all the other maintainers?
 
00:05:51 KENNEDY: Yes. So if you look at that article, there's some screenshots of what it gets. So they will get, the actual project will get an automated pull request that fixes the security vulnerability, maybe it bumps the requirements, pinned version to something where it's fixed, or something, right? It gets the PR to automatically fix it, and then there's also a button where they can publish an advisory out to, from that repository to dependent repositories. And they can also request a CVE, which is like a vulnerability official number to be recognized as an actual issue. So GitHub became, what was the term they used, a CVE-numbering authority. A CNA, of course. So that they can actually issue these vulnerability numbers to be understood and referenced as unique IDs across the security landscape.
 
00:06:46 OKKEN: Interesting.
 
00:06:47 KENNEDY: Yeah, so all this stuff is integrated into GitHub, so GitHub researchers find the issue in the main project, the main project gets a PR, the main project can then also push out these warnings to other folks and request CVEs for their projects. That's pretty cool, right?
 
00:07:02 OKKEN: Yeah, open source is growing up.
 
00:07:03 KENNEDY: Yeah, it totally is, and it seems like it's pretty solid for all the folks working on it. It doesn't seem like it requires much of the maintainers, it's more like there's this bug bounty program from what I can tell. And also they threw in there right at the end of this, GitHub also updated the token scanning, an in-house service that scans for like, API keys, AWS access keys, or whatever, that have been accidentally left inside a source code.
 
00:07:31 OKKEN: Oh, that's good. That's really good.
 
00:07:33 KENNEDY: Yeah, it'd be pretty nice to like, "Ah, you probably didn't mean this. Click this button to make this go away." Anyway, I think this is really cool, I think this is just plumbing to make open source more secure, and I like that.
 
00:07:45 OKKEN: Yeah and also just to be able to say, to have companies put money at open source projects to keep them fixed. And it's not necessarily trying to get the official maintainer to do it, but to have some incentive for everybody else to watch these things, so that's great.
 
00:08:04 KENNEDY: Absolutely. These bug bounty programs have been working really well for the industry, and it's cool to see GitHub putting that in there. Also cool is Digital Ocean, not just for sponsoring the show, but because they have awesome infrastructure and awesome product, and we use them for our stuff. So let me tell you about a new thing that they have generally available, memory optimized droplets. And if you have a memory-heavy workload, basically this is the best way to get tons of memory in a droplet or a virtual machine. So you can get eight gigs of RAM for each dedicated CPU, and then it goes from two CPUs, all the way up to enough to get you 256 gigs of RAM, whatever that math works out to be. And it's really good for high-memory applications like high performance SQL, or NoSQL databases, in-memory caches like Redis, or indexes, some kind of large data analysis run-time, something like that. So check those out at pythonbytes.fm/digitalocean, really good stuff over there, lots of cool things come in. Brian, what you got next for us?
 
00:09:05 OKKEN: Well, we have a couple of friends of ours, Bob Belderbos and Julian Sequeira, they run a thing called PyBites and PyBites challenges. Not affiliated with Python Bytes, just sounds similar.
 
00:09:18 KENNEDY: It's the I versus the Y, it's not even close to the same thing.
 
00:09:22 OKKEN: It's P-Y-B-I-T, dot E-S. Anyway. I enjoy it, it's a challenges platform where you can just sort of, there's a few of them for free, but it is a paid service, it's one of those things where they give you kind of a written assignment and some test code already there, and it checks to see, and then you have to fill in the body of a function to make all the tests pass. It's kind of a brain teaser sort of thing. It's a fun way to keep up, make sure that you're practicing out of the box Python stuff that you don't normally do, that's what I use it for. But the news is they just added test coverage, or testing, so in the past you didn't write the tests, they wrote them to evaluate your code, but they've added a few test challenges where they write the code and you have to write the test code to check that code. And it's kind of cool, but they actually talked to me about this as well as to try and pick my ideas, but they came up with it on their own. How do you evaluate if the test code is good? So you evaluate if your source code is good by running tests but the other way around is a little difficult.
 
00:10:32 KENNEDY: Yeah, how do you test the tests?
 
00:10:33 OKKEN: Yeah, so they did it a couple of ways. They're using coverage.py to make sure that you're hitting 100% coverage, and yes it's debatable as for a large project of whether you should get 100% coverage, but for a small function or some small bit of code you should be able to hit 100% coverage, that's a nice thing. The other one is mutation testing. So there's a couple of projects we've heard of, MutMut and MutPy, M-U-T-P-Y, and I think we talked about this earlier but Ned Batchelder did write an article about his experience with MutMut. But PyBites is using MutPy, and what it does is it takes your source code and changes something about it, and MutPy works at the level of the abstract syntax tree and it changes like, for instance, a division operator to a multiplication. Or it changes a string to some other string, or something, and then it runs the tests again. And the idea is, you want your tests to be able to, it makes a whole bunch of mutants of the code, and you want the tests to be able to kill off all the mutants, except for the original. That's how they're testing it. It's kind of a neat idea, but it's fun to play with.
 
00:11:48 KENNEDY: It is an interesting question to ask, how do you test the test? And I think that's pretty creative. Well done Bob and Julian.
 
00:11:54 OKKEN: I haven't used mutation testing a lot, I've tried it out but I haven't used it for projects. The idea of using it in a training situation is a novel thing I haven't heard of before and I think that's a cool idea, to be able to try to test somebody's test code.
 
00:12:11 KENNEDY: Yeah I agree, and like you said, 100% code coverage for a project that's real, that's challenging, I think also maybe mutation testing for a project that's real tricky, because maybe it changes, I don't know, the print statement that shows what the title of the app is, and who cares? No one's going to check for that, right?
 
00:12:27 OKKEN: Right.
 
00:12:28 KENNEDY: But in this case, where pretty much it's a very small focused bit of code, and you're supposed to test it, presumably any changes to that are going to appear in the couple of tests you write.
 
00:12:37 OKKEN: Yep.
 
00:12:38 KENNEDY: Nice, now speaking of tests, I feel like I stole this one from you Brian, just out of the universe I mean. So I want to talk about pyhttptest, now this one comes from Florian Dahlitz, and he actually sent in two things for this week, which they were both excellent so I'm going to cover them. This is a command line tool for HTTP tests against RESTful APIs. Alright? So the idea is basically I want to test some RESTful endpoint, and instead of going over, say okay, I'm going to get requests, I'm going to do a GET, I'm going to get the dictionary, I'm going to verify this thing is in the dictionary, and so on, what you basically do is you just write a simple little JSON document for each test that you want to run.
 
00:13:23 OKKEN: Oh cool.
 
00:13:24 KENNEDY: Yeah, so then it has things like, "What is the name of the test? What HTTP verb do you want to use? What is the URL? Combination between host and endpoint, the headers you need to pass, and a query string you need to pass." and then you get back a report, it actually gives you a cool report in a columnar-style validation that lets you assert things about it.
 
00:13:43 OKKEN: Yeah, there's a handful of these types of things and I think it's kind of a neat way to describe API testing.
 
00:13:49 KENNEDY: Yeah, it seems really cool. There's a bunch of neat little libraries that are used as well, like Tabulate, which is a cool way to print the tabular data that they're showing there, and things like that. But yeah, I like this project. If your job is to test a bunch of HTTP endpoints, this is pretty cool.
 
00:14:06 OKKEN: Yeah, neat.
 
00:14:07 KENNEDY: Nice. Alright, what else? What's next?
 
00:14:09 OKKEN: Oh next, xarray. This was suggested by a listener, I think it's Guido Imperiale?
 
00:14:17 KENNEDY: Yep, I agree. Thanks Gido.
 
00:14:18 OKKEN: Yeah. Sent it in, we haven't covered it before and actually I didn't know about it before, people in the data science community probably do because it seems pretty powerful, but the gist of it is, it uses and builds on top of NumPy and pandas and Dask, to offer N-dimensional arrays. You can do N-dimensional arrays in pandas already, I believe, but one of the neat things about these is that they've got labels on them, so they're self-describing and they've got indexes. There's a few data types within it, there's xarray data array, the data array is the n-dimensional array, but it has metadata like names and labels for the dimensions. And you can also have coordinates and attributes, and coordinates are essentially like the tick elements for the different axes. And then the attributes, the data array doesn't really do anything with the attributes but it's a way to consistently keep data with data, so if you have to keep track of some extra things like, you know, where was this data collected or really anything, you can add them as an attribute. And then a data set is a dictionary-like collection of data array elements. I was playing with this and it's pretty darn cool, one of the nice things about using it is just keeping all of that, the dimension names together, so if you have a multi-dimensional array, even just like a three-dimensional array, it's sometimes hard to keep track of which axis is which, and this is all together. But it's not just packaged together, you can also do things like use the label names and the axis names, and even axis elements, the coordinates, they don't actually need to be numbers. For instance, you could have the months of the year or the letters of the alphabet be coordinates. You can use those as selectors to be able to select rows and columns, and those return different data array elements. The data array elements also can be used in algorithms, they can just be passed directly to pandas algorithms, so these are pretty cool.
 
00:16:31 KENNEDY: Yeah, it looks a little bit like it's taken some of the features from NumPy, some of the features from pandas, some of the features from Dask, and sort of brings them together into one package.
 
00:16:40 OKKEN: So when I was going through some of the tutorials, I was going to get somebody to talk about this, it was like a three-dimensional array, I think it's in pandas, used to be, is considered a panel, but when I went to look at the panel information it looks like panels are being deprecated for something else. So even in the pandas documentation, it was pointing to this xarray project.
 
00:17:04 KENNEDY: Oh, interesting.
 
00:17:05 OKKEN: So I think the people in the pandas community are definitely familiar with it, but if you're using pandas kind of on the side and you're not really in it all the time, this might be helpful.
 
00:17:13 KENNEDY: Now, previously you spoke about Bob Belderbos, and I said we got this item from Florian Dahlitz, I'm going to bring those two things together in this next one, so Bob had introduced us to Carbon, remember that?
 
00:17:26 OKKEN: Yeah!
 
00:17:26 KENNEDY: Carbon is sort of beautiful screen shots for colored code, right? It's like a mock, faux little shell or whatever editor, like you don't use screen shots of real editors, you just create that with Carbon at carbon.now.sh. And that's cool, but those are generally static, so Florian sent in this thing called termtosvg, and it's a cool way to create animated terminal gifs. So instead of going all the way to create full-on screencasts of your screen, you can run this in your terminal and then you just do whatever you want to do in the terminal and it captures it perfectly into SVG, and then you convert that out to some kind of animated thing. I guess the SVG itself is animated, so you just show that in the browser, or wherever you want to put it. Isn't that cool?
 
00:18:19 OKKEN: Yeah, very cool.
 
00:18:20 KENNEDY: You basically just type termtosvg, once you have it installed and it starts recording, you can do a bunch of stuff and then there's a way to get out of it's recording status. So that's pretty cool, it produces lightweight, clean-looking animations or you can even do still frames if you want, for a project page. So instead of, like Carbon is cool because I can put in the text and the code I want to show up, but maybe it doesn't have, "Here is what the progress bar, and then the install steps with the spinner look like." right? It doesn't naturally capture what actually happens when that code or those terminal commands execute. So this will, it has color themes, animation controls, all sorts of good stuff, and yeah it's pretty cool. So there's probably if you want, if this sounds interesting, you want to check out the examples. So there's a whole page of examples and there's a bunch of different stuff happening, you can just look through there. And I think there's also templates that configure how it records and stuff, so there's a bunch of predefined templates that you can go play with to get started from.
 
00:19:20 OKKEN: That'd be really cool for like a tutorial site or something.
 
00:19:23 KENNEDY: Yes, exactly. Or even if you have a project, like if you're the maintainer of pipx it would be cool to use this to create a way to show how awesome pipx is. Like this step, then this step, and then boom, right? Just put that right in your GitHub README.
 
00:19:37 OKKEN: Yeah, I love it when there's little animated things in the README. So when you go to GitHub you just see that.
 
00:19:43 KENNEDY: Yeah, you and I, we spend an inordinate amount of time jumping into new projects and going, "Is it interesting? Yes or no. Why is it interesting?" Right? And this kind of stuff is the thing that just goes, after ten seconds I knew I wanted to learn about it, right? It really makes a difference, and it's easy.
 
00:20:01 OKKEN: Yeah. Yeah, very cool, I'll definitely check this out.
 
00:20:03 KENNEDY: Yeah, for sure. All right yeah, so that's a good one, people can check that out at termtosvg. Cool, all right, well that's it for our main items, what else you got?
 
00:20:11 OKKEN: I have one bit of extra news, is that pytest 5.3.0 was released the other day and it is mostly, there's some cool features, and if you're pytest nerds definitely check it out, but I wanted to bring it up because I think a lot of people that just use pytest and are using it with continuous integration systems should pay attention to this, because the JUnit XML output, they've changed the default so the default format, there's an XML output, there's an old version and a new version, the new version has some more information. But they wanted to make sure that people know about this, so if you run it you'll get a warning, and it's not really a warning, it just says, it's just to make you aware that there's a particular format that's being deprecated. So eventually in the 5.4 release, they won't support the old format. So if you see this, encourage anybody using pytest and continued integration to read the change log and understand what's going on, and make sure they're ready to either pin pytest or change their system.
 
00:21:15 KENNEDY: Yeah, that's a good thing to put on people's radar for sure.
 
00:21:18 OKKEN: Okay, how about you, Michael? Any extra spits?
 
00:21:21 KENNEDY: Yeah, I got a bunch for you actually. Couple of things, PyCon, PyCon's awesome, we love that each year, and this year it's going to be in Pittsburgh for the first of it's two years, in that city, and PyCon registration is now open. You can go and register, get your ticket before it sells out.
 
00:21:38 OKKEN: Oh cool.
 
00:21:39 KENNEDY: Yeah. That comes to us from Jacqueline Wilson, so thank you very much for sending that in, and then also I saw, I can't even remember where I saw this, actually I think somewhere funky like Flipboard or something, So FaceBook has now decided that Microsoft's Visual Studio Code is their default development platform, that's a little surprising to me.
 
00:21:58 OKKEN: Yeah, interesting.
 
00:21:59 KENNEDY: Yeah, there's an article on zdnet, and they're also helping Microsoft improve their remote development experience in VS Code. Cats, dogs, all living in the same place. Yeah, this is cool, I suspect that things like Vim and Emacs and stuff probably have a strong representation there, but apparently it's all about Visual Studio Code over there now.
 
00:22:21 OKKEN: Anything else?
 
00:22:22 KENNEDY: Yes, two more things, very exciting. So if the release schedule lines up correctly and the future extends as I expect it, this should be Wednesday before Thanksgiving, right? And that would mean a day or two after that is going to be Black Friday. So I just wanted to point out that Talk Python Training is going to have a really awesome Black Friday sale, you get a whole bunch of stuff on buying all of the courses but also we're doing some special things to support the PSF and other stuff, some surprises in there that I suspect people won't guess at. There's no way people are going to guess what is there, so check it out over at training.talkpython.fm, but you got to act right away because it's only going to be there for like four days, it's a big deal. So, check that out, and also we have a new course coming, Python for the .NET Developer. So many people are coming from C# and the .NET world over into the Python space, I thought it would be cool to create a course that kind of gives them a big hug and holds their hand and helps them step over that divide, so it's like, "Do you know about ASP.NET? Here's Flask, and here's how you use it in Python. Do you know about Entity Framework? Here's SQLAlchemy, here's how you use it in Python."
 
00:23:34 OKKEN: Oh nice.
 
00:23:35 KENNEDY: Like all the things they think that they need or they love from C# and .NET, here's the Python equivalent and why it's awesome and how it works.
 
00:23:41 OKKEN: Is that one that you did, or did somebody else do that?
 
00:23:43 KENNEDY: Yeah. Nah, nah, I did that one.
 
00:23:45 OKKEN: Cause you're like the perfect person for that.
 
00:23:46 KENNEDY: Exactly, I spent so many years doing C#, and now I'm all about Python. So exactly, I figured like, why don't I try to think back to the way it was for me many years ago, and sort of extend that experience back to other people? It's probably not going to be out yet, it may be out at the time that people hear this, but it's coming really soon so I'll just put it out there as that.
 
00:24:04 OKKEN: That's nice. Hey speaking of Black Friday, I do not have any insider knowledge but Pragmatic Publishers often does a Black Friday sale too, it's usually fairly steep so if you've not picked up the pytest book yet, and really if you're listening to this and you haven't read it yet, what's going on?
 
00:24:22 KENNEDY: Come on.
 
00:24:23 OKKEN: If you haven't, maybe check out pragprog.com and see if there's a sale.
 
00:24:29 KENNEDY: Definitely, I'm sure there will be. It would be surprising if there weren't. Awesome!
 
00:24:33 OKKEN: How about a joke, or two, or three?
 
00:24:34 KENNEDY: I like three jokes. It's a good number. So this first one is more of just a geeky STEM type of joke, but I think people will like it. So I love soda drinks, you know, Coca-Cola, Dr. Pepper, root beer, things like that, so this one, I try to not drink too much but I do like it. But here's how that world can clash together with math. What do you get when you put root beer into a square glass?
 
00:24:59 OKKEN: I don't know, what?
 
00:25:00 KENNEDY: Beer.
 
00:25:01 OKKEN: Beer! I don't even get it, but it's funny.
 
00:25:05 KENNEDY: If you take the root of beer and you square it, right?
 
00:25:07 OKKEN: Oh, okay. Okay.
 
00:25:10 KENNEDY: Like the square root of beer, and then you put it in a square glass.
 
00:25:12 OKKEN: Okay, that was bad.
 
00:25:13 KENNEDY: What's your next one here?
 
00:25:14 OKKEN: Okay, what do you call an optimistic front-end developer?
 
00:25:18 KENNEDY: I don't know, what do you call him?
 
00:25:19 OKKEN: A stack-half-full developer.
 
00:25:21 KENNEDY: That is awesome.
 
00:25:23 OKKEN: Okay, now I also was going to tell a version control joke, but they're only funny if you git them.
 
00:25:30 KENNEDY: Git, G-I-T. Those were both good, I like them, yeah. Great.
 
00:25:35 OKKEN: Cool. Well thanks again for having a nice conversation this week.
 
00:25:38 KENNEDY: Yeah, you bet. Thanks as always. See you later, Brian.
 
00:25:40 OKKEN: Bye.
 
00:25:41 KENNEDY: Thank you for listening to Python Bytes. Follow the show on Twitter via @PythonBytes, that's Python Bytes as in B-Y-T-E-S, and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way, we're always on the look-out for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.
 
 <|endoftext|>
00:00:00 Hello, and welcome to python bytes where we deliver Python news and headlines directly to your earbuds. This is episode 262. Recorded December 8 2021. Oh my gosh, it's almost winter. I'm Michael Kennedy.

00:00:12 And I'm Brian knockin.

00:00:13 And I'm Leah Cole.

00:00:15 Yay. Yay. So great to have you here. Thanks for being here on the show.

00:00:19 Yeah, happy to be here.

00:00:20 You and I got a chance to discuss airflow over on talk Python a couple months ago, something like that. Yeah. Yeah. But now, we'll probably do a little more airflow over here for people who are unfamiliar that but also just whatever you're interested in, so yeah, great to have you here. Why don't you tell people quick bit about yourself before we jump into the topics?

00:00:39 Sure. So I'm Lia and I am Developer Relations engineer in Google Cloud. And specifically, I work on Cloud composer, which is our hosted managed product of the popular Apache Airflow project, which we'll talk about a little bit later. And in addition to writing samples and content for that, I also work with a group of fellow engineers, and we maintain all Python samples for Google Cloud, and make sure that they stay tested up to date, and are healthy and they're getting reviewed for new samples. And that's a lot of fun. That kind of fell into my lap in his

00:01:17 passing. Yeah, I remember Python being one of the original, two supported languages on Google Cloud, right? It's sort

00:01:24 of a special place. Yeah. Now it's one of seven, I think.

00:01:28 Yeah. Cool. Well, that sounds like such a fun job. I've always imagined dev relations type of jobs to be super fun, maybe slightly less fun and COVID. Because the travel conferences and yeah, you know, all those kinds of things are part of it. But still a fun job, right?

00:01:41 Still a good time. Every day is a little bit different. You kind of never know what's gonna happen. And that's part of what I like about it.

00:01:47 Yeah, awesome. Cool. Brian, I don't even know we're gonna cover so I don't know what's gonna happen. Why don't you let us know? You know what I'm gonna cover? i Well, I'm not looking at my Docs yet. Oh.

00:01:59 Sorry. Fighting the cold. Um, I am super excited by this seven release candidate. One is out. So

00:02:06 oh, that's excellent. That's big news. Yeah, is

00:02:08 the last release for PI test was or six. They've done two other dot releases. But this six, two or six, zero came out six, two, I don't know, I lost

00:02:18 track, we use six to four for our GCP samples. So

00:02:22 Oh, you do? Well, the this, I think it was I wrote this down the six to zero was released on December 2020. So it's been, it's we're ready for a new one. So seven O's out the release candidate at least. And so in because it's a release candidate to install it, you have to do pip install PI test, double equal 7.0 dot zero RC one. We've got that the show notes. It's also on the release, release. Announcement page for PI test. But I wanted to go through some of the some of the cool features that I'm really excited about. There's a lot of great things in there. There's some little improvements with the approx thing. So one of the things pi test has is an approximate, you can say floating point numbers if you're comparing them, you should never do equal but you can do equal approx with PI test and it's really pretty cool that

00:03:16 now I didn't know that because I know that science you're doing is so like double equals is the kiss of death for floating point math comparison.

00:03:24 Yeah, well, the the PI test approx does. Now the docs reference the numpy comparisons, which is nice, because NumPy has some really cool features around that. But But pi tests out of the box does. And now also with mappings and dist dicts and other sets, it does it handles decimal types, which is nice. Decimal types, of course, are very useful when working with money and other things that need to be exact decimals. One of the things that's really cool is this sequences are compared better. So if you have like a list of numbers, and you compare against in approximate list of another numbers, I didn't know you could do this. It will tell you which index was was wrong. And i Whoa, nice. And actually not by how much but what what the expected was and that's pretty neat. So those are little minor features. Most of these are kind of minor from it, but it major first somebody right. So one of the things I like is some people have mentioned fixtures or sometimes when people use a lot of fixtures they don't know where the fixtures are. Well there's a couple flags, fixtures, protest and dash dash fixtures, there's to both those flags are helpful to find out where what fixtures you have available. And now by default, they print the location of the path in with the fixture name. And you can also do a verbose option that prints out the full doc string, which is which is pretty handy. There's a couple things that I'm really excited about our Python path that's been added. And that was a feature I added to the Project, which is fun.

00:05:01 It's cool to see the contributions you're making come back out.

00:05:05 Yeah, that's cool. And it's and then there's a bunch of other features that I contributed to by just saying, this is a little weird. Can we fix this and somebody else volunteered to fix it. So it's nice.

00:05:15 That's the best kind of contribution.

00:05:18 Yeah, one of the one of the improvements in the docs, which is kind of fun is there's an auto generated list of sort of got the change lot going on here. And I gotta come back to this. There's an auto generated list of plugins, and there's 963. Right now, we'll refresh it, Nope, still 963, that's a lot. When I first started writing the the beta, or the second edition of the PI test book, I noticed this and I wrote it down of it, the number keeps changing. So I took out the number, it's a lot, it's a lot of cool plugins. One of the things that if you'll notice, when you go to the change log, it starts with breaking changes. And then deprecations. In I know, I think this is around because people when they upgrade, they want to know if it's gonna break their code or not. I have tested a bunch of stuff and upgraded from six to seven. And I haven't noticed a lot there was, there was a, like a six, one to six, two, I can't remember what the the there was one break a while ago in the 6x, that that messed some plugin authors. But I haven't noticed any problems. So please try these out. I wish they would do the features first and then not the breaking changes, because that's

00:06:29 I suspect, it's the people working deep in the guts like the plug in authors that hit these deprecations. And not just people doing a start this equals that type of work.

00:06:40 Right. One of the things that I didn't list, but I think a lot of people are excited about there's more the objects within PI tests that people are using more of them are type hinted now so that you can do type hints with objects.

00:06:53 Oh, that's nice. Yeah, that's really nice. So fun. We do use PI test some of these changes, exciting.

00:07:00 We do we use PI test on our Python samples. And so I actually the one that was most exciting to me was the fixtures, figuring out where fixtures are is definitely something that comes into play for me, especially when we're maintaining something that was written a while ago by someone who might not be working on that code anymore. Yeah, yeah.

00:07:21 Nice. Yeah. It's great. I love the PIP installable RC one. That's great. And before we move on, to taking a step back, Roman, right author, a beanie, hey, Roman out there in the audience says, Hey, I'm a big fan of Google Cloud. Oh,

00:07:32 thank you, for sure. Well, I've

00:07:34 got some fun stuff to talk about next year, I want to talk about this thing that David Smith's former co guest co host here on Python bytes, sent over and said, This looks cool. Sam Lo and Phillip well released this thing called pandas tutor. Handle. Yeah, previously, Philip had built Python tutor at Python tutor.com. Now there's pandas tutor comm. And it's all about just helping you understand what the code does. So it basically says, look, there's this code here. Like, imagine you've got a list of dogs that have a breed, a type belong, devotee type is like a herding dog or a toy dog. It goes in a purse, longevity, size, weight, and so on. And you've got that as a data frame. If you wrote dogs were the size equal equal medium, than sort values on type than group by by type and then showing the median? What does that actually doing? Like? How do I understand that right, as somebody learning pandas, imagine, I don't really have a database background. And so I'm not sort of trying to map that over to like, okay, there's the where clause, there's the ORDER BY clause, and you know, like that kind of business, right? So what, what is happening when I write that code, either because I'm coming across it for the first time, or, which happens to me a lot. I wrote it two years ago and understood it perfectly, then I have no idea what it does now. Oh, my name? Yeah, that happens way too often, right. So what you do is you can go and run this code over in pandas tutor, and you say, visualize and says running a code, please wait. And so what they do is they put a CSV bit of text in here is like a triple string, and then use pandas read, and then just do that one line. So that's a nice way to kind of get data in there. And the way to think about this is steps. It shows you what is the first step and what is the second step, and so on. So when you go there, you'll see that it has the code that we were talking about. But then right now the effect of WHERE clause, the filter is regular font, and the rest is great. It's like fade into the background. So you can actually see what the starting data frame was and the ending data frame and then how it got in there and you can use the mouse over like so what they're saying is the type is medium. So if you hover over like a large or a small dog, there's just no arrow but if you hover over medium, it shows you where in the result that that thing landed. Isn't that cool? Wild in that wild? And so then you can see size has all the values on the left and then the size is group On the right, and it should medium, medium, medium medium, because that's all that's in there. Now, when I first looked at this, I'm like, there's a bunch of stuff on the screen what's going on? I noticed the arrows. But then what it took me a minute to realize is there's multiple steps. So the next thing if you scroll down, shows the same code at the top. But now the sort values type nice is highlighted, right, that's the next part of what looks like one expression in pandas. And so now it highlights the column that it's sorting on. And you can actually see the arrows pointing to how they were reordered in the result because you're sorting by type. So it's non supporting, non supporting, non supporting, non supporting and supporting, supporting and working, working, and so on. So that was step two, we have a group by This one's interesting, I said have arrows as colors. So the group by type, again, non sporting, sporting, so on, you end up with these groups, like here's a blue blue box of all the non sporting dogs, the Bulldog, the poodle, the French Bulldog is so cute. Then you've got the golden retriever and the Labrador in the box, right. So these are grouped into the colors. And then finally, you do the median. And it shows how those groups reduced down to statistics, like the longevity of a non-sporting dog is less than a Sporting Dog, apparently, but they're also lighter. So anyway, what do you think, Oh, my

00:11:11 gosh, I love this.

00:11:12 This is nice, right?

00:11:13 I'm a very visual learner. So I really appreciate this. And especially if you're working with data that you kind of aren't sure what it does, and or the like, that's pretty incredible. I'm filing this away, it's gonna go to my team's group chat pretty much as soon as we're done recording, in fact,

00:11:29 yeah, it's awesome. I think it's really good. You know, there's so many people who are presented a notebook or presented some kind of result. And they're like, I need to understand what that means. Yeah, I can keep falling. And I think, you know, throw it into here, something like this would be really helpful.

00:11:42 What and a lot of people that have spent a lot of time with databases might, it might be obvious what these things do. But for people that don't spend a lot of time with SQL, it's not obvious. And and so this is really nice.

00:11:56 Yeah, definitely. Or if you're like trying to take some example that you have with their example data and trying to translate it to your own data. That's something like customers do all the time. For us. It's something I do a lot too. Just seeing how your stuff. Oh, man,

00:12:13 you didn't write it, but you want to use so how much applies? Yeah, exactly. Yeah. Yeah. So this is quite cool. Dean out in the live stream. Hey, Dean says pandas tutors, pandas tutor looks awesome. And Robert Robinson also loving it. It's nice. So very cool. Indeed. All right. Over to you, Leah.

00:12:31 All right. So yeah, my first thing today is Apache Airflow. So airflow is a project that is part of the Apache Software Foundation. It's a workflow orchestration tool that originated at Airbnb, I want to say like 2014. And then pretty shortly after became part of the ASF, and it became a top level Apache project in early 2019. It's been a little while now, which is very exciting. So you can use it to author these workflows as directed a cyclic graphs, or DAGs of tasks, which is pretty cool. And it's most commonly used with workflows that are like pretty static, not super frequently changing or slowly changing, just so that you can see how the workflow goes over time. And that allows you for some clarity and continuity in your workflows,

00:13:22 I've always sort of wondered what the role of these workflow type systems were, until I realized, you know, if you're going to build a full end to end type of workflow without a framework, there's a lot of coordination. And what if this fails? Where do you restart? What do you do, and then the analogy for me is kinda like flask or some web, like, all I got to do is write this little thing. And everything else will come together to make sure these four lines of my Python code run, they run reliably, if they fail, it gets dealt with, right, it allows people to not have to understand the whole system and just go, I need you to load up this file and put it into that database. Can you write that code? And that's all you got to know, to be part of some complex thing, right? Yeah,

00:14:00 it's, I mean, it's not the most glamorous thing, but it is extremely useful. I mean, I did a summer internship when I was doing my Bachelor's, where I wrote a cron job that ingested some data every night. And the only way I knew if it failed was if I looked in the target folder where it's supposed to end up and if the data was there,

00:14:21 files, whoops,

00:14:24 that sorry, I'm sure a lot of people have dealt with that. And this is actually like a really common airflow workflow, which is the extract, transform and load the ETL workflow, which is where you have data somewhere that you want to get, you want to do something to it. Or maybe not, maybe you just want to extract and load it. And you want to put that result somewhere else, either locally or in the cloud for all of that. An airflow lets you do all of that. And you can see the history of these jobs. There's a UI where you can see did it fail it has a full error message if it failed. It's not just oh gosh, the data center Not there. What do I do? Yeah,

00:15:01 you've got a really cool UI where it shows all the parts of the workflow running. And yeah, whether or not they finished successfully and stuff, right?

00:15:07 Yeah. And it got to make over fairly recently. So a lot of improvements. Yeah, that's

00:15:13 super cool. Another thing maybe you could talk about really quick. Yeah, connectors, I don't remember exactly the right terminology. There's a yes, a name for them. Tell us tell people about that. That's good to know.

00:15:24 So these connectors that you're thinking of, I mean, we use the word connector to describe what it does there. So there are these things called operators and airflow and an operator executes a single task. And so that might be executing a bash script or executing a Python script. But we also have these connectors that are grouped by providers, which might be your cloud provider or other software providers that allow you to execute code there. So for example, we have a ton of GCP operators. One example might allow you to create a data proc cluster, or then like run a job on that data proc cluster, and maybe tear it down when you're done. And we have there are providers that have operators for all the major clouds and more you can do, there's one that like sends a Slack message when it's done. So it's, if you can dream it, it might be there. And if not, you can make it there.

00:16:18 That's awesome. Yeah, what's GCP?

00:16:20 GCP? Is Google Cloud Platform, or GCP? Might be a dated acronym. Sorry.

00:16:27 Done.

00:16:28 Yeah. Yeah. So one of the advantages, I think of that that's really cool is you don't necessarily have to know all those API's. Like, if I was gonna connect slack to GCP to like Azure Blob storage to like some hosted database, I don't have to learn all those things, I can just sort of click it together. Yeah, you just

00:16:45 have to, there's a small amount of setup you have to do for auth, which is understandable, you can't just like publicly go to your Azure Blob thing to grab your data. But once you've set up that connection, then your operators can talk to those things. And if you use so you can run or host airflow yourself. And there are a few different ways to do that. And then Amazon and Google both have managed hosted providers. And there's a company astronomer that also does manage hosted ones. And so if you're in an Amazon or a Google, the advantage there is that the connections with those operators might be a little bit simpler from the off and networking perspective. But other than that, you're you can still like if you're running in cloud composer, which is Google's airflow, you can still be using the Amazon or the Microsoft operators to pull data from over there. That's really common. And you see it all the time and bring it do some stuff in Google Cloud and either put it back in the other cloud or leave it in Google Cloud. That's totally normal. And people are doing that all the time.

00:17:47 Right on. Yeah. Cool. Cool. I think this is neat. And people for whom that would make sense, you're like trying to do these are running in the background? Yeah, scheduled jobs, or there's triggers as well, like a file has been uploaded or landed here. Yeah,

00:18:00 let's talk about that. So that's actually I had written down this one example, but I'll adapt it slightly, since you mentioned triggers. So that's another common type of operator, these sensors where you wait for a certain condition to be true. And they're used in data analytics workflows all the time. So like, one example, workflow might be waiting for a particular file to appear in a cloud storage or an s3 bucket. So you use one of those sensors to wait for that to happen. And then you want to do something to that data. So let's say you then create a data proc cluster that is going to run a PI Spark job on that cluster. And then you can store the results in BigQuery at the end, and then delete the cluster and like send a Slack message when the job is done. That's a very common ETL thing, including that sensor.

00:18:50 Yeah, that sounds pretty nice. Yeah, definitely seems interesting and quite useful. Yeah. Thoughts before? Yeah, that's before we move on.

00:18:57 I have a question. If, if you want to get started with something like this, I was trying to look for tutorials and getting started and stuff like that. Is it? Does it make sense? There's a too confusing of somebody, you said you could run it on your machine. Does that make sense to try that? Try it that way? Or should you try it with, okay,

00:19:16 um, I, you totally can do it on your own machine. And there's this really wonderful environment that can be found in the airflow repository, that's called breeze. And it's a Dockerized version of it shouldn't be run in production. But if you're looking to try it out, or if you're looking to contribute to airflow, we highly recommend that everyone check out the breeze environment. Right now I have the community page pulled up where you can join the dev list in the slack, if you have questions, but if you were to go to the GitHub repo, you would see breeze right on that first page. Okay, cool. Thanks. Yeah, great question. Thank you.

00:19:53 Yeah, take it away. All right, Brian. Are you gonna give us a tutorial on airflow or what we got going next?

00:19:58 Yeah. So I was looking through the tutorials in there. Flo, and I noticed that one of the right hook right away one of the examples, use the dent. So

00:20:07 that for our connection,

00:20:08 nice connection

00:20:09 totally planned very cool.

00:20:12 Didn't was suggested it's a text wrap tools suggested by Michael Rogers fillet. It's a small utility, but it's super useful. And I kind of forget that it's I mean, I use it all the time, but I forget to mention it to people. But it comes up a lot. And the idea around D dent is you've got something lost my didn't thing. See, if I can find it, there it is. The idea is you've got a multi line string, like here, we've got HelloWorld, and some multiple lines, and there's different spacing. But I'm, as you notice, I want to define it within a test within within a test function or within some other function. And that's so there's this extra like space at the beginning. That's, that's in the string, it's in the multi line string, and we don't want that we don't, we want it to be just just No, like nothing at the beginning, or the same amount chopped off. So one of the options that people have used before is to just define a variable multi line string out of the function, you just do it out of the function, then it's against, then it's just against the left side of your editor, whatever, on column zero, and you don't have to worry about it. But it does bother some people that you've got this this variable defined outside of your function when you're just using within one function. So didn't is the answer. So what he didn't does is it just takes a multi line string and strips off all the common whitespace at the beginning, that's it. But it's a it's super useful. They've got a little example that we're showing here. But I, I think this is a not a great example. So I wrote a new example, oops, fell asleep. Um, and so that the idea really is I've got a function that either, you know, print stuff or as some output, and I want to be able to compare that string. And I want my comparison to be in the function. So. So I use DNS to just write it right in my function, and then I don't have the spaces. And then anyway, so this is a PI test example of how you could test output string. So anyway, this really

00:22:18 sounds like a classic example of there's a problem like the open source. This really bothered me. And so I wrote something to fix it. And it's wonderful, like a time honored, open source reason to make something.

00:22:30 But I also want to remind people that didn't is not the only thing in tech strap and tech strap has a whole bunch of other cool tools. So it's used. It's not huge. It's just been a five minute read to peruse what's in tech strap. So the next time you need to manipulate some text, it's useful. So

00:22:46 maybe wrapping.

00:22:48 Yeah, like wrapping wraps. It does things like like if you've got a huge string and you want to be able to like one of the things is to shorten it. So if you if you've got a huge string, but you really only have like eight characters to show something like ellipses eyes it Yeah, it does that for you. So that's nice. That's there, too. That's good.

00:23:05 Because I've written that code. It wasn't fun. It didn't feel useful either. Only Okay, great works. But here we go. Some audience feedback Anthony out there, Hey, Anthony says is really useful used it many times. Mm hmm. All right. This next one comes to us from Dan Bader, you might know him from a real Python other things. He and I were chatting, and he said, Hey, have you heard about PIP audit from trilobites, and I was sure that I had, I thought we had talked about it, but then I realized, I don't believe we have. So I must have just heard about it somewhere else. And and we haven't covered it before. So the idea is, we've heard about a lot of issues with supply chain vulnerabilities, things getting into PIP but also Ruby gems and NPM, and so on. Sometimes that somebody's trying to be evil and putting in some typosquatting thing, or you know, worse than that would be if the GitHub account of a maintainer got hacked, and somebody published a package with like, to the real package, right. So however things might get into your dependencies. If something is going on bad there. It's better to know than to not know. So this PIP audit is all about that it audits Python environments as in virtual environments, and dependency trees for known vulnerabilities. So that's one of the things that's interesting is when you pip install things, you might be very good about saying, Oh, I pip installed flask and I pip installed pandas. So those are going into my requirements file or my project automall. But did you remember to pin their versions, so that things like GitHub will say your version is wrong? Because if it just sees flask, and the recent version doesn't have a problem, it's not going to tell you but the one you have installed may also the transitive closure of the dependencies. So Flass depends on it's dangerous, which depends on I don't know, but if there's something down that chain that has a problem, you may have not put that in your requirements file, and you may not be tracking it like I might be paying careful attention to flask. I might not care anything about it's dangerous. But that's where the problem is. Right? Yeah. So this tool from trilobites, which is a security company, basically solves that problem. And it lets you just type PIP dash audit. And for me, it's a dash our requirements dot txt or whatever. And from what I can tell, what it does is it will go create its own virtual environment, where one by one installs, each package, looks at the things that come out of that process, and then scans those. So it's not just looking at all you say, you have flask, and that's 201. Great, you're good to go. It actually installs it because who knows what the setup.pi process is doing, and all those kinds of things. And then it scans that, and it gives you a report. So for like talk Python training site, we've, I don't know, 30 dependencies or something. And it sat there. And it took, I don't know, probably took two minutes to go through. And it said, everything's good to go. So that was good to hear. But it's pretty neat, really easy to use. It's like an external tool, like black or something. So it's very a good candidate for PIP x. And then it's just globally available to point at any environment, where you think,

00:26:10 Oh, this is so cool. I heard about it, because one of my colleagues, Dustin Ingram, I think has been involved with it or either it's his Twitter that I found out about it from but he also has a really good talk from pi con this past year about the supply chain vulnerabilities. And that's worth checking out if you're wanting to get an idea why this is important.

00:26:30 Yeah, yeah, we've highlighted a few examples. Yeah, for the over the years, but it's, it's definitely something to pay attention to. And that's cool that Dustin was talking about it. He works. I think he's still working with a PPA and works on, you know, the IPI dot, pie, pie pie pie.org and all those kinds of things. So very cool warehouse. Right. What do you think?

00:26:50 I think that's cool. I'm gonna start using it right away. Yeah,

00:26:53 yeah, I already used it once as well. And everything seems good. So here, look, I even call it flask as an example. So here on this particular version, there was this security vulnerability ability from night 2019. And same with, I guess, change at all those will get but yeah, just gives you a nice description of what went wrong. And like in this case, it's a denial of service attack, and whatnot. So

00:27:15 so I definitely recommend people pin versions, definitely in your in your requirements. But what do you all think of, including ashes? I

00:27:24 think that's something Dustin talked about in his talk. And at the time, I was like, oh, that sounds like a good idea. And it's not something I've started doing yet. Yeah,

00:27:32 exactly. That's exactly what I think it sounds like a good idea. And I'm not doing it yet. So

00:27:37 anyway, but that's a me problem. More than anything else.

00:27:42 I also, it seems like a good idea, you know, I might be missing a step, it feels like the the challenge you're going to run into there where what you're preventing against is a man in the middle attack, somebody can intercept what's happening with pi pi.org. And sneak in some kind of broken, hacked version. I don't know. I don't necessarily trust what goes into PIPEDA. Org, but I trust pi pi.org. So I'm not super, it's not my biggest worry. There's like 10 other words that make me have a hard time sleeping at night about running stuff on the internet that precedes that. So I haven't worried about it, but maybe I should.

00:28:20 Yeah, but like, it's

00:28:22 in the queue of things to worry about.

00:28:24 For instance, with this audit, you can you can pin your stuff and and then have it be check it every once in a while. Everything and check thing.

00:28:34 I don't see why it couldn't be a CI step.

00:28:37 I was actually just gonna say that PIP audit, I need to bring it to my examples maintaining group to talk about who wants to implement it and how soon we're going to do it.

00:28:46 Who's pager rings when it finds a problem? Yes. Yeah, they see that pictures from back in the day. All right. Well, that's that's all I got for that one. We're off to? Well, yeah,

00:28:57 I'm so glad you mentioned pinning requirements, because that is actually a great segue for managing samples for GCP. So what I have open right now, for Google Cloud is an example documentation page, I picked cloud composer because that's what I work on. And I want to talk like, give an example of where this code lives that I'm talking about that I work with this group to maintain. And so this is a page that's about using a particular airflow operator. And if you were to scroll on it, you will see these code samples and they are all stored in GitHub and then embedded embedded in our Doc's. So you can click View on GitHub on any one of them. And it will take you to the link repository. You can look at the history look at everything in context. So we have 1000s of samples for all of the Google Cloud products just for Python. But we have them in other languages too. And they're located across hundreds of repos. This happens to be one repo that has samples for multiple products, but we have Other repos where things are stored too. So to ensure that there's consistency, and that my group of engineers, my colleagues, and I actually have time to do our work and function as humans outside of work to at least a lot of automation. So we use a lot of bots to do things like keep our dependencies up to date, check for license headers, auto assign PRs, for reviewing syncing repositories with centralized configurations, and even more, which is pretty great. And this is actually where the pinning requirements comes in, we very strongly believe in pinning requirements because it makes the samples easier to maintain and test against. And it's easier to go back to the product and say, Hey, you just pushed a release candidate for your product, and it broke your samples, it wasn't supposed to what gives, rather than finding out mysteriously when getting a customer issue. So then to keep it up to date, we use a bot and these are some pull requests recently opened by the bot have some dependencies, they get double checked to make sure everything looks good by human and merged. It's pretty great. And then we actually have a team of engineers in dev rel, that works on making GitHub bots that we use, and that is totally open source. So you can see some of the ones that we use, like we have our license header one, the sync repo Settings allows us to have a single source of truth for our configuration for all of our Python repos. And then it makes sure it gets synced across all of them, it's pretty great. I really don't know how I would function without all of my bot friends.

00:31:40 This is super cool. I can just imagine how much work it is to keep all of those different things in sync. And I have worked recently on projects, where I'm like, Okay, I got to integrate this library, I'm gonna go to the documentation. And I try to use the one or two functions that the whole thing does. And it's like, no, that parameter doesn't exist, or you're missing some printing, like, come on, at least just keep the signature, right, you know, is, yeah, of course. It's something like star star star, kW RX. It's not like, oh, I can just look in my ID and see oh, yeah, it says it takes like use security. use SSL yes or no, like, No, it's It's unknown without the documentation, basically. Yeah. This is awesome.

00:32:19 Thank you. I do. I'm very grateful to it. And yeah, for our dependency, but we do use an external one. I know, I think GitHub is the one that does depend a bot, we in particular, use white source renovate bot, it's what we were using when I started and that works very well to and they're very nice and responsive to

00:32:37 issues. That's fantastic. Yeah, yeah, depend a bot was fairly new. And then it was bought quite recently by GitHub. So I can imagine you were all do some doing something before then. Yeah,

00:32:47 probably. But I know I've run to use that to integrate using a dependency bot. I would say if you need a starter bot for any of them, that dependency bot is a great place to start.

00:32:58 Yeah, that's fantastic. I recently switched to pip tools and PIP compile to generate my requirements with pin versions and stuff. Nice. Before that. I was all about dependable telling me if something new was out and seeking that.

00:33:11 Nice. Yeah. Pixels rocks, little PIP tools. Yeah, it definitely

00:33:14 does. Brian, there's a lot of cool automation here. What do you think?

00:33:18 I'm excited about looking through all these I love looking at bots that because the whole idea by the bot is to do is like the Unix philosophy of do do one thing and do it well. Yeah. And yeah, I love that.

00:33:30 And if something else do it, and not you do it well.

00:33:33 All of our bots are based on like, oh, gosh, we're doing this one thing over and over. And we're not doing it well, because we're doing it manually. So how can we like use automation to make sure we're doing it consistently and just save a lot of time?

00:33:47 Like one of the things you've got in here that's that's shown right now is label sync. So one of the nice things about one of the interesting things about different groups workflows is to have different labels that mean different things. But when you open a new repo, it doesn't have all those labels. So being able to sync those labels across an organization, right.

00:34:06 Like, that's triage, that first first contribution out those kinds of things, right. Yeah,

00:34:12 as I said, we have hundreds of repos just for Python. And we use things like we have labels that say what API something belongs to. And that helps with the auto assign bot to make sure that issues and PRs get routed to the right team. Otherwise, you're having a human do all that triage, which is fine, but doesn't scale super well, in our use case. Yeah,

00:34:36 yeah. And adding a label is really easy in and to to an issue or something. So having a bot that looks at label changes and just does an action based on that is brilliant use of time.

00:34:48 Yep. So highly recommend.

00:34:50 Yeah, fantastic. This is great. And you have an install link next to all of them that mean I just click that and install it into one of my repos.

00:34:57 I believe that is the intent. And if it doesn't work, You should open an issue on this repo because my colleagues are very responsive.

00:35:03 Fantastic.

00:35:04 Deed bots to generate bots.

00:35:07 Honestly, if you if my colleagues told me they're working on that in this repo, I wouldn't be surprised, but I don't know.

00:35:14 The meta bot. Yeah. Fantastic. All right, well, how about some extras? Brian, you got anything extra? You wanna share? While we're here before we call it a show?

00:35:23 No, just I'm fighting a cold. Hopefully, that'll be over.

00:35:28 Yeah, maybe some sort of audit thing. We'll check your health status, we can run that against you, Leah, anything else you want to share with us? Oh, I

00:35:36 mean, on Twitter. Earlier, we were talking about HTTP status codes. And it reminded me of still my forever reference for HTTP status codes is HTTP dot cat. It's

00:35:47 got cat is fantastic. So it is so good. Let me share a few non funny things. And then we'll mix that in with our joke. Please do. Fantastic. All right. The first one has to do with, uh, speaking of GitHub, another cool GitHub thing, you know, you could press a dot, and that would do certain things. This only works if you're signed in. But now there's a command palette, this idea command palettes are becoming popular in UI, we've got it in VS code. We've got it in like superhuman, the email, and often you get them by pressing Command K, or Ctrl K. And now you have that for GitHub. So if I were on a repo, or I could do stuff to it, I could hit Command K, and then it will say, What do you want to do search or jump to? I can go to Pages issues, I could look for See, look for the app, if I just type app, it'll search for those. I could search for all sorts of things here. And boom, it takes me and shows me all the apps. Isn't that cool? That's so cool. command palette. Yeah, that's now a thing. That's beautiful. And you can just you I mean, no mouse, I'm here. I'm in this repo, the top level Command K, Down Arrow two times to enter. I'm on the issues. Oh, my gosh, love to see it. Yes, that's a good one. The other one, the other extra is Python. Three 10.1 is out released December sixth. So as in two days ago, Whoa, it's got a fun little snake with a hat on? Well, that that's really about 310. So let me describe, I can cover the entire release for you. So Python 310. One is the newest major release of the Python programming languages. It contains many features and optimizations. So now you all know what's in it. It's very vague, very vague. Apparently, it has 300 commits of changes and fixes. One thing I would have wanted to know, are there security updates? Yes or no? Like, should I like, should I install this? If I'm curious? Or should I install this now before tomorrow, because someone's gonna start poking around. I would love if it would say that. There's a great thing about the major features. But that's just 310 point release. So we'll have to anyway, still still good? Yeah, we've

00:37:54 been having fun making all of our GCP samples, making sure they're free. 10 compatible, which we're getting there. It's all waiting for certain dependencies to be ready. It's but a lot of fun. Very exciting to see.

00:38:06 Yeah, that's awesome. Well, you can look at

00:38:08 the change log. So if you look at the 310 the change log, you can see 310 One so can they go? A little bit

00:38:15 bold change log there? Maybe? Yeah, yeah, I can't. That's true. I can't go to the change log there and check that out. So

00:38:20 but having a like a security thing and being like a TLDR.

00:38:23 Yeah, exactly. Exactly. Cool.

00:38:26 Well, it also a lot of people didn't want to try 310 until we got one patch release. So now we have one patch release. So there's no new

00:38:33 so now now it's quite safe. I have been running for a day in production, and it seems okay. Yeah. Put it on one site to see if it would hang in there. It seems fine. So we're all good.

00:38:42 Yeah. All right. The samples that are using it are doing fine. They've had passing periodic builds for a while.

00:38:47 Yeah. Fantastic. All right. Are you ready for some now? I'm ready. Okay. All right. Yes, I mean, we started our conversation off today, talking about cats. It's true. Before we hit record, so I feel like we should round that out. Definitely. So first of all, HTTP status says.com is a fantastic place to go learn about the real meaning or the official meaning let's say of status code. So for example, there's 100 continuing if you want details, you click on that and it actually pulls us all up even shows you like the innum in Python, if you oh my god, I love that. And that cool. Yeah, it gives you the meaning like 100 Continue the initial part of a request has been received and has not yet not yet been rejected by the server. The server intends to send a final response eventually and so there's other ones like 200 Okay, 201 created let's see, what else did I point out three or four cash not been modified? 400 bad request bad 404 not found four three forbidden by internal server. Yeah. teapot Yeah. And 502 Bad gateway. Okay. So let's do yours. Firstly, putting I put it I put out this joke and you said this is good, but oh my goodness. But

00:39:59 yeah, so When I was doing my computer science degree a friend shared with me HTTP dot cat, when we were learning about HTTP status codes and if you go there, you will find one cat, her HTTP status code representing What is going on. And I am not going to lie to you in my professional career, I still use it as a reference because it's my favorite one.

00:40:22 And you can even it if you go to like HTTP dot cat slash 200. It returns a JPEG of a cat. That's like okay,

00:40:29 yeah, exactly. And you can do that for all of the status codes.

00:40:33 201 The cat has walked through some wet summit and that's too uncreated for Yep, friends. Let's see what else we got in here some good ones for or for not modify. Three or four. Sorry, for for the cat is hiding under some wrapping, not found too. Fantastic. Yeah, I love this. I had not heard about this. And it's glorious. Well wait

00:40:54 lists deserve for 18 there is there is a teapot cool.

00:40:59 Kitchen, literally inside of a teapot. Alright, so I saw this joke by Brene, who is John Breen. And I thought, That's really funny. What he did is he put his own like, personal take on what status code means. And I thought they were hilarious. But I thought, you know, let me take a shot at this as well, a little more Python focused. So I linked my tweet, I put this set of colloquial meanings of the HTTP status code. Alright, y'all ready for this? Yeah. Do so 200 is was all good. To have one Hello, creator through a four not modified or cached is same old, same old for a three permission denied it's Get off my line. 404 is just there's no message. It's just not there. It's not that that's the message but it's just blink 500 is we're bad at API's a little rare. 400 is your bad API. Yes. Yeah. So the the real cardinal sin of API's is 200. But in the body, there's a JSON that says error and a reason. Oh 200 both air attacks were really bad API's? Yeah. 502 were bad at deployment or DevOps. Part of the infrastructure can't get to the other part. In Brian's favorite for a team. Is it already April again? Yeah. Because the reason is that was actually put into the spec as an April Fool's joke, and they left it. I'm a teapot.

00:42:27 I love that. They lost it. I do do it too.

00:42:31 It's like, like import this just stuff. That's fun. That should just always be there. Yeah, yeah.

00:42:37 What's the harm? What's the harm? Just leave it there. Anthony, that live stream has some feedback for status codes using cats. Well, I never.

00:42:48 I mean, where there's internet there is cats. No,

00:42:51 of course, why we created the internet, I forget.

00:42:55 Exactly. All right. Well, I think that's it for our show. Brian. Thanks for being here. As always.

00:43:01 Thanks for joining us, Steve Brown me. Thanks for listening, everyone.

00:43:03 Yeah, you bet. See y'all later. Hi.

 <|endoftext|>
00:00:00 KENNEDY: Hello, and welcome to Python Bytes, where we deliver Python news and headlines directly to your ear buds. This is Episode 127, recorded April 24th, 2019. I am Michael Kennedy
 
00:00:11 OKKEN: And I'm Brian Okken.
 
00:00:12 KENNEDY: And we have a special guest this week as well. Kenneth Reitz, welcome to the show, man.
 
00:00:17 REITZ: Hi, and thanks for having me.
 
00:00:18 KENNEDY: It's great to have you here. I wonder if Requests will come up as a topic during the show, what do you think?
 
00:00:24 REITZ: Requests 3 might.
 
00:00:26 KENNEDY: The future of Requests. How exciting, awesome. Well, Thanks for being here. It's great to have you here. Before we get any further, I going to say thank you to Datadog for sponsoring this show. Check them out at pythonbytes.fm/datadog. More on why they're cool, later. Brian, I feel like WebAssembly, Rust, all these things, there's so many cool things going on around it and that's something you found for us to start off with, right?
 
00:00:47 OKKEN: Yeah I saw this from a cool, actually a twitter post from Mara Bos. I think it's Bos, B-O-S. And it's an extension to Rust that's inline Python, so if you're a Rust person and you need a little Python in there you can just inline it as, I think it's as a macro or something. I'm not a Rust person so I'm not sure how this works but you can inline Python code, including things like embedding a matplotlib call to pop up a window, so it's pretty neat. I don't really have much more to say about other than, neat. You can run Python within Rust.
 
00:01:21 KENNEDY: I think that's pretty awesome. Yeah, quite cool.
 
00:01:23 REITZ: I read something like this week, actually, for Bash in Python. So, you can do inline Bash in Python. So it seems to be a trend, people want to embed other languages in other languages.
 
00:01:33 KENNEDY: That's cool. Could people get to your Bash thing? Is that a public thing?
 
00:01:36 REITZ: Yeah it's just import bash or pip install bash.
 
00:01:37 KENNEDY: That's pretty cool. There's a lot of interesting interplays here. Brian, have I talked about Wasmer? As in W, I mean WebAssembly-mer before on the show?
 
00:01:48 OKKEN: I'm not sure.
 
00:01:49 KENNEDY: I think that's going to have to to be a topic. So, there's all sorts of cool interplays between Rust and Python these days, and like Rust obviously is big for generating WebAssembly and so there's now a project called Wasmer, which lets you, I think I talked about it last week, I did. Yeah, so, lets you basically run WebAssembly in Python. And this is kind of like, the opposite.
 
00:02:09 REITZ: Oh really?
 
00:02:10 KENNEDY: It's an interesting way. Yeah yeah, so kind of like Node.js is the platform for running JavaScript like outside of the browser, like Wasmer kind of does similar stuff, lets you take any WebAssembly thing and run it in your Python Code. You basically import the functions from it then you call them in straight Python.
 
00:02:24 REITZ: So do you have to do reflecting where you know what the structure of the code looks like when you import it?
 
00:02:30 KENNEDY: I don't know, I doubt it gives you any help but the way you interact with it looks like Python. You don't have to do anything special beyond an import statement.
 
00:02:38 REITZ: Okay, so you don't have to write C or anything?
 
00:02:40 KENNEDY: Like a load statement, no nothing like that. It's pretty much straight Python. This is really cool, Brian.
 
00:02:44 REITZ: That's awesome.
 
00:02:44 KENNEDY: Yeah I like this, very nice find. Cool. All right Kenneth, what's your next one? You want to tell us about the future with your back from the past microphone?
 
00:02:52 REITZ: Yeah, sure. Well I wanted to announce that Requests 3 is underway right now. We're doing a development cycle at the moment and I wanted to announce just some information about that, basically. So Requests 2, which is the thing that you know and love is going to go into CVE only mode, which it's basically been for a long time. That's kind of the way things have been for a couple years now.
 
00:03:13 KENNEDY: Does that mean like, security fixes only, or security fixes and bug fixes?
 
00:03:17 REITZ: It means that if there's a CVE, a true security vulnerability we'll fix that as soon as possible, and if there's any security conscious bugs that we'll address those as well. But people suggest UI changes a lot and it's just not going to happen at this point. It's going to happen in Requests 3 if you're going to...
 
00:03:38 KENNEDY: Awesome, so what's the story with Requests 3? What are you guys, what are the major features?
 
00:03:41 REITZ: Yeah, so, the major features are, there's going to have async and an await keywords, so you're going to be able to do asynchronous calls. We're ripping out urllib3, which is unfortunate because there's different approaches on how the future of the project could unfold and this needs to start happening now. So we're just taking action and making our own library for making these low level Requests and we'll see how far long we get with that but we don't see any blockers that we can foresee at this point, so. We'll have a new core, if you will, and it'll be as the new namespace Requests 3. So everything that you know that depends on Requests, this is going to have backwards incompatible changes but it'll be under a new namespace, so you won't have to worry about that. You can have both installed at the same time.
 
00:04:25 KENNEDY: Nice, and it's modern Python only, right?
 
00:04:27 REITZ: Yeah, it's only Python 3.6, and it has type annotations and all the public functions, so your IDEs can get some nice code completion, stuff like that. I'm pretty excited about it. So, I don't want to take up too much time though, so I guess we got to keep moving.
 
00:04:39 KENNEDY: Well we do, and I'm pretty excited. So, I have one more question. So, why 3.6 and not 3.5? 3.5 is fine for async and await. Did you do different type annotations, or what was the 3.6? Maybe f-strings?
 
00:04:50 REITZ: F-strings. It's f-strings.
 
00:04:52 KENNEDY: F-yes, right on. Brian, I still owe you a sticker.
 
00:04:54 REITZ: They're really useful when you're writing a load on a library or something that deals with a lot of URLs, it's really nice to have F-strings.
 
00:05:00 KENNEDY: Yeah, that's pretty cool. It's interesting.
 
00:05:02 REITZ: I don't find it acceptable to use 3.5. If you have 3.6, even three-six doesn't seem to be acceptable. I'd like, it's going to be documented as 3.7 on there because if you're going to be on latest Python you might as well be on latest, latest Python.
 
00:05:16 KENNEDY: Yeah.
 
00:05:16 REITZ: Yeah.
 
00:05:16 KENNEDY: Right on and by the time that that comes out, 3.7 will definitely be easy, easy, right?
 
00:05:21 REITZ: Yeah.
 
00:05:22 KENNEDY: What's the timeframe?
 
00:05:23 REITZ: I think it'll secretly work at 3.6, and secretly work at 3.7, but I'll just say it works at 3.8.
 
00:05:29 KENNEDY: I love it. Brian, you excited?
 
00:05:31 OKKEN: Yeah actually, I think that'll be fun.
 
00:05:33 REITZ: Yeah I'm thinking of also rippin' out the .get keyword. That's the thing I'm torn about at the moment. Like to requests.get that everyone uses.
 
00:05:42 KENNEDY: What's it lookin'?
 
00:05:43 REITZ: To force everyone to use Session.
 
00:05:44 KENNEDY: Ah interesting, okay. So you create a session and then you call get on the session, right?
 
00:05:48 REITZ: Yeah, so it would be, it's called an HTTPSession now so it'd be HTTP.Requests is what I want people to do, but I'm still playin' with the idea, so it might be not changed, we'll see.
 
00:05:59 KENNEDY: Yeah, you could face some backlash, but yeah it sounds good.
 
00:06:03 REITZ: I'm willing to take it.
 
00:06:05 KENNEDY: You've got some tough skin, you've been on the internet for a while, right? Yeah, let's not go down that path. Alright, so maybe you could even say that you've been in some flame wars? So the next item I have is called Pyflame. Pyflame is pretty cool, like if you want to know how the performance of your program or a certain library is going, you can generate what's called a Flame Graph for Python. And what's really nice about this is it's super low overhead enough that you can even run it in production without hurting your program. So you could say, ah there's something going wrong with the website let me log-in and attach, you know, Pyflame to it and see what's happening. And then just break loose and go analyze that rather than, you know, try to simulate what's happening. So, I think that's pretty cool.
 
00:06:51 REITZ: We actually used this on the pipenv team at one point to determine where our slow points were and like how fast our boot up time is.
 
00:06:58 KENNEDY: Yeah, and was it useful?
 
00:06:59 REITZ: It was very useful, yeah, it shows you every single call in your stack and just shows you a graph over time of how much time was spent on each call and all the sub-calls, so it's great. I really like it.
 
00:07:11 KENNEDY: Yeah, the graphs are nice as well. They're pretty obvious, not just like a grid of numbers like a spreadsheet but, ya know, graphs.
 
00:07:17 REITZ: Yeah usually when you hear someone talk about graphs that are generated from Python, it's like you have to work with them a lot to make them useful, but these ones are useful out of the box which I really like.
 
00:07:28 KENNEDY: Yeah, cool. Another thing that it said that it does, which is nice, has nothing to do with pipenv in this feature, but it's capable of profiling embedded Python interpreters. So, like, for example in uWSGI or Gunicorn or some of these, you know, back end worker processes for web servers, so you can get in there and get that and multi-threaded stuff. So I think it's pretty awesome. Brian, do you guys care about performance where you are? I mean you're doing testing on hardware, so it's not like users are directly interacting with it. Is it, I guess it's not, do you care about it, but is it something you have to worry about?
 
00:08:00 OKKEN: In my production stuff, the Python is not the bottleneck, its the communication, so, yeah.
 
00:08:06 REITZ: That's a great response.
 
00:08:09 KENNEDY: It's on the wire, it's not our fault.
 
00:08:11 OKKEN: Well it usually is our fault, but it's usually an optimization of doing too many calls and reducing the communication latencies.
 
00:08:19 KENNEDY: Right, having the chatty API verses trying to bulk up the thing you want to ask it or whatever, right?
 
00:08:24 REITZ: Are you working with a lot of Microservices?
 
00:08:27 OKKEN: Working with a test equipment, so communicating the commands and retrieving data.
 
00:08:33 REITZ: Yeah that would take a lot of time.
 
00:08:34 KENNEDY: Yeah, Brian tests actual devices with Python.
 
00:08:38 REITZ: That's awesome, oh that's right. I knew about this, yeah, you test like phones and stuff, don't you?
 
00:08:44 OKKEN: Yep.
 
00:08:45 REITZ: That's awesome.
 
00:08:45 KENNEDY: Yeah, pretty cool. Alright, before we get on to the next one, which looks pretty interesting. Let me just tell you about Datadog, so they've been sponsoring Python Bytes for quite a while and we definitely appreciate them. So they are a monitoring and analytics service that lets you take all your metrics and logs and tracing and what not across your services like Microservices like Kenneth just said and put them all in one place and it automatically instruments Async libraries like asyncio and Django and Tornado and helps you visualize all that stuff across the boundaries to find your bottlenecks. Super cool, so check them out. Get a free 14 day trial and a cool DataDog t-shirt over at pythonbytes.fm/datadog. Alright, thanks DataDog. Brian, what to you got next?
 
00:09:25 OKKEN: This was going to be one of my extras but I thought I'd just discuss it because I was curious what you guys thought. So Flit is, I really like it. It's a little package that allows you to quickly build a pyproject.toml file and a license file and basically if you've got a module you want to share with somebody or a package that's just a source package, it's just a few commands to try to get it into a wheel form, just so you can share it. And it even does publishing within it. The one thing I didn't like about it is it didn't support source directories and I like source directories in my packages, so I did what you can do with open source projects, is I submitted a Pull Request. So just submitted this last night. I've been playing with the corner cases today and there's still some, I'm listing it as a work in progress because there's some corner cases that still need tested and probably ironed out, but I don't know, we'll see. We'll see where this goes.
 
00:10:21 REITZ: Did you make it so it's configurable to any directory or specifically SRC?
 
00:10:26 OKKEN: Specifically SRC.
 
00:10:28 REITZ: Okay, cool.
 
00:10:29 OKKEN: It doesn't break any of the other, so really right now, it used to have two kinds of projects, just a module or a package with a name. And now I'm just adding those two within a source directory, the old mechanism all works, it's just extending it.
 
00:10:45 REITZ: Yeah Flit is a little bit like a combination between Twine and Cookiecutter a little bit, like it's far reduced in scope from Cookiecutter and Twine, all it does is publish things, publish wheels for you. I mean it's the tool I typically use in my work flow but Flit is a great alternative if you don't already have your set up stuff built out, I think Flit is a great first tool to go for especially if you don't have those files already written.
 
00:11:12 KENNEDY: Yeah, that's awesome.
 
00:11:13 OKKEN: Yeah.
 
00:11:13 KENNEDY: Well, hopefully people like it, I mean it's out there, the PR right, they can merge it. That's pretty cool.
 
00:11:17 OKKEN: Yeah, so hopefully.
 
00:11:18 REITZ: Hopefully they'll put it in, otherwise you can't use it on your project. You'll have to just come to our side where we don't use source.
 
00:11:25 OKKEN: Well, I could fork it.
 
00:11:27 REITZ: Yeah, you could.
 
00:11:29 OKKEN: But I don't really want to support it, so I'm hoping that...
 
00:11:32 REITZ: Ah, it's lit.
 
00:11:36 KENNEDY: Yeah you don't want that puppy. You don't need another thing to take care of, right?
 
00:11:39 OKKEN: Yeah, that's a good name, though.
 
00:11:43 REITZ: He's going to do it.
 
00:11:45 KENNEDY: Awesome, alright, so speaking of packaging and things that we've talked about and things we're like, I am a huge fan of pipx, I think pipx is really killer.
 
00:11:53 REITZ: Yeah.
 
00:11:54 KENNEDY: The way it works, I've ran into some issues with Homebrew in it but I'm going to put those aside for a minute. Also, pipenv, tell us the story here.
 
00:12:01 REITZ: My endorsement is also with this flag which is, I've run into some issues that I'm not sure what they are yet. So, it appears as though pipx is great. And what it does is it just creates virtual environment and installs binaries for you, so it's like a Pipsi replacement. Or a virtualenv wrapper if you have, sometimes people have like a system virtualenv, where they install their system utilities or they'll just, they'll keep their system utilities in the system instillation of Python and then they'll isolate their different projects into virtualenvs. This makes it so every single tool has it's own virtual env which is really best practice. So if you're using pipenv, if you're using HTTPie, if you're using anything pip itself, anything that's pip installable from the command mine, you can install it easily with pipx and it does appear as though it has shine. I'm not sure that it's fantastic but it appears as though it works pretty well so far and I really like that it supports multiple binaries.
 
00:12:59 KENNEDY: Yeah, I do too. It's quite nice and to me it feels like Homebrew but for Python executables, like it's not necessarily for managing stuff for your project, but for stuff that is Python-based that you just want to run, right? Like, I want to, I don't know, run Glances or Cookiecutter or something like that, right or pipenv.
 
00:13:18 REITZ: Exactly, and it gives you a nice isolated environment in which to install that and some of these, like pipenv has some, like, 50 dependencies or somethin' crazy. So it's really good to have an isolated virtual environment for that. 'Cause in Python you can't install multiple versions of a dependency, like you can in Ruby, so that's why we need to do this, basically.
 
00:13:38 KENNEDY: Yeah, cool. Well I definitely like it yeah.
 
00:13:40 REITZ: Yeah, that's the end of my endorsement with the asterisks afterwards.
 
00:13:44 KENNEDY: Yeah I'd love it, the problem that I ran into, the only problem I ran into, was when I installed Python 3 through Homebrew and then Python 3 got upgraded by Homebrew, it had lost like the symlink to where Python was and all of the virtual requirements that it had created.
 
00:14:00 REITZ: Oh, interesting.
 
00:14:01 KENNEDY: Yeah, yeah, so basically when I upgraded Python, it like lost track of what it was up to so I just had to re-pipx install everything. There's maybe another way to fix it but that was what I did 'cause all of the virtual environments it manages seemed to have gotten wacked.
 
00:14:16 REITZ: Yeah pipenv does that too, where it'll break, all your virtual envs just break if you upgrade your Python underneath it, so.
 
00:14:21 KENNEDY: Yeah, what do you do to fix it? You know better than I do.
 
00:14:24 REITZ: I just delete them all.
 
00:14:26 KENNEDY: Okay, so even you have the same fix as I do. Did you try turning it off and on? How many times? Three times, I always do it three times.
 
00:14:34 REITZ: I would like to automate that, so it does it for you, like you know, has a message like, oh you have appeared to have upgraded your Python, we're going to clean it up for you.
 
00:14:42 KENNEDY: Yeah.
 
00:14:43 REITZ: You know, there's limited time.
 
00:14:44 KENNEDY: Exactly, quite cool. Alright, the last one. Kenneth I think you'll like this one because it has to do with Requesting things on the internet and I don't know how to say this, I'm guessing Cheat Sheet. Cheat.sh as a domain, okay? So this is an interesting cheat sheet for getting started with Python or Bash or whatever and the way it works is you send it cURL Requests or send it HTTPie Requests on the command line to ask it questions, okay? So, you can go over there and say, like, if you have HTTPie installed, you could say, HTTP cht.sh/python that tells you you're talking about Python, then you could say, /sort+list. And if you run that, it will tell you, oh, here's a Python example of how you sort a list, you create the list and you say my list.sort, you set the key to like, string.lower or you know, whatever you want to sort. Say I want to sort alphabetically but without concern of casing. Things like that. So you can ask it arbitrary questions like cht.sh/python/connect+to+database or something like that with a plus in there. And it'll like tell you, here are some ways to do it with SQLite, or see what it says for this one. Oh yeah, here's a little example of how I use Peewee to open up a, create a little class and do ORM stuff to it. It's pretty, pretty funky, pretty interesting, and then you can ask it questions like, how to get started with a : learn on any project. Like, how do I get started with Python? And it'll tell you, in its little way and it's pretty sweet.
 
00:16:21 REITZ: I think funky is the right word for this.
 
00:16:24 KENNEDY: It's different, right?
 
00:16:24 OKKEN: So it's like google but harder.
 
00:16:27 REITZ: Yeah, basically. It's slightly more deterministic.
 
00:16:31 KENNEDY: Yes, but it has integration into Visual Studio Code and Vim.
 
00:16:33 REITZ: Oh, nice.
 
00:16:34 KENNEDY: Which is interesting. And then you can also, like you can install a client and put it into stealth mode, so if you're doing an interview, anything that you select in a text box, it will start on the side printing out it's response to that. Okay? So, if you're in a chat window.
 
00:16:54 REITZ: I'm looking at the read me and he really takes this very seriously.
 
00:16:57 KENNEDY: It is.
 
00:16:58 REITZ: It says, ultra fast, returns answers within 100 milliseconds as a rule, so he's definitely making scalability a concern so I think this a really fun production project.
 
00:17:07 KENNEDY: I think so too. And it doesn't use it's own data sources, it uses other community driven repos for different topics, and it tries to pull those in. So it's not like it tries to be the answer, it tries to be a facade for an API, to the answers.
 
00:17:22 REITZ: So it has sources that it gets it from. I'm interested in seeing that part.
 
00:17:27 KENNEDY: Yeah, it's pretty interesting. So just wanted to give a shout out to Jon Bultmeyer, he sent this in a while ago and, you know, I thought it was fun so I thought I'd throw it out there.
 
00:17:34 REITZ: He also has clipboard integration and tab support for Bash, Fish, and CSH.
 
00:17:39 KENNEDY: I know. I mean, this is in-depth, right?
 
00:17:42 REITZ: It's like, you can really go all out with this.
 
00:17:45 KENNEDY: Yes you can. Alright well that's it for our full major topics. I'm sure we'll have a couple of extra things to throw out here real quick. Brian, you want to start us off?
 
00:17:53 OKKEN: So you guys are giving me a bad time about being a Vi person last week so I thought I'd throw in an article about Vi is good for beginners, it's just a fun read for anybody that thinks that Vi is terrible.
 
00:18:06 REITZ: Have you used vim.vi? I've actually use PyCharm right now with IdeaVim.
 
00:18:10 KENNEDY: Yeah, this is interesting contrarian sort of take on the simplicity is good for you.
 
00:18:15 OKKEN: Yeah.
 
00:18:16 REITZ: Yeah, myself I think it's a good thing to learn.
 
00:18:18 OKKEN: I did a presentation last week with a Jupyter Notebook and one of the things I needed to do was to quickly make sure I cleaned out all the output of a bunch of notebooks and I found this tool called nbstripout, so I wanted to drop a link to that. It's pretty helpful.
 
00:18:35 KENNEDY: Yeah, nice.
 
00:18:35 OKKEN: It's just a command line thing and then we had a bunch of people, a couple of people including Cecil mentioned Pyodide, but we did cover that in Episode 93, but there was a recent article written up about Pyodide that's kind of neat, so I'll drop a link to that in the show notes as well.
 
00:18:51 KENNEDY: I'm super excited about Pyodide, I actually just yesterday interviewed Michael Dropboom who wrote that article you're referencing here and worked on the project on Talk Python going deep into WebAssembly and what Mozil is doing with Pyodide stuff, so yeah, it's super cool.
 
00:19:08 OKKEN: Kenneth, have you seen this Pyodide?
 
00:19:10 REITZ: I'm looking at it now. It's like all of the scientific Python stack in WebAssembly?
 
00:19:15 KENNEDY: Yes.
 
00:19:16 OKKEN: Including the libraries like NumPy and Matplotlib and stuff like that.
 
00:19:19 REITZ: That's awesome.
 
00:19:20 KENNEDY: Not just like, CPython.
 
00:19:22 REITZ: That is not unimpressive.
 
00:19:25 KENNEDY: No it's not. It's quite something. That's awesome, let's see. I guess I'll start mine really quick, I got some quick conference announcements and Kenneth I see you do as well. So PyCon Australia just opened their call for proposals. So, Australia is a beautiful place to be, either maybe you're already there and you just want to go to the conference or you want an excuse to go to Australia, submit a talk. That's awesome. And then, last time I had used about whether the gravitational waves of black holes colliding, that research was also done with Python. So remember we talked about the black hole picture and all that stuff, Brian?
 
00:20:00 OKKEN: Yeah.
 
00:20:01 KENNEDY: Well our listeners are awesome because they're like, oh Michael did you wonder about this? Yes, here's the package they used to discover gravitational waves and do all this amazing science. So actually, there are some really cool projects out there and I'll link to a video of someone talking about it, so thanks to Dave Kirby and Matthew Feickert both for that and I think it's gwpy? Yeah gwpy.github.io, a Python package for gravitational wave astrophysics, so detecting when black holes collide and the ripple in space time they make with Python is pretty awesome.
 
00:20:32 REITZ: Yeah I was pretty surprised to find out that when that code was made available that Requests was used for it--
 
00:20:38 OKKEN: That's so awesome.
 
00:20:40 REITZ: I don't know, I have no idea how.
 
00:20:42 KENNEDY: It doesn't matter, it's awesome.
 
00:20:44 REITZ: But it's in there, so I'm like, yes!
 
00:20:46 KENNEDY: That is super cool, congrats man. And then finally another thing that's awesome about our listeners is anytime we mention somethin' we think it's unique, they're like, there's four other ones, here's another one. So Bullet we talked about, Cooked Input we talked about, that's awesome. Bullet is super cool for drop downs inside terminal windows, and like nice selections. But it doesn't work on Windows, so someone else, Sander Teunissen, sent over Questionnaire, which is one that is also compatible for Windows, for our windows folks.
 
00:21:12 OKKEN: Thanks for putting that in because I need that.
 
00:21:15 KENNEDY: See, you were like the first, one of the very first people to benefit from this podcast. I feel the same way, like people are like, oh, like I benefit from this just like you guys do, it's just I happen to get there first before we publish it. Awesome, that's awesome. Okay Kenneth, what do you got?
 
00:21:29 REITZ: Let's see, I have a few CFPs I wanted to announce. One is for PyColorado, it's a great conference it's going to be the first year. It's run by a great team at least, it should be a great conference. They are actively looking for people to submit to their CFP, they have not had as many submissions as they would like to so far. They, you know, bad timing with the conference here, that type of thing. So if anyone has any talks that they think could be applicable to that event please submit. PyOhio also has their CFP open at the moment and they're looking for people to submit but they never have a problem with getting too many submissions so I wouldn't rush to that one if you're, you know, feeling iffy about it. The then the last one is a PyCon Remote which is something that I am going to be putting on if all goes according to plan with Calvin Spellingman, I believe is how you say his last name, who's from the PyTennessee organizers group. Him and I are cochairing.
 
00:22:21 KENNEDY: That's cool, what's that about?
 
00:22:23 REITZ: It's basically a PyCon but it'll be accessible to people who can't attend PyCon or who can't normally speak at PyCon.
 
00:22:29 KENNEDY: Is it also virtual or only virtual?
 
00:22:31 REITZ: Only virtual.
 
00:22:32 KENNEDY: Okay sweet. That's awesome.
 
00:22:34 REITZ: Yeah, we're still figuring it out with the feasibility of what different approaches are but it'll most likely be live streamed and people will send in videos ahead of time of their talks.
 
00:22:43 KENNEDY: Okay.
 
00:22:44 REITZ: Unless they're like a keynote speaker or something like that. So, we're still figuring out the details but it'll be, it should be good. We have a mailing list with like 700 people who signed up so far, so it should be something we can pull off. So if you're interested and want to learn more you can go to do/co/pycon-remote. I know it's not the best URL but that's the best I can give you right now.
 
00:23:07 KENNEDY: Awesome. Yeah, we'll put the link in the share notes people can just click it in there, the player that's awesome. Alright, well let's round it out with some jokes here. Brian, do you want to go first?
 
00:23:19 REITZ: We're not doing all the jokes are we?
 
00:23:21 KENNEDY: We've got to go fast, we've got to go fast.
 
00:23:22 OKKEN: Okay, so yeah I'll just pick one. I don't know how tasteful this is, we'll let it land anyway. So, Python used to be directed by the BDFL, Guido, now it's directed by a steering council, GUIDs[0:4].
 
00:23:39 KENNEDY: Love it. Kenneth, would want to do one? You got any?
 
00:23:41 REITZ: What's the difference between a musician and a pizza?
 
00:23:43 KENNEDY: I don't know, you can eat a pizza?
 
00:23:44 REITZ: Pizza can feed a family of four.
 
00:23:46 KENNEDY: Oh, that hurts.
 
00:23:47 REITZ: I can say that because I've made 25 dollars off of my music so far.
 
00:23:51 KENNEDY: Beautiful. Alright I got two but they're related so I'm going to put them together real quick. I think first to kick it off that Ubuntu users are apt to get this joke that I'm about to tell, okay? And then the second line the second line, this is fun. I actually, I know Kenneth you switched over to Windows recently and I am also kind of a fan of it, even though I spend a lot of time on Mac, still I like the joke. How many programmers does it take to kill a cockroach? Two. One holds, the other installs Windows on it. Alright, beautiful, well I think that's probably about it for our show today. Kenneth, thank you for coming. Brian, thank you as always for being here.
 
00:24:30 OKKEN: No, thank you.
 
00:24:31 KENNEDY: Thank you for listening to Python Bytes. Follow the show on twitter via @Pythonbytes. That's Python Bytes as in B, Y, T, E, S. And get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We're always on the look out for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.
 
 <|endoftext|>
00:00:00 Hello, and welcome to Python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 198. Recorded August 31 2020. I am Brian Aachen. I'm Michael Kennedy. And we're joined by a guest. We have annalena publicus. Jerry. That's very correct. Wonderful. She's been on Michael's talk Python podcast a couple times. Absolutely. Or at least one depends how far out in the future I think, in the future twice. We've already recorded a couple shows together. But it's, you know, we've got quite a buffer there. So this won't be up before. So one and two times. And welcome to this show. Nice to see you. Yeah. Thanks for having me. I'll kick it off with the first topic. Give us something easy. Don't make it hard. Brian, come on. Yeah, actually. So when I remember, it's been a while since I shifted to thinking about Python as a scripting language, to as a full blown language to do like everything big applications and stuff. Of course, I still do both. I use it for a quick scripting language, but also more meaty things. But back in the day, when I was using bash, if I wanted to have a little script to do with arguments, I'd have like an example bash file that I would just keep copying from. And I was thinking about that, because I never remember how to do arguments and stuff and parameter passing through into a little script. And the same is true for Python with argparse. But we have of Google Now to find that information out. But I was thinking about that when I saw this, this comment on Twitter. It's from Joshua raver. And he said, Every time I write a Python script, I have to go back to an old script of mine, to remember how to set up argparse. For some reason, it just doesn't stick in my mind at all. And then, Ken yawns Clark, I think he's been on your show, hasn't he? Michael? I know, I don't think so. Okay, probably should be, but hasn't, he commented. And he said, I've got this little utility called the new.pi. So I went and checked it out. And I'm pretty happy with it. It's not something you can pip install. And we're gonna link to it in the show notes. It's just part of it. He's got a repo for it. And I think he uses it in a book that he wrote. But basically, what it does is you, you run it and give it a file name. And it gives you a little starter script. With all our stuff with examples. You've got an example positional argument, string, argument, integer argument, file argument, and a Boolean flag. So you don't have to look that stuff up. They're already there as dummy ones. And then you can, you know, add to it and whatever, delete the stuff you don't want. So just in, if you've got this around, you can use it to spin up a new script really easily. And he also just recently added test code for it. So if you pass it a dash T, it'll generate a little stub test file, so you can test your script with it, too. So anyway, if you're using Python for scripting, I think this is a good thing to look at. I love that I have the same problem every time. I always copy it from an old script every time

00:03:01 thinking the same thing like what is one of the big difference between beginners and experts, experts have a whole bunch of these old things that can be

00:03:09 well, I often use, so I'm used to usually using click or what's the other one that's hyper hyper business? Yeah, so I'm usually using those for larger applications. But there's a lot of times where you're passing, you have a shared script that you don't really want to have install anything extra. So our purses still something to use for a lot of stuff. Yeah, very cool. Yeah, if you don't want arguments as our dependencies, this is a great example there. Because if your script could literally run without a pip install or without a virtual environment, except for that, you know, I probably would just have a slightly more cumbersome bit of code and have it easy, easy to run, you know, I've been thinking about how I should really be building more Seelye based applications. And I have an insane number of these little what I would really call scripts, they're not applications. They're like, little tools that I just use to run all the stuff around my company. So for example, one that I wrote last week was I had a company that did transcripts for the video courses, and then they stopped doing that. That's fine. They they moved on to doing other things, but all of a sudden, I had to figure out what how do I get transcripts again, so I wrote a little script that would go find all of the videos in a course see if it was missing transcripts, go and use AWS transcribe and just say the videos in AWS s3, do this and then download it and turn it into sentences and subtitles and video. So there's like 50 of these and I'm at the point where I almost think I might just make one command line option to run every one of those scripts, right? like kind of like get with sub command like PP space, transcripts, TV space, video and code, right. Like, I'm almost ready to build this huge sale. I think I probably won't use argparse they'll probably use typar. Yeah, sounds like good idea. Yeah, exactly. Because I always forget I'm like did I write that

00:05:00 What's it called? How do I run it again, to track it down. So this next one comes to us from a listener. excema is the username. I didn't get a first last name. So thanks for sending that over. And it's called D beaver DB either, something like that. So it's for databases and has to do with beavers. So DB beaver database UI tool. And something about working with databases inspires people to use animal names or creature names. So this is d Beaver. And the one that I mentioned that that started got axioma saying, Hey, this is cool. But you should also check this other one out, is I mentioned beekeeper@beekeeper.io, which is really, really cool. So here's another cool free open source database GUI tool. So if you got to work with databases, this looks like a really nice one. Yeah, it looks pretty cool. Yeah. You know, it doesn't have the full on marketing. Beautiful page. Like if you go to beekeeper studio, sorry, beekeeper studio.io. Man, that thing looks like it could be a VC funded startup like landing page, right? Where's the beaver is nice, but it doesn't. It doesn't look like ultra polish. But it's based on Eclipse. And it supports 80 different database types. So obviously, the popular ones like MySQL, Postgres SQL lights, Microsoft SQL Server, and so on, but a whole bunch of other ones as well. So, yeah, if you got to work with databases, and you want some kind of UI tool, this looks like a pretty good option. Do you have an idea why they called it beaver? I have no idea why they call them fever. It's funny sometimes since in machine learning, they had a trend that they named the models like Sesame Street to say Sesame Street. Yeah, yeah. Yeah. And they started calling them bird rover and Big Bird. And yeah, and someone started it. And then the others just continued naming the models like that was a lot of fun. Yeah, it's really fun. Last episode, which is not yet so there's no way you would have heard this. But we were talking about something on Debian it was going through the Python Docker script and like, understanding what of what it means to like create a bare bones Python system. And under that, Debbie and named their releases after Toy Story characters.

00:07:22 I like that. Yeah, that's nice. And of course, you are doing all of your stuff with 100 days of code and Harry Potter, right, which is also pretty awesome. But there's not really releases for that. Is there? Nope.

00:07:34 So let's see. So a couple more things that are interesting about dbeaver is it got a nice GUI interface, it has dark mode, light mode, and whatnot, has support for cloud data sources. So if you're going to connect to I'm presuming things like hosted databases, like SQL Azure, or something like that, but it also has extensions that allow you to work like directly between databases and Excel, or databases and get, which I think is pretty cool. And it also will build UML activity diagrams, like show me the relationships of this table, you know, where the foreign keys go, and all the things like that visually, which pretty nice if you're just like, given a project, here's the database, or, oh, what the heck did I just get? Right? You could open it up and something like this. You know, Python Pro has something along those lines as well. But this is free and open source. So that's pretty cool. Yeah, I use the one for Python pro for in the diagramming helps a lot to be able to visualize what your data is doing. Totally agree. I use it all the time. Yeah. All right. Well, that's it for the Beaver. I think it's cool. And people can check it out compare with beekeeper studio. Great. So I want to talk about PDB plus plus. So I was always using the ipython debugger, then when debugging, but I recently switched from using I PDB to PDB plus plus. So PDB is the Python debugger like the normal one that's part of the standard library. And PDB plus plus is an extension of that. So it's fully compatible with PDB. But it has some pretty nice features. And I think they improve the debugging experience quite a bit. It's very easy to install. So you just type pip install PDB PP, since PDB plus plus is not a valid, valid package name. And I have two favorites, like it has quite a few additional commands and features compared to PDB. But it has you the all the usual commands that are also part of a PDB. So it's very easy to switch. But there is the sticky mode, which I like a lot. So the official description is that when you're in the sticky mode, every time you change the current position, the screen is repainted and then the whole function is shown. So when doing step by step debugging, it's very easy to follow the flow of execution and I constantly use that feature, since I find it very annoying to always type l or double l to see the code

00:10:00 And with a sticky mode, you can just always follow along with the code and the flow of execution. I like that a lot. And then there is smart command pausing, which I also like. So if you have, or if you're using PDB, it always tries to interpret the commands you enter as one of the built in commands, which can be quite inconvenient in some situations. For example, if you want to print the value of a local variable, and that one happens to have the same name as one of the commands, for example, you know, yeah, that could, and I had that quite a few times. So for example, if you call something p or C, and then you want to print the value of that variable, but it is interpreted as the command continue, which is C is short for continue. And I think PDB plus plus has quite a nice solution for that. So when there is ambiguity, so if you have a variable with the same name in the current scope, then that variable is preferred. And if you still want to run the command, you can just prefix it with two exclamation marks. But if you don't have any ambiguity, and you type C, then it will always be continue. And I find that very convenient. Oh, yeah, that seems like a great little feature. in there just runs in the terminal. Right. So you can run it anywhere that you have. Yeah, yeah. SSH access to or something to that effect. Yeah, I think it's a very nice package. Maybe this is a dense question. But why use this over like an ID? Oh, I just always used them. And that's why I got so used to using them that I find it very convenient to use PDB, or I PDB or not PDB? Plus, I guess I would have to start using an ID properly to really be able to appreciate it. But it's hard if you got so used to using your keyboard and you a few keyboard shortcuts. And yeah, I don't think I can switch back to an ID for a while. Okay. Yeah, it has some cool features as well down here. Like one of the things is, if there's a an exception, you can ask it for a post mortem report. And it'll give you like, extra details in there. You can also do stuff like break on set attribute. So if some kind of attribute is set, which is I guess, a little bit like a conditional breakpoint and say an ID or whatever, but yeah, it looks pretty cool. I like the fact that it has syntax highlighting and color and all that. Yeah, autocomplete I know that it can requite nice and an ID to I think on the last talk Python episode. It was on the Python. How was that episode? It was called the modern Python developers toolkit by Sebastian widthwise. Yeah. And you talked about Visual Studio. And yeah, yeah, I know that they it has quite a few features, as well. But when you're used to something like I PDB, this is a very nice addition. Yeah, yeah, absolutely. And you can also, what's the double exclamation point? thing? So you mean what I just mentioned with the command? Yeah, yeah. When would I run that? So if you have like a variable C, and that has some value, so it's a local variable, but you want to run continue on this case? I see. Then you would have two exclamation marks and the C Yeah. So that's why it's it skips it. Okay, got it. Yeah. Cool. All right. Yeah, this, you know, I live largely in the ID world. But if I needed I needed to do some debugging outside of it. This is a really nice option, I think, like maybe in a Docker container, and I don't want to set up like remote debugging and all that kind of stuff. I just want to run it. What's it doing now? this cool, nice. Oh, yes. Today's sponsor is us. So make you us.

00:13:59 Thanks, guys. We'll probably have to edit that section. Today's sponsor is both talk Python training and testing code podcast as well. I wanted to highlight I had some, I think last episode, I mentioned that Adam Johnson, which hadn't actually he hadn't actually been on our show yet. But the last episode of testing code 128. I did have Adam Johnson on. He is the maintainer of pi test randomly. And so we talked about what the importance of randomizing your tests to make sure that you have ordered dependent order independent tests. So that's a good episode. But we talked about all sorts of stuff on testing code, including things like tips for working from home that was on episode 127. So check it out. I think people are doing that more than I used to for some reason. I'm not really sure why working from home. Yeah, definitely. Yeah, that sounds great. And talk Python training. Yeah, we just released a brand new course move from Excel to Python and pandas. So if you have been trying to over

00:15:00 Do all this stuff that you do with around data with Excel or people you work with are, we created a course written by Chris Moffitt, from practical business Python, to basically go through all the main use cases of Excel and show how much easier it is to do that in Jupiter and pandas. I think it'll help a lot of people get your foot in the door in the Python world. I think that's really cool. I always wanted to learn XML. But it's so much nicer with Python that I never got around to doing it. Yeah, that's perfect. That's that's the good side to be on. Not the other side. Yes. Awesome. So Brian, tell us about a markdown, I really like markdown, I use it for a whole bunch of stuff. And when I mean, I so much so that I just kind of assume everybody's using markdown now. But sometimes people have trouble getting up to speed or you want to share something. Anyway, I came across, I was actually having a Twitter discussion with somebody. And they brought up this hack md.io tool, and hack MD, I've never heard of that. So I went to check it out. And I'm pretty impressed with it. It's pretty cool. It is a paid service. But there's a free option too. So of course I'm on the free option. But the idea is just sort of, you've got that similar, there's a lot of tools that do this, you got a two panel system, where you on the left you your mark down on the right, it shows up, and you can hide one or the other. But the what I really like is some of the stuff that I always forget, like how to do how to insert a picture or do a table of contents or put reference links in or or footnotes, those things are just sort of in there with menu items. So I don't have to remember what all those markdown codes are. They just added apparently, you can collaborate and have multiple people editing a document with this. So that's pretty cool. There's some fancy extra things like UML diagrams that you can add in and I'm not sure if you're exporting it, you'll have to try to figure out what sort of extra tools you need to actually generate those. But it's pretty fun. The thing that I like that they just added recently, apparently is you can sync with GitHub. So you can keep all your markdown documents in GitHub, and edit them with with hack MD. That's pretty, pretty fun. That's awesome. The other thing I found was this thing called markdown guide. And it is just a just a really good clean reference for markdown. So I'm going to there's I had, you know, a handful of different references that I was using, but I think I'm going to switch to this one because there's tabs that have like a getting started page that I can send people to. And a couple cheat sheets, one of them was is the most common things. And I think it's pretty, pretty indicative of common things you'll use, and then an extended syntax page with and then a bunch of tools you can use. So a couple markdown references for people. Have you ever used pen doc? Oh, yeah, I love pan doc. Yes, since I recently started using it. And I'm preparing my presentations. Now, with pen doc every time and I love it. It's just great, great tool I love about pandadoc is it's not just from markdown to HTML, but you can convert to media wiki or lots of or I use it. A lot of times to format my emails correctly in the Microsoft Office, I will write them in markdown and then use pandadoc to generate the the word doc version, and then copy and paste into an email. I know it's a backwards, lots of steps, but it works for me. Yeah, you know, it'd be nice to have just a HTML email editor that just takes straight markdown. Would that be cool? Yeah, that would be cool. And then really like an extension to Microsoft Outlook that had them keybindings definitely have the awesome programmers are invading outlook. Yeah. Some other cool stuff about markdown or hack, markdown and hack MD, is it has a VS code extension. And like you said, the GitHub integration is cool. And it's a browser extension. You could turn your notes into a slide deck, you can turn it into like a research project into like, what they call book mode. Yeah, looks pretty interesting. And the collaboration is definitely needed around markdown these days. Like there's not really a great collaborative place that I know of, although I'm sure listeners are going to send us five examples, which is awesome because they always they always do. But for example, like we can do this. Yes you you can export paper from Dropbox, paper, paper dot Dropbox calm as markdown but it's not full fidelity. It's like 85% and you can edit what you get, but it's still it's better than nothing. But yeah, this looks cool. Nice. You know, it's not cool. Python malware. That's the thing is it apparently does now a thing. So honor fester? For sure. Sorry. I sent in this interesting article, which was done with this and by it was one second Cyborg security. So these guys wrote a pretty cool article about

00:20:00 How Python malware starting to show up now you may have heard articles or mentions of certain package management stores getting infected with malware, like we talked about some researchers putting some kind of malware on the API, JavaScript had this NPM, Ruby had this with their gem store. So that's not what I'm talking about here. That's an issue of that is not this. This is about what are people doing to create the runtime environment, just the the viruses basically with Python. So traditionally, there's been like a C, c++ type of thing. But there's some interesting parallels just to go through here. I don't want to encourage anyone to do this. But I want to put it on people's radar to be aware that it could be being done, you know. So for example, one of the challenges of the build a c++ app, you can just send a binary round and run it. Not so easy with Python, the standard library has to be there, or C, Python has to be there. But they talk about well, people are using pi to Z and pi to app to package up their eye on viruses and send them around. Isn't that weird? I mean, I guess people will do weird things. Yeah. So there's an example of Python malware called C Duke that was used against the Democratic National Committee back in 2015, and 16. There's other tools that might be just generally useful to people, regardless of whether it's in this context, or not, like uncompiled, six, this is the successor to decompile, uncompiled. In uncompiled, two, I don't know where three, four or five, went, but I'm gonna pile six is a native Python cross version and Python version, I guess, decompiler and fragment decompiler. So what it'll let you do is it'll take Python bytecode and turn it back into source code. So since we're taking a Python file and turning to P yc, ticket p yc. and turn it into a Python file. Interesting. Yeah, some people have been shipping p yc. Files alone, right. And just knowing that those can literally be turned back into source code. And like one line of commands should be something on your radar, right, because it looks safe. But it's not that safe. There's also a PI installer extractor. So if you were to ship, a library or application as a PI installer things, you can turn it back into a bunch of source files, you can open up and stuff. And then they also talk about, if you're given an executable, how to understand whether or not it was built with PI installer, or if it was built to pi to xe, or any of those tools, like, given an arbitrary executable? Is this a Python packaged up thing? Yes or no? That's cool. Isn't it? Great? Yeah, the article looks really interesting. I never thought about malware in Python before. Yeah, there's a lot of interesting details and concrete examples of here's how they did this with this one thing or that. And I think it's an interesting read, again, not trying to encourage people to do these things, but just raise awareness, like what the role of Python is in this, you know, less popularized space, right? People always want to hide what they're doing in this world, there's another application for some of these ones, sometimes businesses have, they'll be afraid or like, not want to pass around Python files, because of the problems with, you know, knowing what the interpreter is or something. So they use pi d xe or something to make an executable for a tool for the company, and then somebody and then that gets passed around. And they somebody loses the source, or you don't know who has it, or something. So using some of these, these reverse engineering techniques to get some source back that be kind of cool to use for that purpose, as well. I have an example of that. So one time, there was this program we built. And this is early in my career, I must have been, like not so good about checking in stuff. And somehow the thing that I was working on how to file that somehow didn't get added to, to I was SPN at the time. So I had pushed all the changes. But I forgot to add this one file, and then my computer died. And the problem was, it was like my hard drive died. And so like, there was some part of the application that in the middle of the app, use this library. And then there was the rest of the app that was kind of below that. And so it was really hard to figure out how to rewrite just that middle piece, because it was like a weird jigsaw puzzle that had to fit together. So I just went disassembled the application, found a few files I needed. They were named weirdly, but I just renamed them in a way that worked. And then off it was I checked it into git, and we're good to go. Or just SPN and we're good to go. And you probably never forgot to check in your files again. No, I'm very obsessive about it now. That's right. Yeah, absolutely. Anyway, that's all I got for this one. It's an interesting article though. It's it's well done with some nice examples. Yeah. So I'm gonna go on with do you call it etchers. I call it adders. Brian weathers, editors, editors. That's pretty like American English.

00:25:00 I would probably say editors, like often and not often. Okay, anyway, so what is editors? It's so I only I think I saw it a few times before, but I've never actually looked into the package. But now a few weeks back, I've started using it for the first time. So what is etters? It's a Python package that simplifies writing classes. So it creates a lot of the Dunder methods automatically. Yeah, that's cool. Yeah. And when I first saw it, I thought, we have data classes. So why do we need editors, and only then I realized that editors is much older than data classes. So Pep, 557, edit data, data classes to Python 3.7. And they do resemble editors, in many ways. So when I started reading a bit on the documentation page of editors, I found out that the pep was actually inspired by actors. And it was the result of the come of the wish of the community to have a simplified way to write classes without having to deal with the problems that name tuples have. And the I think the main difference between actors and data classes is that data classes are strictly less powerful. And that certain features were sacrificed for the sake of simplicity. So it's very easy to use data classes, they are part of, I think, 3.7 with 3.7, they come automatically, but if you have 3.6, you have to pip install them, but you don't have to get a new package for them. And it's very easy to use them, especially if you have classes with many attributes. But with utters, you have quite a few additional features, for example, you have validators and that you can use when you have your initializer in the class, and you want to perform some kind of validation of the input arguments, like checking that they are an integer, or some other type or more fancy stuff, then you can do that very easily with editors. And it's a very powerful library. So I think I need a lot more weeks to really get into the details and all its possibilities. Yeah, that's a good one. There's a lot of subtleties around creating classes that you're, that can be a little bit annoying. Like, wouldn't it be great if you could have it print out something other than just the name of the class at some memory address automatically, that would be nice. If you create a Dunder equal Dunder EQ method, where you got to remember to create the not equals, that is the opposite of that. And oh, if you create equals, maybe you also have to implement hash as well, because all of a sudden, if two things are equal, you put them in the dictionary, but then they're not the same thing. That's gonna be all sorts of crazy. It just starts to cascade. You're like, wait a minute to win this, right? It's not so easy. And so I think that's the kind of the Zen of the adders. Yeah, I found it a bit confusing in the beginning with the syntax, how it looks like if you declare an attribute, like it's a decorator utters, but then for the attributes of the class, you have this is it etters dot s, or something. And I found that a bit confusing in the beginning, since data classes are, I think, more beautiful when you write them, and you don't need to this extra bit. But once you get used to the syntax, it's very nice and easy to use, I have to agree. I like the data class syntax better. The darkness of the adders. syntax is cute, but bugs me a little bit like a trip attributed at the attributes are@tr.ib. And it's not something I really enjoy. But it's not difficult either. The main switch for me, I think, is now now that data classes are here, I use data classes all the time. But when I need a validator, the validation mechanism in attars is, is pretty darn cool. So if you want data validation, adders, is still a great thing to pull up. I agree. I really wish the validators were in, or at least, maybe there, we could have a an extra package that could we could pip install or something that that would make data classes have validators. Hopefully, I know, there's other things that you can do to validate schemas and stuff like that. I feel like there's a little bit of a Paradox of Choice. Like you look at all these things, and you want all of the features that like kind of in this impossible, combined way. So adders is cool. They've got things like that, you can say that. These attributes can only be set as keyword arguments in the initializer, and not as positional arguments. And just kW only equals true stuff like that, which is pretty cool. And then you've got the pedantic models, which have, like built in validation for all sorts of types, just cool. You've got data classes, those can be frozen, which is kind of nice. There's a lot of stuff going around here and I feel like I'm under utilizing all of it.

00:30:00 Grab what you need. It's good. Yeah, there's some tests around it and switch later. For me, it's sometimes just easy to forget what's out there, since there are so many nice packages, and I sometimes hear like, I listened to a podcast. And then I think, oh, that package sounds cool, but I don't have an application for it right away. So I forget about it again. And then in some context, I hear about it again, I think, Oh, yes. You always wanted to try that. But I think at least with actors Now, like I will use it again quite a few times. Yeah, I have that same problem. I get excited about all these things, but I don't have a chance to use them. And then I I forget, then I'll rediscover like, Oh, yes. That's why I thought it was cool. In the first year, you should create a Harry Potter style project yourself. I'm trying out all these things. That's right, like awesome. Harry, Python, Harry Potter Python.

00:30:51 I would work on. I like Harry Python.

00:30:54 They might invoke images that are not exactly the same what you're thinking. Oh, yeah. Okay. Nevermind. Yeah. All right. Well, you guys got anything extra? I don't Ryan. No extras? No, no, I may, Elena may maybe take a moment. Just tell folks like what you're up to. We didn't give you a really introduction on the kind of work and stuff you're doing. Yes. So I think the first time Michael and I talked on talk Python to me, I was still an AI resident at Microsoft Research in Cambridge. So I was doing a lot of machine learning, research. So working in the middle between a full researcher and a full software engineer. And now I'm a machine learning engineer here in Germany, in a company called innovex. Where I do like, I apply machine learning to project proper real world problems, which is also very interesting. And I do all kinds of stuff. Now, data engineering. So yeah, I'm always learning new things every day, which is really nice. Yeah, that's very cool. All right, I've got a couple of things really quick to share. I was on a cool podcast, TV like show called tech, NATO, which was a cool experience. It's a little bit like Python bytes, but for the it space. So that was a lot of fun to be on there. And on YouTube, you can check it out. And we played the game Python, Python, Python, where we would get partial words out of a headline, we have to decide, is it Python, the snake, Monty Python or Python, the programming language that the article is about? That was pretty fun. So you could check that out over there,

00:32:26 sir, so did you win? I completely got crushed. I think I got last because I want everything to be about Monty Python. And they're like, no, that's about a snake. I'm like, Oh, come on. That should have been. I would have been so funny if that was about money, Python. But no. Yeah, I let my hopes and dreams. get ahead of me. Maybe next time. Exactly. I'll come back for the championship later. I Brian, what do you think about this joke? I haven't looked at it out perfect. And you got to open it up. And Elena is is well, this one is, as per usual for us a visual joke and an audio format. But I think it's going to work great. So this one is called the only valid measurement of code quality. And I know Brian, you're very passionate about high quality code and testing and stuff like that. Have you seen this metric built into any of the software you've used? You can

00:33:17 maybe do some voice recognition and sim AI and Alaina could put something together for us like starting the code review.

00:33:24 It looks so funny. I love that. Yeah, so this is the only valid measurement of code quality is WTF per minute. I'll try to keep this with out the explicit tag but WTF. So there's a comparison here. On one hand, we've got the good code review, which is still like it's like a door that's closed. You can just see like statements of what people's going on. It's got on the side here this WTF WTF, what is this? That's the good code. The bad code is just full of them. It's like WTF what WTF is this a dude, WTF? wtf. I think this really captures code review pretty well. It does.

00:34:04 Anyway, the only valid of measurement Oh, quality Ws per minute, the BTS per minute. Definitely. All right. Well, that wraps it up for this week. All right. Thanks, Brian. Thanks, Elena for being here. Thanks. It was a lot of fun. Yeah, you bet. Bye. Bye. Thank you for listening to Python bytes. Follow the show on twitter at Python bytes. That's Python bytes as in V yts. And get the full show notes at Python byte set FM. If you have a news item you want featured just visit by thumb bytes.fm and send it our way. We're always on the lookout for sharing something cool. This is Brian Aachen and on behalf of myself and Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.

 <|endoftext|>
0:00:00 OKKEN: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode 172. Recorded March 4th, 2020. I am Brian Okken.

0:00:12 KENNEDY: And I'm Michael Kennedy.

0:00:13 OKKEN: And this episode is brought to you by Digital Ocean, and they've got all sorts of cool stuff we'll hear about later. Who's going first? I always forget.

0:00:22 KENNEDY: You know, I guess I'm going to jump in on this one because I've got some cool stuff from Hank.

0:00:26 OKKEN: Hank. You even met messed his name up, worse than I do Hynek. Okay.

0:00:31 KENNEDY: All right. Sorry.

0:00:32 OKKEN: I have to give you a bad time because he gives me a bad time all the time.

0:00:35 KENNEDY: Yeah, well, it's all, cool, but unusual name, which is probably gonna result in mispronunciation. He's got a cool article. He tweeted about a little while ago, a week or two ago, and I thought it was really interesting. Basically, it's his thoughts on running Python in production.

Though it's kind of Ah, look back on some places he heard interesting discussions on people running Python in production as well as maybe some got some nice little call outs on things that seem solved but aren't solved that are interesting to talk about and whatnot. 

So I just thought I'd maybe talk about that little bit. (Yeah), Yeah. I mean, I definitely relate to this being someone who runs Python in production. So I, in order to keep the two podcasts, the courses, various other things other service is running. There's, like, eight servers and whatnot. So there's There's a non trivial amount of DevOps-y production, architecture stuff. It's not anywhere near Facebook, Google or whatever, but it's way more than you know, a $5 host running some like WordPress thing, right? So it is meaningful? I guess so. Anyway, his article, basically the premises that he's missing, a key part of the public Python discourse in that it seems like people really aren't talking about running Python and production, although maybe the exception of Instagram or Spotify, right? Yeah, that's pretty interesting. And he listened to this podcast episode recommended or guess listens, podcast episode sort of kicked him off down this path of thinking about it like there was this podcast and try to remember what was it called? He'll pull it up it's called well, _Running in Production_. Actually, it's a pretty interesting one by Nick JinTakis

0:02:20 KENNEDY: Probably mispronounced That name is well, but Nick's got interesting thing where he talks to people from all sorts of different technology backgrounds. JavaScript or ruby or Python or whatever.

0:02:31 KENNEDY: And he interviewed this guy named Gareth Thomas from the UK, where they have some Plone app There's actually running like 10% or getting like traffic from 10% of the UK schools or something really interesting in this.

0:02:49 KENNEDY: But it was more interesting to just think about listening to that episode. Looking at Hank Hynek’s next article and saying, When do I agree with them? When do I disagree? And he said, "Look, I disagree with a lot of their choices". Actually, I think they're using Microservice is a bunch, and he was like, Thank goodness there. No no, I'm not doing Microservices basically and it's really interesting, even if you disagree to think about the trade offs that people made, because while you might make different trade offs, that might be because you have different goals or different things you're optimizing are different experiences or things that you need over what they need, right? So I just think this idea of exploring how people running Python and production, how they're solving problems. It's pretty interesting.

0:03:33 OKKEN: Yeah, I also kind of have to agree that I like I like the idea of hearing more about the pathway of why people are were there at what decisions they made in what things they faced and why the way they made those choices because that's almost more interesting than what in into product they came up with is what the path they took to it. I mean, like, Lord of the Rings would be nothing without the path to the
end, right? 

0:04:01 KENNEDY: Exactly. Oh, yeah, they get the ring back. Yeah, yeah. So his article, like all good complaints, comes with a suggestion, and he says at the end, "here's a bunch of things that could get discussed more. And so here's an offer."

I would love to encourage people doing interesting stuff with Python running websites or API and what not to tell them about basically to do talks at Pycon at meet ups and in blog's. And I think he even offered to help mentor people to get those kind of talks accepted more frequently at conferences.

0:04:31 OKKEN: I think that's a great idea,

0:04:32 KENNEDY: I think is a great idea. And, you know, maybe we should do that at the

0:04:36 KENNEDY: PDX Python West meet up.

0:04:38 KENNEDY: Could be fun. Yeah, yeah, you think about that. But I definitely like this idea because on one hand, if it's always the same story, it's not that interesting. But I do think there's a lot of trade offs that people are making, and I think it's it's pretty fun to see what's working.

0:04:53 OKKEN: And it's clearly going on. We're just not talking about it because we're I mean, you and I have noticed that there's a lot of people in the Python community that are in  the web side, of the Python community and it's way more than just the instagrams and dropboxes of the world. So

0:05:10 KENNEDY: yeah, absolutely, absolutely.

Yeah, it's really cool, and there's a bunch of more stuff that I've not covered in this article. But I mostly covered it because I love his offer of like, "Hey, let's get more of this conversation out there." You know, we could do open spaces. We could do Python Maikon pox suggestion, you know, proposals, things like that. I guess one final thing to throw out there is Dan Bader and I did have this conversation for TalkPython in the training and Python Bytes and whatnot

0:05:38 KENNEDY: as well as for Real Python over on Talk Python Episode 215 at the Last PyCon. We recorded that one so we'll see what happens with this pie con. But that's a small contribution towards that, and that was a really popular episode. But I definitely want to encourage people to take Hynek up on his offer here and get the word out a little bit more. All right.

0:06:04 KENNEDY: Yeah, so bright. When I think about testing what not I feel like you should be really be honest and like testing to tell the true story. And you should never like cheat with testing, should you?

0:06:14 OKKEN: only. Yes, you should definitely cheat. Cheat as much as you can.

0:06:18 KENNEDY: tell us about this next one.

0:06:19 OKKEN: So this comes from, I think it's Simon Willison. The article is called _How to Cheat a Unit Tests with PyTest and Black_. It's got all my favorite things. Testing, Pytest, Black and, well, I'm not a fan of the unit part, but we'll get there. 

So the premis is, I'm gonna quote this. "In pure, test driven development. You write a test first, and you don't start on the implementation until you've watched a test fail."

0:06:46 OKKEN: Okay, so the idea is you. It's the Red-Green refactor thing. So you write a failing tests, you write code to make it pass, and then you re factor it. So you're happy with it.

0:06:55 KENNEDY: And if I don't do that, I'm cheating (Yeah). Apparently, I think I might have cheated accidentally recently.

0:07:00 OKKEN: Okay, Well, yeah, my thoughts of partly on that is Ah, there is no such thing as pure test-driven development. Even came back himself. Says he didn't make this stuff up. He rediscovered it from previous best practices. So there's no pure test-driven development we can't even agree on, like, whether mocks are good or evil or what a unit is. So whatever works for you, man. So Simon's process really was to cheat on this and the way. And I think this is just clever pragmatism. His cheat method was to write a pytest test that calls a function that he's so he's been working on a function, and he thinks that he's happy with it. And he writes a test that calls it but then compares the output to, you know something he knows won't pass like just the output equals false or something. And you know that asserts gonna fail. So you run the test, and when it fails, you take a look at the output, and if you're happy with the output, you just copy that. Just highlight it. Copy and paste it into your test, and now you're test should pass. So this feels like cheating. But it's really just taking a manual test and make turning it into an automated regression test, especially when you're exploring stuff. I think this is a great way to to build up some of your cut test coverage. The bit about Black is that the output might be this big, long blob, something like a dictionary or a big list or something, and it might not be formatted well, and that's where he just turns black on his test code and reformat it nicely and make sure it's still passes, so I think this is a good time saver.

0:08:36 KENNEDY: This is interesting. I was working on some tests recently where I had a big chunk of test data that I wanted to compare against something kind of like he's describing here.

0:08:47 KENNEDY: And I was really tourney. I'd love to hear your thoughts on this. You know, I put this at the top of my test file so I could reference it, right? Didn't put it in the test. I put it kind of separate, cause I'm like, Oh, this thing is, you know, basically fills the screen, so I didn't want it to

0:09:01 KENNEDY: generate a huge test would say compare against that thing. Right?

0:09:04 KENNEDY: And what are the thoughts I had was creating, like, a a test data module where I could pull those things out, like, put it completely into a different file and pull it back? And

0:09:15 KENNEDY: it sounds like that might also be a nice way to organize things here, but at the same time, it takes what you would see as I'm comparing against this and it hides it away behind, you know, label of whatever that test module is. What do you thought so that good, bad, indifferent.

0:09:29 OKKEN: I think there's lots of times were then that if that is a good thing, especially like you said, it's a dated a big structure or something that you're comparing against. One common method to do something like that is if there's like for instance, um, it isn't really what you're asking. But if there's instead of comparing a whole bunch of different fields or something to actually compare structure, So to create the expected data structure, and especially with data classes, it makes it pretty easy. You can just say this is my expected object, and what I got back was this thing and compare those two

0:10:04 OKKEN: now if that thing you have all the data is huge and it makes it more clean to work with your test to stick it in and every file, then go for it. I think that's fine.

0:10:14 OKKEN: I mean, there's a method of regression testing, which is kind of the model of "I know it works now, and I'm going to modify the code for some reason". So I, instead of trying to come up with thorough test for everything, just running it with a bunch of logging and stuff and capturing all that.

0:10:31 KENNEDY: Yeah, absolutely.

0:10:32 OKKEN: then running it again and make sure all of your output in logging is the same. And just comparing gets that it's yucky to work with in the long run. But in the short term, that's a pretty handy quick thing to do.

0:10:44 KENNEDY: Yeah, instead of changing entire architectures, you can mock out everything. And then who knows? If you get that right. it’s like right,

0:10:51 KENNEDY: I don't want it to change. Let's just start from, like, keep it where it is and it breaks. Then we'll figure out if that's some change we wanted, right? But just to know that it didn't change is really helpful. And that's a quick, easy way. I like it

0:11:02 OKKEN: right, and I mean, change-detector tests are a smell that you need to be aware of because they're not. You want to be able to change your architecture as long as you can make sure that you checking for you don't want the behavior to change. Sometimes these are good things. Be a pragmatist.

00:11:15 KENNEDY: Yup I, agree. For sure. Good advice. 

00:11:19 OKKEN: You know what else is good advice?

00:11:22 KENNEDY:
work with Digital Ocean?

00:11:24 OKKEN
 Yeah, definitely. We've been working with Digital Ocean, and we've got a lot of our infrastructure there, and we've been really happy with it. And so one of the things they've got, they have got Kubernetes clusters and all sorts of stuff. So however, getting started with hosting and running Linux servers or Kubernetes clusters and all that stuff can be a little tricky. And getting into that going from just building on your own computer to dealing with all of this, some people might not know how to do that. And so that's one of the reasons why Digital Ocean launched their new support center.

0:11:52 OKKEN: So the support center makes it easier to find the answers to your questions and to get help that you need right when you need it. You can search across product docs or community tutorials and forums, and it's all one place you can get all your answers, so I'm sure that's gonna help a lot of people really a lot. Check this out. You can visit PythonBytes.FM/do-support to see their tutorials, and, of course, you can use PythonBytes.fm/DigitalOcean to get $100 credit for new users.

0:12:23 KENNEDY: There. Tutorials are pretty awesome. And I just want a help. People like how helpful they have been. So typically, you know, especially is getting started. How come this micro-WSGI thing won't start? It seems like it should work when I run it, but it won't. Its probably something like the logging file didn't have permission to write to or something weird like that.

0:12:44 KENNEDY: You go search for that, and it's very likely that one of these tutorials are going to come up. But, you know, I just went and put micro WSGI into their tutorial thing here, and it comes up how to serve a flask app with micro-WSGI and NGINX on Ubuntu 18.04 But then it has a drop down. Oh, would you like to do that on 16.04 or 14.04 Or maybe on CentOS 7 or whatever, and you can actually change the operating system it's running on, and the tutorial will adapt. I mean, it's ridiculous. Like have involved it is.

0:13:12 OKKEN: Yeah, they've been really done a lot to help novice users come up to speed, too. Good things running well.

0:13:18 KENNEDY: yeah. I just remember how awful that stuff was for me. So yeah, check them out of Python Bytes that FM slash digitally shouldn't get that credit, but then use their support center to actually get going. You know what? I'm glad I don't have to support?

0:13:29 KENNEDY: hundreds of Micro-services

0:13:31 OKKEN: Yeah, me too.

0:13:33 KENNEDY: So I think I found this from Hynek’s article when he was talking about how people were running in production and whether or not they should have Microservices or not. And that podcast I told you about, I believe those people reason Microservices He's like, Yeah, no way, No thank you.

0:13:49 KENNEDY: And refer to this article by Alexandra Noonan, who works for a company called Segment.

0:13:56 KENNEDY: And this is like a retrospective on their experience. So they had started out with a monolith app. I believe they're doing javascript, but it doesn't really matter. Basically, it's like package managers and maintaining versions that talk to APIs. It’s the same story for Python. Could you just switch the code samples or whatever

0:14:14 KENNEDY: and they're not really relevant. So there's this article called _Goodbye Microservices from 100 problem Children to One Superstar_ and it talks about how Segment was founded during the height of microservices as the the architecture du jour (architecture of the day) and how to sort of decided that was gonna solve all their problems. And at first it did. But as they grew and grew and grew, it turned out to be such a huge headache,

0:14:43 KENNEDY: They had three software developers, and eventually they said, basically, the three. Software developers were spending almost all of their time

0:14:51 KENNEDY: tracking down broken tests across these hundreds of different variations of microservices and all sorts of stuff. They were just going nowhere. 

0:15:02 KENNEDY: So it talks about how all the benefits that microServices should have, like prove modularity, reduced testing burden, better functional composition, isolation, team autonomy and all that and how many of those things turned around to actually become like molasses in their world and slowed them down instead of letting them work faster. So, basically, its a really concrete story about how they took a step back from micro service is how they actually made that step backwards because with 100 microservices into one app, that's kind of a beast to pull off.

0:15:34 KENNEDY: and how it helped them basically get everything under control again. So what's really interesting is basically the places where things broke down. So, for example, each micro service was talking to a similar but slightly different API, the customer integrations and stuff.

0:15:50 KENNEDY: And they had slight different needs toe over time, some of the like the core bits of those libraries were slightly different across the different APIs and it became, instead of having things you managed separately for each end point, you actually ended up with 100 different service is all of which you had to manage and like, if you're going to make a big change, you got to test it against all these variations.

0:16:14 KENNEDY: Their tests were super slow to run. And there's just a lot of, things. Also dependencies, you know, as in requirements.txt type dependencies. They wouldn't upgrade all of them at the same time because they wanted to make sure that it had to test it and whatnot. And so, if you're going to, you know, be running on requests, you 0.1 over here in 2.2 over there. Are you sure? You know, like if there's a problem with that, like, how do you How do you deal with that now? I'm a big fan of the big monolith type, absent and keeping a little more control over it that way. So I'm all behind this sentiment. But I do feel like they could have actually done a lot of work on the devOps side to make this dramatically better. And maybe, who knows, maybe they would have never switched.

0:17:00 OKKEN: Yeah, did somewhere I catch that There was a limited number of developers.

0:17:04 KENNEDY: I think there was, like, three or something.

0:17:06 KENNEDY: At one point there was three working on all of these things and, you know, micro service's air. Often touted as being really great ways for Dev teams to have autonomy. But when your dev team consists of three. You

0:17:18 OKKEN: don't really need autonomy. You’re already autonomous.

0:17:20 KENNEDY: Yeah, exactly. Like that's the one team it doesn't need more than one thing to be a totem is right, generally basically speaking. But you're so far, let me just take a step back and say, for example, like one of the big problems they said. "We've got 100 different service is that behave similar, but not the same, with slightly different integrations against different API endpoints. And we’re feathering out or fanning out. Requests to those service is based on which thing they're kind of integrated with. And the big problem was the dependencies. Well,

0:17:49 KENNEDY: if they had used something like Docker or Kubernetes, and they forced them all to say, we're going to install the same runtime environment with the dependencies pre-configured.

0:18:00 KENNEDY: And the only way you get to release a new version is you get your little thing to work with the latest image that has, ah, uniform set of dependencies across the board.

0:18:10 KENNEDY: Well, that sounds like that would have completely taken out one of these problems to me, right? I mean, sure, you might do a little work to release a new version of some thing, but you're keeping it in sync, right? 

So it seems like there's a couple of things like that that they could have done. There's other issues on the testing side that we're caused by these variations, and I feel like there could have been some uniformity stuff done especially around Docker that could have made this a lot better. But still, I think there's a lot of interesting lessons there.

0:18:37 OKKEN: Yeah, I think I'm looking forward to reading this because that sounds like an interesting story.

0:18:40 KENNEDY: Yeah, yeah, it's pretty good. Well done. Has nice pictures.

0:18:43 OKKEN: Yeah, neat. Oh, I like pictures.

0:18:45 KENNEDY: Speaking of tests and running them on the web,

0:18:47 OKKEN: Yes. So one of the the workhorses of what front and Web testing is often selenium and selenium is awesome, but it can be abused, And also it takes a little bit of knowledge. So there, I think we've covered others, There are some higher level AP eyes that used Lee name under the hood but have a different interface. And I'm a fan of a lot of this sort of stuff because, if it simplifies your life, go for it. One of the things we're gonna cover today is helium him. It's a newer. Well, it's a very much newer, It's only a few months old Python library for automating Web browsers. It's ah, project that's built on top of selenium, and even though it's fairly new, it's already got like over 1000 stars on get have that school.

0:19:35 OKKEN: The claim is Selenium Python, 50% easier. Helium is the best Python library for a Web automation. Of course, it's saying that to itself, but it does look pretty clean. There's some pretty clean drivers to be able to control chrome, control your browser and navigate some stuff. So looks good.

0:19:54 KENNEDY: Yeah, I really like this. I think Michael Herman’s did an interesting job on this. And the reason that I think this is need is that  It takes you away from working at the structure level. So, for example, just like selenium, you say I'm going to open up this website, right? So you say, start chrome, github.com/login. But instead of doing some kind of CSS selector to find the the text box, you just say write, if you want to, like, set something to ah textbox to say write this text into and use, you know, give it, like, a short bit of text, like the label that is right before immediately before the text box, right, So write something into user name. And that'll just fill out the user name thing, Then write something into password and that'll type in the password and then click the button. These a click sign in.

0:20:46 KENNEDY: and it just finds the button with the text sign is what it's nice is like What a human sees about the page is how the code interacts with it. And you might say, "Well, that's unstable, right?" What if somebody changes the text? Well, you've ever had to work with CSS selectors. And then somebody redesigned the site in your automation stuff. It's not a whole lot better. So I might as well make it easy for humans. As far as I see it.

0:21:09 OKKEN: Yeah, in the I mean the API like so clean and short. So you've got, like, think like function calls like `click` And you Just give it like the tag, I think, the the button tag that you're gonna click on so, like

0:21:23 OKKEN: that's pretty sweet. And to fill in ah, user name, for instance, in a username field, it just is right. And then you give it to parameters that the name of the field that you're gonna write into and then what you're gonna write in there. So this is pretty slick, like it?

0:21:39 KENNEDY: Yeah, for sure. Too many things get the "for humans" tag and Python. But this one kind of could get that.

0:21:44 OKKEN: Yeah. So since this is new. And there's a lot of Web testing going on. I'll be curious to see if, uh, where this goes and keep an eye on it.

0:21:53 KENNEDY: Yeah, absolutely. And the easiest way. If you want to get a sense of like whether or not this is interesting for you, just go watch the little GIF animated GIF. Just watch that for 10 seconds and you'll have a quick idea. What? What you gonna work with?

0:22:06 OKKEN: We've said this before. Animated GIFs of how things work are good thing to get people excited about a project. This project also includes a cheat sheet of some of the common things you might want to do a single page with a whole bunch of stuff. It's kind of like an FAQ, but ah, but just sort of, Ah, no questions, just answers.

0:22:26 KENNEDY: Damn. So I'm pretty certain that's a good idea, but sometimes you're not certain.

0:22:31 OKKEN: Yeah, lots of times.

0:22:32 KENNEDY: So I remember. I don't know where I learned more about this either this was in physics or this was in statistics or something. I think I was on my science classes in college. I promptly forgotten it, so there's no way I could could work with uncertainties and measurements. Really? Well, maybe he's even engineering. I'll tell you a quick example, and then I'll ask you a question. You can't look ahead and don't cheat. I have the answer in the notes, further down.

0:22:59 KENNEDY: So imagine we're back in school or you're solving a real problem. Jane. She needs to calculate the volume over pool so she knows how much water it'll take, right,

0:23:07 KENNEDY: so she measures the length, the width and the height. Now, of course, you can't measure it ultra precisely. And also there's probably some variation in there, so she determines the length is 5.56 meters plus or minus 2.5%. Like that's her guests on the inaccuracy in the with three meters plus or minus 2.6% and the depth three meters plus or minus, 3.7%.

0:23:31 KENNEDY: So what is the uncertainty right? That plus or minus little bit that uncertainty? What is the uncertainty in the volume which is the length times of with times. The depth

0:23:41 OKKEN: I can’t remember is do you multiply them together.

0:23:44 KENNEDY: Yeah. Do you multiply? Am? Do you add them? Do you average them like what the heck do you take the max? I don't know. Well, there's actually very strict rules about you do it. So when you multiply things Apparently I didn't remember this, but I've looked it up. Apparently, you add the uncertainties when you multiply things. So in this case it's 2.5 + 2.6 + 2.7= 8.8% uncertainty

0:24:10 KENNEDY: That is super tricky. And these kinds of calculations are the kind that ends up with space craft burrowing into like, a desert or into a moon because they're like, Oh, did we get that wrong? Whoops, Right. Do we use the wrong units, or did we get the wrong uncertainty or whatever, Right.

0:24:28 KENNEDY: So there's this really cool library called `uncertainty`, and it comes with all these different math operations, like it has values like a float. And it has, uh, sine right, which is, like, you know, sine cosine tangent sort of thing so you can do mathematical computation. But instead of having a regular float. It has an uncertain float, a ufloat. So you create like `x` would say, like a you float of`1` is the value and then `.1` is the uncertainty.

0:24:57 KENNEDY: And then, if you were to do math with it and print it out, it'll say, like `2 * x` actually be 2 ± .2

0:25:04 KENNEDY:
And so it always carries its uncertainty. And then, as you take, like the sine of it or you multiplier, you square it, it will actually integrate and consider all those different uncertainties to give you a final uncertainty in your output. Isn't it awesome?

0:25:19 OKKEN: That's very cool. Yeah, this is useful in lots of fields.

0:25:23 KENNEDY: Yeah, if you ever have to compute with uncertainty this seems so glorious. This in pint, right? If you could put this and pint together, then it's on because point, let's you, ah, work with different units of measurement and then add and multiply and divide them. And then you throw the uncertainty on top that boom. You’re golden?

0:25:41 OKKEN: Yeah. Yeah, that'd be cool.

0:25:43 OKKEN: We had worked with once with a measurement value that it was a power level for a cell phone, and the uncertainty ended up being plus or minus, like, the amount of power that the sun produces. So we essentially don't know the answer, if that's the uncertainty.

0:26:01 KENNEDY: Right? Right, Right. It could take a AA battery, or it could melt the Earth. We're not really sure

0:26:06 OKKEN: what we're not sure which,

0:26:08 OKKEN: uh, not ready for shipment yet. 

0:26:12 KENNEDY: It's exactly Maybe we got it, like, you know, more accuracy there. The way this comes from Tim Head, who mentioned it on Talk Python, where we recently did an episode on `Binder`, which is super interesting, but not yet released. So literally we'll talk more about that. There's well, anyway, that uncertainty. Cool little library if you're gonna do any sort of computation with this kind of stuff.

0:26:29 OKKEN: Yeah, I think it's cool, but I'm not sure about

0:26:31 KENNEDY: Yeah, well, can you ever be? But you can be sure about the level at which you can't be sure using it. Yes.

0:26:40 KENNEDY: I'm pretty sure that I wish my Python prompt was cooler.

0:26:44 OKKEN: Well,

0:26:44 OKKEN: I don't I'm OK with

0:26:46 OKKEN: my Python prompt, but

0:26:47 OKKEN: you

0:26:48 KENNEDY: I don't know. I mean, come on. But

0:26:50 OKKEN: think of all the options you could do anything you wanted, and I never thought to do that. I mean, I do it with my like a bash prompt and stuff

0:26:58 KENNEDY: of, you know, we put our virtual environment name in there. It's stuff like that.

0:27:03 KENNEDY: Git status, git branch. All that kind of stuff.

0:27:05 OKKEN: Yeah, definitely. So you can change those things. So why not? This article comes from I think our Pete Biryani, and it's ah called Personalize your Python. Prompt those three right angle, right? Was that the right left greater than science that they were together. When you're doing interactive Python, apparently you can muck with those. There's a sys.ps1 one variable that if you signed to that, you can change it to whatever you want. And, of course, the author didn't stop there, said, Oh, it could be dynamic also, but you have to have a non-string object to make it dynamic, so it gives a little example to where you can in the way you do that is you have an object that has a `__str__` method. If that has dynamic action, that gets called every time. So for every prompt. So this is pretty neat eh has an example of doing some stuff. But I wanted, I didn't have time to do it this morning, but I was working on it. I was trying to get a prompt that would mimic the Windows Command prompt because apparently I want that on my Mac, because that would be fun.

0:28:12 KENNEDY: You want to confuse people like "What are you doing?" This is insane.

0:28:15 OKKEN: it.

0:28:16 OKKEN: I mean, `C:\` was easy. But I wanted to also put the windows path in there, and flip the direction of the slashes and stuff like that.

0:28:28 KENNEDY: Yeah, that's really cool. And I, one, didn't know that you could just set that assist. You know, import sys `sys.p1` equals something that now is your prompt. But I didn't really think that it could be a dynamic object like that has a `str().__str__` It's pretty cool.

0:28:46 OKKEN: Yeah, that isn't

0:28:46 KENNEDY: You could easily set up something like that. Jupyter,

0:28:50 KENNEDY: you have Jupyter notebooks. You have`[1], [2], [3]` for your various calculations. Like five lines. You got that in your Python prompt If you want it.

0:28:58 KENNEDY: It doesn't have to know that Because you can't change the order. But still, it's pretty interesting, I think. Yeah.

0:29:03 KENNEDY: Yeah. Quickly. All right. Well, that's Ah, good little find a quick and easy to play with.

0:29:07 OKKEN: Well, do you have any extra stuff for us? Not really. I'll go and throw one thing out for you. So I finished my _Python for Absolute Beginners course_. And so now I'm starting a new course, which is like

0:29:18 KENNEDY: adding a CMS to a proper data driven web app. So if you got a flask app or pyramid or Django or something like that, and you want to let other people right part of the site and the rest is more like Amazon would be with, you know,

0:29:33 KENNEDY: here's the categories. Here's the products here. The product page has a review page, like, very structured. But you want to just let him, like, right freeform stuff. So I'm working on a course that lets you kind of add that to existing site. So that'll be fun. I'm having a lot of fun working on that. Okay. Interesting. Yeah.

0:29:48 OKKEN: Is this what kind of where the markdown work that you were working on comes in play?

0:29:52 KENNEDY: Yes, exactly. So I decided this the work that I did for talkPython training to build out the landing pages in, like, the interesting stuff to basically

0:30:03 KENNEDY: make a whole section of that site just driven by markdown and just editors and whatnot. I'm gonna take that, extract it and sort of take it to the next level, like with rich markdown editors and, you know, database backends and stuff like that would be fun.

0:30:19 KENNEDY: Shall we close it out with a limerick? Sure.

0:30:23 KENNEDY: I'm not very good at limericks, so give this a shot. But this comes to us from Alexander A.

0:30:28 KENNEDY: He said this over. He had written it. This is his. He brought it recently, and this is submitted. Apparently, there's some kind of limerick contest at Manning.

0:30:37 KENNEDY: You win free content, like books and whatnot

0:30:41 KENNEDY: if you submit a winning programming limerick. All right, So here goes _Coding Environments in Three Parts_ 

To this day, some prefer BBEdit. VSCode is now getting some credit. Vim and Emacs are fine; so are Atom and Sublime. Doesn't matter much, if you don't let it.

But wait! Let's not forget IDEs! Using PyCharm sure is a breeze! Komodo, Eclipse, and IDEA; CLion is my panacea, and XCode leaves me at ease.

But Jupyter Notebook is also legit! Data scientists must prefer it. In the browser, you code; results are then showed. But good luck when you try to use git.

0:31:22 KENNEDY: I love it is good, right? 

0:31:23 OKKEN: This is great! Yeah, so good.

0:31:26 OKKEN: The way

0:31:27 KENNEDY: that last line I love it

0:31:29 OKKEN: definitely makes the whole thing worth it.

0:31:31 OKKEN: Yeah.

0:31:32 KENNEDY: Yes, indeed. So Well done, Alexander. Thanks for sharing that one that's used on the show. That's great.

0:31:38 KENNEDY: All right. Anything else? You got anything you wanna share it, folks? I guess I jumped ahead of you and did my limerick.

0:31:44 OKKEN: No, no, no. It's good. I've got We've got a whole bunch of, ah, great feedback from the recent _Test & Code episodes. No, it's been good.

0:31:52 KENNEDY: Yeah. What are some of the ones you know, you just did one with Anthony Shaw? 

0:31:58 OKKEN: Yes, we talked about security. We've talked about Ah, Django recently, and, um, just the most recent one is ah, talking about the most town loaded pttest plugins.

0:32:10 OKKEN: So, Anthony Sotili and I talked about 28 of the top plugins.

0:32:15 KENNEDY: That sounds like the perfect show. That's really great.

0:32:18 OKKEN: Yeah, really geeked out on a lot of stuff.

0:32:19 KENNEDY: I found some super interesting ones that I'm gonna talk about the next show, but we'll leave it at that. Awesome. Thanks. So All right. Yeah, Well,

0:32:27 KENNEDY: thank you as well. Happy to be here with you, like every week bye

0:32:30 OKKEN: Thank you for listening to Python Bytes. Follow the show on Twitter @PythonBytes. That's Python Bytes as in B Y T E S and get the full show notes at Python Bytes.fm. If you have a news item you want featured just visit Pythonbytes.fm and send it our way. We're always on the lookout for sharing something cool. This is Brian Okken. And on behalf of myself and Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues. <|endoftext|>
00:00:00 KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your ear buds. This is Episode 139, recorded July 11th, 2019. I'm Michael Kennedy.
 
00:00:11 OKKEN: And I'm Brian Okken.
 
00:00:12 KENNEDY: And I want to welcome Ines Montani to the show. Ines, great to have you here. Special guest, going to help us cover the news of the week. Thanks for being here.
 
00:00:19 MONTANI: Yeah, thanks for having me. I'm really excited.
 
00:00:21 KENNEDY: It's going to be really fun to have you participate in this. Also thank you to DigitalOcean for sponsoring this episode. Check them out at pythonbytes.fm/digitalocean. More on that later. Brian, we've talked a lot about how do you install Python, how do you manage Python, how you upgrade your stuff. There's just so many ways, and then we've got things like pipenv, flit, poetry, it goes on and on, and it still goes on, right?
 
00:00:43 OKKEN: This was a contribution from Nils de Bruin sent us this. There was an article called "Simplify Your Python Developer Environment" and it talked about using pyenv, pipx, and pipenv together. And my first reaction was we've already covered all these. However, I have tried pipx. Actually, I did the joke, the pyjokes, I did that with pipx, and I've tried pipenv once before. It doesn't really do anything for me that I really need. And the pyenv, I've tried it, and it didn't work for me. So actually, all these things, I kind of wanted to give 'em another shot anyway, so I went ahead and read this article, and it actually is pretty nice. It's a nice pros and cons of all the tools and how to set 'em up. And I think for somebody that wants to try these out again, this is a good article to read to try to get back into it. So if people don't remember, pyenv is used to install and manage multiple python versions and flavors on a computer, and then pipx is something that allows you to create, take a Python application and have it bundled with its own virtual environment and use it globally on your system without having to activate the environment. And then pipenv is for when you're working on a project, on an application, it's a way to manage virtual environments and dependencies on a per project basis.
 
00:02:07 KENNEDY: These are really interesting, because I feel like often they kind of blend, kind of blur together, right? You're like, well, I know there's all these env things I could use and whatnot, and it's like, well, when should I use what and what one is relevant for the situation? What do you think, Ines?
 
00:02:22 MONTANI: It actually took me a second to, like, remember the one that I've used. So I'm totally in the market for stuff like that. But actually, I haven't heard of pipx at all, but I think, yeah, pyenv I definitely use, and I think it's quite important, at least for the work I'm doing, because I need to run stuff in all kinds of Pythons. And I'm, as a library developer, we need to build stuff for, Python 2. We're supporting Python 2.7 and 3.5.
 
00:02:45 KENNEDY: Just so folks know, like, you're deeply involved with Spacy and some tools built on top of that, the Natural Language Processing, which will become evident as we go through some of your topics some more, but maybe not everyone knows your background. But I feel like pyenv is most relevant for people building libraries, and pipenv is really relevant for people building applications. I don't know. What do you think, Brian?
 
00:03:09 OKKEN: Both of 'em are important for people like us that have to do both. I have a question for Ines. The pyenv, so one of my concerns was, can I use it to install, to have multiple Pythons and still be able to run them all from one project, like, with the tox build to be able to access all of 'em?
 
00:03:28 MONTANI: So I haven't tried it all, like, within the exact same project. I think you might need different virtual environments for that. At least that's how I use it. So I use venv to create my virtual environment, and then they are created with whichever Python version I've configured locally. So I do, like, if I have local 2.7, an individual environment will have 2.7 in it.
 
00:03:49 OKKEN: Okay. Well, I'll give it a shot.
 
00:03:50 KENNEDY: Yeah, yeah, it's really nice. I'm a big fan of pipx. I think pipx is super cool. So pipx is great if you have a thing that you just want as a utility on the command line in your terminal that happens to be Python-based. So instead of brew install something or npm install something, pipx does that. So, for example, I have, like, cookie cutter. I have the httpie library. I have glances. I have pyjokes, of course, because we run this podcast, and some other stuff that I'll even talk about later, like ptpython.
 
00:04:19 MONTANI: Is that a bit like pex files, or is that something else?
 
00:04:22 KENNEDY: It's a little, a little bit. What it does is when you say I want to have, let's say I want the utility ptpython, which is, like, an Emacs-enabled REPL, basically. So I want to have that, and I want to be able to just type it. It's not tied to any project. I just want to have it as a command on my computer that I could use. So what you can do is you can pipx install ptpython, and then it just, it automatically puts it in a location, modifies your path so that it's, it has its own virtual environment, it upgrades itself and its dependencies separately, but anytime I want, I can just type ptpython and go crazy, or glances, or pyjoke, or whatever.
 
00:04:55 MONTANI: Okay, I think I get it. Okay, that actually sounds quite cool, yeah.
 
00:04:58 KENNEDY: It's really nice. You just say, what are the updates for my Python libraries that I use as applications or little utilities? It's pretty cool. I like that one, as well.
 
00:05:05 MONTANI: Oh, yeah. Wonder if we shouldn't ship our annotation tool Prodigy like that, because it's very, very command line heavy, and, you know, it's usually kind of a separate thing.
 
00:05:13 KENNEDY: All it does is build upon pip. So if you can pip install a thing and it has an entry point, then you can pipx install it, as well.
 
00:05:21 MONTANI: Ah, okay. Cool.
 
00:05:23 KENNEDY: Yeah, pretty cool. All right, Brian, are you switching to this? Are you going to use pyenv, pipx, and pipenv? Is this your new plan?
 
00:05:29 OKKEN: I definitely want to try pyenv because I want to try new python versions, and my old process was to just download the regular install and install it, and then my path is all weird and, yeah, it's a mess.
 
00:05:43 MONTANI: Classic.
 
00:05:44 KENNEDY: Ooh yeah, it's nice. Definitely for people who are looking for a different workflow, it's something they can check out, for sure. All right, Ines, what's this next one that you got for us?
 
00:05:51 MONTANI: This week was actually, or the past few weeks were actually super exciting also in my field. So there was a new release of a fast.ai course for Natural Language Processing. So fast.ai is a very popular free online course for deep learning by Rachel Thomas and Jeremy Howard, and it also comes with a Python library. It comes with lots of notebooks, really active community. So if you want to get into the modern machine learning stuff, that's probably the go-to course that I would also recommend to you. And they've also produced some very influential research developed alongside the library and the course, so, for example, ULMFIT, which was a very popular algorithm for text classification. And, yeah, the new thing is they've just released a course on Natural Language Processing, and it's a very practical introduction, and what I thought was really interesting and really cool about it is that it of course covers the modern neural network approaches and all the very hip stuff, but it also focuses on traditional techniques, so just the whole background of, okay, what did people do before deep learning? Topic modeling, linear models, just really all the basics, and even rule-based approaches like regular expressions. Some people might look at this and be like, what, regex? I did that 20 years ago. But in fact, like, in real life and in real-life practical applications, that's super important, and you can do a lot with that that, you know, really gets the job done. So I thought that was really cool. And of course, another thing, the course has a really strong focus on ethics, as well, so there are videos on bias and disinformation, and basically just the topic of, okay, think about the impact that the work you'll be doing has, and I thought that was incredibly refreshing. And of course, disclaimer, I haven't actually watched all the videos yet. I don't even think that's, physically possible to do all of that since it was released.
 
00:07:36 KENNEDY: It's too new and it's too long, yeah, uh-huh.
 
00:07:38 MONTANI: Yeah, it's a lot of material, but yeah, I really like the work they're doing, and it's a very, very significant release. And it's all free.
 
00:07:45 KENNEDY: Yeah, it's super cool, yeah. Looks like it's free. Like, I was able to go pull up the videos without even having an account there. It just sort of takes you through it. More like an online video book you just make your way through, right?
 
00:07:54 MONTANI: Yeah, and there are lots of notebooks, so you can open the same notebooks, you can play through the examples, and of course, also use their library to really work through the things efficiently, yeah.
 
00:08:04 KENNEDY: Sure, that's super cool. Does it cover any of the libraries that you all work on, like Spacy or anything?
 
00:08:09 MONTANI: Spacy's a much more high-level toolkit and framework, so it's like, this is really the basics of the technology. So while the fast.ai library, I think it does use Spacy for tokenization, but Spacy is really, you know, once you're building applications and you have some problems and you want to construct your pipelines and really ship something into production, that's when you would be using Spacy. But actually, in fact, Spacy is not really the best solution if you really want to learn the underlying algorithms and implementations, because we're actually super opinionated. You get one implementation, and, yeah, you kind of take that or you plug in your own.
 
00:08:41 KENNEDY: I see. This is like learning the algorithms and the foundations that maybe Spacy uses so you understand it better.
 
00:08:46 MONTANI: Yeah, exactly. And also giving you some, yeah, the background, and yeah, even the rule-based ideas which, yeah, I still think it's so great. I scrolled through it. I'm like, great, regular expressions. That's really what people should think about.
 
00:08:59 KENNEDY: Yeah, I mean, that's a start, right? Like, sometimes you just want to pull data out of text, and there you go.
 
00:09:03 MONTANI: Yeah, and especially then some people really, you know, then they start throwing a neural network model at it, when actually, the best solution would've been to just write one regular expression. I don't know, you work at a company and you have a statistical model that recognizes organization names, and your manager comes to you and is like, well, it's all great, but it often gets our own company name wrong. Can you fix that? That's really embarrassing. And you can spend hours trying to tune your model and update it and fine-tune it with more examples, or you can just add one regular expression or one rule on top that says, okay, whenever I come across this string, don't get it wrong, and that will likely take you five minutes and is much more effective in the real world, so, yeah.
 
00:09:43 KENNEDY: This is the practical applied Natural Language Processing, right? Speaking of language, this next item that I want to talk about, I don't know, it just scares me. So let me tell you quick about it. I'll get your two opinions. The idea is that we can clone the human voice by giving it a sample, by using some sort of a neutral network type thing. I'm not sure exactly. So this was sent in by Brendan. Thank you for sending that over. And in just a couple minutes, you can load up somebody's voice, use some Python, a pre-trained machine learning model, and then type in text. It will speak whatever that text is in the voice of that person. And this is just, I don't know. I feel like public discourse is in serious jeopardy here. What do you all think?
 
00:10:27 OKKEN: This is pretty interesting, and I was a little frightened, actually, watching this video of how easy it was to copy somebody's voice. I mean, I don't know, the code behind it's probably not easy, but it's a little creepy. My first thought was I could use it for, if I have solo episodes, I could be my own co-host, but that'd be cool.
 
00:10:46 KENNEDY: That'd be pretty funny.
 
00:10:47 MONTANI: Yeah. Normally I think I would say, I think it's still quite compute-intensive to do that, right? I think you still, you know, if you really want to have good results and really want to do it right. But it's true that this, you know, this is a really good example of, wow, that's possible, and that's the type of stuff that's been possible for quite a while, especially across video image and now also voice audio.
 
00:11:09 KENNEDY: Right, I mean, we've heard of the deep fake stuff for videos and whatnot, and that's kind of scary, but this is, it's almost like this could be worse, right? I could imagine somebody just putting a little static, a little muffling filter on it and saying, oh, here's a hot mic take behind the scenes. Somebody said something they weren't supposed to during a presidential debate, or some kind of public figure they're trying to discredit, and just make them say stuff. Now, I don't know what you all think. To me it still sounds a little bit off. Like, it doesn't sound exactly like the person, but it's pretty close.
 
00:11:41 MONTANI: But I think it would still use it. Yeah, and also, I mean, I do think this type of technology will definitely lead to a situation where we will all just take things we hear, like recordings or videos, much less seriously. I do think it will develop into a culture where we don't necessarily trust an audio recording because it could've been produced by something like this. But I do think just for very everyday life scam, I think it's very timely, because yeah, there are all these news articles about all these financial scams and companies using deep fake audio, or even before, using spoofed emails that were quite effective. And actually reading that, you know, the trick there, I'm like, I can totally see how an accounting department falls for that and thinks, oh, it's their boss in a hurry. And then imagine that with a voice of a CEO.
 
00:12:25 KENNEDY: Yeah, it's so scary. Exactly, yeah. So I'm going to link to the video. You all could watch it. I'm also linking to the software that did this. Apparently it uses something called Transfer Learning from Speaker Verification to Multi-Speaker Text-to-Speech Synthesis, whew. And that even has an acronym, SV2TTS, of course. And so this was based on someone's thesis, and you can watch the video and get a good sense. But yeah, you can just imagine, like, I call a, I somehow get the number of the CEO and I call them up and I record that call, and then I take their, like, I need only five seconds or so of their voice, and then I take that and I use some text to real-time generate. I'll call up the accounting department and say, hey, this is so-and-so. We've got a super emergency with a really important client. We forgot to pay them. We owe them $10,000. And you just type and then replay what you type live back to 'em, like...
 
00:13:18 MONTANI: Yeah, and then you overlay that, yeah, with some background music, background noise, and just like, oh, I'm in a taxi right now.
 
00:13:24 KENNEDY: Exactly.
 
00:13:25 MONTANI: Like, please get this done ASAP, otherwise we're in trouble, bye.
 
00:13:28 KENNEDY: Sometimes what usually doesn't work for email, but if it's literally a voice that's interacting with you that sounds like the boss, well, it might work. Hopefully we didn't give anyone ideas.
 
00:13:37 OKKEN: I guess you guys are better criminals than me. I was just thinking, like, a different version of "Ferris Bueller's Day Off." You could just use this to call in and excuse yourself from school.
 
00:13:46 KENNEDY: Oh my gosh, you're right. This would be beautiful when I was in middle school or high school. Oh my goodness, yeah. No, Michael's not feeling well. Is he going to be okay? He may be out tomorrow, but he'll be back by... All right then. Yeah, and that's really horrible.
 
00:14:01 MONTANI: Yeah, I mean, pretty soon you have kids recording their parents' voices and then...
 
00:14:04 KENNEDY: Yes. I don't know if that's worse, but these are all bad.
 
00:14:07 MONTANI: This is a good example of why, yeah, so focus on ethics when you're learning these technologies is incredibly important, because we have that technology, and every developer should think about, okay, what's the impact of having this and using this, and okay, we can release it to really also make everyone aware that this exists. And we're talking about this right now, but still, yeah.
 
00:14:26 KENNEDY: Yeah, I guess final thought on this one, Ines. What do you think the chances of some sort of fingerprinting or system that can determine that this was faked, right? Not a human, but if I can take this and feed it to, say, another ML model that knows the little glitches that show up in the system, will we be able to verify stuff or not in the future? Are we just lost?
 
00:14:49 MONTANI: I think so. I think there've been some experiments where they tried that. And, I mean, another approach would be, okay, you can always encode things in the model that only show up under very, very certain circumstances, so that's how you can watermark that model. You can, or you can release that, and then if you say a very, very, very specific sequence, or if you type a nonsense sequence in there, it will always produce something nonsense, but very differently, and then you're like, ah, that's the system that was used, and that's how we can... It won't work on the output, but at least we can at least have some way of kind of finding out what type of system...
 
00:15:23 KENNEDY: Yeah, that's part of the ethics part, right? Like, that you embed these little watermarks rather than just put it out there. I don't know, it's pretty scary to me, but I think as a society, we'll come around to figure out what to do about it. Yeah, cool. Well, not scary is DigitalOcean. Just want to tell you quickly about them, and they're supporting the show, so thanks to DigitalOcean. All of our software runs on top of DigitalOcean infrastructure. You get the mp3 the stream delivers, either stream or download data there. Things like that. So they're really, really great. You can get started for as little as $5 per month for a server, and they got a bunch of cool services, managed databases, load balancers, and whatnot, and it's, you know, it's not like EC2, which is so complicated it can run Netflix. It's the simple thing that you just need to build your app and get it going. So check them out at pythonbytes.fm/digitalocean, and you get a $50 credit for new users there, and definitely highly recommended. Brian, what's this next one that you were working on here?
 
00:16:16 OKKEN: Okay, well, another contributed by a listener, this one from Andrew. He contributed a little snippet that was on a Reddit stream, and it was, I'm going to just guess it, just describe it as abusing the pyproject.toml file by putting ini file stuff in it. So the example that he gave was you can have the pytest.ini file and the mypy.ini file are two ini files for tools, and you can, they're in ini file format, and toml files kind of look like ini files, but they're not. They're different. And you can break ini with toml syntax, and you can break toml with ini syntax. However, you can write them such that they are, if you're careful, you can write 'em such than they comply with both. And I went ahead and tried this out. I was able to try putting pytest.ini options within the toml file, and both pytest and mypy do not support doing this, but they do support passing in a path of where their config file is, and if you pass in the project.toml file, you can get it to work. And if all you're trying to do is reduce the number of files in your project, yeah, this kind of works.
 
00:17:32 MONTANI: Why would you want to do that?
 
00:17:33 OKKEN: Just to try to reduce the number of files in your top level directory.
 
00:17:37 MONTANI: Okay. I don't know, I should use all of these files more, and I feel like I love this idea of imagine if there was one config file, really only one place where you put everything, or so your dependencies, everything just goes in one file, and then you have that, but for some reason, it's never actually worked out that way in practice.
 
00:17:55 OKKEN: You can put it in the setup.cfg. That's a possibility. But they're both, those are ini file syntax, also.
 
00:18:01 MONTANI: I have to admit, our projects don't even have a setup.cfg. We have a setup.py and then we have the requirements.txt.
 
00:18:08 KENNEDY: I have a admission, as well. Like, I know we're talking about pyproject.toml, but I'm still just using requirements.txt, as well, for some of my projects. You know what? The workflow works. I've got external systems like pyup that are out there automatically doing PRs for changes. I mean, it's just like, it's super cool, but at the same time, I already got a flow working and I just, you know.
 
00:18:30 MONTANI: Yeah. No, I can relate, and a user once I think contributed a pyproject.toml to Spacy, and we were, you know, I really appreciated that, because I'm like, great. But it's still, I don't think, yeah, we can't really ditch requirements.txt yet, and so now we also have that, and now if we update a dependency, I have to manually edit that in three places.
 
00:18:50 KENNEDY: Yeah, yeah, yeah. That's how it goes.
 
00:18:53 OKKEN: I'm on the bandwagon. I'm switching, I'm using flit now, so I'm using pyproject.toml and flit.
 
00:19:00 MONTANI: Okay, and that works cross-platform, cross-Python?
 
00:19:04 OKKEN: I don't know. It works for me.
 
00:19:06 MONTANI: Well, that's always good, yeah.
 
00:19:08 OKKEN: I'm using it for mostly 3.6 and above, 3.6, 3.7, 3.8. For my personal projects, I think it's sufficient, and the ones I'm supporting for other people. I think it's fine for an individual project owner to say, "I'm not supporting 2.7." so...
 
00:19:22 MONTANI: No, of course, I would never, and I also would never go and just whine about, oh, of course there's an edge case for 2.7 on Windows, and there's something there. I understand it's not as easy if, you know, there was the Python that could just magically fix everything. You know, I appreciate there's a lot of work that went into all this and is like, yeah, some things are a bit tricky.
 
00:19:41 OKKEN: One of the interesting things was coverage.py. I use that a lot, and it got, there was a request to put pyproject.toml support on Coverage. The reason why it isn't there isn't because of any sort of, not that it would be cool, but the toml parsing is not part of the standard library, and Coverage has this strict policy that the only dependencies that it has are standard library dependencies. That's a reasonable desire, also.
 
00:20:11 MONTANI: Well, yeah, yeah.
 
00:20:12 KENNEDY: Yeah, that's cool. You just get Coverage.py and just run the file or whatever, right?
 
00:20:15 OKKEN: Yeah, maybe we should get toml support added to the standard library. Then it wouldn't be an issue.
 
00:20:20 KENNEDY: There you go. Yeah, that's a whole different discussion. I know that's quite a heated debate about what should be in the standard library these days. The trend is less, not more, I think, if we take the poll. Yeah, so Ines, some of the tools that you build are absolutely about making machine learning easier and doing that across teams. So I know that you're really turned on to that space and paying a lot of attention. So this Polyaxon one that you found for our next item must be pretty interesting.
 
00:20:46 MONTANI: Yeah, so basically, it's actually quite funny because I've obviously thought about what I was going to talk about and had something else planned, and then really today, earlier today, that release came out, version 0.5 for Polyaxon. So I was like, okay, great, this is perfect. It's as if they'd waited for my podcast recordings. Yeah, so basically, we've been using Polyaxon internally, and essentially it's a tool for experiment management. So if you work in machine learning and you train your models, you have to run tons of experiments, and you have to, you know, you run an experiment, train a model, look at the results. Then you stop it. Then you tweak some other knobs. Then you try again, and you keep doing that until you have a good result. And one thing we always do when we travel and visit universities and research labs, we usually always ask them, hey, how do you run your experiments? And usually they're like, well, yeah, you know, we got this GPU and it sits on my desk, and then I start an experiment, and then I sit around and then I wait. And that's the top, some of the top labs and, you know, people where you'd think, oh, they must have everything taken care of, tons of money, and it's like, no, they're sitting there with their little GPU on their desk, and that's how it's done. And basically, Polyaxon basically helps you solve this. So it's super, you know, it's built on Kubernetes. It's very easy to set up, and especially if you're already set up with cloud computing, and yeah, and you can also do stuff like hyperparameter search, where every hyperparameter's a tiny knob and you have tons of them, and then you want to find the one combination that gives you better accuracy. And so you can run lots of experiments, see them, you know, and their little graphs, and try things out. So it's been a very great tool. It's all open source, which is very much in our spirit. And yeah, they just released 0.5, which comes with a plugin system, which is also great. It's very much in our spirit. That's also how we like to do things with Spacy. You can run it locally and, you know, it comes with some new features for chaining stuff together if you have, your experiments have lots of steps. So yeah, it's a great tool if you're working in the field.
 
00:22:49 KENNEDY: It looks super cool.
 
00:22:50 MONTANI: Yeah, I can definitely recommend it.
 
00:22:51 KENNEDY: Yeah, so it's got a platform as a service offering to just kick it off and have it go, but also a, like, on-premise enterprise option, too, yeah? That's cool.
 
00:23:00 MONTANI: I think that's the focus. It's like, you know, you run it, and then it gives you a little UI and you're just like, you set it up yourself on your service, and then it manages that.
 
00:23:08 KENNEDY: Yeah, this looks really great. Runs on Google's Kubernetes Engine, among other things, but probably pretty much any Kubernetes cluster, I guess. I haven't tried.
 
00:23:17 MONTANI: Yeah, I think you might have to do a bit more setup if you're bringing your own, but it should be quite basic for, Google actually makes this quite straightforward. And yeah, and another nice thing here is with the hyperparameter search, if you, yeah, most machine learning stuff is done on GPU, but not everyone has GPUs. They're very expensive. And we always say it's not always the best choice necessarily, because if you just want to run lots of experiments, you can run them all in parallel. You can run thousands in parallel. And then if you have a tool like Polyaxon, that can help you do that so you don't have to kick them all off manually. It's actually going to be much cheaper and much more efficient, and you don't need a fancy GPU. You can just run it on CPU.
 
00:23:59 KENNEDY: Right, yeah. GPUs are great, but they're much harder to come by, so that's cool. Yeah, it also has something about you can run it on your laptop, as well, right? The little data science in the box thing they talk about there at the end. So yeah, super cool. It's a nice one. All right, this last one I want to talk about here, actually, the way I got it onto my system is I used pipx. So I pipx installed this thing called flint. So you've heard about linting, and we've heard about fstring, and I'm guessing some combination thereof is where the name of this thing called flint came from. It's quite new. It's not super popular yet, but it works really, really well. So the idea is I've got some code. Maybe it's old code. Maybe I just haven't bothered to write everything using fstring, and I would like to modernize it in its string processing. So this tool, what you can do is you can point it at a single Python file, or you can just point it at the directory, like, a top-level directory. It'll just go to every, and traverse the whole directory tree and find all the Python files and then rewrite all the string operations to be f-strings.
 
00:25:04 MONTANI: Nice.
 
00:25:05 KENNEDY: And it does a pretty good job. It'll do the percent, you know, Python 2 style format, as well as the dot format style, and it'll just replace all those with f-strings. There's a couple things it doesn't do. If it's multi-line, really long stuff, it won't replace those, and when I first tried it, it actually was making a mistake on digit grouping format. So if you have curly braces colon comma because you want thousands, millions grouping, and so on, that just went insane and broke my code. But I submitted a bug over to the guy who's working on it, fixed it, I believe the new release is already out, so that shouldn't be there. But just run it on something you have under source control and just look at the lines that have changed before you do the commit or run your tests, something like that.
 
00:25:53 MONTANI: Yeah, wow, such a good open source user. You know, found a bug, reported it, probably with this description, fixed.
 
00:26:01 KENNEDY: I'm like, I ran this on all of Talk Python Training and all of Python Bytes, and some of it broke, so what I found out is it's exactly this. If it had digit grouping, it broke, and so then they fixed it. But it was no big deal. I think I converted about 500 to 700 string formats over to f-strings, and it just, it's cleaner, shorter, nicer. The thing with f-strings is I always, I don't know if you all use it. I'll ask you in a sec. But I'm always like, okay, I'm going to write this string out, say quote, type type type, oh, I want to put something in here, curly brace. Oh, I wish I would've done an f. Back back back back back back back, put the f, and then back back back back back and then type the thing. I'm like, well, that was more work than just dot format, 'cause the ID you autocomplete, it's like .f and then boom, like, so a lot of times I end up using the format anyway, but I still prefer to have the f-strings and read them. So this way I can write it however I want and just hit it with this before I do a check-in.
 
00:26:52 OKKEN: I think that we should ask VSCode and PyTerm to detect when we put a curly brace in a string and automatically add the f.
 
00:27:00 KENNEDY: Yes, just like a hotkey.
 
00:27:01 MONTANI: I was going to say the exact same thing, so it's not...
 
00:27:05 KENNEDY: That's awesome. You all are in the same boat. So yeah, this is really cool. I definitely think my code is nicer. I originally created, like, when I created the Python Bytes website and I created Talk Python Training, this was when the latest version of Python on Ubuntu was 3.5, so we didn't have f-strings. And I actually took the server down once on accident because I used an fstring in a little utility file that was in the same directory and the scanning path looking for the routes found that, couldn't parse it, and the website couldn't start. I'm like, why is it, what have I done? I didn't even change it. So anyway, I'm really happy now that I could just take all that code that I used to leave in format style and just flint space, you know, and just run on this directory, boom, it's done. So yeah, it's really nice.
 
00:27:47 MONTANI: I can't wait to just intuitively just use f-strings and all that stuff. It's still kind of, I don't know, just ingrained in my brain. Like, even, I don't know, go to conferences, and I see people use all the new syntax, and I'm like, yeah, oh, that's so nice, but it's just like, you know, in my day-to-day work, you know. Even if we don't support 2.7, we support 3.5, and there are just a lot of these...
 
00:28:07 KENNEDY: Yeah, exactly. You know, there is this thing called, I can't remember what it was called, Brian. We covered it. Where it lets you add fstring support to Python 2. It may also work for Python 3.5. You can definitely retroactively add f-strings to the format in some weird way.
 
00:28:23 MONTANI: But then you need another runtime dependency, which...
 
00:28:26 KENNEDY: Yeah, it's not worth it. It does some weird thing...
 
00:28:28 MONTANI: That's how it works, yeah. That's a bit unattractive.
 
00:28:31 KENNEDY: It rewrites the file loader with a certain weird encode. It's like, it's pretty sketchy.
 
00:28:36 MONTANI: Yeah, okay, no, I wouldn't want to ship that in our libraries.
 
00:28:40 KENNEDY: Oh, come on, why not?
 
00:28:41 OKKEN: Just run your tests, make sure they pass, and it's good.
 
00:28:43 MONTANI: Yeah, good.
 
00:28:44 KENNEDY: But it's cool that something like this is out so that when you decide, like, we're no longer supporting 3.5, you just hit it with this and, like, you know, a quick scan through the files and it's fstringified.
 
00:28:53 MONTANI: That's going to be so nice. I can't wait. I mean, all that and all the type hints.
 
00:28:58 KENNEDY: Yes.
 
00:28:58 MONTANI: You know, once we can drop all of the older versions, oh, it can be oh so nice. So yeah, I'm really, I wouldn't even mind rewriting all the code. I think with our team, we're just going to sit down and be, yeah, let's do this, and...
 
00:29:10 KENNEDY: We're going to do it. Yeah, here it comes.
 
00:29:11 MONTANI: Yeah, it's going to be so satisfying. Like, years later.
 
00:29:14 KENNEDY: Yeah, well, it's the curse of success, right? You have so many people using your libraries that you've just got to keep it for a little bit backwards.
 
00:29:20 MONTANI: Yeah, sure. Some people are still stuck on legacy code. Some people look down on companies that are still on Python 2, but it's like, you know, it's not like many of them really enjoy using all this legacy software and legacy stuff. They're just, it just exists, and we might as well keep supporting it if we can.
 
00:29:40 KENNEDY: Yeah, what's the Python 2 story for you all? You're still supporting it for now?
 
00:29:44 MONTANI: Yeah, and I think we will for a while.
 
00:29:45 KENNEDY: After January?
 
00:29:46 MONTANI: Yeah, we probably will. There will just naturally be a point where we cannot upgrade any of our dependencies. I don't know, numpy, for example. Okay, if we ever, you know, there is a good reason why we want to use a newer version of that, we just can't.
 
00:30:00 KENNEDY: Right.
 
00:30:00 MONTANI: And if everyone else drops it, we just have to be like, okay, that's it, we can't. And it's also not like the old versions are going away. If we make sure we don't have any major bugs, you can still use an old version of Spacy, and we're not going to take that away from you.
 
00:30:14 KENNEDY: Right, just pin the version and you'll be good. Yeah, very cool, very cool. All right, well, that's it for all of our main items. Brian, you want to, I know we got a few little extra things to just throw in here at the end. You want to kick it off?
 
00:30:23 OKKEN: Yeah, so we had an email from Andre Jaenisch. I think that's how you say his name. Saying that we were, in one of our episodes, we talked about regular expressions taking down... Now I even forgot. Took down something.
 
00:30:35 KENNEDY: It was something major, yeah. I can't remember, but some major cloud provider went down because of it, yeah.
 
00:30:40 OKKEN: And how that could happen, so there's an interesting video talking about regular expression denial of service attacks and how it happens. It was just a interesting video. We'll have a link to it in the show notes if anybody wants to watch.
 
00:30:52 KENNEDY: Okay, yeah, yeah, that's super cool. So I got a couple I want to throw out there. One is if you're doing any work where you're working with microservices or you want to have some kind of application that's talking to some API endpoint and you want to debug it, there's a new thing called httptoolkit, and it has special Python support. So this is a proxy you can run on your computer and say start recording, and it'll start recording all the requests that you're making. So it integrates with urllib.request, urllib2, requests, pip, Python 2 and 3, boto, all those things, and specifically catches traffic from those, and it does interesting stuff by changing the Python path and environment variables. And then all of these libraries that I talked about apparently respect certain proxy settings and things you can set, so it just auto, you don't have to change your app at all. You just start a terminal with httptoolkit and then run your code, and it can record it.
 
00:31:52 OKKEN: That's cool.
 
00:31:53 KENNEDY: Yeah, so if you're like, why is this crashing? You know, I run my request thing and then I get some kind of crash, and how am I supposed, you know, you don't have the developer tools in your web browser to look at the headers and whatnot, so you can do it with this. It's pretty cool. It's free, but there's also a paid version, just heads up. Also, there's a nice little link. Last time, the time before, Brian, we were talking about Magic, Python Magic, and you're like, well, that's a pretty strong name, to be magic, and all it does is detect file types, right? Remember that thing? So this, David Martinez sent over and said, well, the reason it's called Magic is there's basically these magic number signatures that appear at the beginning of files, and that teaches you about the syntax. So, for example, if you had a SQLite file, it would start with 53514c69, et cetera. If you see those numbers up the front, that means SQLite, right?
 
00:32:47 MONTANI: So wait, do you actually know this by heart, or did you write this down?
 
00:32:51 KENNEDY: No, no. Oh, of course, yeah, I know that one, sure. No, I pulled it up. Let's see, really quickly, Python 3.74 is out. So I brew and upgraded my Python 3.7, which is how I did it on my machine, and it's already on homebrew, as well, so that was like, I don't know, six, seven hours delay there. It's really nice to see that come out real quick.
 
00:33:12 MONTANI: Or if you have pyenv, you can do pyenv, I don't even know the command, but like, install something, and...
 
00:33:18 KENNEDY: Right away happened, huh? That's awesome, yeah. And then the last one, I want to point out this thing called Flying, I'll just call it Flying Fractals. This person put together this project using pywonderland, and it automates some other libraries that are based on C. So they made some really cool videos of flying through three-dimensional animated Mandelbrot sets and other kind of stuff. And I just, when I was just watching, I thought just, wow, this is super cool computational stuff over here. I've done a bunch of work in complex dynamics and trying to visualize that and this kind of blew me away, so if you care at all about that stuff, I think you'll just enjoy a minute of that video.
 
00:33:59 MONTANI: Yeah, yeah. So yeah, actually, you might've actually noticed that my voice still isn't 100%, and it's a bit rough, and that's because last weekend, we had our very, very first conference here in Berlin called Spacy IRL. Like, you know, Spacy In Real Life. So our community came together, and I'm still absolutely blown away. There was, you know, the vibe was amazing. We had 200 people there in a lovely old theater, 12 really amazing talks by people from research, industry, community. So it was really a lot of fun, and all talks were recorded, and we're currently uploading them to our YouTube channel, so probably by the time this airs, they might've already been released and, yeah, it'd be a bunch of, yeah, if you're interested in Natural Language Processing, Spacy, those, the talks are really, really great, and yeah, hope you enjoy watching them.
 
00:34:46 KENNEDY: Ines, also, I'm so glad you're putting them on YouTube, and wow, congratulations. You must be just blown away at how awesome it is to put on a conference about your own stuff, right? And so many people came, and the energy and you could tell your voice was gone. It's great.
 
00:34:59 MONTANI: I know, that was like, yeah, wow. And it was also, it's actually quite refreshing to organize your own conference. We were like, okay, let's do all the things that we think a conference should do and try them out, and it actually worked quite well. Only one track, for example. Stuff like that. No questions from the audience. Much more social time. Some really healthy food. Stuff like that. So it was great. My voice suffered a bit but, you know, we're giving a lot back to the community, as in the videos, photos, stuff, so yeah.
 
00:35:28 KENNEDY: Yeah, sounds great. Awesome. Congratulations.
 
00:35:30 MONTANI: A couple of episodes ago, Brian actually talked about FastAPI, not to be confused with fast.ai, which I talked about earlier. So yeah, it's a great, very modern, cool Python library for REST APIs, and we're like, yeah, we've been big fans. We've started switching all our APIs over. The exciting news here is that their co-developer, Sebastian Ramirez, is actually going to join our team here in Berlin. This means a lot of cool development for us, but also, we obviously, since we love the FastAPI project, we'll keep supporting that, and we'll definitely give him enough time to keep working on it.
 
00:36:03 OKKEN: That's great news.
 
00:36:04 MONTANI: We found him through the project. We saw, oh, he's doing some consulting work. We're like, hey, we'd love to work with him, and one thing came to another, and now, yeah, he'll be part of our Explosion team, which is still growing, by the way, so we've been very lucky that we could, we were able to work with more people and expand our team.
 
00:36:19 KENNEDY: Yeah, that's so cool that, yeah, that your business is growing. And I guess it's worth pointing out that, back on Talk Python To Me, we talked about Explosion AI. I interviewed you about building a software business. So back in episode 202. So this is just more evidence that that's all good advice. Yeah, super cool. Well, great, great news. I guess it's probably time for a joke here or two. A pyjoke, if you will, maybe. So I think this, I'll do the first one. This one I think came from pyjokes. We'll see. We're starting to run that well dry, so people, send in your jokes, please. But a programmer walks into the bar and orders 1.38 root beers. The bartender informs her that it's a root beer float. She says, "No, make it a double." All right, pretty bad type system. Maybe it doesn't work so well in Python. Like, we don't care so much about types. But, you know, still. So sorry.
 
00:37:11 OKKEN: I like it.
 
00:37:12 KENNEDY: All right, we have one more up here. Who put this one in, Brian?
 
00:37:14 OKKEN: Yeah, so just last night, I was researching for this podcast, writing notes for the other podcast, and working on an open source project, and I came up with this. What do you call a developer without a side project?
 
00:37:27 KENNEDY: What's that?
 
00:37:27 OKKEN: Well-rested.
 
00:37:28 KENNEDY: Yeah, that's great. Totally true.
 
00:37:30 MONTANI: It's almost a bit sad in that sense.
 
00:37:35 KENNEDY: Yeah, Brian, that's just .
 
00:37:36 MONTANI: I know, it's too real. I personally actually was complaining.
 
00:37:41 KENNEDY: That's right.
 
00:37:41 MONTANI: But yeah, there are some comments we could make here about the culture and what's expected of developers these days and how that's maybe not ideal. You know, sleeping enough, stuff like that.
 
00:37:51 OKKEN: Oh, definitely, people should be, and I was, it's mostly a self-reflection.
 
00:37:56 MONTANI: No, I mean, it is a good joke. I'm not, I wasn't criticizing your joke. It's a totally fine joke. I'm just saying it's also, it's very real. You know how jokes can be too real, and then you're like, oh.
 
00:38:06 KENNEDY: Yeah, I'm really uncomfortable now. Exactly. All right, well, I think that's a good place to leave it. Brian, thank you, as always.
 
00:38:14 OKKEN: Thank you.
 
00:38:15 KENNEDY: Ines, it was great to have you here. Thanks for coming.
 
00:38:17 MONTANI: Yeah, thanks. Bye.
 
00:38:18 OKKEN: Bye.
 
00:38:18 KENNEDY: Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes. That's Python Bytes as in B-Y-T-E-S. And get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.
 
 <|endoftext|>
00:00:00 KENNEDY: Hello and welcome to Python Bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 88, recorded July 26, 2018. I'm Michael Kennedy.
 
00:00:11 OKKEN: And I'm Brian Okken.
 
00:00:11 KENNEDY: Brian, how you doing?
 
00:00:12 OKKEN: I'm doing great.
 
00:00:13 KENNEDY: Yeah, it's a ton of good stuff that I think you found this week, and I'm looking forward to share what I got as well, it's never a boring week in the Python world, is it?
 
00:00:20 OKKEN: No, it isn't.
 
00:00:21 KENNEDY: No, well it's definitely not boring if your app has problems, you need to track them down. So if you're in that space, you might want to check out Datadog over at pythonbytes.fm/datadog. I'll tell you more about them later, right now I want to know about documenting code.
 
00:00:38 OKKEN: We do hear a lot about, I think we hear a lot about making sure that your code.documentation is good, there's the read the docs and make the docs effort, or I guess it's write the docs. And there's quite a bit of that, and I think a lot of that is focused on the end user/user documentation, and that's definitely important. But there was an article on Real Python called Documenting Python Code: A Complete Guide. It's an article that describes really why you should comment and document your code. Talks about the differences between comments and docstrings and different separate documentation. But one of the things that I want to zoom in on is the code comments, and I don't think very many people get really how if they think about their comments that they put in their code, how effective they can be. So I want to kind of zoom in on some of the things that they cover in this article on code comments. So code comments are those things that start with a pound sign or hash and they're not really part of your runtime, you can't get a hold of them at run time, they're intended for you and other maintainers and other developers of the code. And some of the things that I've used them for, but I never really saw anybody point out before is before you even start your code, you can use comments to plan what you're going to write, and you can also, once you've written your code, review to make sure the code really matches what you planned to do, and then sometimes those kind of comments are best to be, if your code is clear enough, go ahead and delete those when you're done.
 
00:02:11 KENNEDY: I like that. I end up doing that a lot myself. I'm like, "OK, I'm not entirely sure how to do this, so I'll sketch this out in comments, like, Here's the five steps I think I got to do." and then I'll just take 'em one at a time, but I always delete those comments, almost always.
 
00:02:23 OKKEN: Yeah, the deleting part is important because if you don't do that the common pitfall of code comment that says, "Retrieve web page." and then the very next line is one line of code that's a request or something, and it's obvious, so if it's not obvious, using those to explain intent, don't explain really how it's done, but explain why you're doing it, and then sometimes you'll have a complicated math algorithm or something that's fairly terse if you need to explain that better, but we're trying to get as few comments as possible, minimizing those because you want to make your code pretty clear to begin with, but one of the other things that I think I've just started using quite a bit is the TODO feature, so using code comments to, the article mentions TODO bug and fix me type sections. Hopefully, you're not putting too many bugs and fix mes in your code, but TODOs are, I think those are great for, because when we're in the middle of coding, it's often easy to get caught up in, "Well, I could make it more powerful if I added these other features." Just go ahead and write that as a comment, you don't really need to fall into the trap of making your code do to much at once. And then the article also has other tips on best practices for how to format your code comments and stuff. Of course, it goes on and talks about doc strings and how to utilize those, also using type hints for commenting and documentation, and then goes on to do like the larger, it talks about the larger types of project documentation, and like using Sphinx and MakeDocs and stuff.
 
00:03:55 KENNEDY: Yeah, that's a really great article, and it was really in depth. I always learn something from the Real Python article. It's cool. You know, one thing about the TODO stuff that I use a lot and I really like is the editor integration, so I can't speak to the other ones I don't really know how exactly they handle but in PyCharm, if you have # TODO: something, there's a special pane where you can say, "Show me all the to dos in this project." and even when you try to commit, like you know, I want to commit this stuff to GitHub, it'll say, "Warning, there's 3 TODOs in here. Are you sure you want to commit to GitHub with these 3 TODOs." I think it actually even remembers those 3, but if you add another one, it'll say, "Oh, there's a new to do you haven't approved to commit." things like that, so it's pretty sweet.
 
00:04:39 OKKEN: Yeah, actually I stumbled across that feature without knowing it was there, and I'm like, "Oh, man, this is great!" so I like it.
 
00:04:46 KENNEDY: Yeah, and it's cool, even colors the comment different if it's a TODO comment. So people should definitely do that. So we talked awhile ago about security vulnerabilities and other types of alerts, and we even covered how GitHub has this dependency thing, where you can see the dependencies, but it didn't cover Python, which was unfortunate, right?
 
00:05:07 OKKEN: Right.
 
00:05:08 KENNEDY: Well, big news. It now supports Python.
 
00:05:10 OKKEN: That was pretty fast!
 
00:05:11 KENNEDY: It was.
 
00:05:11 OKKEN: To get it on there pretty quick.
 
00:05:13 KENNEDY: They do, so it's pretty sweet! If you go to any GitHub repository, and you go to Insights, and then there's a bunch of options on the left, and you pick dependency graph, it'll actually show you all of the files it's either found in a pipfile.lock or in requirements.txt, anywhere in the project.
 
00:05:32 OKKEN: Yeah, that's good!
 
00:05:33 KENNEDY: And it'll list them out, and it'll say, "It's pinned to this version, but warning, this version actually has a security vulnerability, and it's fixed by this other release of it." so if I'm using, say, Pyramid, and there happened to have been a security vulnerability in that, it would let me know, and it would actually highlight that, and give me an alert.
 
00:05:50 OKKEN: OK, neat!
 
00:05:51 KENNEDY: Yeah, it's really cool, so it had previously only worked with Ruby and Java Script, but now they just announced it. They said for the Ruby and Java Script people, they've identified millions of vulnerabilities and prompted many patches, which is pretty cool.
 
00:06:03 OKKEN: OK, I'm just checking my cards project to make sure it's clean, looks like it's good.
 
00:06:08 KENNEDY: Yeah, and it's interesting, you can actually, it's like a tree structure that you get, too, so you can go there, and it'll say, suppose you're using requests, for example, right? Then there's a little chevron expando thing by requests, and it'll open up and say, Well, this depends on six and whatever it depends upon, I can't remember the exact dependency of request, but you can actually expand it out and see the transitive closure or like what your dependency's dependency's dependency's depend upon. Like if there's a vulnerability deep, deep down that you didn't directly install, but effectively you installed, so it's really nice.
 
00:06:41 OKKEN: The dependency graph is cool, it even has a, it'll even follow a requirements_dev.
 
00:06:48 KENNEDY: Yeah, it'll get all of them, yeah.
 
00:06:49 OKKEN: And then you can also look at dependents. So people depending on your project, interesting.
 
00:06:54 KENNEDY: Right, right, right, so if you've got a public package, you can see what depends upon it. I wonder if you go to requests if that breaks the UI.
 
00:07:05 OKKEN: Yeah, I'll have to leave that exercise to the reader, cause I don't want my web browser to fail.
 
00:07:10 KENNEDY: Yeah, exactly, exactly. Anyway, so we've seen other services like pyup.io, which I use and still recommend, but this is a nice way to just walk up to a public GitHub repository and say, "Well, what are its dependencies? Is it up to date?" things like that without actually using it or registering it at school.
 
00:07:28 OKKEN: Right, so pyup you would have to have it be on your own, and you could do that, but this allows you to look at that for any project on GitHub.
 
00:07:36 KENNEDY: Right, exactly, does maybe this project have a security vulnerability in its dependency or not? If it doesn't, then I'm going to use it, if it does, maybe I'll wait or do a PR or something. Nice.
 
00:07:47 OKKEN: Well, speaking of dependencies, I depend on pip a lot and virtual environments.
 
00:07:52 KENNEDY: Yes, all the time! I've tried to super optimize what I do in the command line around pip in virtual environments, so much so that I have a single alias that will create a virtual environment, make sure pip and setuptools up to date, and then activate it all in a couple characters. I love it!
 
00:08:08 OKKEN: Yeah, nice! So wait, the virtual environments are so useful, I was happy to see this article pop up. It's called How Virtual Environment Libraries Work in Python, and I'm just going to quote it. It says, "Have you ever wondered what happens when you activate a virtual environment and how it works internally?" There's a quick overview of the internals behind popular virtual environments, for example, VirtualEnv, Wrapper, Conda and PipEnv, and yeah, it's a really fairly quick look at how there's really not much, I didn't know this. So one of the things it points out is all these sort of work on a little bit of a hack, and these hacks are based on the fact that when the Python interpreter starts, when interpreter starts, it searches, it's trying to find the site specific directory to find all the modules it can import and all the packages, and so the search starts with a parent directory of the Python executable location and then continues backtracking up the path into parent directories until it reaches all the way to the root, but it's also looking for a lib directory with os.py in it, apparently it's looking for that magic dir module, and then, if it finds that, that's the local site packages directory, so the hack is to let it copy the executable somewhere, and then create a directory with that symbolically linked, and then you can have other stuff symbolically linked inside, too. In earlier versions it wouldn't symbolically link everything in the site packages if you had everything, or a whole bunch of stuff, at least, I'm not sure if it's everything. In Python 3.3, it came up with a couple tricks with a pyvenv.config file that allows you to not have to copy the executable completely, you can copy, you can have a symbolic link to the executable, and all of this is how the sausage is made, but I found it fairly interesting to figure out how all these virtual environment things work.
 
00:10:06 KENNEDY: Yeah, I think this is really helpful, because certainly being effective with Python is being effective managing your dependencies and stuff, and the way you do that is virtual environments, so this is a really good look at how that works.
 
00:10:19 OKKEN: Yeah, to me it did seem like after about 3.3 that things sort of went faster, and now it makes sense that it's faster, because they're not copying the executable into a new location, so it's a clean look, and I'm with you. I tried a whole bunch of off the shelf helper things, and it's just my own handful of commands that I've come up with that I've just stuck 'em in actually in my Bash config file as little functions, cause they don't do much. I just needed to create a virtual environment and then activate it, and then, like you said, update pip, and what else do you update?
 
00:10:55 KENNEDY: Setuptools.
 
00:10:56 OKKEN: OK.
 
00:10:56 KENNEDY: Yeah, it's interesting. There's a lot of things that try to help and manage this stuff, and they're all pretty good, but in reality, like you said, I just want to run these three commands and just get rolling and just keep it simple, and I could just create that as an alias and like a Bash RC or ZSH RC and separate the three commands with a double ampersand and then, boom, it's one command, you're good.
 
00:11:17 OKKEN: And for people like us that are doing a lot of trying out a lot of new things, I create a lot of virtual environments. I do agree with Kenneth Reeds and the others that are promoting PipEnv that for because of all of the hashes and security reasons, for full application development, I think using PipEnv is the right thing and keeps everybody using the project on the same page, but there's plenty of other uses of virtual environment that OrV and V that I use.
 
00:11:47 KENNEDY: Yeah, pretty interesting. One final little tidbit of news that I don't think justifies its own place, but Pip, not too long ago went from version nine to version 10, right?
 
00:11:57 OKKEN: Yeah, yeah, I'm glad you brought that up!
 
00:11:59 KENNEDY: That's big, so now in the last week or two, I haven't really been paying attention, but it went from 10 to 18.
 
00:12:05 OKKEN: Yeah, it like completely skipped.
 
00:12:08 KENNEDY: A lot of features.
 
00:12:10 OKKEN: But it switched from whatever that normal version
 
00:12:13 KENNEDY: Semantic versioning?
 
00:12:13 OKKEN: semantic versioning to date based versioning.
 
00:12:16 KENNEDY: Yes, so I don't understand how the date works, maybe it's the year, but surely there's more than one release in a year, who knows? Anyway, it's pretty cool, maybe it is 2018, but yeah, so there's a brand new version of Pip and new versioning scheme there.
 
00:12:28 OKKEN: Yeah, cool!
 
00:12:28 KENNEDY: Nice, all right, before we get to the next one, let me tell you about Datadog, our sponsor. So if you have infrastructure and you want to monitor it, you want to trace a request, say, across your web tier to some microservice series of services down at the database, and put the logs all together that Datadog provides end to end visibility for the health and performance of your Python app core metrics, distributor request traces and logs, all that in one place. They even have a 14 day free trial, and if you check them out at pythonbytes.fm/datadog, set up a trial, you get a sweet, cute Datadog T-shirt, so that makes it worth it right there. So, anyway, check them out, it really helps support the show. Right, have we talked about GUIs?
 
00:13:11 OKKEN: Yes, I think so, maybe.
 
00:13:14 KENNEDY: Maybe, so one of the really nice things about having Tkinter built in to Python is it's really easy, it just comes along, so you don't have to do stuff. Previously, to use something like Qt or I think the same may be true for wxPython, but for Qt, it was a serious pain to get that installed so that you could use it. It's like, well, you run this funky package on Ubuntu, you download this installer for Mac, and then all of a sudden, you're like, here's my simple Python file that's going to be your app becomes like this weird extra dependency installing problem, right? So the Qt company, the people that make Qt the framework and then they've taken over PySide2, the wrapper, and they've rebranded it for Qt for Python, well, they've made that much, much easier. So now, if I have an application, and it has a requirements file or a pipfile.lock or whatever pip file that says I depend upon PySide2, which is the working package name for Qt for Python right now. If you depend upon that, all you have to do is pip requirements and you have it cause it ships as a wheel right off Python. If you want to use Qt instead of having really painful dependencies that people have to set up and a little step, "Do you want to run our app? Well, click here to go to this page to set up QT." now you just pip install your requirements, but when you have Qt, it's nice.
 
00:14:41 OKKEN: That is nice, that's a huge thing, actually.
 
00:14:44 KENNEDY: Basically, I'm not using Qt if what is required is this separate, go find and install Qt so you can run my app. Like that means there's no way that that's reasonable for distributing that to people, but if all you got to do is package the dependencies, then presumably you could package it up with PyInstaller, at this point, maybe, so really nice.
 
00:15:05 OKKEN: Yeah, and I want to shout out to all of the people that every time we cover this contact me and tell me that I'm mispronouncing Cute as Qt, that this time it was Michael that pronounced it Qt instead of Cute, so...
 
00:15:20 KENNEDY: I think I had it right before, didn't I? Oh, well. Maybe you've infected me, no, it's Cute for Python, yeah, it's cool.
 
00:15:26 OKKEN: Yeah, I don't know, I think that's official!
 
00:15:28 KENNEDY: Yeah, yeah, I think so, too. And also, for all the people that have said, "Yes, you've covered 17 GUI frameworks, but have you heard of these other 2?" So we're definitely learning a lot about the different frameworks out there, so this is one more advance there.
 
00:15:44 OKKEN: I don't think people should stop because I think this is great, but I don't think it's completely solved, so people, keep trying to solve it with new libraries, go for it.
 
00:15:53 KENNEDY: Absolutely, absolutely! All right, what's this next one you've got about exceptions here, right?
 
00:15:56 OKKEN: OK, well, so exceptions, I think, and I misspelled it, but exceptions are part of Python, and even if they're kind of, I think they're handled sort of later when you're learning how to program in Python, you sort of deal with telling people how to use exceptions later, but you're going to have to deal with them because whether or not you write your own exceptions or utilize raise and try except yourself, other libraries that you are utilizing are using it! So if you don't want your program to crash, you got to figure out how to do all this, so this is, not only is it a tutorial on how to use exceptions, it's learning how to not handle exceptions because sometimes the right thing to do is not to catch an exception. The right thing to do is to pass it, either ignore it completely because it'll pass up to a higher level, and that's part of one of the things that's in this article called Learning Not to Handle Exceptions, talks about not only how to use them, but how to not use them correctly. So first it does tell you how to use them correctly, like the try and except and raise, so try and except are obvious, so you try a bit of code and then you can use an except clause to catch something. Right off the bat they tell you, which is, I think, correct is usually you don't want to except everything, you want to except a specific exception that you know how to deal with, and then everything that you don't know how to deal with, just let it pass you up the stack, but sometimes, even if you catch it, you want to keep raising it, so you can, it does talk about reraising an exception with just raise without any key words out or any exception after it will just raise the current exception.
 
00:17:39 KENNEDY: Yeah, I really like that is like you have a try, do your thing, except, and then maybe you want to do some kind of compensating action, like roll back a transaction or delete a temporary file, but then you don't really want to handle it. You just needed to say, "If there's a problem, I got to fix this." and then let somebody else actually handle it, so then you just say "raise," or you could even use the raise one exception from another exception and chain them. It's real nice.
 
00:18:03 OKKEN: Yeah, and then there's other things like finally and else, so finally can allow you to run some code, whether or not an exception runs and then else lets you run some code only if there are no exceptions, and you can use both of them at the same time. With the same exception, those can be utilized. The article goes on and covers dealing with tracebacks, custom exceptions and then some best practices and then making your exceptions more readable by adding arguments and printing things out basically and stuff, so those are good.
 
00:18:35 KENNEDY: Yeah, it's really nice, great little article. Definitely a nice find there. So I thought I put here at the end of our episode today something that takes a step back and looks at the overall community, the ecosystem and a bit of an interesting, I don't know, high level view of Python. So, last week we did our whole special episode on Guido von Rossum stepping down, right? With Brent Cannon, Carol Willing and sort of cover that whole news, but another interesting thing that happened around that is, you know, sort of speaks to Python's popularity is you know the magazine The Economist?
 
00:19:15 OKKEN: Yeah, definitely!
 
00:19:18 KENNEDY: He did a feature in The Economist on Python and Guido von Rossum.
 
00:19:21 OKKEN: That's pretty, pretty mainstream and huge!
 
00:19:24 KENNEDY: That's pretty interesting, right? So there's an article in The Economist called Python Has Brought Computer Programming to a Vast New Audience, which is pretty awesome, and it covers the meteoric growth of Python, how it's becoming so much more popular than many things, how, why and where people are learning Python, so I thought that was all quite interesting, and then interspersed in there is sort of the history of Python with quotes from Guido himself, so it's pretty cool!
 
00:19:50 OKKEN: Yeah, this is a nice publicity here.
 
00:19:53 KENNEDY: Yeah, not too shabby. And it's not a super long read, but it's a pretty nice treatment. It talks about some interesting things like some really powerful things that people are doing with Python, some interesting ways that people are learning it, but it also says, "There are some dangers to Python growing so fast. It's a lot of people coming in to the industry, learning just enough, grabbing something like TensorFlow, you know, some AI framework, and sort of understanding it, and then drawing conclusions from what the machine learning algorithms they sort of understand tell them, you know, and run off with half baked ideas." I thought that was an interesting comment.
 
00:20:29 OKKEN: Yeah, well, I mean, yeah, that is an interesting comment, but half understanding what you're talking about and drawing conclusions, we see that every day with, like, statistics in newspapers and stuff, also.
 
00:20:41 KENNEDY: Yeah, absolutely, I mean, even in medicine and medical research that stuff is rampant, but it's lack of understanding of statistics is a problem across the board.
 
00:20:50 OKKEN: I haven't read the article yet, I'm excited to read it, but the interesting thing is, people learning to code isn't necessarily because you're going to end up being a professional programmer. It's often one of the things that helps it grow is a lot of people using it as part of their other job, like a biologist or somebody else that is just using it to help out with some section of their job or kids, you know, tinkerers, just trying to play with Raspberry Pi or something, so...
 
00:21:20 KENNEDY: Yeah, that's actually a really good point. They actually touch on that a little bit in the article. They say, "For professionals that have long relied upon trawling through spreadsheets, Python is especially valuable." and they point out that Citigroup, the American bank, has even put together a crash course for Python for its analysts, and the eFinancialCareers, like a website for financial jobs found that there's a 4 time increase in the request for Python skills in the last three years among financial analysts, not programmers.
 
00:21:52 OKKEN: Oh, nice!
 
00:21:53 KENNEDY: Yeah, so there's a lot of interesting little tidbits of stuff coming out in this article.
 
00:21:56 OKKEN: Yeah, cool!
 
00:21:57 KENNEDY: Yeah, definitely worth checking out. All right, well, I think that's it. That's our 6 items for the week. Brian, you got anything else you want to share with everyone while you're here?
 
00:22:04 OKKEN: No, I've been having my head in antiques, so if anybody's a listener in the Portland area, hit me up and I'll tell you where I'm going to be selling some antiques this Sunday, so completely non-Python job.
 
00:22:17 KENNEDY: It's kind of nice every now and then to just take a step away, put the keyboard down, and do something really different, so you can come back more refreshed, right?
 
00:22:25 OKKEN: Yeah, you got any news?
 
00:22:26 KENNEDY: No, not this week, although I'm working on something big that I will announce next week, so I'm close to having news, but I'm not quite there yet.
 
00:22:33 OKKEN: All right, nice!
 
00:22:34 KENNEDY: I'll bring you a little extra news next week. All right, well, Brian, thanks for doing this and sharing with everyone, and thank everyone for listening!
 
00:22:40 OKKEN: Thanks, bye!
 
00:22:41 KENNEDY: Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes, that's Python Bytes as in b-y-t-e-s and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.
 
 <|endoftext|>
00:00:00 KENNEDY: Hello, and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds, this is episode 77, recorded May 12th, 2018, I'm Michael Kennedy.
 
00:00:10 OKKEN: I'm Brian Okken.
 
00:00:11 KENNEDY: And we have a very special episode, and a live audience. That's right, we're recording live from PyCon, thank you everyone for being here, and everyone who couldn't make it, you missed a great party. This episode's brought to you by Datadog, they actually, I think they have, do they have a booth out there? Yeah, I think they have a booth out there, I've been stuck at my booth the whole time, which is wonderful, but I don't know what's out there. So that's amazing, we'll tell you more about them later, right now Brian, what do you got for us?
 
00:00:37 OKKEN: I have a fun article that actually comes from the Java world, but it's, "Why senior devs write dumb code." And it starts out with a quote from Kent Beck, which I love, is "Any fool can write code that a computer can understand, good programmers write code that humans can understand." Just some tips to make sure that you try to keep clean, straightforward, obvious code, and follow principles like YAGNI, Single Responsibility, DRY, et cetera. I think this is important in the Python world because there are some cool language features that we have that are fun to play with. I definitely want people to go ahead and try all the cool new language features, but make sure that your code still is readable, even by people that aren't as Pythonic savvy as you are.
 
00:01:35 KENNEDY: Are you telling me that like, the shortest code is not the most readable, always?
 
00:01:39 OKKEN: Yes. That's hard for me to do also, because I really like one liners that pack in like, a whole bunch of stuff.
 
00:01:47 KENNEDY: Yeah, I do too, so does that cover the SOLID principles, like Single Responsibility, Open/Closed principle, or is it just more general, like write good code?
 
00:01:56 OKKEN: Well, write readable code.
 
00:01:59 KENNEDY: Readable code, right on.
 
00:02:00 OKKEN: I don't necessarily adhere to SOLID being readable.
 
00:02:04 KENNEDY: You know, that's a really good point, so like SOLID principles, I don't know if you all know, it's Single Responsibility principle, Open/Closed principle, Liskov substitution principle, et cetera, and a lot of times, that is like super design pattern heavy, and you're like, there's so much abstraction here, I know this looks like it came out of a textbook, but it's bad, right? Yeah, yeah, so actually maybe, maybe not so much?
 
00:02:25 OKKEN: Well, and I've seen it in code reviews too, we've had people do maybe a C-ism, in Python, and sometimes that's bad, but also, sometimes if it's a little bit of code, and you can look at it, it's obvious what it's doing, maybe it doesn't need to change to be more Pythonic. It's probably fine.
 
00:02:44 KENNEDY: Yeah, that's true. Brian, have you been having a hard time finding your way around here? Do you get lost? You guys having a bit of a hard time, I feel like I've taken a walk where it's like, okay, we've gone like a quarter mile, and there was a door to that place on the other side of the exhibit hall, why didn't I go that way, right? Well, the next thing, if they had used it, I'm sure they haven't, if they'd used it, there's this thing called GeoAlchemy 2. You've heard of SQLAlchemy right? Tthere's this thing you can layer upon SQLAlchemy called GeoAlchemy 2, and what it does, is it provides geospatial queries and operations on top of, say Postgres. Right, so you can ask it questions like, "How far is it from here to there?" Like, am I within this room, like, you could easily define all these as polygons, insert them as SQLAlchemy objects, and ask questions like, "Who is in such and such room?" If we all had, say RFID.
 
00:03:41 OKKEN: And that would be easier to navigate PyCon?
 
00:03:43 KENNEDY: If we could throw some A-star algorithms, to like, say, find the shortest path through all the open doors and stuff, yeah, it'd be easier. Anyone out there do any geospatial queries, things like that? Yeah?
 
00:03:57 OKKEN: Yeah, not queries so much, but we do some geospatial work, and so sometimes, we do that, you know, given an object, find it in yard.
 
00:04:05 KENNEDY: Nice, have you tried GeoAlchemy?
 
00:04:07 OKKEN: No, I haven't, actually I wanted to ask, is that from the same people who brang SQLAlchemy?
 
00:04:11 KENNEDY: I think it's a different group, there's was a thing called GeoAlchemy, and then you could use that, and this is like a re-imagining of the API, so it's like a second edition. So the way it works is, basically, just like SQLAlchemy, you connect to your database, you declare mapping, you declare like the classes, just derived from like, SQLAlchemy base, has a name, an ID, but it can also have columns, like a geometry which is a polygon, and then about that, you can ask questions, like you can go to a, just say, session.query.filter, where this thing contains this point. Or where the area is greater than or less than such and such. And just all sorts of interesting questions. So if you like SQLAlchemy, and you want to ask questions about physical stuff, boom, GeoAlchemy 2.
 
00:04:58 OKKEN: Nice. Well, since we didn't share each other, we have no cool segway between everything.
 
00:05:07 KENNEDY: Not too much, but I got some, I could see what you got here for this one. So we've been on a rant haven't we? A UI rant?
 
00:05:15 OKKEN: Yes, a little bit of UI in the podcast. But one of the things that has come to our attention is Qt is not staying still. What I'm talking about here is, there's another Pyside 2, which is going to be called like,
 
00:05:37 KENNEDY: Qt for Python?
 
00:05:37 OKKEN: Qt for Python. but it's not quite ready yet, but there's actually a lot of Python bindings, that I know of, there's Pyside 2, there PyQt5, there's PyQt4, there's the original Pyside, and there's a couple, and then there's Qt dot Py.
 
00:05:54 KENNEDY: And this is just for Qt, not wxPython, not all the other stuff, right?
 
00:05:58 OKKEN: Yeah, just for Qt. So, two projects, QtPyConvert is a project that converts these interface bindings to an intermediate, which is a shim layer, which is Qt dot Py, which is a minimal, like, build as a minimal Python two and three shim around all of the Qt bindings. And just sort of fun to be able to use one, whatever you've got now, and convert it back and forth.
 
00:06:32 KENNEDY: I think it's a great idea. It's going to be awesome that there are new, better ways to write Python UIs, but there's all this other code that people have written, PyQt4, for example, and this thing will let you sort of, run a converter across it, to adapt from all these different older versions, to like, the new hotness, so it should make it work really well.
 
00:06:52 OKKEN: Yeah, and one of the neat things about this, is it uses a conversion that leaves all your comments in place. It rewrites Python code, but it leaves a bunch of your stuff there.
 
00:07:04 KENNEDY: That's pretty advanced. Yeah, so maybe, but do like a branch or something, before you do that.
 
00:07:08 OKKEN: Yeah, probably.
 
00:07:12 KENNEDY: Alright, anybody got a comment on Python UIs? Alright cool. So I'm really excited for that, I'm excited for Python for Qt, coming, I think that's going to be good, there's a bunch of other stuff, I think, there needs to be more worked on there, as I've said. Alright, so, let me tell all the listeners, and you guys, of our sponsors, so Datadog, who are big supporters of the Python space, they're here at the conference, obviously they've been supporting the show for a long time, so check out Datadog, they're like a monitoring solution, mostly for your distributed applications, so if you got like, microservices, and containers, and all that, you can trace your request from one part to the next to the next, and figure where things are slow, where you're running into errors, all sorts of stuff like that. So get a cool Datadog t-shirt, go to PythonBytes.fm/Datadog, do the tutorial, get a cute dog shirt, it's awesome. Alright, so, Brian we live in a pretty laid back city. Portland, it's pretty chill right?
 
00:08:08 OKKEN: Love it.
 
00:08:09 KENNEDY: Yeah, I love it too man. But even in Portland there is a bit of a sense that people are like, working really hard, and it's almost like a badge of honor, like, aw man, how are you doing, I'm so busy, you wouldn't believe how busy I am, I know you're busy, but I'm like, way more busy. I've got all these projects, and I've got this stuff going on, and that, and there's this great article written that is a reminder that you don't have to be a workaholic to get ahead in tech. So the article is called "You don't have to be a workaholic to win: 13 alternative ways to stand out" And I really really like this, because I feel like there's two things going on that I don't like, one is what I kind of opened with, people like, busy brag, like it's cool to them to be super busy. And so they just tell you how busy they are, and you know, you just one up each other.
 
00:08:52 OKKEN: Yeah, I ran into this guy that says like, yeah I've got two podcasts, I wrote a book.
 
00:09:00 KENNEDY: That's not cool man, that's not cool. And the other one is, like actual tech companies, or other companies that are like, you know what, we're going to put just a fake deadline here, six weeks out and make everybody work overtime, so we can hit it, and they're just like, well what happens if we don't hit it? Well then, my manager will be upset. Like that is not a real deadline, right? Those are not actual deadlines. And so there's just a bunch of great ideas in here. So let me run them by you, see what you think. Oh, by the way, yeah, let me just run through the tips. Hold on. This thing like popped up Anthony. Alright, so here's the tips. The first one is, like, you can be a workaholic, or you can be creative. And if you really try to think differently about solutions, if you're the person that says, yeah we could work all night and we could build this thing this way, or did you know you can pip install a thing? That did this, right, if you just like, think outside of the box, and try to solve a solution, like creativity could be more valued than working hard, yeah? Stubbornness. Stubbornness is not generally considered a good thing, but in programming, like I've had lots of people go, Michael you're so good with computers, you're such a good programmer, how'd you learn this? I tried this, it was hard, it didn't work, I'm just like, well I tried it for three hours, and then it did work, right? Like I tried everything I could think of until it worked, and then just, I wasn't going to quit, and like, that's one of the things you're talking about. You have that experience?
 
00:10:21 OKKEN: So that's a way to work less?
 
00:10:24 KENNEDY: No, that's not a way to work less. But what they're saying is, if you're the person that like, can actually solve the problem, '=because you don't give up on it, rather than just like, ah, we can't do this thing, we got to do something else. That kind of thing, they're all like, pretty interesting little takes. Curiosity. Right, like I'm willing to like, be the person that learns kubernetes, and actually, now we can all go home, cause their deployments don't break, and I don't even have a pager, it's amazing, right, that's cool. Kindness. I really like the kindness one, like if everyone is a jerk, and you're the person that's nice and helps everyone, right, like all of a sudden you become the person in the office or the company, and they're like yeah, go talk to Jeff, man, he'll help you, and he won't insult you at the same time. Planning, planning is good. Improvisation, like sort of the opposite of planning, like, well, things aren't going according to plan, let's fix it, enthusiasm, kind of like kindness. Communication, that's good. Presence, I really like that one.
 
00:11:18 OKKEN: Yes.
 
00:11:19 KENNEDY: Right, like, so many people are like, yeah that's a great idea, mm hmm, yeah I'm going to go work my thing, right, but just like, take the time to be in the moment.
 
00:11:26 OKKEN: That's actually hard.
 
00:11:28 KENNEDY: It's hard, I'm making fun of it but it's hard.
 
00:11:31 OKKEN: Especially in a work environment, you're like, in the middle of something, somebody comes over, if you're going to be interrupted anyway, then really be interrupted and pay attention.
 
00:11:39 KENNEDY: Yeah exactly. Yeah yeah, for sure. I'll keep going, a little bit more collaboration, right, open source, like we're all kind of in that space anyway. Willingness. Honestly I forget what that is about, but I remember it was really good. Patience, also, and then finally, institutional knowledge.
 
00:11:57 OKKEN: Where to lock people up?
 
00:11:58 KENNEDY: Yeah, where the bodies are buried. No, like, "Why do we have that old server there? And can anybody work with it?" Yeah actually, I know where the source code is, and I could fix that for you, right? I don't want to, it's PHP, but I could fix it if I had to. Right, anyway, so do these resonate with you guys? Yeah? Makes me think of, Brian, you had Stephanie, I'm forgetting her last name?
 
00:12:20 OKKEN: Herbert. Yeah, she talked about, your conversation with her was about mentoring, and she talked about her work approach, and how she only works like four hours a day, she does her own data compression, and consultancy, but this also makes me think of a post I've seen from somebody who works with Starbucks' web applications, where they talk about how they pretty much almost burned out the tech industry and then they just had AI institute some of these principles, just made things, actually probably not only more productive at work, just more sustainable for you while working on a personal basis.
 
00:12:58 KENNEDY: Yeah, that's great.
 
00:13:00 OKKEN: Yeah, absolutely.
 
00:13:04 KENNEDY: So, are we going back to World War I?
 
00:13:06 OKKEN: No, we're actually going back to Qt.
 
00:13:08 KENNEDY: Okay. So, pretty much the trenches?
 
00:13:12 OKKEN: Yeah, actually. We just related to that, when I was researching for the QtPyConvert, I was curious as to how they did the conversion while leaving the code comments in place, so I followed the rabbit hole, and there's a project called Red Baron, which I hadn't heard of before, but it calls itself a FST, which is a Full Syntax Tree, so it's a lossless abstract syntax tree thing which you can do queries and modifications, and I think they've got a few uses that they list of possibly renaming a variable in a source file, and making sure that it doesn't clash with anything that's not a variable, like not clashing with things in strings, and other bits. A few handful, like splitting up files, I think this is sort of maybe a tool to build other tools with. I personally wouldn't try to like, write a script of doing this, but if I built it into an ID or something like that.
 
00:14:22 KENNEDY: Yeah, this sounds like this is the foundation of a refactoring tool.
 
00:14:25 OKKEN: Yeah, pretty much, it's awesome.
 
00:14:28 KENNEDY: Loads of tests, but there's no off the shelf thing that's going to do that, but maybe something like this.
 
00:14:34 OKKEN: Yeah, that's really really awesome.
 
00:14:36 KENNEDY: But it's a fun project.
 
00:14:38 OKKEN: Michael, you joke about like, the conversion of two to three, but that's exactly what two to three, the tool, does.
 
00:14:45 KENNEDY: Yeah no, yeah.
 
00:14:46 AUDIENCE: So like, everyone here knows the AST module I hope, it's really cool, and then I guess they call it a full syntax tree, but it's often more broadly referred to as a CST or Concrete Syntax Tree.
 
00:14:56 KENNEDY: Okay, nice.
 
00:14:57 AUDIENCE: And so that's what two to three is based on, it's also what the new Black code formatting tool is based on, right, brcause it has to maintain comments and all these things that otherwise go away with the AST.
 
00:15:10 KENNEDY: Right, that's awesome, yeah, thanks for that. Yeah, Black is awesome we covered it before. You got to like the color. Alright, so I want to close out the official items with something pretty cool here, so our booth is right next to the BeeWare guys, and the BeeWare guys are trying to fill another major hole that I see in the Python space, which is really around packaging, and especially mobile, right? Like, they're trying to build native apps in Python, and I've been a little bit of a, I've criticized them a little bit previously, saying, you guys, there's not really many demos, and not a lot of screenshots, you got to like, show me where this stuff is if you expect people to use it, right? Well, so one of the announcements this week is that project BeeWare just launched an app in the Apple app store. I guess straight up approved by Apple, install it on your phone and it does stuff. It's not super advanced, it's basically like, gives you currency conversions, and tip calculations, like how much do I need to tip in like, RMB, you know. It's things like that, but, it's really cool that there's an example of a BeeWare app in the app store.
 
00:16:17 OKKEN: Is it up on Git source?
 
00:16:19 KENNEDY: I'm sure that it is, I haven't looked at the source code, but yeah, I'm sure that they've got it up there. The link I have, I think either goes to an article, or straight to the app store, and it's pretty cool, so it uses Briefcase and Toga, and Briefcase is a tool for converting a Python project into a standalone native app on Mac, Windows, Linux, iPad, iPhone, Android, Apple TV, and TVOS. Actually, you know what, are those different? Anyway, yeah, Apple TV and TVOS, awesome. So it's pretty cool. It's like a first step, I was talking to Keith Russell Magee about it, and he's pretty excited, but it's just the first step. But if you guys are looking to contribute to open source, they're really really big at accepting new folks. A really great project for that.
 
00:17:06 OKKEN: And you get a token.
 
00:17:07 KENNEDY: And you get a cool token, like a token to say I contributed to the BeeWare project.
 
00:17:13 OKKEN: Yeah, I was actually talking with-
 
00:17:16 KENNEDY: Russell.
 
00:17:18 OKKEN: And one of the parts of their system is Cricket, which is a testing GUI. And it doesn't handle Pytest, but that's one of the things they'd like to have somebody work on, is to try to convert. Oh are you going to add Pytest to Cricket? I'll look into it. I'm bringing this up now to recruit anybody else that wants to help out with that, because I would definitely try it out more if it already had a Pytest link. Yeah that's awesome, yeah, you gave your talk on visual testing with PyCharm, which is awesome, and it's going to be on WhatsApp that I will mention in a second, but that's sort of another analogous thing right, like a GUI for running your tests and your projects.
 
00:18:03 KENNEDY: Yeah, so we use PyCharm for the test runner part, but this would be just a standalone test runner without an IDE.
 
00:18:10 OKKEN: Yeah, exactly, no editing just the running. It's easier to fix a test if you don't have to edit.
 
00:18:16 KENNEDY: Alright, well I think that's it for all of our items that we have for you guys this week, I have a few extra things I want to throw out, actually this one more to the listeners, so first of all, all the videos, except for things like this, are recorded and put online, so already the videos from PyCon 2018 are live and people can check them out, right?
 
00:18:36 OKKEN: There's some.
 
00:18:37 KENNEDY: Yeah, not all of them, but they're coming in, they're a day or two latency there, that's pretty good though for video. So just go to YouTube.com/PyCon2018. The other one is not so good. Apparently there was some package that caused some trouble, like previously, remember we talked about there being bad packages getting into the App Store- not app store, the pip, PyPI. So there's some Reddit post that says, "Hey guys, you should be a little bit careful with SSH-decorator package." And it says, "Don't install it or use it from pip, it has a backdoor to steal all your SSH credentials." And if that's true, you should not have this running anymore, and you should uninstall it. I don't know, but the people say the compromised package has been taken down, they reached out to the developers, and initially there was no response, but apparently it's gone now, so, you can't update it. But if you already have it you should not have it anymore. So just like, a sort of PSA, public service announcement, Don't use that. Yeah? Anything else you want to add Brian?
 
00:19:44 OKKEN: No, I'm just having a great time at PyCon.
 
00:19:46 KENNEDY: Yeah, PyCon is awesome, I call this my geek holiday. I try to refrain telling my wife that, because she's like, you just got back from geek holiday, and I'm like no I'm really actually tired, I need to rest, no you need to take the kids and do this and do that, and it's alright, but I really love coming here, and like I really look forward to meeting everybody, and having these experiences.
 
00:20:06 OKKEN: It's exhausting.
 
00:20:07 KENNEDY: It's exhausting in an amazing way.
 
00:20:08 OKKEN: Talk with nerd stuff all day long, and then go out and have dinner and drinks with nerds.
 
00:20:13 KENNEDY: I know, I had to have cocktails yesterday, it was really hard. Alright, so how about everyone in the audience, you guys want to just close it out, say "Goodbye from PyCon"?
 
00:20:26 AUDIENCE: Goodbye from PyCon!
 
00:20:28 KENNEDY: Woohoo, Thank you everyone for listening, thank you for being here for this live recording.
 
00:20:39 OKKEN: Thank you for listening to Python Bytes. Follow the show on Twitter via @PythonBytes. That's Python Bytes as in B-Y-T-E-S. And get the full show notes at PythonBytes.fm. If you have a news item you want featured, just visit PythonBytes.fm and send it our way. We're always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy, thank you for listening and sharing this podcast with your friends and colleagues.
 
 <|endoftext|>
Michael KENNEDY: Hello and welcome to Python Bytes where we bring Python news and headlines directly to your earbuds. This is Episode #69, recorded March 15, 2018. I’m Michael Kennedy.
Brian OKKEN: And I’m Brian Okken.
KENNEDY: And Brian, nothing to cover notebooks or anything like last time. We had kind of an over the top notebook thing, didn’t we?
OKKEN: Yeah, we did. We covered a few topics on notebooks.
KENNEDY: We probably won’t do that again this week. We just want to say a quick thanks to DigitalOcean. They’re sponsoring this episode and many of the episodes of Python Bytes. They really are helping make the show happen. Check them out at do.co/Python. We’ll talk more about that later.
Maybe we’ll talk about notebooks, Brian.
OKKEN: Let’s talk about them just for a little bit.
KENNEDY: Alright, just for a little bit.
OKKEN: So, because we talked about notebooks so much last time, one of our listeners contacted us and said we should take a look at a project called pynb. It says, “Jupyter Notebooks as plain Python code with embedded Markdown text.” So, the comment from our listener was loves Jupyter Notebooks but he also loves using his own editor. I think he uses PyCharm. I like doing that, too, but it’s not trivial to edit. I haven’t even tried to edit a notebook in PyCharm. You probably can but I haven’t tried. But I like this idea. There’s basically a converter that you can convert back and forth between Python code with embedded Markdown, back and forth to a notebook. So, it looks pretty cool.
KENNEDY: Yeah, it’s pretty wild. So, you define a cell’s function and then you can put docstring-type equivalent of Markdown that becomes a cell. And then you put a little bit of Python and that becomes a Python cell. Then more Markdown within docstrings. Super cool. So, a really nice simple example. It’s quite cool.
OKKEN: Yeah, and one of the things that it points out which is nifty, it allows you to use diffs better with your version control tools or things like that. It’s worth checking out if you want to do more with notebooks but want to be able to store them in plain text better.
KENNEDY: It’s really right down to the essence of it, isn’t it? Because the notebooks are pretty verbose if you crack open the text file and look at them. You look at this and it’s literally what you would see in the notebook. It’s all you type; it’s pretty cool.
OKKEN: It was on my ‘to-do’ list, to play with notebooks a little bit, so I’ll play with this also.
KENNEDY: Yeah, so pynb. PyNotebook. Check that out. Very cool.
So, you know how there’s this really cool William Gibson quote.
“The future is already here, it’s just not evenly distributed.”
OKKEN: I love that.
KENNEDY: That’s a cool quote. I love it, too. Often when I think of, ‘Where’s that future we were hoping for? It’s not here.’ Maybe it is, it’s just not evenly distributed. This next thing feels like it kind of falls into that realm. It’s definitely from the futuristic world. I don’t know how far futuristic. Is this two years in the future, ten years or a hundred years, or something like that? Or is it just living science fiction? But I promise this has something to do with Python, it just takes a moment to get to it.
The announcement is that Microsoft has created a quantum computing language called Q# (sharp).
OKKEN: Yeah, okay. This just sounds neat.
KENNEDY: This is awesome, right? It’s been out for a little while and we were talking before the show and it was almost worth covering before because, wow, there’s a programming language specifically designed for quantum computers. It’s a pretty nice language, actually. But the news is, now it’s available for MacOS and Linux and you can try it.
So, there’s this new language called Q# and if you look at it, it’s a little bit like C#. It’s also a little bit like TypeScript in some ways, but also like Python. I was really pleased to see the if statements don’t have parentheses around the condition, and stuff like that. Because we don’t need them. Why are we forced to write all those parentheses? They’re unnecessary. We all know that from Python and Q# is borrowing some of these cool ideas. The type annotations are very much similar to Python type annotations as well. Quite cool.
There’s this new language. One of the first questions you might ask is, ‘Great, there’s this quantum computer programming language, but there’s no quantum computers.’ What’s the point? Why are we going to run this. I know there’s a couple of bits but you can’t go and get a quantum computer to test your program on. So, how do you test it?
OKKEN: Good question.
KENNEDY: So, they’ve for this emulator-type thing that emulates the behavior of a quantum computer. Though I suspect it’s slower than a real one.
OKKEN: Maybe I’m just not up to date. Are there quantum computers now?
KENNEDY: I can’t remember who was, maybe IBM, but there’s a couple of bits, maybe a two bit quantum computer in a super cold environment that can do very simple things. But it’s not like a general purpose… Unless you’ve for a liquid hydrogen bath to put it in and things like that. (Laughs)
It’s based on topological qubits and quantum computers, hence Q# and it’s out for MacOS and Linux. It’s awesome. On Windows, you can play with it in Visual Studio Standard, but on Mac and Linux, you can use Visual Studio Code. And there’s a quantum programming code extension for Visual Studio Code. That’s pretty cool.
OKKEN: Yeah, so you’re saying this ties into Python somehow?
KENNEDY: Somehow. In fact, they said, ‘We created this new language and we created a way to emulate it.’ There’s actually some stuff in the Cloud computing platform Azure where you can plug in these things, thought they all tie together in interesting ways. But they said, ‘We know other languages exist and they’re really important. The one language we think is so important it should be involved in this as well is Python.’
So, you can now use Python to program quantum computers.
OKKEN: Oh, that is awesome.
KENNEDY: It’s awesome, right? It’s emulating quantum computers, but still super awesome. They said, ‘A lot of this analysis has to do with data science-y type stuff, so we’ll also support Jupyter.’
OKKEN: Yeah, I predict a whole bunch of people in college doing their theses on stuff like this.
KENNEDY: Yeah, that’s a really good point. Putting the science-y aspect back in computer science, right?
OKKEN: Yeah, definitely. That’d be neat.
KENNEDY: So, do you speak Spanish, Brian?
OKKEN: You know, this is embarrassing. I took two years of it in high school but I barely can order a burrito. My Spanish is not very good. But there is a fellow – A. Vallbona (@avallbona) I think is his name – that does speak Spanish. He gave a talk at PyConES in 2017 about pytest. And he let me know about it and showed me the slides. And this was kind of cool, he sent it to me on Twitter and said, ‘Hey, I forgot to tell you. I gave this talk last year.’ I think it was in September. I said, ‘That looks really cool, there’s a lot of neat stuff in it.’ Unfortunately, I don’t speak Spanish, but neat, anyway. And he said, ‘Oh, let me translate it for you.’ So, he translated the slide deck for me. And the slide deck, we have a link to the English slides. And also, if you speak Spanish or want to watch anyway, there’s a video on YouTube that we’ll link to.
One of the reasons why I want to bring it up is because there’s some neat things in there that I never heard of before. There’s some that I have and some that I haven’t. For instance, he does talk about using pytest-django, how to hook pytest up with Django models and stuff. And then a thing called model-mommy, which is a way to mock out Django models. I hadn’t heard of that. One of the things that I need to talk about in full length on my podcast is pytest-lazy-fixture, which is probably soon to be one of the recommended ways to have fixtures be able to go into a test function parameterized input. It takes a bit of explaining.
But there’s also some fun things. Freezegun is a way to “freeze” time for your testing into a specific spot and the interface looks really cool on freezegun.
KENNEDY: That’s cool.I love the names here, the model-mommy and the freezegun. These are great.
OKKEN: Yeah. Then there’s a package called eradicate, which removes all the comments out of some code, because sometimes code is easier to read if you remove the comments. So, that’s fun. (Laughs)
KENNEDY: Code comments are deodorant for code spells, right? They are there to explain why your code is poorly written, right, a lot of the times if they’re not full-on documentation for a help statement. I totally agree. That’s awesome.
OKKEN: Those are some fun things and I wanted to bring it up. A bonus topic, just today it was announced pytest.org started a reference page which has a one page full reference to the pytest API.
KENNEDY: That’s cool, all in one place. Super nice.
Speaking about stuff in one place, let me tell you about DigitalOcean and a cool feature they have. So, you know that you can go to DigitalOcean and create virtual machines, right? Like Linux servers and stuff.
OKKEN: Yeah.
KENNEDY: So, that’s just the start. What if you want to run GitLab or you want to set up MongoDB? Or you’re going to run a discourse server. You’ve got to install Ruby, you’ve got to install the discourse stuff, the database, etc. So, one of the things you can do at DigitalOcean when you go to ‘create a new machine, they call them droplets, you create these one-click apps. So, one click over here and say, ‘Boom. New discourse server all set up. Configure it and save, go.’ ‘I want a new ghost server, go.’ ‘I want a new WordPress instance, go.’ And just click it and it’s up and running. It’s really awesome.
OKKEN: Really? Okay, that’s neat.
KENNEDY: Yeah, you can even do Docker. You want a Docker server? Boom, hit that button. You’ve got Docker 17.12 running on Ubuntu 16.04. Perfect.
OKKEN: Neat. I’ll have to check out all the one-click things they’ve got. Sounds cool.
KENNEDY: Yeah, so they’ve got a bunch of stuff that helps you get going in a nice way. So, check that out at do.co/Python and let them know that they’re doing the right things supporting our show.
OKKEN: Great.
KENNEDY: It is once again that season which the StackOverflow developer survey results come out. So, the 2018 developer survey results are out. They had over 100,000 developers this time. I think last year they had 64,000 so this is cool, it’s growing. I thought it’d be fun to just cover some of the highpoints. They spent a lot of the time actually talking about history of education. Like, ‘How much education did your parents have?’ A lot of that kind of social stuff.
OKKEN: Interesting. That sounds neat, yeah.
KENNEDY: It’s pretty interesting, things like that. There’s a bunch of that, but I’m going to focus mostly on the tech bits. So, one of the first questions they asked was about Open Source. They said, “How many of you contribute to Open Source?” And 55% of professional developers contribute to Open Source.
OKKEN: That’s higher than I would have expected, that’s awesome.
KENNEDY: Yeah, it’s really awesome. I think for all respondents, there were some students and stuff and people who were retired. It was slightly higher, but that’s not surprising. I thought the professional 55% was the most interesting there. People often feel like if they didn’t get a computer science (CS) degree in school than they don’t necessarily belong in programming or it’s hard for them to get into programming. But it turns out only 64% of the people have CS degrees.
OKKEN: That actually seems high to me. There’s only about a third or less of the people I work with that have CS degrees.
KENNEDY: Yeah, I agree. I think that seems high from my experience as well. Maybe CS degree people spend a lot of time on StackOverflow. I don’t know. (Laughs)
OKKEN: Maybe. Why are they spending so much time because they have a degree.
KENNEDY: Exactly, c’mon. So, one of the social things they talked about was the sense of belonging. People’s perspective as developers among their peers. They put that under the banner of ‘experience and belonging.’ They had a graph and they said, “How much do you feel this is true or false over time? How much does this apply to you?” If you’ve had one year experience versus the people with five years experience versus the people with ten years experience. There’s a graph over years of experience and this metric. They said, ‘Your connection and sense of community over other developers.’ And apparently the more time you spend in the programming world, the more that matches. Which makes sense, right? But they also said, ‘How much do you feel like you’re competing with your peers instead of actually working together?’ How much do you see it as a zero sum game, I guess? In the beginning, people feel quite high that it’s direct competition. ‘That person gets more recognition, I get less.’ ‘They get a raise, I don’t.’ Something like that. But over time that diminishes quite significantly.
OKKEN: That’s good.
KENNEDY: And then the feeling of, ‘I’m not as good of a programmer as my peers.’ Pretty high in the beginning and over time people feel less and less like that’s a true statement. Which I thought was good as well. It seems to me like all of these are going in the right direction the longer you’re in programming, which is a positive statement for the whole ecosystem.
OKKEN: Yeah, but it also shows that we need to try to teach students, try to get that connectedness, less competitiveness. Teach that earlier.
KENNEDY: Yeah, right away. You want a kind of a bleak statement that totally applies to me. “How much time do you spend on computers?” The most popular answer? Nine to twelve hours a day. (Laughs)
OKKEN: Does that include your phone? (Laughs)
KENNEDY: I think it might be behind a screen, I’m not entirely sure but if I can kick back and play games or watch Netflix or whatever. It was also notable that the usage of Python has exceeded C# for the first time. They called that out specifically I think.
OKKEN: Yeah, cool.
KENNEDY: Then a couple more things. There’s languages and databases and they talk about ‘the most loved,’ ‘the most dreaded’ and ‘the most wanted.’ So, ‘the most loved’ is you’re using it and you love it. ‘The most dreaded’ is you had to use it and you never want to use it, it gives you fear. ‘The most wanted’ is, ‘I’m not yet using it but I want to use it.’ So, these are interesting ways to measure things. Languages ‘most loved,” number one is Rust. Even though not that many people use it, among people who use it, they love it so much. Kotlin isn't number two and Python is number three. Pretty nice.
‘Dreaded,’ VB6 and CoffeeScript. ‘Wanted,’ Python is number one, ‘the most wanted’ language by 25%. Number two is JavaScript at 19%, which is quite a drop and then Go is at 16%. It drops down really quick and Python is ruling that.
OKKEN: Yeah, that’s great.
KENNEDY: Databases, ‘most loved’ is PostgreSQL. ‘Most dreaded’ is IBM Db2, Memcached (men-cash-dee) and Oracle. Memchad was responsible for the largest distributed denial-of-service (DDoS) attack ever and that was put on to GitHub recently. And then ‘most wanted’ is MongoDB.
‘Most popular editor’ is Visual Studio Code. Pretty interesting. And for developers, “What OS do they use?” Windows, 49%. MacOS, 27%. Linux, 23%. Not where they deploy to but where they write their code on.
OKKEN: And this is one that we need to pay attention to more, I think. Because a lot of the podcasters and bloggers and all of that within the Python community, I think either Linux or MacOS might be higher.
KENNEDY: Much higher.
OKKEN: But you’re teaching to a group of people that half of them are running Windows. You just can’t ignore Windows.
KENNEDY: That’s a really good point. Even though the thought leaders and people you see at conferences and speakers and whatnot, are probably either Linux or Mac. The actual people doing the work and using the stuff is very much Windows still, so it’s definitely not to be forgotten.
Speaking of presenting… (Laughs)
OKKEN: Speaking of presenting, Doug Hellman, he’s got a new project called demoshell. The idea is somebody named Gene Hack (@genehack) on Twitter said, “Hey, speakers. If you’re going to do live demos in a shell, clear the screen after every command and get the prompt back to the top, so folks in the back can see what you’re doing.” And that’s completely reasonable.
KENNEDY: Yeah, that’s a great idea.
OKKEN: Instead of fiddling with it, this demoshell, the idea is basically just to do that. Capture a Python project, capture your input and emulate a shell, but it really just pushes all the work off to a shell to do the work. But between commands, it puts your prompt back at the top. It’s in its very early stages. I actually reached out to Doug and said, ‘Hey, so you want me to announce this yet? Are you ready for it? And he said, ‘Yeah, put it up there to start the discussion. I’ll be happy if a bunch of people showed up and started participating and adding things.’ But he added a warning also that, ‘Too much interest is going to be met with commit privileges on the repo.’ If you want stuff done, he might say, ‘Hey, just go ahead and do it.’ But actually, that’s a good thing. He’s up for people to help him out.
KENNEDY: I think this is really neat. It’s a cool idea. It definitely makes a lot of sense. I’ve done so many training classes where it’s not like stadium seating, it’s flat. It’s usually in some room with a crappy projector screen that’s too small and the people in the back can’t see it at all. This perfect, right? Everything stays at the top, it’s really great. And people out there looking to find an Open Source project to work on, go and express some interest. You might be met with commit privileges on the repo.
OKKEN: It’s still at its really small stages. There’s not a lot of code there, so it’s pretty easy to read.
KENNEDY: Yeah, that’s awesome. Nice.
Alright, so let’s wrap this up with a really nice definitive statement. The last thing I want to talk to you about is Python 2’s End Of Life (EOL). We’ve spoken before about there’s the Python Death Clock and we know that in 2020, Python 2 will go unsupported. What exactly does that mean? How strict are they going to be about that? Is it going to be at PyCon 2020? Is it going to be the end of the year? Well, my friend Nicola Iarocci (@nicolaiarocci), who I have more news about in just a little bit, he put this out on Twitter and got my attention. Basically, there was this discussion on the Python mailing list saying, ‘Will there be a period where Python 2.7 is in security-only status before hitting End Of Life?’ So, say, 2020, will it go into, ‘Well, we’ll do security fixes for awhile, but no new features and we’re not going to change anything.’ Or is that going to happen earlier. Guido (van Rossum) actually came out and said, “Let’s not play games with semantics. The way I see it, the situation for 2.7 is the End Of Life is January 1st, 2020. Beginning of 2020. And there will be no updates, not even source-only security patches after that date. Support from the CoreDevs, PSF, Python.org completely stops on that date.”
OKKEN: Yeah, there’s your answer.
KENNEDY: That’s pretty abundantly clear, isn’t it?
OKKEN: Yeah, but that’s way out. That’s like way in the future.
KENNEDY: That has to be at least a year and a half away. (Laughs) So, for those people with millions of lines of code on Python 2, they probably should start checking out things like MyPy and some of the other tooling on pushing that along, right?
OKKEN: Yeah, or if you’re planning on leaving your job and going to another company within the next couple of years, don’t worry about it. (Laughs)
KENNEDY: Exactly. I’ve got a better one for you Brian. Or you want to get a really sweet consulting job migrating Python 2 to Python 3. Learn all of the nuances. When people are freaking out in November 2019, you’re going to be in sweet demand.
OKKEN: Actually, that’s not a bad idea.
KENNEDY: My rate’s $250 an hour to start, so let’s go with that. (Laughs) I can help you with this problem. It’s going to take a while though.
OKKEN: Hmm, I’ve got about a year to beef up on my conversion.
KENNEDY: Awesome. You've got any news or extra things you want to throw out there? You did some recent Test and Code episodes, right?
OKKEN: Yeah, so I guess I just wanted to shout out that I’m back into recording more often. And I thought I’d start with a little test project, so I’ve got a project called Cards, that’s kind of a to-do app. But I’m focusing on using it as an example bed to talk about things that I get questions about all the time. ‘Okay, your book is great for how to write the tests actually, but what test? Why write? How do I pick which test to write? How do I pick test cases?’ Basically, this intro to quality assurance (QA) for busy people that don’t have a QA team. How do I do that? So, that’s where we’re exploring. I’m two episodes into it and I’m just going to run with it until it runs out of steam, so check those out.
KENNEDY: Yeah, they’re really awesome. I think that it’s great advice and when people get that wrong, testing seems super horrible. You’re like, ‘What do you mean I’ve got to test every single thing?’ If you’re focused on testing the wrong thing, it’s just super busy work.
OKKEN: Yeah, but testing should be something to help you develop faster, not slow you down and that’s where I’m focusing my energy.
How about you? Any news?
KENNEDY: Well, I just got back from PyCon Slovakia. That was pretty awesome. I want to send a shout out to everyone there who I met. That was fun. If you’re in Central Europe next year, be sure to check that out. That was a good event.
Also, I have a new course.
OKKEN: You do and I’m excited about it.
KENNEDY: Yeah, it's on the most wanted database technology. So, this is the first course based on Flask that I have. So, this is a thing called EVE. The E framework, which is a way to take Flask and a MongoDB database and turn it into a really awesome RESTful API with validation and business logic and all that kind of stuff. It’s a super cool way and it’s really declarative, so you say, ‘Here’s my models. Here’s my end points. Here’s the validation for them. Make that a REST service, go.’ It’s nice. So, that’s out now. It’s actually written by Nicola Iarocci, the guy who talked about the Python 2.7 statement. He wrote that and he’s also the creator and maintainer of EVE, so he’s pretty qualified to talk about it.
OKKEN: That’s great. I’ve already started listening to it because I’m very interested in this topic.
KENNEDY: Yeah, awesome. Well, links in the show notes. Check that out. I think that might be it. I’m really excited that we have a concrete statement on Python 2.7 and it’s not vague.
OKKEN: Yeah, that’s good to have. I wonder if they updated the Death Clock.
KENNEDY: I was just thinking that. We’ve got to recalibrate all the clocks. They probably got shorter. Awesome.
Well, thanks again, Brian. Thanks everyone for listening.
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues. <|endoftext|>
00:00:00 Hello, and welcome to python bytes where we deliver Python news and headlines directly to your earbuds. This is episode 282. Recorded may 3 2022. I'm Michael Kennedy. And

00:00:12 I am Brian Aachen.

00:00:13 It's great to have you here. Brian is just us just the two of us. Just like hold title. I know. But we have our friends out in the audience. So we're not entirely alone. So, let's kick it off. I'm, I know you have a particularly exciting announcement. topic to cover here. So definitely, let's, let's get into it.

00:00:33 Okay. So, um, pi script. So this was a an announcement at Pycon us by anacondas CEO Peter Wang. During a keynote. I wasn't there, but like everybody was tweeting about it. So it almost felt like I was I was there. So but but I, I haven't seen the presentation. So I can't wait. Can't wait till that goes on.

00:00:56 And if I know are the videos, I haven't not seen the videos for the presentations at Pycon out yet. Are they out yet? I just missed it. I haven't looked at my YouTube broken. up

00:01:07 full of this stuff was like what's up with? Is it supposed to be next day or something? I don't know.

00:01:11 I know, I know. Anyway, somebody love to livestream it, but I didn't see an option. So anyway, I'm looking forward to watching this one in particular when it comes out because this is big news.

00:01:20 So py script is Python in the browser. So what does that mean? It is built on top of pi iodide, which is a part of C Python based on Windows web assembly. I'm pretty sure we've covered Paya died before, but so this is a pretty neat thing. And one of the things that this, so the postscript dotnet you go to it, it's got a little it's kind of actually, it's it's like hype, and it sounds neat. And you can do Python in the browser neat with the PI script tags. But what does that mean? So there's a if you go down to the bottom, there's a GitHub repo that you can go look at, this is what I suggest. And this will talk about, there's a getting started guide. But what I did is just follow this clone of the repo. And then I went in and did the into the JavaScript area, and then did npm install, and then did this dev Run Run dev thing. So this only took me like five minutes to get this far. And, and what you have is you've got one of the things that it has is it has an examples folder. And you can just open this up now in your local, your local browser localhost. And there's all these cool demos like there's a repple, where you can just do it's kind of like Jupiter where you can say like x equals three, let's do this, and then x and then if I do shift, enter, it evaluates it. And he does that. That's pretty neat.

00:02:41 That's awesome. Yeah,

00:02:43 To Do app here, so make sure you listen to our podcasts, go by Python testing the PI test, we'll check that because we know you already bought that. So and then, here's an example with d3. Graphics. This is neat. I don't think I've ever done this the there's an Altair example. And this is pretty fun, because you click around and it changes the above. It's like an interactive thing. This is fun. We use Altera with a project at work. So this is the the Mandelbrot set. So there's some code. So all of this code is in the repo. So you can look at the examples and look exactly how the code is done. There's a HTML file and a python file for all of these. So you can check it out. Actually, I don't know about the Python thing. It's it's HTML and Python within the HTML code embedded. So there isn't a separate file. But you have, you can do imports and all this sort of stuff, too. I went too far. But I wanted to bring up there's also an article that we're going to link to in the show notes that is called postscript unleash the power of Python in your browser. This is by Eric Lewis lewinsohn. And it runs through it's it's a pretty interesting little quick read of what it is, if you're not familiar with web assembly and pi died. So it's nice. It's thanks. What do you think Michael? So

00:04:00 excited? I'm very excited. You know, there's been progress on the web assembly plus Python side on several occurrences that were they give you a sense of what's possible, but they didn't give you a thing to build with? Yeah, what I mean? Yeah. So for example, power died is awesome. But it's kind of like, well, if I want to sort of host a Jupiter kernel in my browser, like I can, I can kind of do that, right? The web assembly, Python itself is great, but it doesn't specify a way to have a UI of your webpage interact with Python. It's just, oh, you could execute Python over here. Well, like and then what, you know what I mean, which is, which is still good. But there's not something where like, I can have a button on there that like wires up to this thing in Python, and I have this list that binds in that way and so on. Yeah. And this looks like we might be there. Like one of the things they talk about on the page is not just running Python in the browser, and the Python ECOSYS Some, as you pointed out, but really importantly, two more things Python with JavaScript bi directional communication between Python and JavaScript objects. Yeah. So you can wire into like events on the page and other DOM type of things. Yeah. So then a visual application development, but it ties in with that with us readily available curated UI components, such as buttons, containers, text boxes, and more. Oh, yeah.

00:05:24 Yeah, I mean, like, these are just a little quick examples. But I'd love to see some some bigger examples of things like that, like being able to connect it, you know, yeah, JavaScript interaction with stuff on on the Python side. That'll be neat. Yeah, it's

00:05:39 weird to see Python written just straight in the browser, you know, yeah, back here, you have like, angle bracket, pi dash script, and just import anti gravity anti gravity dot fly. Like, wait, alright,

00:05:51 well, so this, this is a good exam, I picked this example for one is because it does do an import. So this is there's like a path thing you can set up. So you can put coat you can put code, all your code doesn't have to be in HTML, it can be in in a python file. So you can debug it there, which that's where you want to debug it. And then you can implement and call it within Python. This, this is probably more where I would use it is putting most of my code somewhere else. And then

00:06:18 yeah, that's what I want to see. I would want to see just Python files and just effectively a script tag for me, you probably maybe you can't do it directly as a script tag. But you could do Yeah, bracket high script, and then just import and run. Right. Yeah. So literally point basically, I haven't looked

00:06:34 at this before. So the antigravity.py that is bringing in is bringing in some PP iodide stuff, and to be able to work it. So

00:06:44 I'm seeing some from Doc, this is Python code from document, or sorry, from Jas important document. Yeah. And set interval. And so those are the things you do there. Let's see. Are there any any callbacks? I don't see any callbacks there? Oh, yeah, yeah, this set interval as a callback self dot move when the interval the JavaScript interval fires. So under under fly that is hooking into time, really? Yeah, my callback,

00:07:10 so we should check that out. So it was was that so the Integra I should have done this ahead of time? The antigravity is not linked to but I'll just like bring it up. And forever, based on

00:07:24 Wow, oh, my gosh, this is so amazing. People have to do this. Oh, cool. We all know import antigravity and we've got to know the XKCD that comes up. But yes, having an animated, it's great way to live. It's not just is the person who, who says how are you flying? The person who says I'm playing with Python? Like that thing is alive and cruising around. I love it. Yeah. And that's based on the callback, right? That's, that's calling Python based on the set interval timer callback in JavaScript. Yep. Yeah. And it to me that has been the missing piece. Like, how do I wire up is like, great if I can just execute Python and have you know, like a number have come out. But what I want is view in Python or reactive, I want to build the UI in Python and just not deal with JavaScript and be able to do so many more things on the front end. I mean, this opens up stuff like progressive web apps. Yeah. Which could be really amazing for the Python space, right? Like I'm hearing Vivaldi. If I go to my email client, just in the browser, I can right click and install it gets its own app that works offline, it like pulls its data down into the local DB or whatever. Theoretically, you could do this right, you could pull down the C Python wasum. You put it on the 5k, high script file, and then just somehow use JavaScript to Python to talk to local DBS. I mean, what if we get like, oh, RMS in Python going? Oh, yeah, we have one of our back ends is the web browser. Local dB. Yeah. Or something like that? I mean, this is great. I would love I'm very excited for where this might go. Sky's the limit. Right. That's what that little flying character. Yeah. Okay. Well, good job. Anaconda, folks. This was Fabio and crew. So really, really nice. That was super psyched. How am I gonna follow that one? Come on.

00:09:13 Just, I'll give it a try. No, I've got some good items. They're just not flying around. Amazing. Python in the browser. Amazing. So Bloomberg has a lot of Python going on. And Bloomberg actually has a pretty cool like tech engineering blog where they talk about some of the stuff going on at Bloomberg. Right? Yeah, one of the really good articles I read from this from them was about how to really set up and run micro whiskey in production and like this huge, long, deep list of like, here's a bunch of flags you probably never thought about and here's why you should care about them in Python. Really good stuff. So they're back with another thing that they use that is cool, called memory, like memory, but memory. It is a memory profile. For Python, so if you want to understand the performance of your application, especially around memory, here's a pretty neat tool. Now, let me just get right out of the way before I forget Linux only. So if you're not using Linux, just close your ears now, just kidding, like, you could all if you're on Windows, you could just run your Python App under WsL, and then profile it and then go back to run it on Windows. Or, if you're on Mac, just do a VM or something, right? Anyway, it only runs on Linux. But because Python is so similar across the platforms, I'm sure you could just test your code there, even if that's not the main use case. Alright, so you get all these different visualizations of memory usage. You can track allocations for Python code in native extension modules, like NumPy, or something like that. And even within C, Python itself, so you get sort of a holistic view of the memory, which is pretty awesome. Yeah, yeah. And it'll give you have different memory reports, we'll talk about them a little bit. And you can use it as a CLI tool, just like kind of like timeout or whatever. You can just say, memory, run my app. And then when your app exits, it's like, here's what happened. One of the things that's super challenging about complicated applications and web apps and stuff, is you want to focus on a particular scenario. And there's so much overhead of like startup and other things. So for example, if I just want to profile a bass API API call, if I just say, run it up, and I go hit that API, all of the infrastructure starting up UV corn and fast API and Python, just like it just dwarfs whatever that little thing is usually. So there's also a programmable API that says, you know, you could create like a context manager, like, I don't know if it actually is that way. But you could certainly build it if it doesn't exist, like with, with memory profile here and just do a little block of code and then get an answer, which I think is pretty neat. Alvaro asked if it accepts an entry point, I suspect you could call an entry point. Because you just do the run on the command prompt, so you could get over whatever you run. Yeah, yeah, exactly. But the problem is, there's still like the start up of just see Python itself, right, like, always fine. Just the imports and all that. It's just way more overhead than clog clutters it up. Anyway, let's hit some notable features of memory. It traces every function call as opposed to samplings. It. So instead of just going every millisecond, what do you do now? What do you do? Now? Let's just record that right? It actually exactly traces so you don't miss any functions being called even if they're brief. It handles native calls in C Plus Plus library. So the entire stack is represented in the results, which is pretty cool. That's pretty neat. And it's pretty, pretty dope. Apparently, it's blazing fast. There's some kind of character I think it's a race car, they're like causes minimal slowdown in the app. If you're doing Python raising, if you do the native code stuff, it's a little bit slower, it says, but that's optional. You get a bunch of reports. We'll see those in minutes that works on Python threads. So you can see for I know all these young people watching, but you check out the webpage. There's a little thread like a sewing thread emoji Twitter thread. Deep, does it also works on native threads, like C++ threads and native extensions, which it represents as an alien. Plus the thread. I love it.

00:13:18 Iliyan threads. Yeah,

00:13:19 yeah. So let's look over here real quick. We'll look at just I guess, the reporting, right? I mean, the running is super simple. As I said, memory run Python file with arguments or memory run dash m module with arguments. These are the places you could put your entry point and so on. And Dean in the audience's we've had a rich spotting. Okay, I haven't haven't pulled that up yet. But very nice. So there's different ways in which you can view it. And the first one that I ran across, which is pretty interesting. If you're familiar with classes, or you want to go old school like tarp, or one of these things, you can run in just the terminal and get like, not only with rich or not rich with top, but rich output like glances, is you can run it in a live mode where while it's running, it'll show you what's happening with the memory. That is so awesome. That's pretty cool. Yeah, yeah. So instead of just showing you a memory graph, it's I guess what we're running here right now with this many allocations and so on. Yeah, like, that looks super nifty with the dash dash live.

00:14:20 And if you've got something interactive, you can interact with it and watch the memory change then. So

00:14:25 yeah, yeah, you can cycle through threads. You can sort by total memory or its own memory of the common thing you do in profiling like this. And all this stuff. It's called or just this method itself, sort of my allocations versus memory usage is all kinds of stuff. So that's really neat. It will track the allocations across forks, as in process sub process, okay, why would you care because multi processing, do you want to track some kind of multi processing memory workflow, it will actually do that just lets dash dash follow fork and it'll like aggregate the stats at cross the different processes, kind of insane. Let's see if we can get down here, you can do that the summary reporter, which is kind of a nice, just, you know, this is probably what you would expect flame graphs. If I can get down here somewhere it also like sort of the color and the width of these bars. I'll show you how significant it is. There's a nice tree version, that'll show you the biggest 10 allocations, and then a call stack sort of in and out with trees, and like how much memory is being allocated in each one of those, and so on. So, yeah, this is a nice app. Right? Nice. Utility. Definitely. Cool. Yeah, Indeed, indeed. So if you want to track down memory leaks, or you're just wondering, like, why is my program using so much memory fired up? Let it run for a while, see what happens. All right, back to you, right?

00:15:49 Well, I want to bring up a PI test tool. So it was a, I have recently, I've often used PI test X dist for parallel. So x dist is a way you can just say that it's it's the one that I heard about first, for running PI tests in parallel. So you've got, you know, like, tons of unit tests, maybe and you want to just speed them up, you can throw them throw a dash n for something like that at it. And it'll just throw them launched different processes and, and run pi tests in parallel on a bunch of them. So cuts time down, but there's overhead. And I was recommending this to somebody on Twitter. And and there was a I think it was Bruno Olivia suggested a couple of alternatives. And one of them was PYtest parallel, which I know I've run across, but I haven't played with it for a while. So I tried it out. And it's actually like, really cool. So one of the one of the PI test X does does a lot, one of the things it does is it not just it's not just multiprocessor, but it can be on different actual different computers. So you can launch them on

00:16:59 Oh, nice. Grid computing, almost Yeah, you can SSH into

00:17:03 different systems and have it run in parallel. But you know, you don't, I don't know usually need that kind of power. The one thing it doesn't do is threads. So it's processed based and piteous parallel does both. So you can say, you can give it you can give it to where we have, I'm gonna go down to the examples. So you can give it a number of workers. And it'll tell it to, that's how many processes it'll spin up, or how many CPUs now, you can also give it a test per worker, and then it'll run in multi threading mode. And you can give it auto on both of these. And it's a, this is extremely useful for if to by default, this is turned off by default, the features if you just say workers equals five or something, it won't do multiple threat multi threading. And the reason is it because you need to make sure your tests are thread safe, and many are not. So I tried it on a couple of my

00:18:02 even if they're isolated, they might not be thread safe, right? Yeah. It's it's another level of consideration.

00:18:09 However, if there are, there's a lot of small, especially small, not really unit, like system tests, but a lot of unit tests are just testing little Python code, if you've got part of that is a lot of projects, that's a big chunk of the test load. So being able to do multi threading is really nice. But you know, even with just multiprocessing, I tried this on a few different projects, and there were like I traded on flask. And the the parallel version that using Bitez parallel was like three times faster than the X dist version. So. So based on I, there's there was another one that Bruno mentioned, but I think these two are really solid X test in parallel. So if you want to speed up your test runtimes, I would try both on your project and just see play with them and see, see which one's faster on. Many of the projects I tried parallel was at least as fast or faster than exsist. So it's kind of nice. Yeah,

00:19:09 that's cool. This looks great. I like it, and having your test run fasters always good. Do you do anything crazy? Like do you set up your editor to auto run tests on file change or anything like that?

00:19:21 Sometimes, one of the things that I've always

00:19:24 I've done it a few times, but it always makes me nervous. And like I just like it's unnerving to me that it just keeps running.

00:19:29 One of the things that I really like around that was added to pi test not too long ago, was is stepwise. So that's not really all the running it all the time. But stepwise will. And this would be a handy one to run all the time. So what stepwise does is it takes you can run all your tests in stepwise. And when you run it again, it'll start at the first failing test because it assumes you're trying to fix something, they'll start at that and then run until it finds a failure. So if you If you haven't fixed this first failure, just keep running that one until you fixed it, and it'll go to the next one. And so I do that a lot while I'm trying to debug something. That's cool. And, and hooking that up with like an auto, like a watch feature. There's a bunch of ways you can watch your code to do that. Yeah, it's fun. Nice.

00:20:19 Very cool. So let's do some real time follow up here. Uh, first, Alvaro has been on mischievious. Asking, I wonder what happened if I install both plugins, both X dist and parallel?

00:20:32 You can, I don't know if you can run them at the same time, I should try. I have it installed on like the flask one I ran it, I installed both of them and then try to move, but not at the same time

00:20:42 to try to look the Forex it's gonna go so fast. And then just going back to pi script, there's like tons of excitement about pi scripts. Yeah, JL is excited. Brandon's excited. And David says, I hope someday I can say back in my day, you couldn't just learn Python, you had to learn JavaScript, too. Yeah, Indeed, indeed. Let's see. So I got one more to cover, that is going to be fun as well. And this one comes to us from former guest co host, Michael Fikret. Sorry, Matthew Fikret. And Matthew is a great supporter of the show, since all sorts of interesting things in to help us out and good ideas. And this is yet another one coming from the data science side of things, saying you know, one of the things you have to do often isn't, say a Jupyter Notebook is Go download a file off of an API, or just some link or s3 bucket or whatever, and you want to process it. And if you use requests, while great, you end up making the request, verifying that it worked, reading the stream into bytes, writing the bytes to a file, picking the file name, and then using that file name to open it and then say, now you can process it, right? So there's this thing called hooch, a friend to fetch your data father, I Puj, go get go with my files, like a little boy, a little friendly dog that also seems to hold a snake in its mouth. So that's pretty cool. Anyway, who wouldn't want a dog that can wrangle snakes to go help you with your notebooks? Anyway, the idea is, you can do all of what I described with requests, you can do that in one line of code. Oh, wow. Yeah. And you get other cool features as well. So it says, Look, you can just make this one function call and it'll save it in, it'll also cache your files locally. So some of these files that data scientists especially work with are massive, right? You know, it's like a gig. And every time you run the notebook, you don't want it to download the gig again, you just want it to run more quickly. So you can set up a location for it to cache it, you can pass in a hash of the file to say, I want to get this file and I expect it to be this MD file or whatever the heck the hash is that they're using, so that you can be sure it doesn't change, right? So if you're doing like reproducible data science, you say, what you do is you download this file and you apply this algorithm, then you get this picture. Well, if the data changes, I bet the picture changes, right. And so you can put out like a layer of verification that it's unchanged from last time you decided what it should be. That's pretty cool. You can do multiple protocols. So not just HTTP, HTTPS, but FTP. Oh, my gosh, s FTP. Oh, yeah. So I have the basic auth. It'll also automatically resolve, D, D. O eyes, digital object identifiers, which are used in places like fig share and Zen Zenodo. And this is about the reproducible science like, here's, here's the file and like we've been assigned an immutable ID that we can always refer back to it. So you can just say, here's the ID and you'll actually get the file and you know, even unzip and decompress files upon download. Neat. Bernina. Yeah, yeah, straightforward. Let's let me see if I can find an example of I love I like the

00:23:47 the section of learning about it. It's called training your pitch. That's cute.

00:23:53 Oh, nice. I love it. Apparently, it has progress bars was downloaded actions, logging, and you get multiple files. But the main use case is just file equals Bucha dot retrieve URL. Done? That seems pretty nice. Yeah,

00:24:08 that's great. It's my data. Here it is.

00:24:11 Oh, cool. So painful. Roy out in the audience says, Hey, folks, funny. We're adding this to sci fi optional to have a sci fi data set. submodule psychic image is using this as well. Yeah. Very cool. Thanks for the extra background there. Yeah, but I think this is great. In fact, I know it's sells itself. It builds itself as being for data science. I also like to download files sometimes and not go through five or six lines of code. I could use this.

00:24:37 Yeah, there's there's a lot of stuff that data science people are doing that we can use in lots of other fields. So

00:24:44 indeed, I do think that's actually one of the really interesting aspects of Python is we have so many people from these different areas that it's not just all CS grads, doing the same thing. Yeah. Yeah, for sure. All right. Well, those are my items. Today, Brian,

00:25:01 nice, um, I don't have any extras today. Do you have any extra information in stuff?

00:25:07 I do. I do have extras. So this one I'm very, very excited about, I have a new course that I just released, called up and running with get a pragmatic UI based introduction. So I'm really excited I just released I haven't really even announced it yet. But I finished getting it all public and online and turned all the GitHub repos public and all that stuff, right before we jumped on the call today. And the idea is, there are tons of Git courses. So why create a Git course? Well, I feel like so many of them are just like, Okay, we're just going to work in the terminal or the command prompt. And you're just going to assume that like, that's the world of Git that you live in, then like kind of at least common denominator approach. And while that, that is useful, like, I don't think that's how most people are working, right, if you're in Visual Studio code, or HR and like, there's great hotkeys, just to do the Git stuff and see the history and whatnot. And there's other tools like source tree and power and other so it kind of takes this approach of like, well, let's take all the modern tools that give you the best visibility and teach you get with that. So So we

00:26:09 define which GUI tools are using or which ones are your

00:26:13 Visual Studio Code, okay, by charm SourceTree. Okay, thing. And so I've done a lot of work. I've tried to take some of my experience from doing some work on YouTube, where I was experimenting with like, setup and presentations and stuff. And I think I have a really neat, polished experience for this course with like, lots of cool visuals and graphics and video and stuff. So hopefully people really enjoy it. Anyway, this is my extra. I just sent this out

00:26:40 to the world. This nice, congrats. Yeah.

00:26:43 Thanks. Thanks so much. You have no extras Does that mean you're ready for some humor?

00:26:47 Yes. Always.

00:26:48 All right. All right. This one. I chose this. Honestly, I just chose it just because of the title. So there's Robert is this Robert Downey Jr. Looking at somebody in like some kind of wizard situation, right. Like,

00:27:02 oh, yeah, this is like endgame or something.

00:27:05 Okay. Yeah. I don't know the movie. Like I apparently I watch stopped watching movies at some point. Now I know, I'm out of touch. So anyway, the title is when your code stopped working during an interview, or it could be a demo presentation or whatever, like you want to you want to tell us what this is about what's going on here. So he's,

00:27:21 he's a, he's looking back at banner. So the Hulk says, Dude, you're embarrassing me in front of the wizards? Yeah. Because, yeah, because banner wasn't able to become the Hulk. So they

00:27:34 try to Don't Don't embarrass me in front of the wizards. I just I love to think of programmers. It's kind of like the modern day wizard site, we can think of things and then poof, they kind of come into existence. Yeah, it's good. And also, while working on that Git course, I had this pretty fun experience. Like, right, well, was it recording? Nice. And I'm just sitting there, and then it was down. How often does GitHub itself go down? But no, oh, no, there's like an arc. The Octocat as falling like are the 500 sign in his hand? Which of course, lead me to love the three do that section of the course. Yeah.

00:28:09 I like the expression on your face for that. Like,

00:28:13 exactly. People seem to really like that tweet all. I'll put it in the show notes so people can check it out. Anyway, dude, don't embarrass me for the wizards. It's what I got for you. Yeah.

00:28:22 Good. Good. Good. Well, thanks. Thanks for the live again. It's great show.

00:28:28 Yeah, sure was. Thanks. Thanks, Brian. Thanks for everyone who came by

 <|endoftext|>
00:00:00 Hello, and welcome to python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 279, recorded on lucky April 13 2022. I'm Michael Kennedy.

00:00:12 And I'm Brian Arkin.

00:00:13 And I'm Brian skin.

00:00:15 Hello, Brian's Great to have you. Hello.

00:00:20 Great brands think alike.

00:00:22 That's right. That's that's the same. Brian skin. Welcome. It's great to have you here. You've you are now completing the trifecta of podcasts, I understand.

00:00:31 Yes, indeed, I was on a panel for talk Python and an episode of testing code a little while back and excited to be here for Python bytes.

00:00:40 Yes, you've been a big contributor in terms of sending topics our way. So it's only fitting that you're here. Tell people real quick about yourself before we jump into the topics.

00:00:50 Sure. I'm a chemical engineer by training. I'm not actually a software dev by day. I have a PhD in chemical engineering. I've been working for the last 10 years or so at a company here in Dayton, Ohio, Faraday technology working on electrochemical process r&d. So there's a lot of science there some programming, mostly for data analysis, things like that. But I also have done a quite a bit of Python on the side in documentation area and various things like that. So

00:01:19 extol chemical engineering, it's pretty awesome. And it's great to have someone here who's not a straight software developer, you know, we get a lot of throw myopic views, and I think you'll have some interesting perspectives. I hope so. Yeah, I hope so as well, I'm sure. Now before we kick this off, I want to say this episode is brought to you by data dog, check them out at buy them bytes.fm/data Dog. We'll talk more about them later. Right now, Brian, maybe we could talk about F strings. What do you think? Yeah,

00:01:45 I mean, I love F strings. I use them all the time. But I was like, really thought it was cool. There were a couple of new resources that I kind of wish I had had earlier. This one a couple, they're new. So we've got from Florian Bruin. And he's he's was hugely helpful to, to getting doing the code review, or book review and code review and all that stuff on the PI test book. So I definitely want to shout out to him for thank thank him for doing that. But so he generated this, this Python F strings, it's called F strings dot help. And it's just like, it's a Jupyter Notebook looking thing I think he created, created it with Jupyter Notebook. But it's um, it just quickly goes through all of the formatting stuff of F strings. And there's a little bit of explanation, but it just sort of exactly shows you, you know, what the syntax is and what the output is really concisely. This is a nice, nice run through of the F string features.

00:02:47 Yeah, that's cool. It looks like if you were trying to either learn Python strings or trying to help someone learn Python three strings, you could just send them this and go here, scan this, you'll be good to go.

00:02:57 What I like about it is that just the terseness as well. So this is a decent a decent reference to bookmark for looking things up. Yet. The other thing I wanted to point out was an article called Python F strings are more powerful than you might think. And that's exactly kind of the gist of it. It's it kind of it's more discussion. It doesn't mean it does sort of tell you what they are, but it kind of assumes you already know. But systems some really cool things like date, date and time formatting. Have using it for debugging with variable names. We've talked about that on the show. Making advanced taking advantage of string representations. There's a there's even embedded, I didn't know you could put F strings inside of F strings. So there's, there's part nested F strings is it they call it so interesting stuff. Yes,

00:03:49 yes. So yeah, that's it f strings. I had no idea. I didn't either.

00:03:53 I just totally

00:03:56 relate totally. Yeah. templating. One thing to then template into another thing? Absolutely. It's super helpful. Okay, cool.

00:04:03 So yeah, it's easy to forget that you can apply the standard, I guess string dot format, type of operators like, colon point three F or colon comma to put digit grouping. But in F strings, right, because it's, it feels more like you're working with a variable than you are with a format. Character. I

00:04:23 mean, short examples like this of here's a cool thing you can do with even though a well established basic feature like that can really help people go oh, hey, that's just what I need and run with it.

00:04:33 Yeah. Very nice. Oh, that's a great brain. I love it. Now, are we ready to move on? Yeah, definitely. Cool. All right. I kind of want to blow your mind with this thing here. You've probably heard about Bloomberg terminals. So if you're in the vestment space, like if you work at a hedge fund or an investment company, specially in Manhattan, you know, you'll sit down you'll see like these huge Six monitor crazy setups that would make gamers jealous around them and I look at what is going on here. And one of the tools they use a lot. It's a thing called the Bloomberg terminal that lets them look at all kinds of different visualisations and real time instant updating things around the stock market and whatnot. That is a commercial product project that, as best I can tell, I mean, there's probably discounts or whatever, but it costs around $2,000 per user per month, which is a non trivial amount of

00:05:32 time. Cost, right?

00:05:36 I mean, no wonder we're all getting like little percentages of money sucked out of our 401k retirements, because all those people are like paying that much money to like manage our accounts. Yes, exactly. So I want to introduce you all to open BB at open bb.co. This is the equivalent thing. But several interesting aspects. One, it's open source two, it's free. That's cheaper. It's not necessarily the most important thing. But it also gives you access to all sorts of tools that we know and love from Python, especially on the data science side. So this open BB thing is this terminal type thing you can instal it's really got this sort of weird blend of like CLI no will McGuigan would be super impressed with all of its like, terminal UI, it's two aspects. But then it also pops open interactive windows that are like graphs and all those kinds of things. I'll pull up some examples in a minute. So you get access. It's not just that it's free, but you get access to all the Python data science stack. And it is itself created in Python. So pretty cool. It's pretty popular, it's got 11,000 github stars. And what you do is you show up at this terminal, and there's even an interactive live version, you can have dark mode or not dark mode turned on on the website. I mean, I love it. This is really a Polish thing. And you can type things like stocks, if you could spell stocks, you could type socks, and you know, come up with all these ways that you could explore them that you could type BA and it'll come and give you these things. And eventually, if you get to the right spot, it doesn't happen on the website, but it'll pop up these extra windows that then like let you explore things with graphs, and so on. So very cool. Let's pull up some of the terminal things here. And look at the features, or the features. So you can instal it through its own installer, you can instal it through Anaconda. Or you can run a Docker image of it to get it to run. So it's sort of summary is Python based, integrated environment for investing research that leverages state of the art data science tools and machine learning technology, then navigate through over 500 different views and functionality. So here's some of the pictures that we can look at. If you go to the product terminal and just scroll down. You can have these really cool graphs of like significant events happening along here and extra information. You can look at basically an Excel View, you can look at 3d volatility sections, you can look it's sentiment analysis here. The bit coin rainbow chart. I don't know how to read rainbow charts. But isn't this an amazing view for something that runs in the terminal?

00:08:32 This is great. That's astonishing. Yeah,

00:08:35 it really is pretty astonishing. And like the things just keep coming and so if you just keep scrolling through this they're stuffed away to like to understand how is the economy doing apply AI predictions to like GDP, and all sorts of wild stuff. So it's this really crazy blend of terminal tui plus pop open a bunch of data science explorations and then being Python. I'm sure you can explore it yourself. My I looked at the requirements file. It's like maxed on requirements in there. But I think it's based on tornado, as far as I can tell. So but and

00:09:14 yeah, good. Will points out it also uses rich.

00:09:18 Yeah, well, it uses

00:09:20 rich, a very cool thing and tested with PI test. So

00:09:23 Oh, my goodness. Yeah, so that's awesome. Anyway, I am super impressed with this. It's an open source project based on Python sort of democratising a lot of these things. And if that wasn't enough, I think here's one more sort of side story that I think is interesting. So I'm sure you too, have seen you go. It's not as common as it used to be, but you go to some open source project or some application and says, buy us a coffee help help make that next feature happen. This one has a different banner at the top of instead of coffee. It says We've just landed our $8.5 million seed funding round and we're about ready to get started. I mean, that's some kind of crushing it for open source isn't Yeah,

00:10:03 definitely. That's a lot of coffee. That is, they're gonna be

00:10:07 so jittery. Just like the stock prices.

00:10:13 Exactly. Look so much fluctuation Oh, no, no, that's just me. It's actually very still,

00:10:17 maybe that's why stocks go up and down.

00:10:21 Too many traders have too much coffee.

00:10:23 Yeah, that's probably actually true. Anyway, I think this is a really cool Python application, it looks well done. And it looks pretty modern. And yeah, it just looks like a neat way to apply some data science to investing.

00:10:35 Do you have a sense of the learning curve? Like is it mainly pointed at directed at investment professionals? Or is there an on ramp for casual use?

00:10:44 When you look at their description, it does seem to be focused on casual, sort of a casual use case here. We only see it says a terminal built by the community shape our tastes that way I see this somewhere that I can't remember where I ran across it. But they do talk about sort of like individual investors getting access to the tools that the companies that the big people at the big banks and hedge funds would have. So it does it does sort of seem to be aimed at that. And my experience is is pretty easy to use. I don't know, it's easy to understand the output, right? That's more of us investing economics problem, though.

00:11:23 That's a perpetual problem. Yeah. Yeah.

00:11:26 Indeed. All right. Well, people can check this out if it sounds interesting to them. Right skin, what do you got for us?

00:11:32 So my first item is pipe project at Kamaal and PEP 621 for Project metadata and property pipe project, got pommel coming to setup tools. So people in Python land are going to be pretty well familiar with pipe Project dot Tamil at this point, you know, originally was the PEP 517 and PEP 518. You know, that created it and, you know, started the basics there. And then you had black doing project configuration in there. And it's kind of been slowly snowballing over the past few years. And one of the big pushes of PEP 621 Who's Who of of Python packaging authors here was trying to standardise project metadata and also standardise it in a way that the metadata could be specified statically. Because that, you know, for things to get uploaded to PI API, if you want to have information about dependencies or various other things like that, if you have the metadata specified statically, it's much easier to get to it's you can trust it more. So the PEP, it's how it's defining how to put project metadata in Pi project at Tonle. How to tell the build tools like build or flit, what is a static defined in declaratively in the metadata and what's dynamic that is going to be provided dynamically later on. And a number of tools had implemented pipe project with humble support. Things like flit hatch PDM, not poetry yet, though they're discussing it, but set up tools was still missing it. It's been an issue on the set of tools GitHub tracker for a while, and with a lot of discussion there about what it would take to bring it in. One of the big appeals of moving to this for setup tool, specifically, there have been the move from to try to bring static metadata in the setup that cfg. But there are some, you know, in the in that discussion, there's some serious problems with the INI format, because it's not structured, it doesn't have good, like complex data type support,

00:13:38 right, nested embedded things don't work. Yeah. You

00:13:41 know, like, there's no ini has no sense of of an array. So if you had to set up that CFG with an array in it, set of tools actually had to take that as a string representation of an array and then can ratify it by executing it basically, instead of the tumble where it actually knows it as a an array in a table. But in any event, Anderson Bramble Harry has just within the last month or so I think it was finished an experimental implementation of PEP 621 Instead of tools. There was a discus thread, seeking feedback from the community try it out report bugs. I tried it on one of my projects, and it mostly worked actually turned up a bug that interesting fix super quickly, where I do dynamic, long description, which turns into the readme for for the PI page.

00:14:35 Do you mean you read it out of a text file or something? Well, so

00:14:38 what I have is I've got documentation links on in my readme that point into like the main branch, but when I do a build to PI API to do a release, I want it to point to an archival version of the docs on read the docs, and so I dynamically do a replace on the docs branch for those links.

00:14:58 will argue a special butterfly I

00:15:01 have complicated needs, it's I'm sorry. But um, you know, so I do have that setup and it broke. And I reported it and he fixed it. So as far as I can tell, you know, it's it may be experimental, and it probably will change, especially some of the issues around specifying dynamic metadata. But it's, it's at least working reasonably. And so, check it, check it out. If you're using setup tools, take a look at switching over to that he made a tool that will that can convert set up that CFG to pi pipe Project dot Tamil, the project is ini to Tamil. And there's some others, check the show notes. I've got a number of things listed there.

00:15:47 Very cool. I suspect that ini to Tamil might be more generally useful. Actually.

00:15:52 I think that's why he titled it that way. Instead of the setup dot CFG to tumble or whatever.

00:15:58 Right. So cool. Yeah, this is great. More progress on the pipe project, that tumble stuff. Definitely. Cool. Now, before we move on, let me tell you all about our sponsor this week, data dog, they've been supporting the show for a really, really long time, they did all this great. They have a real time monitoring platform that unifies metrics, traces and logs into one integrated system. Their APM empowers developers and teams to identify anomalies and resolve issues and improve application performance. So you can begin collecting stack traces and visualising them as flame graphs and organising them into profile types such as CPU or IO types of reports. Teams can search for specific profiles and correlate them into distributed traces and identify slower underperforming code for later analysis and optimization. And with data dogs APM live search, you can perform searches across the full stream of ingest traces of your app over the last 15 minutes. Like I need to figure out what the database is doing and the API and the front end and all those things. So try them for free. With a 14 day free trial and data dog, we'll send you a free T shirt. So just check them out and support the show by visiting Python bytes data, FM slash data dog, or just click the link in your podcast player shownotes to get started. Nice, indeed. All right. All right. Well, what do you got Next, I've

00:17:23 got get so this isn't necessarily Python only related, but But I use get a lot. And I was I didn't know you could do autocorrect with Git. So this is Wayland Walker, he's, I think he's been submitted other things to us on the show. But he wrote this article called configure get to autocorrect your fat fingers, you know, or just just your sloppy typing. So so there's this, like, let's say you do git checkout, Dev, but you spell checkout, CH e k, O UT and misspell it will get will like tell you that you did it wrong. And it guesses what your your what you meant and tells you this is a similar command is this. But there's a configuration option, that option that I didn't know about called to help dot autocorrect that you can set a timeout, and it just automatically runs the command it thinks you want it. So I'm playing with it. And so far, it hasn't got anything wrong. So you can I've set it to one second also. But you can set it to things like 10 seconds or I don't know why you'd want

00:18:31 Did you mean for Did you mean RM dash RF applying?

00:18:35 Just get commands. It's not everything. So

00:18:39 formatting hard drive, so resetting is hard. Oh, yeah, that one actually would be kind of destructive. That was bad.

00:18:48 But I so I realised that I added this to my workflow. But I realised that I hadn't really talked about my workflow at all on my blog. So I went ahead and just showed the things that I do normally for a quick change, I usually check out main do a pull, then create a branch with Checkout dash b, and then a commit, I usually do commit dash a dash m with a message that I want to talk about diesel, that one a little bit, the dash a and then also push because I want that to be faster. So the dash a, what that does is that's the push anyway, I got got these backwards anyway, the dash a will just say instead of having to to stage a file or or add them so normally you have to add your changes and then you commit them. But I I just want to usually just want to commit everything that I've changed or delete it also if I delete something I want that to change. So the dash a does that I just learned about that recently. So

00:19:53 Oh, interesting. So you can basically skip the git add dot Yeah, or something equivalent to that or the git add file name

00:19:59 right? In the ad.is a little dangerous because it'll add everything he unstaged stuff to so if you have temporary files or or just play, you know, you get a test file or a goofy file that you're just playing out with. I don't want to add that stuff I, I intentionally add things that I want or I mean, add, what's the other one, you know, uncommitted things, I don't usually want to have that. So the dash a is nice that it doesn't do that. And then the last thing that I did was the the global, there's another configuration change of global push dot default current. So weird. But what this does is that the, there's a bunch of values for that, I'm going to have a link to the other show notes and the other the documentation about all the values in the show notes, but the I like current because what that says is the branch that I'm using branch name I'm using now, just make that the one on online. So if you are fantast upstream, if you don't do that, it says oh, there's no upstream named this branch. And you have to do this, like, okay, and that you can do it with push, you can do a dash you in push to make it automatically do that. But it's just verbose. And I always wanted to do that. So anyway, that's, that's my new Git workflow for simple stuff.

00:21:19 I love it. Very nice.

00:21:20 Yeah, I really like that, that that current having to do without all that extra typing, even with Autocomplete is just annoying. Yeah.

00:21:27 So

00:21:29 Brian s, it sounds like you get a lot. What's your view of source control from a chemical engineer perspective, like in that ecosystem? And that that environment? How do people view this kind of stuff?

00:21:41 Um, they don't. Basically, I mean, if anyone who's who's familiar with, with the much development probably uses it, some actually, there's a 3d physics modelling multiphysics modelling tool COMSOL, that just added a source control like feature into it. So it's starting to give the the data reproducibility and the history tracking is starting to become more of a thing. But yeah, it's it's very often the, you know, V two V 320 2020.

00:22:14 V three V. Final, final, final final?

00:22:18 Yeah. So I mean, it, you know, I have blog posts churning about strategies for version control on data analysis code, because of the reproducibility and needing to track environments precisely for reproducibility at a point in the past. And, you know, tagging tagging commits for, you know, just like, oh, this, basically, every time I run the code, I need to know what the state of it was. And the tooling is not that great for doing doing that. At least I haven't found much. So yeah, it's still evolving, I think,

00:22:54 indeed. Okay, cool. Alvaro, points out at work, they have a project with 6000 lines of an an ini final that i and i tamo might be just what they need. That sounds like sounds like a lot.

00:23:07 It definitely have to, you have to you have to prove them afterwards. Because you know, there, there may be some stuff that doesn't translate cleanly. But yeah,

00:23:15 yeah, we need a Tamil to ini. And if you can round trip it, and it's the same, then you're good to go. Yeah, that'll work. Keep your sanity. All right. This next one's a quick one for me. But it'd be useful for people who are working with JSON web tokens to JSON Web Tokens are a thing that you can exchange with maybe a distributed login system. So instead of using like an API key that you just pass around all the time, you could say, I'm going to either share certificate or somehow log into some other system. And I'll get back this token that I can share on to other places to communicate who I am, communicate what roles or permissions I should be granted, and so on. So if you work in that world, you work in a world of dealing with cryptographic signatures, and picky algorithms and stuff like that. So I just wanted to give a shout out to JW t.io. So this is a place that allows you to decode, verify, and debug JW. TS is pretty cool. So you come down here. And what you do is you put in some encoded token, and you say which algorithm of the encryption algorithms are using. And then what pops out is the separated JSON result that says here's the header it says what algorithm and what type it is, what version of JW T and so on. And then what the actual data was like, This person is a subscriber, their name is John Doe. Shouldn't scroll because it doesn't seem to work. And then here's like the signature and whether or not the signature was verified, and stuff like that. So I think that's pretty cool. You can hit Share JW T and it'll just copy that. You can send it along. But anyway, I think if If you're working on this stuff, this might be pretty handy. And while you're at it, there's somewhere in here, that libraries, you can say see the JW T libraries. And let me make that smaller ish. So the way it shows it's a little bit weird. It has the technology, and then a whole bunch of checklists. And if you were to go down to the bottom, you can see the actual package name. So like, there's a bunch of dotnet ones here. Don't care about those. But the Python ones are down here and says, who's created them, right, like SEMO source, or Michael Davis. And then this one's called Python, Jose, che W crypto or PI JW shows you which algorithms are supported and how it works, and so on. So I think this is pretty cool. If you're going to work with these things, you'll think

00:25:47 I don't have a lot of expertise with authentication and tokens of this sort. How is this different for someone like macaroons, where it's more like a advanced cookie? Is this separate from the browser or

00:25:59 this, this is done and several ways, I think so you can go like to a federated identity provider. So something like auth, zero or Microsoft Azure Active Directory or something like that. Or you can have your own identity provider from like identity servers, like one of these implementations. And basically, it allows you to do single sign on and federated sign on across different platforms without just taking and using straight cookies. Okay, it works both for API's and for other types of you can do it within an app or with an API. So like, if I call an API, if I log in with me, and I call an API, and I want to communicate on to my identity on to the API's that API is calling. It's like those kinds of sort of more complicated scenarios. Yeah, gotcha. Yeah. Yeah. Anyway, JW t.io, check it out. We got Brian's again.

00:26:58 Okay. For my second item, I'm gonna appreciate the opportunity, Michael and Brian Aachen to do a little bit of self promotion. I have a new project, I'm calling Jupiter 10 fires. So one of the really powerful things about Jupyter Notebooks are great, you can do a whole lot with them. They're obviously being used everywhere, data science, science, scientific analysis. And one of the features of at least the Python kernel of Jupiter is that you have a global namespace that you work in. And this really adds to the power of it in some ways, because everything you do in the notebook flows from one cell to another, you don't have to worry about shuttling things back and forth. But you know, as has come up, you know, countless times here and elsewhere, you have namespace contamination problems, where you accidentally assigned something in one cell, and then you forgot yourself, because either you use something and have a typo, and accidentally use something from another cell, or you something's lingering on, and you have the same variable name and multiple cells, and all of a sudden, your analysis behaves funny, or it's not reproducible, or, you know, you close down for the day and start back up, and the whole worksheet blows up. And so what I've put together is a, it's a notebook extension for Jupiter. It's based upon another library of mine temp RS, which I need to freshen a bit. But this is a it's a front end extension for Jupiter. And so what the underlying library does is you import from 10 VARs, you import the capital temp VARs context manager, then I'll just define a variable here. And then in this cell, I've got a context manager temp VARS. And I declare to it, alright, anything, this syntax says anything that starts with T underscore is gonna be treated as a temporary variable. And so when I run this, the first line is checks to see if T underscore a is in the namespace. And it's not because it's inside of the temporary variables, a context, then I assign it, and indeed, it assigns. And then when I pop out the back end, the previous value five is now restored to it. So what this does is it it makes sure that you don't have contamination coming into the cell, and anything you do in here is reverted to the prior state out the back end. That's us. Yeah, so that's using the underlying library. But what I did is like, you know, okay, fine, it works. But you have to have this whole thing that you type out, and it's cumbersome. So what the the, the Jupiter plugin extension does is it lets you, you can turn on this toolbar for tags for each cell. And then if you define, go, and if you define a tag with this syntax, you can also do a temp VARs end but here temp var start T underscore. Now this variable will automatically be treated as a temporary variable. It's no longer in the namespace when you execute the cell. And what is doing behind the scenes is it's actually taking the code patching the execute functionality for the cell and wrapping it in a temp RS context manager behind the scenes. So that anything you use Send here. Tt underscore is a temporary variable, you don't have to worry about it. Getting contamination from the rest of the namespace. And then just like the other it still there. Yeah. Yeah. So it's brand new 0.1 is out on on pi pi. The README is in order to satisfy the audience here. I have animated GIFs,

00:30:22 those screenshots on a UI tool. I love it. Yeah.

00:30:27 Animated to boot. So readme has the views, it uses instructions, it's on pi pi, just to pip instal Jupiter temp bars, and then I have a shortcut script to actually instal the extension into your Jupiter environment. I have a number of features that could be added to it. Different things that the underlying library could could have added to it. But I'd really love it if anybody who is intrigued would try it out. Finding report bugs suggests features that you want. Because you know, it's a small thing, but it can be a big problem. And if this could be at least a partial or substantial solution for people, that would be awesome. Yeah. Yeah. Nice work. This

00:31:04 looks great. This is a good.

00:31:06 Yeah, the problem of having variables shared across those things when you didn't intend them to be so tricky in so many ways. I mean, Jupiter's or, like, go to Jupiter cells, or like, go to statements with no traceability, right? Because it's, you could run them down, then you could go back and run the one in the middle again, and then you could go run another like, you do have, except for just a little in and out numbering. Like you have no idea the order they ran in.

00:31:32 Yeah, dope. Like hygiene is really tricky. And yeah.

00:31:36 Right. I can I feel like I cut you off, we can see

00:31:38 oh, just he commented that to satisfy us. He's got or the the entire Python community has got animated GIFs. But to be fair, I it's not just technical books and READMEs. I don't use cookbooks that don't have pictures either. So yeah, it sounds good. I do read novels that don't have pictures. But so it's not everything.

00:32:00 I really hate there was the pictures in your head. So

00:32:03 I really hate the graphical novels that don't have pictures.

00:32:07 Those are the worst. They're the worst.

00:32:08 All right, real time follow up Brandon brainer. Former co host here says this is talking about going back to why Jebi jadibooti over something like cookies. So So imagine having something like auto zero when you look maybe at zero, when you log in, it gives you back this JW T, which has a timeout, the front end has this it can send it to your API. And then also it has the signature to the verifies it wasn't tampered with. And you can verify the sender because you can decrypt it and stuff like that.

00:32:40 Okay, better chain of custody. Okay. All that tricky.

00:32:43 Cryptography stuff. Speaking of other things, extra things. Guy's got some extras we should cover.

00:32:52 I have a few, actually some quick ones. All right, bring it on. So we've got GitHub issues are finally live like. So they're there. Their Python issues are now on GitHub. So now we didn't jinx it really, really is there. So Nuff said. I was you know, I've used lorem ipsum. Before, I think everybody doing front end stuff has. But I didn't know there's a there's a cool page like Lorem ipsum.com, that has some a translation. So you can read what it means at least a 1500s, of 1914 translation. So it's sort of an interesting read. I won't get into it here. But it's worth a read if you're curious. And then one of the things we do sometimes at the end is funny stuff. And one of the things we've covered is very various O'Reilly or really covers. So I found this dev to are really cover generator, I didn't know where it was somebody Oh, nice. And you can just make up your own. So I made one up, pass it around last night. So it's kind of a fun thing.

00:34:02 I put I pulled that from the show notes and pass it on to my friends and they've run with it. They're like

00:34:08 whatever sent test coverage unit test with no asserts at least CI is happy.

00:34:13 So anyway, this is awesome. How about you got any extras?

00:34:18 I have a few. No, I your mentioned made me add a third one or another one rather. Let's go here. So hipster if you just need a little more pzazz in that lorem ipsum and you want people asking questions. This is a Hipster Ipsum at hips, hips. some.co is a generator. You can give it your flavour. So you go over here and say like how many paragraphs we only need two paragraphs and hipster neat or you can do with a shot a Latin nice, and it starts out with a baby gentrify Tumblr butcher Crona succulence locos subway tile food truck letterpress tote bag tofu

00:35:06 doesn't flow quite the same as the Latin but it works.

00:35:08 Yeah, exactly. You get the fashion acts and all that. So anyway, that one, that one's kind of fun. More seriously, quick shout out worked with Christos mascus from the Microsoft Identity team speaking of JW Ts, and he and I just put together a course secure API's with fast API and the Microsoft Identity platform. So people can check that out if they want to do DWT and other types of federated identity with fast API. That's a fun course we just launched yesterday. Nice. Excellent, cool. Yeah, thanks. And then a quick shout out. Seth sent over this thing called Python virtual env for Windows sorta ish. And it's this idea to bring some of the pi E and V virtual environment features to Windows. I haven't really played with this. But trying I guess some of the features there for the virtual environments don't work on Windows, but his sort of plugin script does so you can check that out, which I think will be helpful for some people, for the Windows people. And you know, that's that's it for my items. Brian skin. Do you have anything you want to share as well?

00:36:14 Yep, I've got a few quick ones. First of all, as many probably know, Eva stepped down. Julissa Scott stepped down as the executive director of the PSF. Believe it was at the end of last year PSF has found their new Executive Director Deb Nicholson. So congratulate congratulations to all there is so and more generally the PSF is is has been hiring lately. Last year, there was the packaging project manager Shamika Mohan and

00:36:46 there's the and the developer and residents. Absolutely. They also

00:36:50 there was a posting for an infrastructure engineer to assist with the facilities that the link now 404. So maybe they've made their hire I don't know. But the posting was there. Now it's not. And then actually in the steering Council notes released for March, there is beginnings of discussion about hiring a second developer in residence, which would be terrific. So

00:37:14 yeah, it seems like it's been a big success. So getting someone to help look, I shout would be really great. Definitely.

00:37:19 Two more quick things. One pi, Ohio, the regional Ohio conference, the call for proposals is open. It's going to be a fully virtual conference again this year. So anybody who is interested, submit, submit, submit. Nice and then and then one interesting tidbit relevant to you know, we have to talk about Pydantic at least once I think right along with Anthony Shaw and well McGuigan. This was a couple of days ago Samuel Colvin of Pydantic fame posted this somewhat cryptic tweet here, showing over a 10 fold increase in speed for some sort of Pydantic features here. So I don't believe the this has actually dropped yet. This is all I know. But this looks pretty exciting.

00:38:07 The magic magical Pydantic core is coming. Yes. Cool. I have no idea what it is. But very exciting.

00:38:14 But I want one faster.

00:38:18 Maybe it's the Pydantic pony.

00:38:21 The Pydantic Unicorn now that's great. All right, I got no more extras. But I have some jokes. Yay. All right, I think this first one might be from you, Brian skin. Is that right? Yeah, I can't, you want to tell us this joke here

00:38:37 go this way. So it's a riff off of the the various elements of a business enterprise trying to bring a product to a customer, that's what they actually want, you know, with the tree and the swing and the arm chair swing and the swing with no ropes and that this one is more cat directed. And the left panel says product features. And it shows this really nice multi level cat tower with beds and scratching posts, and, you know, very attractive. And on the right, it says user needs and it has a cat peeking up out of a cardboard box.

00:39:10 Exactly. Slightly over designed. Would you say? Oh, just

00:39:14 a bit. And I think there was somebody responded to that there was a tweet lower down saying, this is exactly my life. I have an untouched, you know, cat tree in the corner and all the cat sits in the box. So

00:39:26 this is also true for children. A lot of times the box is the best part. Definitely. Alright, I brought two more for us just because they're both they're all short. And I thought this would be fun. So here's one that says, junior developer. How did you find the bugs so fast? And has a senior developer who has this sort of lion meme? I was there when it was written.

00:39:49 Line which in the wardrobe reference there I think?

00:39:52 I think so. All right. And then this one really, I really appreciate this one. So there's two sort of time lapse Google search. She has pages with text overlaid on it. And it says 831 C++ Hello World 833 alternatives to see of course is complete with a top stand STD colon colon C out less than less than HelloWorld. less than less than standard out colon, colon, Endo, the formal C++ style like as print out or whatever. Yeah. Hello, C++, hello world alternatives to C++. I just leave it with that you guys.

00:40:34 I had one semester C++ in college and I don't miss the compiler errors at all.

00:40:38 Now, yeah, C++ has some some wild stuff happening. So we're working on it somewhat. I did a couple years of professional C++ and it was okay. But a lot a lot of craziness.

00:40:49 Yeah, you don't have to use the crazy parts, though. So with this least in the embedded world we use it's it's C++, but we just selectively use the cool features mostly looks like C.

00:41:03 Yeah, I think C++ is getting a big update as well, isn't it? I think there's

00:41:08 there's regular updates to it. There's so many new things coming on. It was fairly stagnant for like, like decades, and then yeah, in the last 10 years, there's been a lot of new changes.

00:41:20 I feel like I've read people griping that they're making C++ too much like Python or something, adding I don't know exactly what that means. But but

00:41:28 we proposed taking away the semicolons what?

00:41:34 Too much I could definitely get rid of the curly brackets. So

00:41:38 yeah, there's a lot of parentheses when you don't really need them. I O'Brien Aachen, thank you as always, and Brian skin. Thanks for being here.

00:41:47 Thank you. Thanks. Thanks for having me. You bet.

00:41:50 Bye, everyone. Bye bye.

00:41:50 Transcribed by https://otter.ai

 <|endoftext|>
00:00:00 Hello, and welcome to Python bytes where we deliver Python news and headlines directly to your earbuds. This is Episode 228. Recorded April 7 2021. I'm Michael Kennedy. And I'm Brian I can

00:00:12 and I'm Guy rice.

00:00:13 Hey, guy, welcome special guests, guy Roy's here to be part of the show this week.

00:00:18 Thanks for having me.

00:00:18 It's exciting. I

00:00:19 know. That's what they all say. Right.

00:00:22 It's great to have you here, though. You know, we met on a panel at the Python web conference. And we recently had a Calvin Hendricks Parker here from who was organizing that as well. So you know, a little bit a little more Python web conference going on? Yeah,

00:00:37 it was good event.

00:00:38 Absolutely. I want to tell folks a bit about yourself before we jump into the topics.

00:00:41 Yeah, sure. I'm not, you know, you can see my name right here on the screen. But for those listening, the podcast, my name is Guy. Yes, it's my real name, I sometimes get asked if it's a short for something. It's not, in fact, short for guy Follow me. It's actually just my name guy. I work for Redis labs. I'm a developer advocate there. And I've been doing Developer Relations type of work for, you know, been paid to do it for about five years, I've been doing it unpaid as an unpaid, just fan of doing community things for about 10 years on top of that. So a lot of different tech stacks. I'm not really a Python person by trade, I tend to spend more time in the vile, vile JavaScript space. But But I

00:01:22 know they're very popular language these days.

00:01:25 It is. But I know, a lot of different things. I'm a bit of a generalist. So I do think

00:01:31 how do you enjoy being a developer evangelist seems like a really fun job. It's,

00:01:36 well, I like to show if the best thing about being a Developer Advocate is that it lets me monetize my narcissism. But the reality of it is, it's I mean, it's actually a lot more work than you think it is fun. But there's a lot of challenge there. And I spent a lot of my time making contents advocating with the product group for, you know, the ways that we should change Redis and our clients and that kind of stuff. And also going out and speaking in events, this obviously has been a very weird year for that. It has, but you know, that's a lot to balance. It's actually kind of a lot of hats to wear. And there's a degree where we're being a generalist is very useful. Like today, I'm spending a lot of time working on a dotnet course, helping someone out with that, because I've got some dotnet experience, but you know, it's, and but then I'm doing stuff in JavaScript. And then oh, let's look at graph databases. And I'm just looking at

00:02:28 different things. You guys drag to this Python podcast as well.

00:02:30 Yeah. And then someone thinks I know, Python, and put me on this podcast, you got a couple of good items to talk about,

00:02:35 I think. All right, well, cool. Welcome, Brian, want to kick us off here?

00:02:41 I can't believe it's already March, April, I was gonna sit sorry,

00:02:44 for March, and it's actually blown out. So.

00:02:48 So here's a article called the how to make awesome Python package how to make an awesome like Python package in 2021. And this is, um, I really love this article, because it's kind of my workflow. I've just never written it down. And so I'm really grateful for Anton for writing it down. I'm also grateful to john Michell on Twitter to post that to so that I could see it. So it's great. I really love it. Anyway. Well, so what is this, it isn't about how to make an awesome package, it's all of the extra stuff is the workflow. So we he starts in, he starts just like at the basics, just stubbing a package. And I really, actually really liked it. This is this is where you start. So the start was in using just grabbing a directory and stubbing it out, and then having an Dunder init file, and in an initial file that just does like has one function you can call just so that it's something there. And it actually throws a not not implemented yet. exception, which is, that's a great thing to throw, right? And then pardon the birds. I didn't even

00:03:58 record it from Hawaii. So it's fine.

00:04:01 Yeah, he's got a virtual background to make it look more more mundane tropical birds.

00:04:05 Yeah. So then using flit to, to package it up, and then go ahead and publish or not published for real published to the test by PII repository, which I love this workflow, if you're gonna plan on sharing something, just go ahead and do this right away. The one thing missing there is go ahead and check the real peipsi to make sure your project name isn't taken already, or else the test might work, but your real one won't. So adding that in is a good step. But then

00:04:36 I was blown away at some of the Python packages that are still available, like secure, right? I mean, that's not available now. But there was a thing that got to just call it call itself secure. Like a couple years ago, how is that still a thing right? Oh my god.

00:04:50 Yeah. So one of the one of the tricks with doing the test pi pi though, is getting your is getting the pi pi RC correct. So He talks about how to do that. And then publishing using flip publish. And then, you know, adding, adding more detail like, now you actually have to implement so an implementation of something and then push it to the real repository. And then, you know, then everything else is like extras. And he lists them as dependencies almost like adding a readme in the change log in. And then, you know, linters, and tests, testing, you should maybe test earlier than this, but setting up talks and make files and cloud building and the whole gamut. This is a really great, comprehensive article. And you can, what I like is you can start at the beginning. And if you're not even publishing publicly, if you're just publishing in house, this still makes sense up to up to a certain point. So this is great. Yeah, we

00:05:49 think really good advice. I love having a well structured projects. Where, yeah, if I have a problem where there's something I want to do I know right where to go, I don't need to go through all the coders like, here's the 50 lines of code that could possibly be about this. Let me go find it and get started. Guy. What do

00:06:04 I this is? I like that it's an awesome Python package. And it's not about the contents, it's about the stuff around it. Right? This is the kind of stuff that is just noobs need this? Right? Yeah, it's just these. These are exactly the sorts of resources like the finest the here's the canonical way to do this thing. Well,

00:06:21 right. And a lot of times the tutorials are like, well create the one file. And that's what you do. Go and that I feel like that kind of leads people down the wrong path a lot of times, so yeah, love it. All right. Well, I think I got the next one here, Brian. Okay. Cube Stryker, as in Kubernetes. So this is a security tool for anyone who is running or being a tenant on a Kubernetes cluster. But it's really fast way to audit an existing Kubernetes clusters or best practices. And like all beautiful repositories, it has an animated gift. So you don't have to read anything. You just watch it for a while, like, Oh, this is what it does. That's kind of cool. Maybe I'll use this. Yes, we love those who

00:07:01 are listening. There's an animated GIF on the screen right now.

00:07:04 That's right. Absolutely.

00:07:05 You should totally see it. It's amazing.

00:07:08 Yeah, guy. I mean, sometimes we cover they'll be like UI frameworks, like, Oh, we built this whole UI framework, we do this thing. And there's like, no screenshot or no way to see that what it looks like, well, if it's about the UI, we should probably see some pictures. So Brian and I are always on a bit of a kick about this. Yeah, yeah. So performs a bunch of in depth analysis on self hosted Kubernetes on Amazon, Eks, Azure Eks. A suspect pretty much you name it, the Eks. It'll do it. Let's see if I can find where it talks about the things that it does. Yeah. So it scans your infrastructure. Like I said, it checks for various services and open ports tells you that they should or shouldn't be open. It looks for insecure things, or readwrite. Or you can even set it up to be read only. And it can check. You know, give it like lower permissions. And it'll still do that. It'll look for misconfigured I am settings identity from Azure, sorry, AWS, misconfigured containers, pod security policies, network policies, and extra privileges, all that kind of stuff. So running containers is pretty easy. Running containers in Kubernetes is pretty easy running a Kubernetes cluster. Not easy. There's a lot going on if you're the one running the Kubernetes cluster. And so here's a really nice tool that you just point at your cluster and say, How am I doing? Right? Give it a quick check to see if anything's wrong. Yeah, thanks, you guys a guy you do anything with Kubernetes or Docker or things like that.

00:08:34 I do basic developer things that developers tend to do with Docker. containerization isn't necessarily my jam. I mean, you know, I certainly will spin up a Redis instance, for example, using Docker or something like that, because it's super convenient. But beyond using some basic Docker compose, I don't do much of anything.

00:08:51 Yeah, same. Same here. I feel like every time I start to work with it, I go, this is really neat. But it feels like I'm just moving code complexity to DevOps complexity. And I'm better at code that I'm at DevOps. So let me not do that.

00:09:02 But you got to write it down somewhere, right? At the end of the day,

00:09:06 exactly, exactly. Alright, so guy, you got this next one here. This is something I'm pretty excited about. I'm a big fan of possibility of web assembly. Sounds like you are as well.

00:09:17 Yeah, I'm an enormous fan of web assembly. And I mean, there's a couple of reasons for that. Some of it is that it kind of reminds me of the early days, like, like in the 80s. When I was learning programming, I got into 6502 assembly language. So that low level, machine level coding has got a, it's got a nostalgic joy to it. And so webassembly has drawn me in if you don't know much about webassembly, just just put context around it. webassembly is byte code for the browser. That's where it started. The idea is, is you can take some code, write it in C or rust or some higher level compiled language. And then you get a bunch of bytecode a binary file that can be downloaded and run from the browser. So that's webassembly in 30 seconds.

00:09:58 Yeah. People have been Done really crazy stuff with things like astm.js, where they're like, oh, let's take some code and send it over to some fancy JavaScript that then will compile it in Java. And there's just all this wild stuff that you can do. And it's really, really impressive. But this is like, you know, if you're gonna do that, let's make this an actual thing that's actually expected to be this runtime, this low level runtime it Yeah, it's

00:10:21 cool. Well, and it turns out, it's actually a lot more performant to, I mean, I've seen benchmark, say, as much as 20%, faster, all the way up to 20 times faster. But regardless, they always say faster, which is good.

00:10:33 And smile are probably coming down as binary bits and probably loads faster, doesn't have to get it. Yeah, it gets there.

00:10:38 Well, and it's, it's just another file that can be served from the file server. So or from the web server, so it can be cached and all the other things that you would do with any web content. So lots of advantages and optimizations to be had.

00:10:49 Right? So what's the thing that you're you're telling, so

00:10:52 some time, he says, Hey, we built this bytecode for the browser 1000 Times said, you know, what, if we put the bytecode wherever we wanted, and instead, so in much the way that node brought JavaScript to the server side, wasn't trying, why sometime brings webassembly to the server side by adding IO capabilities. And by adding a command line tool that can run it by adding runtimes that you can load up in other languages. So why hasn't time is simple as this as you've got a web assembly module, and you say, Why hasn't timespace in that module on the command line? And it just runs it? And does whatever it does.

00:11:29 And there's different languages supported, right?

00:11:31 Right. So and this isn't language support from a take that language and compile to webassembly. This is take webassembly modules and run it in those environments. So in rust, Python, go dotnet. And in C, although it's not listed here on the screen, there are runtimes that you can load up, load webassembly module from whatever you know, read it from the file system, read it out of whatever, right and instantiate that web assembly module and run it. And so

00:11:58 yeah, so if I found like a cool library, it happened to be written in rust, and it has a web assembly version, I could then use that in Python.

00:12:05 Absolutely. I've ever, I've actually done a web assembly text format, which is the assembly language to go with web assembly. I've used that to compile simple modules to just like add numbers and stuff like that, and then loaded that up from Python code. And I actually even run it inside of Redis. But yeah, so now all of a sudden, it brings that those compiled chunks of code that that are really just data, you can hand them around any way you want, and bring them into all these different platforms. That's pretty cool.

00:12:36 Yeah, this is really neat. Brian, what do you think

00:12:38 I'm just the the, the intermediate part to where you can, you can have a group of people like even if it's not some third party packages, just within one company that can write in whatever language they want to write in, and then have an intermediate language that you can, you can glue it all together, down the pipeline. I think that just makes people more efficient. I'd like to see that that sort of take off. I think it's a neat, neat place to go.

00:13:03 Yeah, guy could I use this to say if I had like a dotnet library, a go library and a rust library? And I was writing in Python? Can I bring those all together to interoperate with this thing?

00:13:13 In theory, I mean, there's a lot of a lot of work involved to do that. And there are limitations out of the box web assembly, just like out of the box JavaScript didn't have any kind of IO, because you don't need IO in a browser, you have fetch right you know, that's that's all the IO you get. webassembly is the same way. But webisode at some time is support sports to the Lassie standard. All these things start with W, they're actually kind of hard to say. And what you see is the web assembly systems interface, which gives you file IO and will eventually give us network IO. Right now it will support reading and writing sockets, but it won't support opening a socket. Listen. So that's frustrating.

00:13:57 That extra ability, though, that actually kind of scares me a little bit. And then I'm concerned about the security part, since you're grabbing some binary blob, or it says a sim webassembly. blob is still not human readable. Right? So how do I know it's not going to be a virus or something like that? Yeah, that's,

00:14:14 that's actually totally legitimate concern. It's, it's honestly echoes the same concerns that we had with Node. js, when it first came out. It's like, cuz, cuz in the browser, it's all nice and neat. And sandbox, right? Yeah. And as soon as JavaScript escapes the browser and got under your server side ever, it's like, well, we can pull JavaScript code and call eval on it from anywhere, like, Well, yeah, you could. And so it's the same. I think we end up in the same situation where it's got the same caveats once we go there. You know, you know, I guess the advice is don't run strange code. Right? Yeah. But these are particularly like a JavaScript. You can look at it and say, you know, I see what's going here and I suppose if it's minified, that's not that easy, but it was WebAssign It's actually just bytes is even harder. It's even more opaque. Yeah,

00:15:03 yeah, there's so much stuff going on the supply chain space now. Right. ipi there was the bhp itself got a backdoor put into it, but luckily never got into any other releases. But yeah, I mean, it's a good concern, Brian are a valid, certainly it is still good. Yeah, absolutely. You know what else is cool, Brian, this episode is brought to you by you and me this time. So the cool things we're doing, I wanted to tell people, if they want to take some Python courses, they can check out talk python.fm and just click on courses. And we got a bunch of new ones and a batch release a brand new free course that people will be able to check out as well, probably I'll be able to talk about that next time. But it's on the data science side. That'll be a lot of fun. And then people want to test things. They should probably test it with PI tests, so they can check out your book as well.

00:15:51 Yeah, that'd be great.

00:15:53 sponsors. Thanks.

00:15:56 Yeah. And I can't wait to get back to conferences. So I get back to handing out stickers and stuff that was sort of in great. Yeah, I

00:16:02 know. Matching that with other people. So crazy.

00:16:05 Yeah, I am into myself, but you know,

00:16:09 I'm a risk of becoming agoraphobic at this point. Yeah. Yeah, I'm fully

00:16:14 so I wanted to talk about something cool that Anthony shot put together. So he, I just saw about this. I think he don't you use dependent but, um,

00:16:25 I Oh, yeah. My, my Monday morning means go in and like close 20 prs, and about four of them are conflicting with dependable. Were dependable was the other PR that also did the PR that conflict with? So yeah, I've got this special relationship. But I'm still very glad to have it there. Because it's fantastic to know there's a security problem for this thing, fix it now. That's really good to know.

00:16:47 Yeah. So okay, so I probably have a bad one to introduce the dependent bot side. So this is we're actually talking about bit depend a lot. But But depend a bot, if people haven't heard it, like the 90 times we've talked about it. It tells me what it does, it goes out and checks to

00:17:05 know it looks at it even supports different languages, the Python world that means if it sees a requirements dot txt, or it sees like pi project.com, or whatever, it will look in there for pinned versions, if they're not pinned, it will pin it to the current version, and then submit that change to the requirements, that txt is a PR. If they are there, and it sees there's a new version of that library, it will do a PR and in the PR, it'll say things like, here's the change log and all the commits, since the last time you use this library, here's the release notes around this library, click this button to apply the new, you know, upgrade you're pinning. So you know, requests equal equal something higher than it is currently, automatically to your system. So that's the job depend about the thing, the complaint is that if I've got a requirements, txt file with 30 packages in it, I am 10 of them change I get 10 prs instead of one PR with 10 changes, add. Okay,

00:18:03 yeah, well, just

00:18:04 like with each other, because they're like all like right by each other. And like, as you accept them, they start to like get merge requests, you got to merge conflicts you got to resolve and anyway, that's, that's this deal. But that's what it is.

00:18:15 So this depends a lot bot is a bot that looks at all of this, and decides and you create a list to say some of my dependencies can be automatically figured out. And then like, say talks, so you're not you're using talks, but it you're not really using it, you're using it to test and stuff, you're not using it for everything. So like, that's an example, and the dependent a lot. But make sure that the PR request from depend upon if it passes the tests, it goes ahead and merges it to that's really all it does. And I think that's cool, too, just because that's what I would do if, if I got one of those PR requests, I would make sure it all works fine. And then probably in some of them, I would probably just push through if I trust the where it comes from and stuff. So

00:19:05 yeah, exactly. It's a well known package, and chances are, it's gonna be fine, right, like bodoh, from AWS. Or it's fine to take it.

00:19:12 Yeah, and especially the tools around your project or or your, you're only using a little part of something, as long as your test pass, it's probably gonna be fine. Things like updating Django, you may want to have some more manual procedures for that. But something something some minor thing, like I'm only using, you know, a fraction of a package, go ahead and update it and see if the test passes.

00:19:35 Yeah, exactly. I totally agree. Guys, one space has more dependencies than Python. It's got to be JavaScript.

00:19:42 Got the truth? Yeah, you know, my interaction would depend on the vast majority of my repos online, our sample codes to go with talks and videos and that kind of stuff. And I always get dependable notifications for Hey, this project that you did a year and a half ago that you forgot about it That tends to be my interaction with the pen devart I can see how something like this would be very useful. I don't know that. I don't know. It might be something I could use to just have to think about those old packages anymore. That seems like this could be really helpful. Yeah, I do like that the guys the deal developers name is Tony baloney. That's a fantastic username, by the way. Yeah, he's

00:20:18 been on the show. He's a great friend the show.

00:20:21 Yeah. I've never met him. I just think that's really funny. Kudos.

00:20:26 Yeah, like it's really cool. I want to check this I'm definitely think I'm putting this

00:20:30 putting this up. probably do it. Like, for example, things like talks and pi test, and my testing tools and linters and stuff like that. I definitely want to just update those like, and try. And if it doesn't, if I'm always going to update those if there if there's a new one in it, and everything passes.

00:20:48 Yeah, let's roll it back then work. Yeah. And tangentially related Dean out there says you can't seem to be able to pip install dash e dot bracket extra. But then he quickly posted his own little fix that Oh, in z shell, you got to escape the brackets? No one else there's trying to do that. That's great. But yeah, well done on this, Tony. Anthony, this is really, this could be a dream. If this works, the way I see it working, I will be so happy my Mondays won't be like, Well, here's the next hour merging prs and resolving its own self conflicts. So I'm excited. Very cool. All right. Well, what is the next one, I want to take us a little bit like take a step back just a little bit from low level tech and talk about the Supreme Court of the United States. Brian, I want to talk about this too. I also want to take you back to the early 2000s. I mean, this is like early days in my programming career, honestly. But here we are with a ruling about something that happened in the early 2000s. And what it is, is that way, way back, son created Java, Google with a career I actually whoever created Android, I think before Google bought them created Android and said, you know, it'd be cool if we could program this with Java, and use the API of Java. So the common ways to like write files and open sockets, all that kind of stuff, just make it exactly what the the Java Runtime libraries do. But they did not actually take Java, they actually re implemented it from scratch. So none of the runtime details had anything to do with Java. But the API the way you talk to, it looked just like the Java base class library library. So Oracle buys Java. Oracle thinks that's not super cool. We weren't part of that action, sues Google for copyright infringement by using the Java API's. And so then this throws a huge uncertainty into the space of basically all these libraries, right? What if, what if I want to create a new way web framework, and the way it works is a little bit like flask, but it turns out that flask copyrighted, you know, the way it uses decorators, you know, app dot route or whatever, and then I get sued. That seems that seems weird, right? Yeah. So does that mean that he's a good guy?

00:23:01 So does this mean that this ruling mean that you can't copyright an interface? In essence?

00:23:06 Yes. Well, the rulings interesting because it didn't actually address the copyright ability of API's, they said, potentially, they still could be copyrighted. But the use of the API as I described it, in the beginning of like, this is the way you talk to it, not the implementation, but the way you speak to the thing. They said that that is fair use. So when things are copyrighted, you're allowed to speak about them in limited ways. You're not allowed to take a movie and publish it. Yeah, republish it, but you're allowed to take a scene of it and analyze it and, and maybe have that soundtrack, that 32nd soundtrack or something like that, right. So that'd be fair use. And so they said, the way in which they're using API's is like fair use, and they, they talked about the knowledge, having a thing, you might copyright the thing, but having knowledge how to operate the thing that you can't copyright. So like knowing how to drive a car, you can't copyright that. And so having the API without the implementation is kind of like the knowledge of how to operate the thing that the API goes to. But the API itself is fair use, which is pretty interesting. So I guess this just sort of put the bow on it is, the Supreme Court ruled that Oracle's suit is dismissed, they cannot sue Google. And it stopped actually, a huge wave of lawsuits over followed around all sorts of different things for all different sorts of people. So I think I'm happy with this.

00:24:29 I think I am to actually, I mean, if I, if I were to sum up everything I just heard, what I heard is reverse engineering is fair use.

00:24:36 Yes, that sounds about right,

00:24:38 and so forth, just like the the Twitter version of this ruling.

00:24:42 You know, the example that came to mind for me and it this is a thing, like this exact example, that was the lawsuit, it seems really clear to me that it shouldn't really, I don't think that should be a thing. But on the other hand, you know, AWS was hosting, like reselling the open source free of MongoDB as a service, without paying any money to the MongoDB folks who actually created it maintained it, they change their license. And so what AWS did was kept the API for MongoDB identical, but reimplemented, the database server in their own version, I feel like that's a real interesting example that's a little more close to the edge. It's like, Well, here's an open source project that built something neat. Here's somebody who was literally running it, and taking profits off of it. Exactly. And then then they sort of changed it to this mode. And it now it's okay. And I think it probably is okay. Although I feel like Redis could get itself into the same situation, probably, unless the license already explicitly says that you can't do that.

00:25:44 The only module, the only licenses we have this specifically explicit that are the ones for the modules which extended extend, extend Redis Redis, itself is open source, and so on. And does have an implementation of Redis that they sell.

00:25:58 Okay, yeah. Towel out there in the live stream says, you know, another example would be AWS, AWS could sue all the other places like linode and digitalocean. and stuff that offer s3 compatible storage. That's such a good point. Yeah, right. Like they both both linode and digitalocean, have something that's like, like s3, and you literally can talk to with a Boto three, API, because it on the surface it is s3. And so there's another example of something that is spared being destroyed.

00:26:30 Yeah, in the courts, okay, hope this holds up. I really want API's to be something that you can't copyright this,

00:26:37 I think this is it. I think this is it. I mean, this, it, actually Google one, and then it was overturned by a higher court and a Google one again, that was overturned by a hardcore and it like, literally worked his way all the way to the Supreme Court. And then this is it. And the Supreme Court operates so much on Brett appriver, prior rulings and precedent and stuff, and that it's very unlikely that it could be changed at this point.

00:27:01 And the entire, the entire like story of Java is just riddled with these gross lawsuits. And it's just, I just have to shake my head about it. It really would be nice if it had a nicer history, I think people would be, you know, trashing Java a lot less at this point. But

00:27:19 yeah, we come up with other reasons, it wouldn't be a problem.

00:27:23 Ben Thompson from strategic theory had a really interesting analysis. taking apart what the Supreme Court said, one of the things they focused on was the, the meaning and the essence of copyrights, like the reason to have copyrights is so that somebody might invest 10 years in something that could easily be copied, copied, but doesn't yet exist and had sort of drive innovation. And they talked a lot about the Supreme Court talked about, does this application of copyright actually benefit or restrict innovation? And it was interesting that they were actually thinking in those terms, not just like, well, what is the legal definition of copyright, but they're like this would be very harmful to so many people if it went the other way. So we got to consider that as well. And let's see Dean Dean says, So Java lost this close case. I guess the case is now public static void

00:28:09 is final.

00:28:11 Yeah. Exactly. Exactly.

00:28:16 Cool. are apparently right now the Supreme Court factory, so you know,

00:28:20 yeah, yeah, we've got an ice Supreme Court and the Supreme Court factory generates ice Supreme Court implementations. And we got a Supreme Court

00:28:28 guy, every manager. Yeah. Gosh, yeah, that's

00:28:31 a no, I don't know. That's, that's too far too far down.

00:28:36 The bridge too far, isn't it? Yeah,

00:28:38 it definitely is. Alright, guy, you got the last word here? And I'm not sure I pulled it up. Like make sure I got it pulled up. Here we go. Yeah. So you already talked about how you work for Redis. and machine learning is absolutely front and center in the Python world. And you guys are doing some interesting stuff there. You wanna tell us about it?

00:28:58 Yeah. So I sort of mentioned this earlier. But it's kind of good segue is Redis has modules, which are, you know, things you can use. They're like plugins to extend what Redis can do so you can use like a module, this graph database. And so now, boom, we got new, some new types and some new functionality. We can do graph databases, or time series or whatever. And one of the modules of this Redis lab, and this is part of Redis. A standard, anyone can create a module in any way, there are lots of open source ones out there. Redis labs has a few that we've created. One of those is red, Sai and red Sai turns reticent to a model server. The idea is that I can take the binary output of a model in there's TensorFlow, or whether it's pie torch, or whether it's an onyx model. And for those who don't know what onyx is, it's the open neural network exchange, which is a standard Microsoft put together for models. So sort of like a universal model standard. Then just like in an S in XKCD. It's like there's too many standards. We need a new one to bring He's all together. onyx has created yet another standard.

00:30:04 Yeah, exactly.

00:30:05 So it's just what always happens, right? But Retta supports those three model types. So you can take an onyx model, for example, and load it into Redis. And then you can use Redis commands to, to execute that model. And so it provides a nice little abstraction. And the thing that's cool here, I think, is that normally, if you want to bring AI into your application, as a developer, you have the data science team, they build, they do their thing, they build their models, and you get these binary files out. And then you need to bring them into your application some way. And there's a few ways to do that, right, you can, you can just wrap it up in a in a, you can containerize it and make a little flask app around it, which is a really common solution. There are other model servers, you can just put it right in your application, but then you have to use Python, which is well, not a terrible problem can sometimes be a problem.

00:30:51 Not using Python, you may see it as like, wait a minute, this is gonna be a big change.

00:30:55 And so the thing that gets me excited about Redis AI, which is kind of not the thing that gets my bosses excited, but it's the thing that gets me excited, is that because we support onyx, the data science team can build their model and convert it to onyx. And they sort of have a universal standard. So they can pick whatever techstack they want. As long as I can spout out onyx model, and then Redis Redis being Redis. It's got a client for every language under the sun. So if you're, you know, using Haskell, for example, you know, if there's a Redis client for I don't know that there's a Redis client for Haskell, but there is, its odds are there is then you can get to that model from whatever language you're at, regardless of what that data science, you know how amenable to data science tooling, that platform is, and so it creates a nice architectural layer of abstraction. So that's actually why I think it's kind of cool about Redis. AI. It just provides that it that that abstraction that makes the developers and the data science folks both not have to well speak the same language in a lot of ways.

00:31:53 Yeah, that that's really neat. And it sounds to me a lot like what HTTP API's did previously, right? And if you wanted to talk and talk to somebody, instead of directly plugging in that library, or exchanging some binary data you like, Alright, everybody's gonna just agree on JSON. Why didn't they agree on dates, but come on. Other than that, it's working out just fine. We're just gonna exchange this. And that'll be the way we can talk to it. And nobody worries about what language you're using to consume that API. It's like, that's your problem. Hopefully, your language has a nice way to do that. Yeah,

00:32:24 it's, it's just one more thing. The other thing it does, which I think is kind of interesting, is that it introduces a new data type. So the models as inputs and outputs take tensors, they put in a couple tensors as input to your model, or one or however many you need, and then your output will be whatever tensors make sense. And, and the tensor is just to, you know, I think I think the word cancer is, I'm gonna say pretentious. I'm probably gonna anger a lot of people by saying that, but because really what a tensor is, in practical terms, is just a multi dimensional array, right? You know, you got a tensor that's got a particular shape, it's just like, well, this is an array that's 10 by five by three. And it's, it's, that's all a tensor is. And so it sounds all mystical, but it's really just a multi dimensional array that's been handed in. But because tensors tend to be the things that are put into and taken out of machine learning models, read Sai has a tensor data type. And so you could use that capability in Redis, as well, if you needed to store multi dimensional arrays in Redis. You've got a type that does that now. And so even if you didn't care about the data science, the the, the predictive capabilities that model hosting, that's the word I'm looking for in Redis. API, you can still use the tensors for various data storage, Jesus.

00:33:37 Yeah. So yeah. Okay. Interesting. Yeah. So you kind of hijack the data type as well. Yeah. So yeah, this looks really interesting. I think it's, yeah, people should check it out if they're doing machine learning and sharing their models across different technologies or processes.

00:33:50 Yes, I'm excited about her.

00:33:53 I'm excited because I use multi dimensional arrays. And now I can call myself a data scientist.

00:33:58 That's right. Yeah.

00:34:02 Awesome. All right. quick follow up. Before we get to the extras in the joke.

00:34:06 I'm more of more of a mad data scientist. Yeah.

00:34:11 You know, army captain says Sorry, I'm late, doesn't depend on optionally auto merge. If ci passes, yes, but you got to have ci running on that project. And so like, if you've got, like, I have a 3040 repositories that have courses, I don't set up ci for the courses like what does it even mean to have ci for the courses, but I get dependent bought stuff all the time on that, because, you know, it's checking the repository for the requirements file. So you know, sometimes you can't get it auto merge. But, you know, there's certainly circumstances where it doesn't if it would just put it in one PR. Here's the 10 changes like I put that actually as an issue on the dependent bought itself and people voted at common are like yes, this please. Apparently not yet. Anyway, any what the Anthony's done is pretty excellent. Hi, Brian. That's it for all of our main items, right unless I lost track.

00:35:00 Yeah,

00:35:00 got any extras you want to throw out there?

00:35:02 Don't I just been working a lot

00:35:05 about you got extras, I got plenty. So recently did a cool episode over on talk Python about diving into the get the dot Git folder. And like all the internals of what Git does there, and one of those pieces mean if you want to go in there and look and see how basically understand how Git itself works, and then all the storage stuff, like how they all come together. And one of the things that got a nice shout out there is Git for Windows at Git for Windows org. There's like a special version to install for Git. I think this actually might have come from Chris Moffitt, even some sort of follow on conversation or something. But wherever it came from, if you're doing Windows you want to still get this is kind of a cool way to do it as well. If you're not doing something like chocolaty,

00:35:42 I use it every day. And it gets on Windows. Yeah, it's a requirement.

00:35:46 Yeah. Nice, very cool. Jupiter lab three is released. So this one comes to us from Alan Hansen. And Thanks for pointing this out. It's a little bit, a little bit old couple, couple months, but still very cool that Jupiter lab three is out, you can check it out and see all the new changes that come along, including a debugger. debugger, how about that? table of contents, multiple languages, all sorts of cool stuff. So this looks like a major release. And if people who love Jupiter labs, check it out on code spy charm? Yeah, that's right. It's, it's on its way. And speaking of pi charm, I've got someone that Brian skin also did a follow up to the previous episode, maybe the one before that, where we were talking about, like, you know, really, it's great that I think this is when we had Sebastian Ramirez on and we were talking about Google becoming a visionary sponsor of Python, which is great. And it's really cool that a couple of companies have done that. But then we also pointed out that, you know, Bank of America has like insane amounts of stuff that they depend upon. JPMorgan Chase, their core trading engine, some of it is all by like, some of these companies that make huge amounts of money, and fundamentally depend upon Python itself, generally don't support by that. I mean, I don't know to the degree to which those two companies do, but you don't see them at the top of those sponsorship lists. And you know, like, Google's was something like $300,000 a year. That's the biggest corporate sponsor in the world, right? Can we do more to Brian skin said, Hey, I wrote a letter for people. And he shared it, where it just said his beer recipient, given the appreciable business value that we derived from Python, and its related scientific tooling over the last few years, at no direct cost to the company, will there be room for bracket company to contribute to financial aid to the 501 C, three organizations that support these tools? Here's a list. Here's how I basically wrote like, a template letter that you can send to your company, decision makers, to encourage them to support Python and other open source projects. Yeah, this is great, though. Well, then Brian, that's pretty cool. Alright, Django, three, long term support releases out. So if you're on a slow roll with Jango, you're ready to roll on the new version. So this is something you can safely adopt for the next three years. And and stay happy but on a brand new version of Django. So check that out. Pi charm, here you go guy told you would come out by charm. 20 21.1 is out. And they've got some really cool stuff in here. Really neat things, including the code with me stuff is now out. So code with me is I fire up pi charm, or any of the IntelliJ based things and I say, Hey, I would like to say program with Brian, Brian, could you help me work on the Python bytes website. So I could send you a link. And we would both have like, like Google Docs. But in Python, like where we see each other typing, we can follow each other along. You can debug the code, but it's running on my machine, for example, even as voice call video call built into Python alongside that,

00:38:48 really, it's like a Skype client, or you know,

00:38:50 it actually looks like Skype. I couldn't be sure, because I haven't tried it yet. But I looked at the UI that you get. It's like a little inner panel. It looks like an embedded Skype. Interesting. Yeah, yeah. I Well, those are all the extra things for me as well.

00:39:03 Well, I wanted to bring up so he reminded me of that the Google fund thing that when adding, you know, Google give PSF a bunch of money. Well, what the PSF is doing with it is they're hiring a developer. So nice. I'll drop the link. So psfc hiring a developer and residents to support to support c Python. So this is a good thing. Yeah.

00:39:25 Awesome. That's really cool. Ding langsam also says pi con. I L is in a month, so yep. Awesome. Check that out. And then he also asked about what about the in browser pi charm, which we did cover but that was it's of course, kind of experimental phase. I would definitely if possible, recommend this code with me thing over that because then you get the real pi charm. It just happens to be like this live exchange was the other one. There's a lot of setup and whatnot. And it had the this is a private, not necessary, private, but this isn't a beta don't depend on it sort of way. But this is officially this other thing is released. Got anything else you want to throw out there for the world for the listeners while you're here?

00:40:04 That really comes to mind. But thanks. Thanks for having me. I see our schedule. We have a joke coming next. Is that true?

00:40:10 We we do have a joke coming next. We actually have to I believe I'm gonna fire up mine first. This one I have

00:40:16 a job as well. If you if you don't mind. Don't worry safe.

00:40:19 Yeah. Perfect. All right. So Brian, you're a fan of him, right? Yes. Okay. So Anthony Shah same Anthony Shah as the depend a lot, but we were just talking about wrote a little one liner that fits nicely in Twitter, vim, colon, the original escape room.

00:40:38 That's an old joke.

00:40:40 I love it, though. I love it. And of course, you put it on April 1, because you got to do something funny then. Right?

00:40:45 Yeah.

00:40:45 And how about you got one here?

00:40:47 Oh, yeah, it was just added. So this this this is? So the the ancient software development stands for happiness.

00:41:00 sighs Yeah. Dean also just wants to point out that i l Israel, which I did think that was but I wasn't 100% Sure. So I

00:41:09 wasn't sure what that was Israel or Illinois.

00:41:11 Yeah. Israel. Perfect. I would love to go there, but probably not traveling right now.

00:41:16 I want to go there eventually. That's actually where Redis Labs is headquartered.

00:41:19 So Oh, is it interesting. I've had some really great vacations in Tel Aviv hanging on the beach. I can't wait to get back.

00:41:25 I gotta say we're excited to go to Illinois.

00:41:29 Yes, you know, Chicago would be nice. Maybe?

00:41:32 Yeah.

00:41:33 I just can't wait to get to Peoria. Yeah. Well,

00:41:37 I actually, actually, I've spent a lot of time in Peoria. Yeah. But I've probably hit my lifetime limit. I don't need to go. I wouldn't take a vacation is a nice place, but I wouldn't travel too.

00:41:48 Yeah. So so my joke is, well, it's for you. What's a what be a pirate's favorite programming language?

00:41:57 hybrids? Favorite programming language?

00:41:59 c da, you ruined it. So that the light supposed to go is I say what would be a pirate's favorite programming language? And you both in simultaneously go are? are right, because? Yeah, and then and then the response for me is I you might think it'd be rmat. But as first love B to C, and

00:42:24 the audience's calling

00:42:29 works great live, because you know, you get an audience that they'll shout back the answer. Yeah. Because they just can't help themselves. And then you you surprise them with the the twist

00:42:39 was a trick question because ours is not a programming language.

00:42:47 Well, it's been nice talking to you, Brian. I saw what I would want to work in honestly, it's I mean, I know it's popular was popular in data science stack. But it's, it's, I mean, it's got one based arrays. I mean that that's right up there with BB six.

00:43:06 I've never even tried it. I just I haven't made anybody mad today. So I need to fill my quota.

00:43:12 It doesn't have like web clients and stuff like that. So you can build web servers. It's the full fledged language, but I've never done anything more than attend a one hour talk on language.

00:43:21 Yeah. Yeah, I haven't either. All right. Well, guys, thanks so much for being here with us and Brian, as always great to

00:43:28 get to talk.

00:43:29 Thanks for having me.

00:43:31 Thanks. Thanks, everyone, the live stream as well.

00:43:33 Bye. I'll see ya.

 <|endoftext|>
Python Bytes Transcript
Episode #16: Postmodern Python and Open-Source Financial Awards
Michael KENNEDY: This is Python Bytes, Python headlines and news delivered directly to your earbuds. This is Episode #16, recorded on March 6, 2017.  This is your host, Michael Kennedy, here with my co-host, Brian Okken. 
Hey, Brian.
Brian OKKEN: Hello.
KENNEDY: I’m excited to talk about another week’s worth of Python news. Before I do, I want to say thank you. Thanks to Rollbar for sponsoring this episode. 
So, you’ve got the first item and it’s kind of an artistic, postmodern-type of thing, but with error handling.
OKKEN: Yeah, there’s an article on Journal Panic, and I have to say that’s a cool name for a website. It’s called, “Postmodern Error Handling in Python 3.6.” I guess you could consider it error handling; it’s mostly how to structure your code so you don’t make mistakes and let the language help you out. I highly recommend the read. The examples are hilarious. You go through some error prevention using Enum classes and the NamedTuple class, which I have to admit I just learned about. I’ve used NamedTuples, but I only learned about the class recently. And using Type Hints mypi to help avoid errors in your code.
KENNEDY: Yeah, I think it’s really nice. Some of these are 3.4 only, right? Enum Support was added in Python 3.4, which is pretty cool. There was somebody who commented, basically the idea was, they were talking on some message board or something about, ‘How would you handle this kind of error? Say, it’s not true or false: it’s true, false or maybe, right?’ They proposed this 3-step type of thing. Somebody said, ‘Well, if you were using Rust, you could have Enums.’ And he says, ‘Well, I’m using Python 3.x so, I have Enums.’ That was pretty funny. 
OKKEN: It’s nice, I only noticed this this morning. The tail end of this article references your Talk Python, so that’s cool.
KENNEDY: Yeah, that’s awesome. Thanks for referencing that. 
NamedTuples are so excellent. I really started using NamedTuples a lot. I think they’re great. Type Hints…
OKKEN: NamedTuples I’ve been using a lot because they’re very convenient but the syntax is a little ugly. The NamedTuple class actually makes the syntax a little bit cleaner. I think that’s cool.
KENNEDY: Of course, mypi, which is great for static type hinting, I guess, type discovery.
OKKEN: In the show notes I’m also including a link to another article on mypi and Type Hints called, “Python Type Annotations.” It’s from the Cactus Group and it’s another pretty good tutorial for Type Hints in mypi. 
KENNEDY: Excellent.
So, the next one we’re going to talk about, this is sort of a sequence that I’m going to go through here; one leads to another in a very cool way. Mid last year, mid-2016, Mozilla awarded a little over half a million dollars to 9 open source projects, just in Q2 (second financial quarter) 2016. That’s really cool, right?
OKKEN: That’s very cool. 
KENNEDY: So, they have these things they call tracks. “Foundational Technology” tracks and “Mission Partner” tracks. What they do is, the go out and they find open source projects that somehow that success of that open source project furthers the goals of Mozilla. An open source, free web that Firefox and other things run well on, right? 
So, why is this on the Python thing? Well, they chose a really cool project. They’ve said that they’ve already funded 8 projects for $385,000 and they’re still considering more. They have applications available for what is called a “Mission Partner.” If you have an open source project and you think the mission of your project lines up well with Mozilla, maybe that can be your job; maybe Mozilla would pay you to work on your project. 
First of all, just check this out. That’s awesome.
OKKEN: Yeah, definitely. That’s cool.
KENNEDY: Yeah, they also have a track on “Secure Open Source” for improving the security of open source software. 
The one that’s really interesting to me, and I think the audience, is the “Foundational Technology” track. One of the things that was awarded there, one of the projects, was PyPy, the alternate implementation that’s a JIT for Python. It’s been working with Python 2.7, but it’s not really great with Python 3.x. It’s iffy and only some of the features are supported and so on. They received $200,000 in donations to make that happen.
OKKEN: That’s really great. That will make PyPy a lot more compelling if they get that updated to 3.x. 
KENNEDY: Absolutely. It’s one thing to say we’re on 2.7 and then we’ll move in a little bit, it’s another to say that we’re going to build on a technology that has no Python 3.x story; that’s a pretty serious blockade. Now they have an Alpha version of PyPy 3.5 and it’s looking really good. More on that in another section.
OKKEN: Okay, cool. 
Speaking of announcements, I’ve just been sort of following what Intel’s been doing. I think Talk Python had an Intel episode.
KENNEDY: Yeah, we had a great conversation about how Intel is actually thinking about the architecture of their chips, so that it lines up the way that Python executes code. 
OKKEN: They’re continuing working on this. The announcement that we’re linking to is an announcement from Intel that says, “Intel Distribution for Python 2017 Update 2 accelerates five key areas for impressive performance gains.” It looks like they’re continuing on. This version that they’ve got is somethings that is a special release of Python. It’s compiled knowing that it’s going to run on an Intel architecture. It supports Windows, Linux, OSX and it’s got 3.5. Oddly 3.6 is missing. What’s going on, guys? 
But the improvements are pretty cool. There was a comment about widespread optimizations for NumPy and SciPy FFTs with stated, ‘Sometimes it could possibly improve 60x over Update 1.’ So, they really are hammering in to try to make this fast for some intensive stuff. 
KENNEDY: Yeah, that’s really cool if you’re doing any sort of computational stuff involving NumPy and SciPy. That’s pretty amazing performance. To make it basically as fast as Native C and the Intel high performance C libraries, that’s really something.
OKKEN: They also touched on some improvements in memory management. What I thought was cool was arithmetic and transcendental expressions from NumPy are able to use multi-cores now. I just like that because I don’t know what a transcendental expression is. I think that’s what your face looks like when you’re meditating maybe. 
KENNEDY: Yeah, that sounds awesome. It already sounds intriguing. What good naming and nomenclature. 
OKKEN: I think it’s neat that they’re working on it and that it’s not just for paid people, there’s a free stand-alone version.
KENNEDY: Yeah, that’s very cool. 
The next one I want to talk about is also about performance. But before we do, I want to talk about errors. We don’t like errors in our web apps, do we?
OKKEN: Definitely not.
KENNEDY: So, our sponsor this week, Rollbar, will totally help you take the pain out of errors and solve that problem. I used them on my own sites, I know many people out there do as well. What you do is, you basically install, with just a few lines of code, Rollbar into your Flask, Django, Pyramid web apps. If there is ever an error, you’ll get a notification, you’ll get a report containing all the details that you need. ‘Here’s some kind of crash. Here is the traceback. Here’s the browser and the platform.’ Everything that was possibly passed in the whole web request, right there for you. You’ll get notified straight away if there are any errors and you won’t even, probably, have to debug it. You’ll just have to look and think, ‘Oh, dear. We have to go fix this.” Definitely check them out at Rollbar.com. I use them, I think they’re great. 
OKKEN: Wonderful. 
KENNEDY: Absolutely. And thanks for sponsoring the show guys. 
So, let’s talk about performance. This is a follow-on from the Mozilla one. The guys at PyPy released some performance graphs and stuff from their work on implementing Python 3.5. They said, ‘Look, the core new thing that we need to work on is this whole asyncio story.’ That’s the kernel of the new stuff in Python 3.5. So, what they did is they said, ‘Let’s put out some numbers on how we’re doing in that area.’ I want to say thanks to Guy Fighel (@guyfig) who sent this over to us and said, ‘Hey, you should talk about this.’ 
They said, ‘Look, we’re going to take things like Tornado, asyncio, Curio, GEvent and Twisted. We’re going to run them on PyPy 3.5 and see how they do.’ And they did pretty well, actually. They have a bunch of graphs and they’re basically 5 to 10 times faster than CPython on all of those workloads. If you could run 5 times fewer servers because you don’t need them, with pretty much the same code, that would be pretty handy, right?
OKKEN: Definitely, that’s cool.
KENNEDY: There’s a lot of interesting things. I feel like this whole, ‘Let’s leverage asyncio plus something else’ is really blowing up these days. We’ve had a lot of this stuff happening in the web frameworks with japronto, with async, aiohttp, with Sanic, with this. There’s a lot of stuff going on right now trying to something with async and await and asyncio to make things faster. I think we’ll continue to hear good stories around this. 
OKKEN: It’s cool that it keeps progressing.
KENNEDY: Yeah, absolutely. 
What’s unclear is which one of these is going to be the path. Is japronto going to be the way to go? Is aiohttp the way to go? There’s Sanic; there’s so many flowers blooming it’s kind of tough to pick the right one because they all seem so promising in slightly different ways. 
OKKEN: And from somebody that’s trying to set up a project that needs to pick one right now, I can see how that would be a little confusing. But I don’t think these are terribly different things. I don’t know; maybe it is. I have no idea what it would be like if you went with Sanic or something and then Sanic disappeared for some reason and you needed to switch, how difficult. At the very least, having a lot of people look at it and try to make things faster is a good thing. 
KENNEDY: Yeah, absolutely.
OKKEN: Ned Batchelder is the guy that supports coverage.py, which most people use to look at coverage of their code. He wrote a couple articles called, “A Tale of Two Exceptions” and he’s got 2 parts. What was going on was, he was trying to get all of his tests suites to run on Jython and there was – I don’t know the details of the problem – there was an issue with the Jython that made it so that the recording mechanism doesn’t quite work or doesn’t work. It’s not a crucial part of the system of coverage so he wanted to skip the tests that depended on that while running on Jython. 
And, wow, it’s an interesting tale. He walks you through the entire thought process of why he chose different attempts and maybe inheriting from the exception class and picking another base for the exceptions that he covered, exceptions used. He kind of ends up leaving it not quite wrapped up at the end of the first post, then with some feedback from some readers on the first post, came up with a way to use decorators and metaclasses to apply the decorators to be able to skip those more effectively. It’s a couple pretty cool articles. 
KENNEDY: Yeah. Nice work, Ned. That’s a nice write up. 
So, what do you have to do if you have to do coverage on Jython? You basically run it and collect the report and then you have to actually process it with CPython? 
OKKEN: Well, I’m sure there’s enough support to understand your coverage, but the coverage package has a whole bunch of cool stuff like generating HTML reports and a lot of other types of reports. It’s possible that those are the parts that are missing. 
KENNEDY: Yeah, this is definitely an interesting use of metaclasses, there’s some multiple inheritance thrown in there. There’s a lot of stuff in this, actually.
OKKEN: One of the things that I wanted to point out was, I’ve seen a lot of articles with people saying, ‘Look, I’ve got this cool solution I came up with to this particular problem.’ It’s very refreshing to see somebody say, ‘I’ve got a sticky problem with a solution that I’m still not quite happy with and here it is.’ It’s nice. 
A good takeaway from it is, he didn’t present all of the code that he could have. The code that he puts in the articles, he boiled those down so that you can understand the problem but they’re not huge. That’s extra work on his part but it makes for a nice, quick read. 
KENNEDY: Yeah, a lot of people ask me, ‘How did you come up with this type of problem?’ or ‘Could you explain the thinking that got here because I don’t see how you got from A to B?’ This is a good example of laying that out. I think it’s nice. 
OKKEN: Also, it prevents people from saying, ‘Well, why didn’t you try X?’ Because he already did and he’s showing it. 
KENNEDY: Check that one out. It’s very cool. The last one is also about async and await and it’s also about performance. But this is a totally different story. 
All this stuff that we’ve been talking about, the Mozilla thing, the PyPy tests that they ran, the majority of those were testing web frameworks. So, I want to write a web server that’s going to process requests, let’s do it faster. This is totally different. 
This is about, ‘I want to consume services really quickly.’ The aiohttp library actually has some really cool stuff to do this that I just learned about, so I thought I would share it with you guys. 
OKKEN: Wow, that’s great.
KENNEDY: So, you’ve heard of Requests, right? The most downloaded package ever?
OKKEN: Well, definitely.
KENNEDY: So, we all know about requests. It’s downloaded like 7 million times a month or something insane. Well, aiohttp has a similar library as Requests. It’s actually very similar in the way they use it and its features and so on. However, Requests itself, you can’t await it in async and await. It doesn’t use some sort of deferred io callback in order to complete your request, it’s just blocks. So, the big difference with aiohttp is you can await the responses at different levels. You can do it on the network calls, you can do it on the parsing. It even has a file-based thing so you can await right into files. This person write up a cool little example, putting those both side-by-side and the code is quite similar. If you did not have async and await the code would be really nasty looking, but because you do it becomes similar. 
What we’re going to do is I’m going to get a bunch of stats about basketball players in the NBA. There’s an API for that, apparently. So, it’s going to run some code and it’s going to collect all the stats and it took 12 minutes on Request using aiohttp and aio files. It took 22 seconds. That’s really awesome, right? 33 times faster. 
OKKEN: Definitely. 
KENNEDY: And the code is virtually identical. The difference is basically, you begin a request from the API and normally you’re just waiting on the network. You’re waiting for a response, right? But you should be able to kick off a whole bunch more of those requests until one of them comes back and you have to process them. It doesn’t even use threads to pull this off, it just used io callback type things. 
OKKEN: Really? Okay. 
KENNEDY: Yeah, pretty awesome. So, this is definitely one of those things that shows the power of Python 3.5 and up. 
OKKEN: Yeah, it’s nice to have it one the client side, too. We’ve got a lot of examples recently of async and await on the server side. 
KENNEDY: Absolutely. 
So, I want to squeeze one more piece of news in here before we wrap it up. I talk a lot about PyPI on Talk Python. We grab a lot of packages from there and talk a lot about them here on Python Bytes. There’s quite a milestone that just passed there, 2 days ago, 3 days ago, something like that. 
OKKEN: A very cool milestone.
KENNEDY: A very cool milestone. There are now over 100,000 packages on PyPI. How cool is that? 
OKKEN: That’s very cool. I wonder if the person who got the 100,000th one in there, if they know about it. 
KENNEDY: If they know that they are the one who put it over the top? Yeah, we need to find out. We need to contact Donald Stuft and see if he knows, if he can find out. I bet there’s some sort of query that can be done that will answer that question.
OKKEN: That’d be cool.
KENNEDY: That’d be very cool.
Alright, that’s it for me. Got any news to share with anyone? 
OKKEN: Just that I’ve been in the throes of trying to switch over the Test and Code podcast to a new domain name, testandcode.com. Hopefully, it should be seamless for everyone who subscribed, just if you see anything. 
KENNEDY: We should let you know. Very cool, congrats. You have a whole new system driving it, right? Like a whole new website? 
OKKEN: It’s basically hands-off for me. I’m letting the Software as a Service do most of the work for me. 
KENNEDY: That sounds very relaxing. 
OKKEN: I have @testpodcast as the Twitter thing with a bunch of followers. I also have @testandcode as a Twitter but there’s only like 4 people following, so I have no idea what to do with that. 
How about you? Got anything you want to announce? 
KENNEDY: No, not too much. I’m just continuing to work on classes and create more online classes. I actually have a surprise one coming that I’m sure will be unexpected but I’m sure will be fun. Maybe next week I can talk about it. 
OKKEN: I’ll practice my surprised voice. 
KENNEDY: Thank you, everyone, for listening. Brian, great to talk to you as always.
OKKEN: As always. See ya.
KENNEDY: Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbyes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.  <|endoftext|>
00:00:00 Hey there. Thanks for listening. Before we jump into this episode, I just want to remind you that this episode is brought to you by us over at talk Python training, and Brian through his pi test book. So if you want to get hands on and learn something with Python, be sure to consider our courses over at talk Python training, visit them via Python bytes at FM slash courses. And if you're looking to do testing and get better with PI tests, check out Brian's book at Python bytes.fm/pi test. Enjoy the episode.

00:00:29 Hello, and welcome to python bytes where we deliver Python news and headlines directly to your earbuds. This is episode 271. Really well. Recorded February 16 2022. I'm Brian Aachen.

00:00:42 I'm Michael Kennedy,

00:00:43 and I'm saved. Hello. Welcome, Steve.

00:00:45 So thanks, Steve dour, but saved li Yeah, a

00:00:48 number of things. Probably most interesting to this audience is I'm a core developer on C Python, one of our windows experts, I spend a lot of my time focusing on making Python run better on Windows. I also work on Microsoft work at Microsoft, where I also spend a lot of my time making Python run better on Windows. So I'm kind of a bit of a one trick pony, I guess. But I feel like it's good work. And it helps a lot of people. So

00:01:13 so if I have a problem with Python on Windows, it's your fault. I

00:01:17 if there's solutions for Python on Windows, then it's my fault. I'll let other people own the problems.

00:01:25 So if I go to the Windows Store, I can now install Python from there. You were you were part of that right? Oh, I should I should

00:01:33 have had that up on screen, shouldn't I? Yeah, that was that that was actually the the request came from people within Microsoft were like, Hey, why can't Why can't we get Python up on the store? to it? And my response to all of these is like, Well, if the community is willing to do it, which, you know, is half me and as half the people who would have to take over if I stopped doing it, then then yeah, we'll go ahead and do it. And so I you know, I got actual work time for that. That was that was a contribution from Microsoft for that one. But yeah, the community was on board. And, you know, it's, it's going really well, that's, that's also the one that we tied into the default Python dot exe that's on every Windows machine now. So if you go to a brand new machine and just type in Python, you will get straight to the PSF. Python, it's not Microsoft is not doing it anymore. We just contributed the change. And And now, you know, now I switch hat and do it with the other hat on. So you know, it's it's real Python, right? It's exactly the same as what you get from python.org. It's just delivered, you know, easily fast install automatic updates, and a couple of edge issues that were that we're working on bringing down so yeah,

00:02:40 automatic. I know, this wasn't one of the topics. But now I think I might have to rethink how I'm installing Python on my desktop at work. So that's it, guys.

00:02:50 I have only had store installs on my own machines since 3.8. I think I haven't, apart from testing. I haven't actually used the regular install. On my demeanor You

00:03:02 of course, that makes sense. But

00:03:04 you know, it's always testing right? Every time I'm using Python, I'm testing. So

00:03:09 Chris May out there says thank you so much for making my work life and Windows easier.

00:03:14 Anytime. Yeah. Well, Michael, why don't you kick us off with a story or

00:03:17 tie have got a good one. So I'm a big fan of fast API and fast API being built on starlett. So by the transitive property, I'm also a fan of Starlet. And there's this thing I want to cover called fast API events. So when a request comes in to a particular API endpoint, or if you convert it over to a web map to a web page sort of request or something, you might want to dispatch that out to say, like WebSocket listeners or something along those lines. So there's this cool project called fast API events. It's pretty small and new. So I'm going to try to give it some visibility. It's only got 36 stars, it's pretty new. But the idea is that you can go through and basically create this middleware handler that will let you say, when a request comes in, here's the way when an event is raised, here's the thing that's going to handle it. And then in some API endpoint, you can say dispatch give the event a name, and some dictionary data to be passed along, I suppose it doesn't have to be dictionary could be whatever. And then in other parts of your code, you say I want to just hear about this event that happens, no matter what API endpoint received it no matter where in like, how deep down in the code it was received, and so on. So then way down here, you just put a role handler decorator on there and say, I want to capture all events that start with some substring like cat star for like, category, whatever, or this one is actually literally about cats. And then you can just go through and write these functions that will then handle that and, you know, you could be one you could also pass them off to queues like union can use the SQ s the simple queuing service from AWS, I believe that is as the endpoint instead of it just being your app, right. So if you've got like lots of scale out and stuff like that.

00:05:01 Wow. Cool. So is this like a neat way to do logging? Or even distributed logging? I guess if you've got forwarding handlers in there, you can just Yeah.

00:05:08 Yeah, it seems like it right like, or if you want to sort of build up like, here's the request transaction, and here we're at the stage or like, you could maybe do like visibility into long run a workflow is with this kind of thing or something along those lines, I would think. So. Yeah. There's also an echo handler for debugging. I kind of like that. Like, if I just need to see what is happening. It'll just print whatever's happening. Just start printing out all the behaviors that you're logging. So

00:05:32 and then when you want to stop doing that, you just take away the handler, and you don't have to search the entire code base for print and find everywhere that yes, the bugging.

00:05:41 Exactly. Alvaro, out there says this. This looks similar to Django events. Yeah, I suspect a suspect it is somewhere. Yeah. Anyway, pretty short and simple. But if you're looking for a way to sort of put notifications in a structured way into a fast API app, well, here you go,

00:06:01 Oh, I'm thinking of a whole bunch of more abusive ways to use this.

00:06:07 It's yeah, you can write some really impressive spaghetti code with this.

00:06:11 Yeah, I'm sure that you can. Cloud involved in everything.

00:06:16 Yeah. So let's switch gears a little bit and talk about testing. Imagine that I've got a testing topic. So this is I'm pretty excited. This is a, I've been asked a lot about testing, pipelines testing data science stuff. And, and I'm not, that's not something I do day to day. So I'm really glad they find people talking about it. So this, we've got an article from Peter bomb, Gartner ways to use testing ways I use testing as a data scientist. And I actually just really love this article. It's great with that one of the to start with one of the he starts off with what he uses testing for as a data scientist. He uses testing to make sure you make sure things work, the document is understanding and to prevent future errors. Well, that that seems straightforward. But the the reason why he wrote wrote this up is, apparently because there's a lot of software, there's a lot of testing stuff out on the web, but it's not it's like geared towards test engineers, or, or software developers. And he's like, I'm not a software developer. I'm a, I'm a in you know, I'm doing something else. I'm doing analysis. I'm not a software person, even though Yeah, you are. But but to write this up in in a context where data people might understand it better. For instance, he doesn't even start off with right having written tests, is his analysis is like, if you're doing notebooks or other code, just use a cert a lot. So he's using a cert all over the place, including, he says, already have use it for as many intermediate calculations and processes as you can as it makes sense. Because in doing things like checking, obvious stuff, like he's got an example of a table, a table count, we're just counting up all the yeses, well, you can do a little bit of math just to make sure the math works. So like All yeses, and noes and missing should all add up to the same count, let's go ahead and throw an assert in there, because sometimes it doesn't. And in this example, he said that he, he actually caught an error, because he was looking at two different data frames. So they really weren't, they didn't add up to the same. So you can catch things like that. So just double checking yourself on, on things as you go wrong. away, go, as you're developing. One of the cool quotes he has in here is like, as he has a habit of when he's using notebooks to whenever he's visually inspecting the output. If you're visually looking at the data that comes out, maybe write an assert statement to do that analysis, so that it's always checked. And this is a cool use of putting asserts in notebooks. I like this idea. The article goes on, it's pretty extensive. Talking about checking the data using hypothesis two, well, not the date, not the data at this part. But the your your assumptions around the data. So using hypothesis to check your assumptions and hypothesis will think show you things that maybe you didn't consider like Nan's are you handling those correctly? Empty series or empty data structures that are going into your into your code? are you handling those? If I mean, hypothesis does have take some hand holding, but it does make you think about really what is the shape of the data going in? And do can you do you need to eliminate it? What hypothesis is looking at or do you need to change your code to handle more things?

00:09:51 I thought this is great. I've used that for a couple of pausing projects or combining projects I spent way too long. adding all the strategies to be able to test a URL positive that I was calling into. But it's fantastic for finding kind of things that you would not have thought of.

00:10:10 Yeah, I mean, it's finding things but it's also in it does make, yeah, that that aspect of it seems like the point of it. But the real value I get out of hypothesis is thinking, making sure I really understand the data that's going to come in. And thinking through those goes on to talk about actually testing your data using things like Pandora, which I wasn't familiar with. And another package called Great Expectations to look at, like putting schemas around the data coming in and making sure that the data always matches the schema going on to talk about arrange, act, assert, and using PI test by test comes in with, he's only really writing formal tests when he's writing libraries for other people, but all these other packages to be able to test with data science, I think this is a great addition to the data science community.

00:10:59 Yeah. Alvaro talks about how this is often referred to as defensive programming. And then, you know, I feel for most of us that work with this with our Fortran code. So there's that but I do think this is a really interesting way of thinking about defensive code, you know, I just, I think of writing defensive code as like, Oh, I'm gonna have a bunch of a statement to verify this thing's not none, or verify that this is the right type, and that it has like a reasonable value, and raise exceptions. I haven't really thought so much of it for like notebooks. So that's pretty interesting.

00:11:31 And one of the neat things about like, if you're actually putting asserts in your code, you can actually you can write tests against your code that don't even have any certs in them. And because the search will happen within your code, and the test will still fail and catch it. So it's kind of cool. Yeah. Very cool. Good stuff. Yeah.

00:11:50 Steve, I am super excited to hear about what you're you got coming up, because this is brand new, being a core developer, I feel it is appropriate that you break this news. Yeah, I

00:12:00 mean, I'm not gonna lie when it came to, you know, what am I going to talk about? Okay, what's the most recently accepted pep that was somewhat controversial. And I think just as you kind of look down to the section on rejected ideas, which is considerably longer than the accepted ideas, you can probably get a bit of a sense for just what went on with with exception groups. And I know, Michael, you just had a conversation, you learned all about them. So you can you can take over when when I run out here, but I'll share

00:12:31 my thoughts with it. But yeah, go ahead, I'd love to hear about it. This is sort of inspired by trio right?

00:12:36 The the end goal kind of is. So this is an interesting path. And we've got a few of these on the go at the moment, it's kind of like a stepping stone towards a better programming model or a stepping stone towards better libraries. So it's, it's something that I think in my opinion, very few kind of application developers kind of the, the last developer in the chain is like, often not going to use them, and they're not going to need them. But as you go further in towards the lower levels of libraries, especially people writing async, schedulers are going to find incredible value out of them. Essentially, what the idea is, is that when you're running multiple tasks in parallel, if some of them fail, we don't currently have a have a neat way to capture the exceptions from all of the ones that failed. There's some approaches that would be like, wait for all of them to complete and wrap it in a list. And then you get some exception that contains a list of exceptions. But that's lost a whole lot of context, you can get just whichever exception happens first, but then you lose all the other exceptions. And there's just been no real way to handle it. So an exception group, essentially does bundle up all the exceptions, internally in some way. But the really interesting thing is the except star syntax, which I'm gonna have to scroll all the way down to find where that comes up. But but this is really clever, because if you're in that situation where, say you're running 10 parallel processes. So here's kind of the first example of it, then exceptions are no longer control flow at this level. Because if you're, if you've run 10 things and you're waiting for 10 things to complete, you're not actually doing control flow with the exceptions anymore, what you're doing is handling the exception, but then the control flow is going to go back to where it was anyway. Because you because you're going to be doing something different. So for example, if a file doesn't open, then you would want to do something different, right? You're going to stop going on and trying to read from the file. But if you've tried to open 10 files, and three of them failed you at the outside level, so at the end, at the end level for each file that may have failed, you'll do something different at the outer level, all you're really going to do is say hey, this task failed because of file couldn't be opened. And maybe you do something else but it's at the outside level. So accept star takes that exception group and it's going to give you a chance to handle each exception. Essentially on its own it will group them together. So in this example, if you know, five tasks report spam error, then you'll get into this accept spam error block with all five of them at once. Which is just,

00:15:11 what is that a list of spam exception? Exceptions, something like a tuple, something like that. I think it's I

00:15:17 think it's a tuple. I think with the Stata Center, I believe, something iterable basically, yeah. So it's something you can iterate over to see the exceptions. But it's really just this happened at some point, and you process it. And if the group actually contains multiple types of exceptions, then each handler that matches is going to be called for all the exceptions that match that. So you could have this try block, raise an exception group that has some spam errors, it has some foo errors, it has some bar errors. And all three, except Except style blocks are going to get called with the exceptions that match those, which is a bit, it's, it's definitely going to confuse a lot of people, it confuses me, which is, you know why I was keen to actually spend a bit more time digging into it, and trying to figure out what's really valuable about this. And I do think the most valuable one is really where the error is cancelled error. Because if for whatever reason, five of your tasks have been canceled, then you need to capture that and do something with that outside of it. But it doesn't necessarily mean you want to throw away the five successful results. And so you do kind of want to keep a bit of everything going on it. And like I say it's a building block on its own, this isn't enough to do anything new and useful. The next thing that comes along is task groups. And that's, you know, being worked on by a, you know, a expect a lot of the same people who worked on exception groups, because we're task groups now you can actually start, there we go, great. We don't just merge task groups. Excellent. Then now you can actually, yeah, like run the task group. And if the group raises any errors, then you'll catch them through an exception group. And so that enables a whole lot of new uses, and new ways to use async. IO or just async. Generally, no matter the library, as you say, trio has already had something like this for a while, and some of their nursery thing. Yeah. And so that is now being standardized. So libraries can kind of share their implementations and work together on it.

00:17:23 So one of the reasons you need this is if I start to web requests, and three database queries, and then I go to wait on them, you know, then the if several of them fail, the the error state captured in totality is a tree of errors, that representable this, this, this task, or this other task, which then had this error, this other one, right. So you need some way to deal with a group of errors that could happen, kind of all at once, right? And one of these task groups that gets kicked off. Yeah, so the new task group thing is super cool. So you say async, with task group as TG. And there's two things that are neat about it. One is right now, if you fire off a bunch of tasks in async, and await style, they're basically unrelated. Like, if one fails, that means nothing for the other, right? They're just like, well, here's a bunch of stuff that happened. And this creates a relationship between them, right, so that if one fails, I think it might not schedule new ones, something to that. Like it's brand new, I'm just seeing the tweet. So I think that that's the story. I believe that was the story of Brio. The other thing that's interesting here that, in this example, which I'll link to from Yuri, that he posted, he tweeted about the news was, notice that the first one says, task group create task for some tasks, and then await something that creates another task. There's nowhere where you say, store all those values into like some lists of tasks, then go to the task and iterate them and wait for them or gather them or whatever the heck it was you had to do before. This now makes tasks fire and forget, I can say run this, run this. And within that, it could do more of those types of things. And then you just block at the width, context manager level to wait for all the tasks to finish, which I think is a real big improvement. Because right now you've got to like constantly juggle, well, I've got to return a task from this. So I can go wait on it later. And all those sorts of oddities. And this cleans up a lot of that.

00:19:12 Right? And and of course, being Python, I don't know exactly how the syntax works. But being Python that TGW objects, that task group doesn't actually disappear at the end of the width block. So if that's got results stored into it, then you still have access to those and all of the information about the task group even after you've waited for it to complete running.

00:19:30 Oh, yeah, that's cool. Yeah. So I think this is a nice addition to async IO in Python this this call apparently three Levin is coming.

00:19:37 Coming in 311. I do see a question from Sam moly in the chat. Is there a way to short circuit so that you don't recatch certain exceptions? My understanding and Michael, if you've got a better one, correct me is that the exception, the Accept blocks work in the same way as regular ones and an the first one that matches a particular exception will handle it and the later ones don't either If they would also match. So if you have, so if the spam era is a subclass of foo arrow, but there's another subclass of foo arrow, then spam arrows will get handled by the spam error handler. The food through our handler will handle all the other ones apart from the spam arrow subclass. Nice. Yeah, I don't

00:20:19 know much about the except star other than it was basically a requirement for the task group stuff to be implemented properly. So when you one came, and then the other could come in Yeah,

00:20:28 see, the only feasible way to actually do something as a result of an exception group. Otherwise, you do end up with, you know, a very generic exception. And then you write a for loop over all the exceptions that are handled and try and figure it out yourself. So you'd end up rewriting the code. And it was just not going to be feasible. It needed to be syntax. And so it is, yeah,

00:20:51 right on. Very, very exciting and very timely. Thanks to you.

00:20:54 I'm kind of glad that I put off learning how to do async code until 311. Looks easy.

00:21:00 It's a good band, and a good time for async. Io. Oh, cool. All right, I guess I'm up with the next one hub.

00:21:05 Right? Yeah, let's see what you got.

00:21:08 I have got some other interesting things I'm here about showing off the the underappreciated projects are the new projects, just a couple of stars here. And we talked about overloading before, but I thought this was a clean way to do it that people can think about and see, I would definitely love to hear your thoughts on this. So Felix, the cat, created this library called PI overload. And idea is basically once you have type information, then you can have method or function overloading the idea being like, Okay, if a function called foo or whatever, and if it, you can say if it takes an integer, I want this implementation run, if it takes a string, I want some other implementation to run, right? That's sort of the traditional C++ C sharp definition of it, right? But in Python, we don't have that, really, because the language started without type. So how are you going to figure out the type the overload or you know, right, there's, like, doesn't make any sense. So with this one, you could sort of use like, traditionally, you could use instance, we're going to do one thing or another? Is it a single thing? Or is it a list of those things? What are we going to do with this one, you can put just add overload, and then whatever the signature is, if you can say it has no functions, or has no parameters, or it has like two integers, or it has three integers, or it has, like a list of them, whatever. And there's even a way to sort of say, somewhere down, here's a way to say like, if none of them match, call this particular one. So basically, it's, it's just straight function overloading in Python, if that's the thing you want, Steve, does this make you cringe? Or do you like it? Oh, well, both.

00:22:37 You know, I'm, I'm not gonna lie, I'm not the most into static typing in my Python code, as a lot of other people. And there's a lot of, there's a lot of complicated reasons. But I think for a situation like this, I mean, I know, if I was writing a function that took a string or an int, the very first line would be converted to whichever type I actually want, and then the rest of the function is going to look identical. And that's

00:23:00 sure and that, in that case, where like, there might be a unparsed type of thing, for sure, I think you wouldn't really do an overload, that would be insane. And my kind of gut feel, and

00:23:11 you know, I'm always open to two examples proving me wrong, in which case, I, you know, I would write the instance code that's in those examples, you know, my kind of gut feeling is that if you're doing two drastically different things in the function based on the type, you need two functions. And once you've got two separate functions, you know, if the people calling don't know what they're passing you, then that's, you know, they've got a problem. And it's not so much my responsibility to fix it with overloading. That said, overloading is really cool. And, you know, I am the exact opposite person, when it comes to like C and C++, I will do all the craziest possible stuff with overloading in those languages, because I think it fits the language, and it's a lot of fun. And, and there's definitely occasions and value for having it in Python, we do have the single dispatch decorator has been part of Python for a while, which will do this on the very first parameter. This, you know, very trivially extending it to the whole function signature is, is really cool. So, you know, it's, if I needed to do this, I would probably want to use this library like this. What would I you know, I'd probably, I would probably reconsider my API design choices up to that point. But I can understand the the attraction of getting to, you know, to reuse, reuse the name and not make the person calling it think too hard about how you know what's actually going to run.

00:24:35 Yeah, the place where this sort of seems interesting to me is, you know, there's some lot of like tricks and juggling people do with like, star star star, kW orgs. Where like, okay, depending on how you pass it stuff, we'll do a bunch of things. Yeah. And I'm always looking for a way to like not do that. Yeah. How can I'm not, how can I remove that like, it's completely opaque. I have to do a Google search and read the docs to figure out what is it at all possible here?

00:25:00 One of these days, I'm going probably going to take all of the kinds of patents for that kind of thing that I've collected and turn it into a book. But writing a book just feels like way too much work. So not anytime soon, sorry. My colleagues at work can ping me at any time, and I'll give them a patent for what they're trying to do. That's, I do have quite a set of Oh, usually, you're trying to make stuff weirdly, working this way. Here's, here's a nice way that you can enable that without having to resort to, you know, type checks and everything. Yeah,

00:25:31 I've been using. I mean, I've been using Python for a long time. And I do remember, one of the first things that I noticed as I couldn't do overloading and at the time, so this is, you know, many years ago, I was using a lot of overloading in my C and C++ code. And, and I was like, Oh, I can't do overloading but one of the things I've noticed is actually the instead of keeping, wishing that I had overloading in Python, I've noticed that I don't really use it in C and C++ anymore. I've gotten the other way. Yeah, I really, I'd rather be more explicit about the and just have a function that two functions that that are some maybe there's similarly named, but they have an appendix that's, that's different. So that if you have different data, you pass it, and I'm with you, Michael, I'd rather have people go, Well, which one do I need? I'll look it up, then just passing the wrong data type and having me suck, because, you know, sometimes if if they haven't converted the data, like, a String, String versus number is a scary one for me, because I'm often getting getting my numbers from an API or something. And they come in as a string, if you forgot to convert it, and you passed it to the wrong thing, and you're really doing something completely different. That's, that's not a good thing.

00:26:45 But I got bit by that one, just yesterday, updating one of my, one of my CI builds to use Python 3.1. I mean, three dot 10. Is it a string to the number?

00:26:58 teresting? Yes.

00:27:01 But yeah, certainly that conversion would be what you know, would be wearing the other one is, is it a string? Or is it a list of strings? And that's the one that bytes is in Python all the time? And I don't even know how you resolve an overloaded function based on is it a string? Or can I iterate it?

00:27:17 Well, like in that case, actually, I would rather just have that part be part of the function at the at the top of it, if it can handle both to check the type and, and iterate or not, but you know,

00:27:28 yeah, well, alright, let me close this out with two quick thoughts. First, I think this is interesting, because it's one of the things that's possible with modern Python, like once we've added typing, now, you could consider this as a thing. Whereas previously, it really was highly impractical, I think, as a way to do do it. So I think that's kind of cool. And then to I think it might be an entryway for people who are not where Brian and I'll put myself in there as well, yet. I've going like, actually, these things I thought I need, I don't need those, right. There's a lot of stuff I thought I needed. And I haven't used it for three years. So maybe I actually don't need it. But that's not how you maybe first approach approach solving your first problem in Python that you're coming from C++ or whatever, C sharp, whatever, this might be a gateway. So anyway, those are my two thoughts. One more

00:28:15 thought from Dean after Python 311. Do we get Python? 95?

00:28:21 I there was no, there was a Windows three point 12. So I think Python gets to do three point 12 as well. And I think it was only available in China. Interesting.

00:28:33 And I believe I like to follow on with that Dean. Very funny. I believe that Windows 10 was named to you let me know if you know different Steve, Windows 10 was in Windows 10. Because there used to be the check Windows nine as the starting string for 95 and 98. So you can't be nine because then you're going to be 95. So we got a kick on past it's kind of

00:28:53 it was some embarrassingly vague language runtimes out there still doing that check. That really struggled with Windows nine. And showed up in enough places that Yeah, I think it just made sense for everyone to just skip it.

00:29:14 Not to give him 13 We're skipping nine. It's too unlucky. All right. Awesome. Brian, what you got for us?

00:29:19 Oh, what do I have next? I have the next generation seaborne interface. So seaborne is a really awesome plotting library built on matplotlib. And I, you know, actually, I don't use it that much. But I've always been intrigued by it, and what kind of watching what plotting libraries do and stuff. And one of the things I was curious about, which I'm really grateful for this article, is some of the history behind it. So the the article starts off next generation cbord interface, talks about the background and goals, but some of the, some of the great things in here, let me grab, grab some notes. This work grew out of a long Running effort to refactor seaborne internals. So that functions, you know anyway, where I wanted to get at was he was developing a refactor of the internals, he's like, wait a second, if I want to refactor it, maybe I should expose more stuff. And some of the background was originally seaborne was originally conceived of as a toolbox to do of domain specific statistical graphics to be used alongside matplotlib. So the intent was people would use both Seabourn and matplotlib together, however, things have people of doing are doing things differently, a lot of people just grab seaborne by itself. Some people even just learn C were in before they even learned matplotlib, which is an interesting thing. And that's how I thought you were supposed to be doing this. But the concept was an end in overtime, there's a whole bunch of features that have been added to seaborne toward so like really slick looking. But to do the same thing by hand, and matplotlib is a lot of work. So there's some things that like if you, if you see bornes, almost there, but you need to tweak it a little bit, and you have to do things manually, well, then you have to just do everything by yourself. And it's a lot of work. So the idea around this, this a rewrite of the API is let's rework some of the internals so that a lot of the little sub components that go inside of a plot are exposed, that way people can get access to it to do more fine tune configuration, within the so they don't really have to just do everything by hand. It's either all or nothing seaborne or matplotlib, you can kind of do both more easily, which is a kind of cool idea. There's a whole bunch of great details in here that talk about some of the API changes, basically exposing the internet, if you create a plot, there's nothing there, and it won't show up, you have to create layers on the plot. And then within the layers, you've got marks and, and different components that go into it. I kind of like this idea of building things up. But what it really like is the public aspect of this, so you've got a, you've got a library that's out in the open. It's being used by a lot of people already and somebody saying, Maybe we should tweak the API and do something different. And just go ahead and doing that in the open saying, Hey, we're gonna do this. There's a note at the top, or I'm thinking about doing this note at the top saying it's a work in progress don't depend on these examples, because things might change. But this is the direction we're trying to go. Trying to get feedback from people. And I think this is a lot of thing, things that a lot of people struggle with, when they're maintaining packages that have been around for a long time is wanted to things a little different. But am I gonna break everybody? And talking through it? So anyway, this is a great read, especially if you're a data plotting kind of person.

00:32:43 Yeah, very nice. I always want to do more with visualization. And I'm sure that I have some good data I can pull up. Yeah, I ended up basically just writing API's and websites these days. But But I really should be pulling this up and doing some of these graphs. And I'm really happy these are these around. Yeah, Steve, how about you

00:32:59 see it see bones great. It's always like, back when I first discovered it, one of its major selling points was simply importing, Siebel and would magically make your default matplotlib charts look nicer.

00:33:11 Which which mantle of it is I love it. It's like the bootstrap of matplotlib.

00:33:15 It really was, it's like they they just apply that style by default. And every matplotlib charts on they look nice that way, which you know, matplotlib done their own styling work now. So it's less variable for that. I do like this API, it looks good. And and as Dean's pointing out in charts, like matplotlib has an object oriented plotting API, similar to this possibly identical, just like everyone else, I've never learned the object oriented API. But but it is there. And it's, it's, you know, it's, that's the modern one. It's like, I know, a lot of people say matplotlib is impenetrable, and kind of hard to build things up. But it does have a really nice API there. It's just not the pie plot one that kind of imitates Matt labs Oh, API. And so you know, having it there is is really nice and see one, you know, having their own is also great.

00:34:07 Another nice thing that to read about in this is, is does a hat tip to gg plot or gg plot to or whatever it's called. Saying that, yes, it's good to look, a lot of this is similar to gg plot, but it isn't that I'm trying to copy it or maybe that's that's definitely influence. But it is. That seaborne is a is important because we think about things differently in Python than we do in R. And, and, and just having it would be but also a hat tip to another library that is a wrapper around gg plot if you just want that. You can do that in python two that's available. So it is interesting to these are we think of these as competing libraries, but they're really not competing with each other. They're working together to push the push, plotting forward. So bad

00:35:00 Nice, Dean out there points out, you can do plot that style that you seaborne or it's PG plot, which let me throw out Oh, yeah, let's see, gg plot, certainly

00:35:10 the one to copy from. I mean, that's the there's a reason that one is, you know, as universally popular, as you know, any plotting library can possibly be. It's probably even, you know, it's probably competing with Excel for popularity of flooding data. Realistically, it's, it's a really nice API, and it looks good. And everyone's familiar with it. And so you know, there's nothing wrong with copying from gg plot,

00:35:35 as I got one more shout out to throw into this conversation, the XKCD plotting style, or matplotlib. So you've got I mean, this is fantastic. It looks like the, it really does look like XKCD would, you know, the comic would do for the for these. This is fantastic. I love it.

00:35:57 What I love is I actually see this, I see this in papers and stuff like that people just go ahead and use the XKCD style, and for serious stuff, and it just is awesome. I love it.

00:36:07 I think there's actually some value to having like cartoony looking graphics, like UI sketches and graph to say like, look, this is speculative. This is just like, Don't read too much into it. I'm trying to give you an idea rather than the exact thing. And I think sort of UI like cartoony looking sketches. And this also plays into that. Yeah. All right, Steve, you got the last one, held the

00:36:27 last one. Yeah. So this is another kind of recent delivery from from the C Python core team, we can now compile C Python to WebAssembly. Wow. So and to a lot of people, that probably means very little. But I guess the brief brief summary is web assembly is a kind of what the JavaScript in your browser compiles to before it runs. So it's skipped that initial step of being JavaScript, and it's now ready to run in the browser. So it's it's a low level, there are two chains out there that can compile all sorts of languages directly to WebAssembly. And so in this case, we've taken I believe, we use one of the I don't know the exact tool chain that's used, and it may not matter. But it basically takes the C code and compiles that to web assembly gives you a package that can be brought into an electron app or a no js app or a web browser, modern web browser and be run in the browser. There is so this page is a little bit dated. There's been a bit more work since then. But I found this is the best overview of where things are kind of long list of C extensions that don't work. Probably unsurprising. Like the browser doesn't have a lot of this stuff in it. Yeah.

00:37:39 Don't have what no ticking all the different API's the wind 32 API underneath. Yeah, whatever it was delegating to. Yeah,

00:37:45 I don't know TK, enter. What? No.

00:37:48 Yeah, no, no, TK, enter no sub process. C types, apparently you can do I've heard there is a lib FFI port to, to the Emscripten kind of platform. So how this kind of works is kind of when you take web assembly in into a browser, it has access to nothing like it starts off in a really enclosed kind of box of things that it can do. And that doesn't actually work for Python at all, because they're very early thing that tries to do is search the file system for what files it should be loading. So you wait, we actually build it as part of another platform and scripting is one platform, that kind of polyfills a whole lot of native looking API's. So that code that's compiled on top of Emscripten is able to use it and that this little demo, which are set start repple. This is running on that. So this is a build of Python 311 Alpha four, built with clang and running on Emscripten. And I can I believe I can do this be like Oh, s lista. And it thinks as a filesystem, then now that's not my file system that's in memory, it can be changed to browser storage. But this is entirely in the browser, like there's nothing downloaded. There's nothing running on my machine here. There's nothing running in the cloud. It's literally in the browser. I can probably freeze my browser with this, like I can do an infinite loop and do it. Do it. Let's see if this cuts me off. I'll just let that run. What happens if you hit it again, we'll start again. Now it's done. A refreshing. Yeah. So yeah, and and the, there's a second one that the actual build of those committed supports, which is Waze WSI. That's a slightly different approach to adding all the functionality around a web assembly module. It's so it's a little bit more flexible, a little bit more controlled. Emscripten is really like give me a POSIX system inside my browser all in memory. And so well, and so we have two options. And these are available in the in the main branch. I don't at the moment we're not shipping prebuilt modules. for web assembly, that might be a possibility. If that's something that you'd like to see, then I guess go to discuss stuff item.org and post about it. It's probably a poster, I should look for a poster. But we're not currently doing prebuilt releases, but, but I think we could, I think this is one of these options where the WebAssembly build is totally portable. And so if we build it, we can distribute it. And then, you know, websites that want to do something like this could just download it from our servers and, and run it. So I think there's, there's a lot of potential here. What I'm, yeah, and and it's had the potential stage, right, this is another stepping stone to bigger and better things. Our kind of responsibility as the core team is to enable it. And now we really want people to come in and pick this up and do awesome things with it. Firstly, so we can figure out what gaps still need to be filled. But also just just to just to expand, you know, the growth and the reach of piping to bring it into places that currently doesn't exist or can't work. And, you know, give it new life and new places, open it up to new people.

00:41:03 This is fantastic. Congratulations. And so the look for

00:41:06 this primarily done by Katie Bell, Christian Himes and Ethan Smith. So I think Christian got to do all the merge commits, but it's definitely been number of people working on this for a while. Those are the the arm the primary three,

00:41:21 I'm really excited for the possibility for this. I think one of the things that could be amazing, obviously, running it in the front end is the thing that could be done. I saw the documentation said it was about 10. Meg's to download it, I'm sure you can put that on like a CDN. So you kind of hit it once somewhere for a particular version of Python. That's pretty good. You know, it's we all have pretty fast things these days. Yeah. Yeah. What gets me really excited, though, is putting that into an electron js app. Yeah, absolutely. Right. Because electron js is a really interesting way to bring web technologies cross platform, as much as I like OS and electron app. Still, it's, it's really opened up the possibility for a lot of things. But it really is meant, okay, you're doing TypeScript, you're doing JavaScript, and you just have to go full on in that world. So here, you could still do like your front end and whatever. But having the core logic of that desktop app being and Python running in this, that's exciting, if that's, that can be put together,

00:42:21 I should also add two things. Pi iodide is a project that people have probably heard of before, which has been working on this for considerably longer than the core team has. And so I think a lot of the patches that needed to happen have come from them. And they now get to spend more time focusing on the data science stack, which because they've got parts of NumPy, and pandas and other libraries, to actually do data science in the browser. And the other interesting thing that I saw was someone from from conda Forge, suggesting that they could elevate was wasn't built to their kind of automated level. And so all of conda forge may suddenly become available to us in the browser on top of a glorified and like this.

00:43:04 So that that would unlock so much. That'd be incredible. Interesting,

00:43:08 I imagine initially would unlock a lot of bug reports, but but we need to work through those first.

00:43:15 Yeah, I was just thinking of, you know, take the top 1000 most popular packages, Oh, could you get 90% of those compiled to like other web assembly, things that then could be included and then imported here, somehow?

00:43:26 Exactly. And the top 1000 with native code, because it's only the native code, right? The Python code still compiles in the browser, just like it would in the C Python interpreter. It's only the native code that has to be ported and built. And so once that's done, then, you know, we're up and running. So the top 1000 is probably more than you need. Yeah,

00:43:47 absolutely. All right. Awesome. I'm looking forward to seeing where this goes. So many neat options. There's there's just cool ways to say like ship the Python runtime, the places where maybe it would have been hard to get now you dropped this wasum file plus something that can run wasm. And then now you've got a deployable shippable. Yeah, C Python runtime, without TK enter and a few things but still, you might not miss it. Anyway, it depends what you're doing. I mean, most of apps are not to Gator as all I'm saying. I'm not trying to bang on it,

00:44:16 though. But I just haven't. Every time it comes up. That is still there. I'm like really? We still love that. Okay.

00:44:23 Don't ask me what I've been spending my week working on, Brian. It's not gonna make you happy.

00:44:29 Are you are you creating a TK inter base killer for against textual?

00:44:35 No, no, no, actually not.

00:44:40 Awesome. All right. Well, Brian, are we at extras we are

00:44:44 at extras. Do you want to kick us off?

00:44:46 I will kick us off. So I've got a couple of things that I think are interesting. Let's start with this one. So we've talked about oh, oh, my Z shell, right. Yeah, a lot. Love it. I just came across realizing that actually this is a Portland company that puts together the sort of core maintainers oh, cool of that. So I just thought it was funny to give a quick shout out to play at Argonne. They're not really in the Python space, but they're in Portland, which I thought was kind of fun. And then what is this? This next one comes to us, I think, via pi coders. That's where I got this. Django just reformatted all of Django with black. And I know, I was just having a discussion with somebody like, Oh, your code doesn't have doesn't follow pep eight. Like, I don't want it to follow pep eight. Yeah, but if people are gonna use your code, you know, like, literally got imported, then it probably should follow. Like, it should not come up with all sorts of warnings. So I thought it was interesting that Django just said everything, make it black. See, what do you think about that?

00:45:47 I'm totally on board with with just using black on everything. I don't agree. 100% with the style, but I agree 100% with not arguing about it. So yeah. Yeah. Close enough. Yeah. Plus,

00:46:01 there's enough tweaks like that make it good. Like I really, I'm really grateful that has, you can tweak the line length, for instance. Yeah. Because of it. Here's example. What if I want it really short. So for? No, for seriously, for formatting the code for the PI test book, I want them all quite a bit shorter, so that they fit better in a book format. And I could use black to cover with that and convert everything with with black and make him like that. So it was great.

00:46:32 Nice. Awesome. Alright, and the final one is I have been doing some stuff with more fun things on YouTube trying to put these little short videos together. So here's a how long the six minutes 44 second video on using time delta to get like, how many weeks or in some time span that you know, the cool tricks you can do there. So people should check that out. That's my latest Python short thing. And yeah, that's, that's it for my extras.

00:46:58 Okay, so I've got a quick one, just, uh, I've got I don't have a graph some to throw up. But I just I was looking at looking at the Git history of a repo and trying to figure out whether I included one of my co workers branches in it if I merged it yet or not, things like that. And I was on the command line I just learned, I'm like, can I just do this with the command line? Apparently, I didn't know this exists. So apparently, a git log dash dash graph just shows you the Git graph of your branch history or the branch graph on the command line. And I didn't know it was there until today. I started using it tweeted about it. And then a whole bunch of people said, oh, you should use these flags, too. That makes it even nicer. So. So it's fun to learn something old some as a new thing. And then somebody else told me, how about Git k. So get K is a is a graphical browser of your repository that just comes with most git installs that I didn't know was there. I'm like, do I need to install it? I'll just type it and see what happens. And it popped up this graphical interface. I'm like, This is great. This is exactly what I want. Oh, so get case. Pretty cool.

00:48:10 I didn't know about that one.

00:48:11 I've seen the command. I've never actually run it to see what happens. So I was not feeling quite brave enough.

00:48:20 Didn't mean get kill? Or was it something else?

00:48:25 That's just Mosca command scare me until I've run them the first 100 times or so? How about you? Yeah, I got a couple of extras. Okay, can I get my screen back up? There? It is, I was feeling a little bad about you know, being a bit self serving here. But then Michael just promoted his video series. So I don't feel too bad anymore. This is the python three dot 11 alpha five download page. And we have a new edition this time around, which is this Windows installer for ARM 64. So arm 64 is not a massive, massive platform for Windows yet, but it's growing. And we want to have Python support on it. So the builds have been running in the background for a while, but we've never actually released it. We're hoping to get it out with three dot 11. That is going to depend largely on do people use it? Do they love it? Do they hate it? My experience so far with it has been that it is noticeably faster on at least on the arm 64 devices I've had access to compared to the Intel devices, which is really, really cool. And there's like the test suite is kind of 30 to 50% Faster, which is a huge, huge really so so I think there's a lot of potential here. I may just have had awesome hardware. I'm not sure it was a virtual machine. So it's kind of hard to tell. Yeah. But this is fantastic. This is new. If you have an arm 64 device like Surface Pro X or that there's a couple out there from other manufacturers. I'm running

00:49:45 Windows 11 arm on my MacBook Pro and through parallels,

00:49:50 I then use please in download and install it and let me know how it goes. If you get it through the Windows Store, which is currently still not public, you need to get the The link from basically from one of my tweets to the Windows Store, you will automatically get the arm 64 version on ARM 64 as well. So this installer is the traditional one. Otherwise you get it through the store. The other thing, which I wasn't going to do and then I spent a bit of time working on this a couple couple years back at the other core dev sprints, forgetting I was chatting with I was chatting with one of the other core Devs about everyone typing from collections import deck and misspelling it and it's like you tell, you know that so a deck D qu E is Double Ended Queue, very useful datatype for certain purposes, but people would type it deck by deck isn't D ck, because it's phonetically what it sounds like. Exactly. And so as as a bit of a joke, I made a package that when you when you installed it, it would give you from collections import deck, and obviously the thing that that collection should be is a a deck a Double Ended Queue of 52 cards representing the cards in the normal deck. And overtime for various reasons. It's just kind of grown and and I recently you know added support for calculating poker hands to it. And so now if you can build a game with this, it does it uses a gnomes it's got shuffling, dealing, Joker's are optional, and you can calculate a poker hand. And yeah,

00:51:19 my even compare them poker hand one greater than poker hand two eyes, I

00:51:22 spent a lot of time most of my work on this over the last week was writing the tests that proved how incorrect that function was until I wrote tests for it. But now at this point, yeah, it's, you can look at the values it gives back, it's actually a tuple, with an enumeration saying what the hand is, and then a selection of the card values in a way that makes the tuples comparable. So you can actually look and see, you know, it's a pair of aces, it'll have the number 14 there for the ACE, and the next highest card was a 10. So if someone else has a pair of aces, and the next highest card was a nine, then you're still going to compare higher. So I'm pretty proud of that function. Yeah, that's clever. But yeah, this is and and it's code style

00:52:03 black. This. Oh, very nice. So

00:52:06 yeah, it's one short file. And it does still override Dec and the collections module for you. I love it. It doesn't. Alright, so that deck isn't there, right? It's like DK is untouched. But if you try and import D CK from collections, then you'll get it.

00:52:26 Nice. Hey, one other quick thing to shout out. We're hiring contractors to help develop features for pi pi.org. It says at the top of ipi.org. That's, do you know anything about this? I guess if people want to work on pi pi.org. That's pretty neat.

00:52:38 Yeah, no, they have funding. And there is a post that describes the surveys, I believe this is the organizational accounts project they're looking at, yeah, organization accounts. So if if, like me, you are kind of the one of the primary Python people at your company, then you will spend a lot of time helping people publish packages to pi pi, if that's the business you're in. Suddenly, As for us, there's a lot of packages from Microsoft up on pi pi. And the kind of corporate account for that is, by those exists, we have a user account with 483 projects. This is all manually curated right now. Because pipey, I just doesn't have the functionality to kind of hand out permissions to it safely. The teams and all that kind of stuff. Yeah. So So I believe the the idea of this is to add that functionality to API. And so I would love it if someone comes along and does this, I believe we've contributed some of the funding towards this. So

00:53:39 yeah, looks like

00:53:40 oh, so Steve, I've got a 311 question for you. So Okay, three elevens an alpha. So what what does that mean? Really? Does that mean? I can like start using 311? Or should I wait?

00:53:52 It means you can, it means we still may change stuff that will break you. And we won't apologize?

00:54:00 Okay, but if my code runs, can I trust it? Or

00:54:04 yeah, if you're, if all of your tests pass, then you should be you should be able to trust it fairly well, certainly existing code, there will be new features available in the alpha that have not been thoroughly tested yet, or may change again. But again, if you're running existing code, you won't be using those. So, so that won't matter. But yeah, it's totally viable to use, you can specify three dot 11. Dev on GitHub actions, I believe it compiles from source. When you do that, now, they don't have a build there. They should for beta. Beta is when we really want people to start doing stuff at this point. Alpha is so that people can test the new features kind of targeted testing on anything new that we've put in beta is when we really want people to start porting libraries, especially kind of the core libraries to be able to work with it. And and just test it because if existing code doesn't work on the beta, we want to hear about that so we can fix it in the runtime. and not forcing you to fix it in your code.

00:55:02 Okay, but if I'm like a package maintainer, I can start if it's got GitHub actions for it, I can start testing having my CI test against 311. Then to

00:55:09 absolutely. Okay, you will likely want to mock it as it's okay if it fails. Okay. Yeah. Awesome.

00:55:16 Okay, thanks. So we do a joke.

00:55:19 Let's do a joke. Let's, let's do a joke. Alright, so this one coming from the programming humor. One. And it's a, like you talked about the visualization stuff, Brian, and this one, it says, there's a search that says, how to get labels on MATLAB bar charts to be horizontal. Look what the results came back from Google was says you're not alone. Help is available. If you're experiencing difficult thoughts, please call 116 Dash 123 or via this is an emergency call 999. And the underlying vit here is it isn't that drastic Google, but I believe it might also work on Bing. I'm not sure. There's a physical out. I think there's a Bing equivalent down here. Yeah. Not just Google Bing things here and emerging as well. Yeah. That's awesome. Yeah. So it's not that that matters that much of an emergency. I'll go to Stack Overflow.

00:56:17 Nice to know that the big search engines are looking out for our mental health.

00:56:21 That's right. People become very upset after failing to get those bar charts. This is not the emergency but it's coming next and you realize what the answer something. Anyway, that's the job I found for us, guys.

00:56:36 Well, thanks, everybody. Thanks, Steve, for coming. And Thanks, Michael. Again.

00:56:40 Yeah. Thanks for having me. All right. Bye. Bye.

00:56:43 Thanks for listening to Python bytes. Follow the show on Twitter via at Python bytes. That's Python bytes as in by Ts. Get the full show notes over at Python byte set FM. If you have a news item we should cover just visit by them by setting them and click submit in the nav bar. We're always on the lookout for sharing something cool. If you want to join us for the live recording. Just visit the website and click Live stream to get notified of when our next episode goes live. That's usually happening at noon Pacific on Wednesdays over at YouTube. On behalf of myself and Brian Aachen, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

 <|endoftext|>
Michael KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode #36, recorded July 26, 2017. I’m Michael Kennedy.
Brian OKKEN: And I’m Brian Okken.
KENNEDY: We’ve got some great stuff lined up for you, very cool news in the Python space, but before we get to it, I just want to say Rollbar is sponsoring this episode. They’ve got a really great offer for you at pythonbytes.fm/rollbar. I’ll tell you more about that later. 
Right now, Brian, I would like you to tell me some poetry. Read me something beautiful. 
OKKEN: So, it’s Poetry Hour at Python Bytes. (Laughs) No.
I started at a community college and I switched to the University of Oregon to start the computer science program and one of the first classes I was in, before we got into the technical stuff, my professor said, ‘You need to think about your code like poetry. It should be pretty to look at.’ And it’s kind of stuck with me. I like that lesson.
There’s an article by Trey Hunner and it’s called, “Craft Your Python Like Poetry”. Just some decent advice. Your code shouldn’t really look like prose from a novel it should look more like poetry. And it’s not just pretty for pretty’s sake, it’s more readable when it’s visually appealing, I think. He brings up line length is important, although shorter is more readable. Man, he recommends 55-character line lengths and that’s pretty short.
KENNEDY: I think there’s a real tension in this one, although I do agree that line length matters and I prefer shorter is better in some ways. However, one of the real tensions I find here is another good practice is to have descriptive variable names. Sometimes that means longer than X, Y and Z for your variable names. If you start doing expressions involving those, like ‘this times that past this’, that can get huge really quickly just by virtue of putting long function names alongside long variable names.
OKKEN: Yeah, there is some tension there. And also, in working with data and tables and stuff, I do find that tables that look like tables instead of looking crammed all the way to the left-hand side are more visually readable.
Anyway, getting over the line length thing, he does have a lot of good comments about when you do have to continue on line to make it shorter, like do a line break, where you do it makes a big difference. He has some examples to make. ‘Making broken comprehensions more readable’ and ‘function call parameters.’ 
One of the things, maybe this is a functional programming thing, but ‘chained function calls’, I probably just don’t do that very much. The dot alignment, he noted, looks pretty nice.
The last one that I saw which I kind of do anyway, I didn’t realize that some people don’t do this is ‘dictionary literals’. If you set up a dictionary that’s kind of like an enum list, it’s basically just a predefined dictionary literal. Having one element per line makes it more readable. But then there’s always trade-offs. If you’ve got a really large one, vertical length is important as well, and having a super long program might not be as easy to read as a shorter one.
KENNEDY: I’m with you on that. Let me throw in another one that I don’t think is covered here or maybe I just missed it, is function length. The idea of breaking your program into little tiny bits, little small, readable, easily understandable pieces. Kind of like a haiku I guess, rather than a long, flowing poem. 
OKKEN: Also, he doesn’t talk about white space too much, but there’s white space even within a function and breaking up the different parts of when you’re working with setting up the data, versus other things to break up by white space. Similar to how long poems are broken into little stanzas or something.
KENNEDY: Yeah, you know, thinking about this, one of the things that strikes me… The way that your code looks and breaking it down like this, thinking about it this way, it’s a big sign of professional developer versus somebody just learning, somebody just poking around who’s not really a developer. Professional developers code looks like these types of things. It’s clearly structured beyond just what the language requires. A lot of times, people who are new, they just kind of mush it together. 
If you’re looking to come across better with your code, I guess think about that as well.
OKKEN: Okay. 
KENNEDY: So, I want to bring everyone’s attention to this thing called, “The Fedora Python Classroom Lab”. The idea is Fedora, it’s a Linux distribution, a really nice one. What they’ve built is basically Python and data science, Python-based data science, in a box. Or rather, in an ISO. What you can do is you can get just the ISO DVD image of this Fedora Python Classroom. You can mount it and literally boot straight to this thing. It fires up Fedora and you can login without even installing it. You login and you have access to Numpy, IPy, CyPython, Matplotlib, Requests. All the various most common packages and it’s just up and ready to go. That’s really sweet. You have the GUI GNOME-based version, or you have Docker or Vagrant node UI variant. All sorts of stuff is set up and ready to go, so if you’re going to teach Python and your thinking of using Linux to do it anyway, here’s a nice thing that you can hand out to the students and say, ‘Boot from this DVD or this image and create a virtual machine based off of it and you’re ready to roll.’
OKKEN: That’s cool.
KENNEDY: I originally thought this was a thing I downloaded inside Fedora. I logged into Fedora and I was like, ‘Wait, where’s all the stuff? Oh, it’s actually its own copy of Fedora.’ This is its own Linux plus reconfigured Python stuff.
OKKEN: Wow. 
KENNEDY: Pretty cool, right?
OKKEN: Yeah, that’s everything, including Tox in there.
KENNEDY: Yeah, it’s all ready to roll. Multiple versions of Python, everything.
So, you have some less than amazing news for what’s up next. We’ve previously talked about this really cool concept called Kite. Which it would take your code and it would take a lot of stuff you would do as a developer on your system and it would add smarts, right? It would add autocompletion even where there wasn’t and these types of things. But it turns out, there was a few drawbacks conceptually around it, but there’s also a bit of a toss-up about actually bitter behavior. What’s up with this?
OKKEN: So, especially because we had covered it, my reluctance to this product to start with was that they would – it’s all cloud-based stuff – in order to give you hints and stuff, they would send your code to their company and then you’re just going to have to trust that they’re not going to do anything evil with it. 
KENNEDY: I was a little reluctant at that as well. When I was playing with it, I put it on a section. You can save this subset of your hard drive it can interact with. I gave it a section where it didn’t have things that had API keys and things, it was just like me playing around. But still it is a bit of a hesitation, but that’s not really what we’re talking about is it? 
OKKEN: No, what we’re talking about is an article that came out. I’ve never seen this site before, theoutline.com and the article is called, “How a VC-Funded Company is Undermining the Open Source Community”. It’s about some accusations of some underhanded tactics by Kite.
The story is, it’s about two add-ons to Atom, the text editor Atom. One of them is Minimap, which is supposedly downloaded over 3.5 million times so it’s well used and it’s developed by one person. I’m guessing Minimap is similar to the map feature on Sublime or something. But the one developer, @abe33, was hired by Kite and then after being hired by Kite, updated the plug-in with a Kite promotion feature.
KENNEDY: Actually, the git commit log was, ‘Added Kite promotion feature’ or something like this, right?
OKKEN: Yeah, and the feature was to insert weblinks or links back to articles on the Kite website related to the content of a user’s code. It would read the code, figure out which article would be relevant and put links. I’m guessing the links go in the Minimap and aren’t actually inserted in your code, hopefully. 
But the users were rightfully kind of ticked about this and said, ‘This isn’t a feature, this is blatant advertising.’
KENNEDY: I think there’s two levels here. On one hand, the person who added that feature was the creator of the product, so that’s not great. If some other random person had come along and inserted this promo stuff into someone else’s Open Source project, that would have been flat-out terrible. This is, let’s say, a little shady, I would say, in the spectrum in my mind. There’s very small points where this is going to benefit the users, other than the one user who is Kite. 
OKKEN: Yeah. Now if it was possibly suggesting lots of different articles from different websites it still would be weird. It’s a completely unrelated thing, feature, of it. I don’t know. 
KENNEDY: Yeah.
The next one is a – I had to look it up but it’s another Atom add-on – which is an auto-complete Python, so that definitely relates to Python. It didn’t insert advertising, but what it did do was, the auto-complete was done using a local engine on the user’s computer called Jedi. And it got switched at one point to default to the Kite engine, which is a cloud-based engine, so it would send all your code to Kite. If somebody updated that plug-in, I don’t think they would know that that was going on.
KENNEDY: Yeah, how would you even know, right? ‘Auto-complete is still working. Oh wait, it’s because my code is no longer on my machine. How strange.’
OKKEN: I’m not sure who put that feature in but the article suggests that instead of a hire by Kite, just a bunch of Kite people were working on the plug-in and added this. Again, users aren’t supportive of that change and it is a bit weird. Basically, the point of this article is to point out that we’ve got a lot of Open Source projects that are used by a lot people, like a whole lot of people. And it only takes one person, core person to be corrupted or influenced to basically make the package benefit a single company instead of the rest of the world. Yeah, it’s problematic and interesting.
KENNEDY: Yeah, it definitely raises some interesting moral issues around Open Source. What does it mean to make these types of changes when there’s 3 million people already using your product? Especially if those changes are visible, if that means privacy changes and your code is now being analyzed outside of your control rather when you thought it wasn’t.
OKKEN: Yeah, like that auto-complete thing. What I guess I would have expected as an Open Source user is, I don’t care really if a company has Open Source projects that they’re maintaining that benefit their company. I’m kind of used to that and it’s not terrible. It’s very out in the open. So, I kind of would have expected them to fork that project and have a different auto-complete project that would go to Kite instead of using Jedi. That would have made more sense to me.
KENNEDY: Yeah, if you opt into it you get better auto-complete, you might make that trade-off, right?
OKKEN: Yeah, but anyway.
KENNEDY: Anyway, everyone can read it for themselves. It’s a pretty interesting article.
So, something I am much more comfortable with – I use it on my projects – is Rollbar. So, you guys have probably heard us talk about Rollbar before. It’s super easy to integrate into your system you just pip install Rollbar and plug in your account key and you’re basically ready to go. The idea is, it will look at your code, especially your web apps while it’s running. And if there are any errors, it will capture all the details about the errors, send it up to the cloud, send you notifications like to Slack or you can get emails, things like that. You usually don’t even have to debug your code, you can just login and see all the variables pass, the whole call stack, things like that, and just go and fix it. Half the time it’s really important to be notified right away when an error is happening, rather than letting it go on for hours and finally somebody vaguely send you a message like, ‘This button doesn’t work anymore.’ ‘What do you mean it doesn’t work?’
So, pip install Rollbar and you’ll be ready to roll. Check them out at pythonbytes.fm/rollbar. I use it on pythonbytes.fm and other sites. It’s great. Thanks, Rollbar.
OKKEN: Thank you, Rollbar.
KENNEDY: You know, journalism in general has been more interesting in the last six months, I would say than it traditionally has. The next thing I want to talk about is maybe a specialized green scraping-type of library called Newspaper. So, this is a Python package, pip install Newspaper-type of thing. The idea is you can point this at a URL or say, CNN or MSNBC or New York Times or something like that, and it will give you very detailed information that you might care about for news articles. Have you heard about this, Brian?
OKKEN: I haven’t.
KENNEDY: This is really slick. So, I’ll give you a little sense of the code because there’s just a few steps. You’re like, ‘Wow, that’s sweet.’ You create this article, object, and you pass the URL to some news item, You can download it and it will give you the content. You can parse it and then you can ask it things like, ‘Who were the authors?’ and it will just give you a list of the names of the authors already discovered. You can ask it when it was published. You can do NLP, Natural Language Processing, on it. Then you can ask, ‘What are the keys words? Give me a summary of this article. What is the cover image of this article?’ All sorts of stuff like that. This is really cool if you work in news type-data.
OKKEN: This is great. Especially if you tie it to other ways that you’re going to get news articles to be able to parse some of this as a little service. That’d be cool.
KENNEDY: Yeah, and I don’t remember where you point it to to get started but you can also say, ‘What are all of the articles on this news site?’ and then go ask these questions about each article and things like that. It’s pretty slick.
OKKEN: I like it.
KENNEDY: It’s a little bit of that import anti-gravity-type thing. ‘I typed a few lines and it’s rolling.’
OKKEN: Before we move on, the code example that you talked about, you put it up on our show notes, and it really is just like 17 lines of code. It’s pretty short.
KENNEDY: Yeah, and like half of that is showing you what’s printed out. (Laughs) Maybe not half, but something like that. 
So, this ability to grab these packages and do amazing stuff in a few lines of code, maybe that’s why Python is popular. What do you think?
OKKEN: Yeah, I think so. And there’s an article from IEEE Spectrum called, “The Top Programming Languages of 2017” and big surprise, we’re number one! Yay!
KENNEDY: We’re #1! Woohoo! Yeah, it’s really cool and it’s one in a lot of interesting ways. There’s actually five measures which mean anything to me. One measure is the IEEE Spectrum ranking, one is trending, one is jobs and one is open. So, you can go over to this interactive thing IEEE Spectrum rating is all-around. Trending is languages that are growing rapidly. Jobs are languages that are in demand by employers and open is popular on Open Source hubs. You can also dig into it by embedded devices and things like that.
OKKEN: This is an interactive thing. You can even customize your ranking if for what’s important for you, which is kind of fun. 
KENNEDY: Right. Like, ‘I care about enterprise development and jobs’ or something like this. And you can narrow that down. It’s definitely interactive.
Let me give you the numbers, Brian. So, for trending, number one is Python. Close behind is C and C++ and Java and Swift is there as well. Then for jobs, actually, Python is number three but just like .7%. So, it goes Java, C and then Python. For openness, Python is way back on top. And then custom, whatever that means, that’s make your own.
OKKEN: Yeah, my comment, I think the reason why there’s more Java jobs is because there’s a bunch of Java programmers shifting to Python.
KENNEDY: Right, like there used to be a lot of COBOL jobs. (Laughs) It’s not because COBOL is growing, people have got to keep that stuff going.
OKKEN: COBOL is still on the list. Wow, it’s 24th in jobs.
KENNEDY: Yeah. Man, that puppy is hanging in there. 
OKKEN: Poor people. But Assembly is like 11th. 
KENNEDY: Interesting. There’s all these different measures and rankings and they all take different things into account. You’ve got to take that with a bit of a grain of salt. 
The one trend that seems to appear across all of these, Python is very high on the list and is growing more popular and higher up on the list. So, that’s a great thing for betting your career, focusing your career and energy on Python.
OKKEN: Yeah, and IEEE is respected by a lot of people but they also openly show you what they used for their methodology and how they rank things. It’s nothing surprising. A combination of Stack Overflow and Trans and Twitter, including articles in their IEEE Xplore Digital Library. Not surprising, but it’s cool that they just show you what all those are. 
KENNEDY: Right, when they say it’s popular in jobs it’s because they’re crawling Stack Overflow jobs, probably CareerBuilder, Dice.
OKKEN: Yeah. I didn’t even know Dice was still around. (Laughs) No offense to all the Dice people.
KENNEDY: MySpace is still around. AOL is still around. 
So, last thing I want to share with you guys is SciPy 2017 Conference happened in Seattle, here in the U.S. Like many of these conferences, the videos and tutorials are imported, put on YouTube and you can go check them out. There’s a ton of tutorials if you want to get into Data Science. The keynote – I haven’t had a chance to watch it but it sounds really interesting – is “Coding for Science and Innovation”. Who wouldn’t want to do that? That sounds awesome. 
We’ve got “Dash”, which you’ve talked about before, “A New Framework for Building User Interfaces for Technical Computing”. A similar spelling but totally different thing is “Dask”, for parallelize data processing data pipelines. We’ve got “Scientific Analysis at Scale, a Comparison of Five Systems” with Jake VanderPlas. And “Academic Open Source” which I think it pretty cool for groups of people in that area. So, tons of videos. These are just a few I grabbed to give you a flavor of what’s out there. 
OKKEN: I was in Seattle. Man, I wish I would have gone. 
KENNEDY: Yeah, I know. I was planning on going but I couldn’t quite make it. 
OKKEN: I’m glad the videos are out there. I’ll check some of those out. 
KENNEDY: And I just got a notice that PyCon Canada call for proposals opened today or yesterday, speaking of conferences. If you want to speak at the other major Python conference in North America, it’s time to submit the proposals. 
OKKEN: Do you know which Canada it is? The left Canada or the right Canada?
KENNEDY: I think it’s the right Canada. It’s in Montreal. (Laughter)
Alright, well that’s it for our news, Brian. Anything else you want to share with everyone?
OKKEN: I am closing-ly done, I’m almost done with the book. I wanted to try to get it down last night at midnight but I’ve got a few hours left. I’m super excited to get the Python testing book out to everybody.
KENNEDY: Yeah. It’s been a big success; people are responding well to it. Congratulations.
OKKEN: Thanks. How about you?
KENNEDY: Nothing too new, just cranking along. Enjoying summer, enjoying working on Python stuff but nothing specific. 
OKKEN: Speaking of summer, you’ve got a vacation coming up.
KENNEDY: I do, I have a semi-work, travel vacation, more vacation-ish stuff. So, I’m going to be out for four weeks. Probably not next week but the week after. We’re going to see what we can do about lining up some guest hosts and keep the show rolling. No concrete details there yet.
OKKEN: At the very least, we’ll have one more episode and there may be a gap, but we’re going to try to not have a gap. 
KENNEDY: That’s right. We’ll see what we can do about either recording on the road or wrangling some people into being a co-host. We’ll see. We’ll keep it rolling as best we can.
OKKEN: Alright.
KENNEDY: Alright. Thanks, Brian and thanks everyone for listening. Bye.
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbyes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.  <|endoftext|>
00:00:00 Hello and welcome to python bytes where we deliver Python news headlines directly to your earbud. This is episode 272. Recorded February 23 2022. I'm Michael Kennedy

00:00:11 number Inaka. And I'm Calvin Hendricks.

00:00:13 Parker. Hey, Calvin.

00:00:14 So good to have you here.

00:00:16 I'm excited to be back. Yeah, it's

00:00:18 great to have you back. I also want to say this episode is brought to you by fusion auth, a new sponsor, thank you so much to them for supporting the show. Check them out at Python bisetta FM slash fusion. auth. More on that later. Calvin, it's been a while since you've been here. But you're a frequent guest. How about just tell quickly people about yourself?

00:00:35 Sure, I've been a almost, I guess, nearly lifelong Pythonista at this point, going back a long ways, but started a company back in 1999, called Six feet up, where I am the CTO and co founder. And we are all things Python and all things cloud. So we're doing some cool stuff there. I've been very involved in some open source projects, like the Plone foundation for the Plone. CMS. We're very involved in Django as well. sponsoring the Django Software Foundation. So super excited to be involved in open source and all things Python,

00:01:04 right on to if I was a company, a person said, I need a Python app, I need some help with it. Or maybe some would even build it, I might reach out to you all, and you might build it for me.

00:01:11 Yeah. Now we'd love to talk about those kinds of opportunities. The harder and more challenging the better.

00:01:16 Yeah, but those are the fun ones. Yeah.

00:01:18 I agree. I completely agree. Like easy.

00:01:24 Well, I think this one you got here this for the first one, Brian, maybe not so easy. That's what's up with your mocking, why is it not working?

00:01:33 Well, your mics. So this is a great, actually, this is a rabbit hole. But my Well, mocks are a rabbit hole. So Ned Batchelder, great guy wrote, he writes a lot of great stuff also maintains coverage. But he's he wrote an article called why your mocks still don't work, which, which is a reference to an earlier article he wrote, called the wire mock doesn't work. And he wrote that in 2019. So if you haven't read this first, so I'm going to go back and recommend both of these. So why your mocks don't work. Or why you're not wanting, why your mock doesn't work is an excellent article, it starts it starts talking about just like what well, to think about how mocks work, you really have to understand Python namespaces, and names and how imports work and all of that stuff. And maybe you don't think you should have to but you kind of do. So

00:02:31 in imports, those are not entirely obvious, like the way that that happens. No, compared to other languages, right, we just say I'm using this library, there's like, it's way more direct.

00:02:42 So So Ned starts off with like, this really great example of just basically two variables x and y pointing to a number and if you assign into each other, but you don't really point and another variable, you point at the thing that the variable is pointing to, if you assign x to y, or y to x or something. And this hat, this does have to do with importing because the names that you import are just kind of variable names that point to something. So he talks about namespaces and, and where where things point to talks about importing and the difference be mostly the difference between from from foo import you thing instead of import foo and reference it as foo thing those are completely different names it within within your Python application. So talk walks through that talks about it and why so if you've got a value from one module pointing to an original value, and then another one pointing to the same thing, if you mock the wrong place, you're not going to get what you think is right. So basically, and this is terrible to discuss over podcast so I recommend looking at this because it's a really great example of how mocks work and and why why they act the way they do and you'll you'll be able to fix a lot of your problems so this is a good recommendation. But the one that we're trying to talk about right now why your mock still doesn't work has to do with this cool decorator thing that mock I don't remember when unit test mock added this, but there's a patch decorator examine a link to the show notes somewhere. We talked about the patch decorator and it's it's pretty neat. Actually I'm jumping all around sorry. But if you just say like patch something what happens on your test like in this example he's got to you got patch cool feature dot expensive preparation and patch cool feature dot logger in your patching with anything with this decorator. What happens is your you get these like other variables that you can add as parameters, mock prep and mock lager that you can use those to change it you can change The behavior, the you can use a search on it, you can change the return values on these through that. It's a just a, this is a way to get a handle into your mock object. It's pretty cool. And, but the trick is, they have to be in the right order. And this example looks like it's fine. But you've got lager at the bottom decorator, which is really the first and prep as the above decorator. And it's

00:05:27 the first one Brian, it says the first line says this prep one, the second one says lager,

00:05:32 yeah, but that's not the way it happens. So that's the catch here. And the punch line is it goes bought, when you're reading decorators, it goes bottom up, and left to right, like, I need rameters. Sure,

00:05:47 right. Like there's layers around your code. And like the inner layers, the first one it sees the second.

00:05:52 So if you the way has originally written it just fails, it doesn't work. The second punch line is unless you've got a real good reason to use auto spec, because auto spec would have caught this problem, like right away. And what auto spec does is it says the thing that you're mocking, you have to call it with the same interface that the thing had in the first place. And so if you've got a class or a module that has a function in it, you can't call other functions, whereas normal marks you can call whatever you want. So the default is free for all what you really should do is auto spec equals true and really, a lot of people me included, wish that that was the default to begin with. But for historical reasons. It can't be because it would break other stuff. But anyway.

00:06:43 Yeah. Yeah. It's not the default to start with Have you put that in to say now only behave as if you are the thing that I say you're pretending to be? That's gonna crash a ton of stuff. Yeah, though. And then

00:06:56 the third and final punch line is just don't use mocks. Even a brand mentions in both articles avoid avoid using marks if you can.

00:07:09 Absolutely. Felix out in the audience says tiny feature with a lot of power this auto spec Yes, very much like Yoda would put it. I love it. All right. Well, we got next topic. Thoughts on on mocking real quick for a move on.

00:07:21 We are just diving into that. And I don't do a lot of test work myself. So I'm sure Brian is the super expert on all things by test, of course. So I don't have a huge opinion here on the specific mocking, although I think it is important for folks to realize that yeah, decorators go from like that. closest to the function out it was an important call out there.

00:07:43 Yeah. The other one was from thing, import something. And then you patch the thing inside there is kind of that that I actually that was news to me. That's very interesting. All right. Also news to me. Please, please tell me about this. Chris May Thank you, Chris May for sending this over. And wow. I don't know if you've heard about please, folks, pls as an LS replacement for Linux and Mac OS. But wow, this thing is cool. Was this had either of you heard about this,

00:08:10 not until today. And I went and installed it as part of my demo. So I could see it because it looks pretty darn awesome.

00:08:16 So this is an LS replacement. And I know there are other LS replacements that already exists. So you can do more things. But this is a developer focused one written in Python, that's pretty darn awesome. So if you go look at the image I link to or just go check out the site, you can see that if you say so I've aliased ls to pls. And if I just say LS, it shows you the contents of your directory folders on top, and then it has icons for the types of files that they are. So I did an LS there's a Git ignore. So it has a git branch icon, there's a license with the law, there's a markdown file, there's a python file a Python logo, but it goes beyond that, like it understands your Git ignore, and the files that are considered hidden or the get ignored ones as well. And it won't show you even if you do like a hidden file listing, it won't show you things like the.vs underscore store on Mac OS, because that's in the Git ignore. So the structure that it gives you is related to that also for Python, if you have a virtual environment, it'll treat that directory as hidden. And because the directory is hidden, like it's sort of suppressed and its visibility. So there's really cool features around this that have to do with basically thing aren't your developer at your listing files that are probably developer like now now what do we do? So another part that's cool is you can do and please dash dash details which I aliased L because that's the LS like equivalent, and in this world, it shows you the same types of things, but it also shows you the size in human terms, so instead of like 101121171112 It would say that 10.2 gigabytes, which is nice, but it also shows you the git status in the listing. So like it has a dash m next to a file I modified, and so on. What do you think of

00:10:09 this? I think it's excellent. The I tried to use it and failed and youth to help help me understand why because you? Yes, you have to have fonts, like some special fonts. All right.

00:10:22 So one of the questions when I posted this week was like, how does it have custom icons? What magic is this? Because this will work over like if I SSH into somewhere and install please on the server. As long as my local terminal is set up correctly, this will work and like how does this work? Well, the way it works is you have to have your terminal font set to a nerd font. So I've talked about nerd fonts before. But all these nerd fonts have all these special icons in them. And long as your active terminal font is one of the nerd fonts, then you get all these core behaviors. If you don't you get squares, which are less than awesome.

00:11:00 My only complaint with it, I wish it would have emulated more of the flags from standard LS so that it just kind of worked. Like I installed, the first thing I did was like, Please dash Al. And they had like a no, no l flat. We don't know what that is. Yeah, I didn't know what that was.

00:11:15 Hmm. But yeah, it's kind of its own thing. That's why I did the alias on it. And I'm like, Okay, well, I'll just I'll do do these things. Another thing is interesting, it has a, you can set up these, these Yamo configuration files that control how it looks. And then you can put those kind of like Node js does with Node modules, like you put it at different or the project that JSON, you could put it at different levels. And if you go into a certain project, that you have a configuration file in there somewhere, it'll pick up that configuration, and then use that to like, customize how it looks for those. So that's kind of an interesting thing as well. So that is

00:11:51 awesome. I mean, we need more, we need more like fun stuff in our terminals. As developers, I totally love this. That this is absolutely the way to get people hooked on using the terminal in the console.

00:12:03 Yes. And yeah, I was thinking about like server management, which we'll get to later, right. Yeah. But if you want to go into the server, and so I'm going to ssh in and do a thing like this is your entire user interface. Yeah, to that Sure. World. And so yeah, yeah, this is your world. So this is a way to bring like a little bit more UI information, rather than just raw white text listing a file. I feel like there's like actually a lot of value in this. Oh, totally. Awesome. Let's see Dean out in the audience. And former. Yes. I thought my life was complete until today. I didn't know this was missing from my life, but it is.

00:12:40 Yes. Please, more terminal stuff. Oh, absolutely.

00:12:44 Well, yes, we get more stuff. Yeah. Speaking more terminal stuff. Yeah. Take it away. All right.

00:12:51 So we have over six years, we've been very focused on the developer experience. And so once a week, we get together and talk about just do a cold code review. But really, it's more of a show and tell. And this is something I showed off last week at our code and review in show Intel, which is a terminal that is GPU based, and written in Python. It's called kidding, if you've not used it, it actually is a super awesome, super fast. Basically, I found it to just be a super smooth experience. And the reason I had revisited it was, I'd been using T mux. Forever. And before that I was using screen. And I wanted to like just have the ultimate power tools available to me as a as a developer. And as like, my primary mode of operation is basically hanging out in the shell or an editor all day long. So I want the best tools possible. So I'd highly recommend folks check out Kittie it is absolutely tuned for performance. And you may ask well, why the heck would I want a GPU enabled terminal is just showing me text is because I want the most performance possible out of my my system when I'm using it and texture is going to give a quick little demo here of Kitty. This is actually using pls and I say err, yeah,

00:14:00 I see. I have the right what is Oh my is this Oh, my posh also, what do you got for the whole for the

00:14:07 bullet train down there. So it's actually bullet train core is not maintained anymore. That's probably my next, my next venture is going to be replacing that line or shape or something like that. So exactly some new, you know, system for showing my awesome like prompt up there. But yeah, if you get the right, fonts installed, and all that kitty supports all that stuff seamlessly. It's very, very fast. And one really cool thing since we're all like Python, Easter's and people who are listening to this would totally relate. You can extend kitty with kittens that are basically Python plugins for kitty. So if you actually I'll give you a quick example. It is I love by love and of love it actually. So the you just you invoke kitty with the kitten flag and say like what kitten you want to use. In this case, I'm going to use ikat and I would just basically echo out a Slack emoji that we use Use for Python. Oops. Oh, oh noes. It's like gonna be like the total like Demo gods not not being very kind to me now.

00:15:08 I love that your your prompt has the Python version and stuff in there is great Oh yeah,

00:15:13 if you're in a specific like pi m area, it definitely shows up. Let me just let me just like try it here I had Python. Oh, there we go. So I must have been in the wrong directory, but so you can actually show graphics on the screen. So if I want to look at an image real quick, I don't need to go to finder and open up preview and like do a quick look on an image, I can actually like quick look on any image I want. And I want to things I did want to show off, I go back to the director of

00:15:40 people who are listening, this looks like a full high res image Yeah, in the terminal, based on a png.

00:15:46 So I used ikat, which is a kitten to display an image directly in the terminal. And now if I wanted to do show even cooler, because one of the features of Kitty is it's basically got a graphics subsystem in here. And if I wanted to like look at my markdown files, normally, if I'd use bat to look at my markdown, like for this the readme that's in here, you get the kind of content highlighted markdown kind of cool, not, you know, not super great. But if I do MD cat, which is Kitty enabled, it actually leverages the kitty sub system here, I can actually review my Markdown file with images in line. So you can see that the XKCD cartoon is actually embedded into the readme of that document. And it does a little better job of like coloring and highlighting the syntax. So if you want to preview Markdown documents, without again, not going to preview or not go into like rendering HTML and viewing your browser, you can actually view it right in your terminal with the images shown in line, which is super awesome. And one last thing, one more trick, I'll show you, there is a kitty kitten for viewing diffs in a rich tool. So if I do a git diff tool, I've configured with my dot git config to configure an alternate diff tool for diff. And now I get this really beautiful, you know, high rez graphic representation of my diff my files, so really kind of pretty, you can see there's two two diff, two different files, I can page through the different files, and it shows me, you know, side by side, you know, diffs was that

00:17:11 still in the terminal that is still in terminal,

00:17:14 I did not leave my terminal, it looks like a new window, it did look like a new window, but it's actually all in terminal. So you can stay in your terminal stage or keyboard. And all the all the shortcuts are super nice. One last thing that you that the diff just sold me. So yeah, if you can switch your windows, obviously, you know, other kinds of terminal emulators, like if you're using T max, but then it's got all the layouts built in. So if I wanted like horizontal or vertical or grid, or if I wanted to like just get to the current one I'm on, you've got all that available to you with nice shortcut keys. And you can just get rid of T mux. And started just going all in on kitty owning.

00:17:51 Okay, I got a question. So I've always been confused about this whole windowing thing, because I just open another terminal. So

00:17:59 Oh, I see your question is I don't want to open a terminal. I don't want to reach my mouse when I have to like go between terminal windows. So I'd rather have like multiple tabs and have splits. And so I can have like a paging going on one window or another window. I can like edit these things, make them shorter or taller or split them in a different way. So I feel like just keeping my hands on a keyboard keeps me more productive as a developer, as opposed to reach over the mouse. I know it's not that far away. But I feel like it breaks that flow. If you're you're typing away at code and you want to like quickly, like open up a tail for a log and like, same window right below where you're running the process. You're just a couple keystrokes away, and you've got that open and going.

00:18:41 Cool. Nice. Yeah,

00:18:43 yeah, that's really cool. So I know we're not to the jokes section yet. But you know the joke about how do you generate a random string, put a new computer science student inside Vim and ask them to exit? Yep. So I think the new version is put four of them in these different panes controlled here and ask them the X at the top right one. Or even more random number or word?

00:19:07 There we go. Boom, did it.

00:19:10 I'm gonna try kidding, this looks great.

00:19:12 It's super configurable supports all the nerd bonds, all the color schemes I've had, it's just got a bunch of cool plugins for it. I've added a search plugin, which searches through your back to your terminal and stuff I was. There's nothing in that specific one. But I searched through here and wanted to search backward. It uses FCF to do searching backwards. So if I was looking for like ls, you see it highlighted the word LS, or 2020. And then if I had multiple ones, and I could just arrow back up between them this, so it's all built in St.

00:19:42 Yeah, really cool. Also, a really cool is our new sponsor, fusion auth. They view them for sponsoring this episode. So let me just tell you really quickly about them. They're an authentication and authorization platform built for devs by devs. It solves a problem of building a central user As your security without adding the risk and distraction from your main app, he's an asshat. Fusion auth has all the features you need to, for great support at a price that will break the bank. And you can either do self hosting, or you can get a fully managed solution running in any AWS region. Or if you've got a side project that needs a custom login registration, or multi factor authentication, and social logins or user management, you can download fusion auth and get the Community Edition for free. And the best part is you can have unlimited users, and there's no credit card or subscription required for that. So check them out at Python by Sarafem slash fusion auth or just click the link in your podcast player show notes and let them know you came from us. I want that T

00:20:41 shirt. That's cool.

00:20:43 I know. Yeah, you got to get a cool t shirt cat slash etc. Slash power password. D Yeah. Very cool. Nice. I love when you get a cool t shirt from our sponsors. All right. Well, Susan like cats.

00:20:57 I know.

00:20:58 And kitties. I can tell that you're already a fan of kitties.

00:21:03 Well, so I don't know if Kitty is parallelized. But yeah, so I want to talk about parallels in parallelization. Say that three times. Anyway, I found this article by Jamie Vuelta cool. Last Name, actually. But it's called futures in easy parallelization. And, um, I was like, you know, it was a pretty short article, and it was a can't be that easy. But so this isn't talking about AI Oh, stuff, or async. Io. It's, it's talking about this one is talking about thread futures, futures with threads. And this is it's a, it's pretty cool. The idea is you've got just maybe you've got, it starts off with a simple example. I just have some work that I want done. And I want it done on different threads or different processors. So this, this example, brings up a thread pool, a thread pool executor, and then runs them all at the same time. Doesn't executor submit. And it's just a small snippet of code, just a handful of lines. And I tried this out. So this example actually, is kind of boring. It's just doing like power x to the power of two, or x squared. I'm on a couple of things. I think that's what star star is, isn't it? That power of

00:22:27 remember? Yeah, x to the power of 2x. Yeah,

00:22:30 x squared, x squared. So the the other example seems a bit a bit more down to earth. And that's in the s on our screen on the on the YouTube screen is just a, it's the entire program here. It's just you taking a few, a few websites, and a couple pages to go to and, and then actually just slipping those down with requests, and grabbing something about them. And this example, just as the result, whether it's a 200, or something like that, but it's a really short example in you've got parallelisation going on, and I played with this just downloaded it, the only we'll have it in our show notes, the only error on this that I had to do is it's using, it's using time in here is just like a debug thing. And in the example doesn't import time. So you have to add, add that import time, and it runs just fine like this. And this is a pretty quick way to add parallelisation for some quick task. So I kind of like it, there's occasionally especially like, I would do it. There's a lot of huge log files, I have to parse or, or big data files that I'm looking for stuff on are grabbing, grabbing error logs off of different systems. And this would be a great example to just grab, grab them all at the same time and pull them in. So

00:23:48 yeah, now this nice. One thing that's cool about the the futures you get back from the thread pool executor, as you can say, dot result, and it blocks whereas on async IO it throws an exception says it's not done rather than just blocking.

00:24:03 Oh, yeah. Yeah. And that's the article kind of talks about that. It's one of the simple things as you tell the executor, you call executor submit, and that gets the jobs ready. But that doesn't block those are, you can submit as many as you want. And then in the example he's just using few, like future dot result in a in a in a list comprehension. And that for each of those results, that'll block until the next one's done. And you know, this one's doing it in an order of which when you submitted it, that might not be the order they finish in, but you don't really care because you just want to wait till they're all done anyway. So

00:24:42 yeah, exactly. If you block on the first one, it's not done. The second one might finish first, but those won't be done by the time we get to them. Yeah, yeah.

00:24:50 Yeah, this is a lot more natural for folks who may not be used to like async IO to

00:24:54 I've been deep in the async IO Well, natural years. That's it. And I have scars now.

00:25:03 That's exactly why I wanted to bring up this article is because there's a lot of stuff where like a, like a, maybe a DevOps person or something. They're not they're not writing async programs, but they might have async need or asynchronous needs that can be solved with a simple, simpler code.

00:25:19 So, yeah, this is very, very elegant, easy to understand.

00:25:23 Yeah. Nice article. Good one. All right. Well, I want to talk about databases and more tools. I feel like this is just the tool, focus tool episode. It is still time. Alright. So I did an episode on talk Python with Emily Morehouse, glyph. And Henyk. And Henyk pointed out this thing called PG mustard. Have you heard of this? No. Have you?

00:25:47 Oh, well, it just listened to that excellent episode. And

00:25:51 now, you know, other than that, like, I had not heard of it. But one of the challenges, so many websites, I just don't understand why the world works this way. But you go to the website, and it just spins and spins. And the the clunkier the more internal the thing looks, the more likely it is to take 10 seconds to do whatever it's doing. Right. But you know, it's doing some database query, probably without an index, maybe they gave it an index, but the index is not being used, because it's actually filtering first on some other random thing or whatever. So databases have this cool feature to say, given a query, explain how you're going to execute this MongoDB has this Postgres has this, and so on. Okay. So that's, that comes out as text, whatever, you have a better way that gives you advice. And that's what this tool here is, which does cost money, just to be clear as a commercial thing. But I thought it was cool enough that I wanted to point it out to people. So what you do is you give it your basically, a select statement, and you ask it to explain it, and it will, it'll break down the EXPLAIN statement into different sections, and tell you this part is really good, this part of the query could be improved, and so on, and then it gives you to like it'll, it'll show you this beautiful visual way of explaining it, and you can dive into it. And if you click on it, it'll tell you things like, Okay, this is a nested loop and on this part of the query took 152 milliseconds, you got 100 rows back. And then it actually describes the situation, why it's good or bad. So for example, it says, You got five stars, because you discarded 1.3 million rows, that makes it faster, but you only got 3.2 stars, because the row estimate was out by a factor of 42. You know, try to get that from tax, right? This is this is super helpful if you've got a slow site that you want to say, Okay, this page is slow. These are the three queries that run when we pull this page. Why are they slow? How can I make them better? So it's, you know, we talked about the regex, 101 thing, how it like kind of guided you through and gave you recommendations. This is like the database equivalent.

00:27:57 This is nice. This is awesome. I can't believe I've never seen this before.

00:28:01 Well, I know I have can't either. No, I've never seen it either.

00:28:04 Now from the from the interview, it sounded like it would recommend how you could change your query to make it better. Is that something that has in there? Did I imagine that?

00:28:14 I believe so. And I believe so if you like eggs, open up this 3.2 stars, I think it'll give you descriptions about what could be better in there. So it can give you performance advice, including high index potentials, or index efficiency, disk operations. So like, you've got to read too much off this to answer this question forecast, cache performance, excessive heap fetches read efficiencies, lossy bitmap scans, and on and on and on. Right. So it's pretty cool. It runs on Postgres 9.6, or newer.

00:28:47 I hope you're newer than that. 9.6 That's, that's pretty great. It supports that far back.

00:28:52 Yeah. Anyway, it is a paid tool. But, man, if you could, for $95, make your website and times faster. And people have been complaining to complain, you don't have to rewrite anything, you just put in like a slightly different ant, or index or change the order of a query. Like that's, that's worth a lot. I think. I think

00:29:12 I'm just gonna try to learn this and then set up a page to say I'm a database optimization consultant. Just run this in the background and say,

00:29:21 yeah, it looks $500 an hour. I will absolutely come in there. Yeah. And I've this new business. I dietary said tools that I've I just I can't talk about it, but you let me in there and magics gonna happen.

00:29:34 I shouldn't have said that out loud. Yeah, well,

00:29:36 I get that. The market will be swamped with these folks. Yeah. Anyway, I thought this was cool. So I wanted to give it a shout out. Cool. Super cool. Yeah. All right. Gavin, you're the last one. All right,

00:29:49 last one up, containing the tools parade. Another tool. This is also cross platform. I didn't mention that before. One of the reasons I really like Kitty was the fact I can use it anywhere. Linux BSD Windows Mac, there are downloads for all those platforms. This one doesn't support Windows, but it does support Linux, Mac and FreeBSD. It's be piped up. I used to be a longtime user of glances. And if you didn't know a glance as was you were also missing out these glances is an awesome way to see what's going on in your system, like what is being used, how much memory is being used, how much was being used. And B pie top is kind of the next generation of that. So I will show a quick little demo this one as well. So for those of you who aren't familiar glances, this is what glances looks like. Sorry, little interruption there. But while I'm live here on the podcast, this is glances. It's kind of like more tech, very texty. kind of old school looking. But if you just PIP X Install, that's how I typically install these kinds of tools. Sorry about that. Yeah,

00:30:56 x is the PIP x is the Homebrew Oh, man. It's amazing thing,

00:31:00 right? Yeah, that sounds good. You just pip install the PI top. If you don't have PIP X installed, you should install PIP x, because that'll get you access to all the stuff and your path all set up. But now I just use the pie top. And you get this like nice colorized you know, view of like a dashboard with all really like, just laid out well, and then all the you can kind of see on here, there's like characters that are shaded in a different color. If you you know, hit those characters, you'll be able to like resource. Or if you see the little numbers, I can hide and show the CPU or the memory graph. I don't care about that one so much.

00:31:41 It's just for people are just listening. Here's a terminal app that has like, like Task Manager. Oh, yeah, or Activity Monitor levels of sort of graphs going on of like, here's the CPU over time. Here's the running processes sorted by CPU. Yeah, the network. This is probably more useful than Activity Monitor, honestly,

00:32:01 I think it is. I mean, what's nice is you get the trending metrics over time. So you can see by CPU core or by like kind of aggregated CPU view, how you know, the seeing the spikes, or one of the this is really useful. If you're on a server, and like something's periodically happening, you're not sure what and you can kind of track down like either IO issues or CPU spikes, you can kind of see if they're becoming very, like, periodic, maybe they're happening every minute, or every like five minutes, like on the dot, and you're like, Oh, that's weird. There's something like maybe it's this cron job. So it helps you track that track those kinds of things down, you can also inspect the processes so you can arrow up and down. And you can actually like hit return and see like, what CPU specifically or memory like a specific processes, you can like dig down into a specific process and see what core it's actually running on. It's just, again, for tracking down performance issues. I'm just using it locally on my own laptop right here. But I've used this numerous to every machine I log into for, you know, customers or production type stuff, if they're still using virtual machines. This is absolutely installed so that when they like something slow or something's doing weird, like I just go fire these up and take a look real quick to get kind of a snapshot in real time. What's going on?

00:33:11 I've done that with glances. Yeah, that

00:33:13 used to be my go to but I just done by top was like the super powered version of glances.

00:33:18 Interesting moved area, the graphs are way better. Yeah, like you have progress bars or like meter bars that are graphical in glances if you make it wide enough, but they don't have over time. They're just like snapshots. And

00:33:31 these are like beautiful gradient colors. Like I kind of just expanded the net one so you can see the traffic going across my card. You can also switch back and forth between different interfaces on the system. So if you've got multiple network interfaces, you can see the aggregate or just for a specific interface. Yeah, super helpful when trying to track down you know, weird, you know, in quotes, weird issues.

00:33:52 How's it run on kitty?

00:33:54 runs great on kitty that performance is amazing. There's another thing I didn't show you is like you can actually see with the NVIDIA smi tool like there's kitty using a 20 megabytes of my GPU memory on there. Oh

00:34:06 my goodness. That's pretty awesome. Speaking of beautiful Alvaro it says be pi top has theme yes, they use the dark yellow theme.

00:34:16 I love the fact that it's got themes I can customize like, you know kitty, or even be pie top or my whatever my IDE is. I just trick that stuff out. This is my environment. I want to be as comfortable and as productive as possible. So the more customizable, the better. And the more emojis the better love emojis. Yes.

00:34:36 There's something to be said about if you sit down and you're like, I am excited. Look how cool this is. Yeah, I'm using like an old version of bash with nothing else installed. This is not as much fun as I envisioned it to be.

00:34:46 Well, the the only issue is when you sit down with someone who's like, they fire up text to like edit some text. You're like, what are you doing? Like, come on look like? Let me show you some cool tools. Like let me get you up to speed on here.

00:34:58 Yeah, text editor. The notepad equivalent if you're not a Mac person, yeah, that's, maybe it's a Word Pad. You know, maybe it's a word pad level, like, that's probably worse, which is worse. That's worse than notepad because you're gonna get weird corrupted characters that you're not going to know. Yeah. And

00:35:15 one of the, especially with, with working from home now, a lot of people are working with kids around that walk by and you want your job to look awesome, so that they're interested in what you're doing. Just say,

00:35:27 Yeah, I'm sure my kids think I'm a hacker.

00:35:32 You're not wait, you're not a hacker? And hack on

00:35:35 code? Yes.

00:35:38 The original there is exactly

00:35:40 the original meaning of that word. Yeah.

00:35:44 Frying pan for some extras.

00:35:46 I do have a big extra that I'm really excited about. Yes, the book is, which I've been talking about for about 18 months. And if you add that to the previous 18 months, about three years of this podcast has been talking about this book. But anyway, so it's, there's no longer a beta flag on it. It's not in beta anymore. So it's, it's off to the printers. And in then to celebrate it being officially released. It is there's a coupon code that will link to this page in the show notes. But it's a coupon code. I don't know how long this is going to be good for. But this is for 40% off the ebook. So this is exciting. And I don't have a physical copy yet. I'm still waiting for mine to get delivered. Hopefully, it'll be in the next couple of weeks. So yeah. Anyway, that's, that's one of my extras. The other extra I wanted to bring up is pike camp. Spain, is happening. April 15. Through the 18th. And man, this looks fun.

00:36:47 It's like actual campaign. I love the idea. Well, like I don't

00:36:51 know if it's actual camping. But there's a admission includes four days and three nights including accommodations and breakfast, lunch and dinner provided. This is pretty amazing.

00:37:03 And O'Brien I think karaoke on ls to karaoke talks,

00:37:08 your games ping pong. This looks great. You have to

00:37:11 give your talk in song form. Yeah, oh

00:37:14 man, no one, no one would want to see me do that. Or me either. So this looks great. But doesn't like a lot of fun.

00:37:23 Fantastic, have you got anything extra you want to throw out there?

00:37:26 I do. Coming up next month. And just a little over a month is the Python web conference, oh, I've got the report the slide for it, you've got the screen, I do want to have the screen for it ahead even even pre planned for this to be ready to roll. So it is Python conference time. This is our fourth speakers or fourth annual event. We've got some amazing speakers who are going to join us this year. So I'll actually bring that up. Because I'm really proud of this group. If you scroll down through here, there is just a amazing bunch of people who have signed on for this amazing adventure with all of us over here. So definitely check it out. It's gonna be way bigger than it has been in previous years. So this is the fourth year we've run it. And I believe we've got 90 speakers this year, we're doing five tracks across five days. So there's two app dev tracks a culture track, the cloud track, and PI data track. So there is something for everybody. Get your tickets now is going to be a ton of fun. We will start getting things cranked up a couple days beforehand, we get in the Slack channel is all set up and people can start basically hanging out and we're gonna have some cool socials. I know we've got one of our speakers is going to give a mindfulness social so if you want to come and learn how to decompress as a developer, and she's going to actually be one of our keynotes about burnout. But she's going to give a practical example during one of the socials that I'm super excited to try out. Nice,

00:38:53 fantastic guy. See a bunch of the people in the speaker list have been here on the show.

00:38:57 Yeah, you should this should not be strangers to especially this guy right here. He definitely that guy. Definitely Jamie. Well, yeah,

00:39:05 I'm noticing a lot of these speakers from either this show or talk Python or testing code they've been a lot of people have been Yeah,

00:39:13 one a lot of friendly faces a lot of friendly faces on here. And again, great, great group of people. They're all super excited to participate in the conference. They're all super excited to like, hang out with everybody. And like just be a part.

00:39:24 Yeah, I like that. You're putting the social links up on the page so that people can check that out instead of having a Google forum or something. Yeah,

00:39:32 it's all about the people. For me. I'm I love being a community builder and putting this together for folks. Oh, look, there's another amazing speakers in the in the audience right now.

00:39:43 Fantastic. Yeah, that is awesome.

00:39:45 Well, no, don't mean to cut you off. But I was just curious if my client any extras, you

00:39:51 know that I do. Alright, I got a couple. Let me let me tell you about this little app I got which I meant to do a little video so I could show you I'm a huge fan of Mac OS. And I really enjoy working there. I love that like the terminal tools or like server stuff, but it's not, you know, you got all the nice little tools and whatnot. One of the things that I absolutely just don't understand is switching between Windows is like nearly impossible if it's the same app. If I got one web browser set of tabs, and another I'm gonna cycle between them like command tab, the Alt Tab equivalent, has no effect on that, right? Like, why is this? So I found this cool app called which that lets you do all sorts of stuff like map it like Alt, Tab instead of command tab, and it'll pull up it's very similar, but then you can even like switch between tabs within a browser. So I want to switch to Vivaldi but under this tab of that Vivaldi so how wherever it lives on what Vivaldi window, I don't care, I just want to go to that tab and stuff like that. Super, super cool. Just cycle between the last use window and the last use app, and there's just a, the customizability of it is insane. Like it's it's truly crazy. And what does it cost? It costs $14 watts. So if that frustrated you check that out. Number two, is I did this video called don't use loops, or do you actually need loops in Python is really to say like some of the time you can use comprehensions of various types that already talked about. But in response to that someone said, Oh, I don't really think there's any difference between using a list comprehension and a for loop. They're the same, like, how could you even tell me that they're different? Well, one important this from from this import is just like a disassemble, and you'll see a big difference. But to I put together an example that for 10 million times, basically adds the numbers one to 10 million, even numbers, one to 10 million to a list using a for loop and then using list comprehension. And it is about 25% faster to do the list comprehension than the loop, which isn't gonna change people's world, probably, but it's, you know, something to consider. Yeah, so I'll link it to a very small just there.

00:42:06 I just my pet peeve of mine, if you're gonna do a loop, at the very least don't do for AI in length of something. That's C that's not Python. So

00:42:20 yes, please, or, or create a number count equal, you know, I equals zero while i less than this i plus plus on the inside, right? Like, yeah, there's a lot of bad variations.

00:42:32 Yeah, those are those I intentionally put things like that in interview questions to try to see if people are really Python programmers or if they're, yeah, exactly programmers.

00:42:42 And it might be fine that you're a C programmer coming into Python. But sometimes people will be dishonest with you during the interview, like, Oh, yes, I use flask all the time. All right. How about you create a hello world view? And run that? I can't, can't do that. Okay, well, then you probably don't use flask all the time. You might use it sometimes or not, not eight hours a day, like you told me. Alright, um, another thing, another similar little just thing as I was working on using a database API, that is async only, but I want to use it in the web app that is not async. At all. How do you do that? Right, we talked about like the result of blocking and all how painful that is. So I came up with this little just that it was working great in production in dev. So this really simple thing, you can just wrap up an async call and say, run it internally manages a little loop and it calls or anything. So you've got like a database async call, you can just say, you know, go to the call and just say run, whatever get the thing, I think with the parameters, right? So it's not like a decorator, you just call it really simple in practice. What I found in trying to deploy this to a website was the database back end was doing weird stuff with like, what thread is running on the web server micro whiskey was like shuffling around, like the order of when stuff ran on different threads, and it was freaking out the event loop and you get all these errors about like, this thing has become detached from its its async i o loop where it came from one loop, and it's trying to continue on another loop just like oh, no, what is all this? So I ended up coming up with a massively crazier version that people can check out that basically coordinates all the work to a background thread, runs it all in the same place and puts it back. It works fabulously. It is horrifying. So you can take it for what it is anyway. As part of this conversation, maybe it works really well, but it looks really bad. Bill Jones. So from court, I believe, sent over I think that said one of the problems with async. Io is if it's already running, and then you call a sync version, which internally happens to use the same pattern. It's going to crash and say it's already running. Weird. So there's this thing called nest IO, which allows you to basically have re entrances. So if you get the runtime error, this event loop is already running. But if it is just run, you know, whatever. But that's the error you get. So this will allow you to basically re, like continue on in the same loop. Right? Those are all my extra. So I thought those are all been

00:45:19 nice simply combining threading and async I O and the same little sub modules brave.

00:45:27 I did not get to that position willingly. Not at all, like but everything I had tried. It didn't matter. And people say, oh, you should use async IO dot run that manage that for you. Yeah, except for that it wasn't working in the weird web servers that are doing all sorts of threading. Yes. And just right. Like, it was the only thing that worked and so there was alright, that was not funny. But maybe I've got something funny for you. He's ready for a joke. Yes, always. Okay, so this one is about mistakes that people make with testing for truthiness versus assignment. And so it's a cartoon and there's these humans being ripped apart by robots who says oh no, the robots are killing us. And someone asked why but why we never programmed to do this. And then there's like a computer with some code on the screen in the background you see robots killing people and it says has actually the code for the robot it says void interact with humans. If is crazy robot equals true kill humans else be nice to humans.

00:46:36 But it's an assignment not a god. It's a single equals instead of a double ended the world has come just to me a crazy killer robot. Crazy murdering robot.

00:46:48 Yes, exactly. Anthony would save us from this cartoon Apocalypse by saying this. You'll remember your unit test. Yeah.

00:46:59 And beta testers.

00:47:02 Why do we keep losing QA people? I just don't understand. Where do they go? I don't know.

00:47:09 just ship it to me. Yeah.

00:47:11 Yeah, exactly. Exactly.

00:47:13 What might your population AB test this stuff? Anyway,

00:47:18 no thing. Nice.

00:47:20 But thank you, Calvin for coming on the show. This time. It was totally fun. Love it. Yeah, absolutely. Brian, thank you here. I was always I always see you later. Yep. Bye, everyone. Thanks for listening to Python bytes. Follow the show on Twitter via at Python bytes. That's Python bytes as in byt s. Get the full show notes over at Python by Sarafem. If you have a news item we should cover just visit by them by South FM and click submit in the nav bar. We're always on the lookout for sharing something cool. If you want to join us for the live recording. Just visit the website and click Live stream to get notified of when our next episode goes live. That's usually happening at noon Pacific on Wednesdays over at YouTube. On behalf of myself and Brian Aachen, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues.

00:47:20 Transcribed by https://otter.ai

 <|endoftext|>
Michael KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode #61, recorded January 10th, 2018. I’m Michael Kennedy.
Brian OKKEN: And I’m Brian Okken.
KENNEDY: And we have, again, some really cool stuff we want to share with you. The best of what we found this week in the Python space. Before we get to it though, I want to say thank you to DigitalOcean. This podcast, these MP3 files, everything is coming to you directly out of DigitalOcean servers. We’ll tell you more about that later.
Right now I want to talk about dictionaries.
OKKEN: Yeah, I want to talk about dictionaries, too. So, thanks to Raymond – I’m going to reference Brandon Rhodes actually for later on – but Raymond Hedinger is probably the person that I have to thank for telling me how cool dictionaries are in the first place because he’s talked about them at different PyCons in the past. And basically, tons of Python is built on top of dictionaries. But one of the things that I did not know was how awesome dict key sharing is. One of our listeners on Twitter, Ned Letcher, keyed is in on this and said, ‘Hey, if you haven’t checked it out, you should go look at Brandon Rhodes, “The Dictionary Even Mightier” talk from PyCon 2017.’ And so I did, and yeah, the key sharing thing is something I didn’t know about, which is totally cool.
KENNEDY: It’s kind of funky to think that it’s not that way until you really think about how it works, right? When you create a class and you create an instance of an object, everyone of those has a _dict_ (dunder dict) and what goes in the keys are the names of the fields of the class and what goes for the values are, well, the values, right? When you say _init_ (dunder init) you say self.name=this, self.id=that. Those are putting entries in that dictionary, right?
OKKEN: Yeah.
KENNEDY: But the thing is, if I create a million of those, I have a million times the string name as the key and a million times the string ID as the ID. So, basically every instance you create stores a seperate copy of names, not just the values, but the names of the fields which can be super problematic, right?
OKKEN: The names of the fields are… And in Brandon’s talk, he talks about since it’s a dictionary there can be hash collisions for figuring out where to put it. So, that happens for every single object has to figure that out. I think it was Python 3.3, 3.4 where they changed it to where… So, here's the trick. As long as you it all of the fields that you’re going to use for your class objects, you initialize them with something, you init function, then all of your objects can share the same dictionary for the key look up.
KENNEDY: Yeah, it’s really cool. So, I think that’s quite awesome. It should really help with performance, as well. Especially memory-wise.
OKKEN: Yeah, it’s a little bit of a weird thing. You have to think about how this is implemented. But Brandon does a really good job of walking you through it so that it’s obvious how the savings is. And apparently from the PEP 412 that this was started with for object-oriented programs, the memory reduction is like 10 to 20% less, using quite a bit less memory so that’s definitely worth it.
KENNEDY: Oh, yeah. That’s always a nice benefit there.
So, I have an interesting project that is recommended by a listener as well called, “Python Hunter.” Have you heard of this?
OKKEN: Well, just because it was recommended to us, but I haven’t looked at it yet.
KENNEDY: Yeah, so it’s pretty interesting. The idea is a little bit like code coverage and it’s a little bit like a debugger in that you enable it on your code, and then as you interact with the code you get a report. But what you actually get here is it will give you basically, as your program runs, it will show you the internals of any module or package you want to point it at as it executes. There’s an example where they turn it on and they call it os.path.join, and it shows you all the internal implementation running, like printed to the console intermixed with your output.
OKKEN: Interesting.
KENNEDY: So, if you are like, ‘I would like to explore what this does when I call this function. I don’t want to route through all the source code and figure out what piece this is referring to.’ You can just turn this on, call the function and it will show the path through the external code it took.
OKKEN: Oh, okay.
KENNEDY: So, pretty interesting. It has some integration with debuggers and things like that, so you can also overwrite it. It doesn’t happen for every bit of code you call. You point it at a module and say I’m trying to work on POSIX Path. I want to understand my interaction with that module. Then you call os.path.join and off it goes. Pretty sweet actually.
OKKEN: Like for instance, if I want to mock out my requests interaction to external database or external sites, I could point it at requests to find out exactly what my application is doing with requests.
KENNEDY: Yes, exactly. And you would say, ‘This is the part where it goes to the network. That’s the one thing I have to mock out. The rest I could just ignore.’
OKKEN: That would be a great tool, especially for people that are trying to isolate bits of their application.
KENNEDY: Yeah, it’s cool. So, this was recommended to us by Ivan Pejic, so thank you for that. Kind of interesting that it’s built on Cython, so it’s nice, high-performance; it’s always cool to see Cython making an appearance. Nice.
So, you know, I always feel like, when I’m working with bash I could do a better job. In fact, I don’t use bash that much these days. I use oh-my-zsh, but same thing. There’s all this stuff about the shell I could do better.
OKKEN: You use zsh?
KENNEDY: I use oh-my-zsh. I love it. It’s really got some nice integration with Git, the history and the search and autocomplete, like a tabbed selection of various things. If you type a few characters and hit tab it will show you the list of all the things that you’ve done involving that. It’s kind of cool.
OKKEN: Okay. I’ll check that out sometime.
KENNEDY: But I think more people use bash, actually.
OKKEN: I went through a phase where I started out learning ksh in college and in my first job. And then I tried bash and I went to Z shell for awhile but it had support issues on whatever operating system I was using at the time. But bash is just everywhere so we can just use it as is. The place where you have to jump through a few hoops is on Windows. Before we get into this article, there’s an article called, “Ten Things I Wish I’d Known About bash” which is a really great little QuickStart. It’s just some fun things and somebody trying to sell a book in it, but it’s only like five bucks, so go for it, dude. But kind of things that I’ve always wanted to know, like what the difference is between back tics or $( ) (the dollar sign paren) or placing bits in your command. The gist of it is, they’re identical but one is easier to read if you have a whole bunch of them.
KENNEDY: Very cool.
OKKEN: And then globbing versus regexps (regular expressions), that’s something that confused me at first, so that’s a good thing. Dealing with exit codes. Number four is the one I really like the most because that one confused me. When you’re using ‘if statements,’ what’s the difference between [ (bracket) and [[ (bracket bracket). And I’m not going to talk about it here, but these are some good things.
I also wanted to bring up, I spend a lot of time trying to hunt for a good bash application for Windows and right now what I’m using the most is Git for Windows and it has Git bash embedded in it. I think that’s great, even for people that are not using Git because it’s just a good bundle of all of your bash tools and it just always works so I’m pointing everybody at that now, even if they’re not using Git. We did have a recommendation from one of our listeners a long time ago about a tool called cmder (commander), I think.
KENNEDY: Yeah, I’d say commander.
OKKEN: cmder.net, I think there’s a reference on here that it’s related to Git for Windows somehow. Not sure, but if you don’t want to try Git for Windows but you want some emulator working on Windows, check out cmder also.
KENNEDY: Yeah, it has the Monokai theme, cmder looks cool. I saw it on my Windows 10 machine. One more thing I’ll throw on the list here while you’re talking about these – I don’t remember what version of Windows 10 has these, it’s not the original but maybe the one last fall, I can’t remember when it came out – but they’ve added the Ubuntu subsystem for Windows, which is pretty cool. But you have to turn that on like you turn Windows features on and off; it’s off by default.
OKKEN: And I’m glad you brought that up because I want to try to revisit that. I did try those and I had issues with being able to launch external applications.
KENNEDY: Yeah, they’re like really isolated. The Ubuntu part and the Windows part, they don’t really communicate very well. So, it’s not the same I don’t think.
OKKEN: It’s not like you have to do that a lot, but I just want to open up my text editor from a command line.
KENNEDY: Yeah, exactly. Cool. Those are all nice things to check out especially on Windows. It needs the most help with the shell actually.
Cool. So, before we get to the next one, which is a bunch of pretty pictures, I hope we’ll help people understand the definition of microframeworks versus, you know, batteries-included frameworks, things like that.  We want to tell people about DigitalOcean. Those guys are doing awesome work over at do.co/python, so check that out. This is where I have all my servers; I probably have eight servers for the various things all working together now, failover and database servers and whatnot. It’s great. Super easy, 30 seconds, you’ve got an Ubuntu machine or what other. There’s a bunch of distributions and pre-configured servers. Go over there, set them up. They’re doing a bunch of great stuff and it’s definitely affordable and reliable and fast. Cool.
So, there’s this thing called Snakefood, which is a tool written by Martin Blais and it creates Python dependency graphs. So, I’ve got one package or one module or one class that depend upon some other thing and it will put them in a graph and it will draw lines between them. That’s pretty cool. I haven’t done a whole lot with it. You can combine that with GraphViz and it will create these nice visualizations of Python code bases.
OKKEN: Oh, nice.
KENNEDY: So, that’s pretty cool. And this is not a brand new item but I had seen it a while ago, it’s from the Grok code guys. I think I had them on Talk Python Episode #8 or something, so it’s been awhile. They took this Snakefood plus GraphViz and they turned it on a variety of the frameworks that we know and love, and it’s really interesting to pull up the pictures and just look at the relative complexity. So, if somebody tells you Bottle is fast because it's simple, but it doesn't do very much for me so you’ve got to bring a lot of pieces in. Django is much more full-featured and more complex, but it has a lot of things built in. Flask is somewhere in the middle and Pyramid just a little more than that. You can look at these pictures and get a sense. Do you have the pictures pulled up?
OKKEN: Yeah, and you can totally see that that’s the case.
KENNEDY: Bottle is incredibly simple. I’m actually blown away that it is as simple as it is, but you can just tell straight away by looking at it.
OKKEN: It’s so elegant. There’s no cycles.
KENNEDY: Yeah, there’s no cycles. It’s an acyclic-directed graph. That’s quite interesting, isn’t it?
OKKEN: Yeah.
KENNEDY: Cool, so then Django. How would you describe Django?
OKKEN: It's like if you clean out a comb after it’s been used for a year, that’s what it looks like.
KENNEDY: (Laughs) Yeah, it’s a little bit like one of those ink blot tests. And Flask and Pyramid, they’re sort of on the same scale. Pyramid’s just got a little more going on. They’re definitely not simple but they’re not insane. They’re not like Django-level of interaction. Then they go and they do this for Celery and RQ as well. You can tell Celery is way more complicated. It’s more complicated than Pyramid or Flask, by the way. But it’s also more complicated by a ways than RQ.
Let’s see, what else do they cover? They cover Twisted and Twisted is pretty insane. It’s probably more tied together than Django, I would say. Mercurial, quite interesting as well. Requests is in here. Requests has got some pretty nice look, actually.
OKKEN: Yeah, it’s oddly elegant and pleasing.
KENNEDY: It is. IPython, not so pleasing. I recommend everyone pull up this Snakefood link and just have a quick glance through the pictures. I think it’s quite insightful. It gives you the technique for applying this to other code bases as well.
OKKEN: Yeah, these would be fun things to just print on your wall and tell people that you’re using it as a reference.
KENNEDY: Yeah, absolutely. Cool. (Laughs) ‘Yeah, I just follow the graph when need to know how things work. Uh huh.’
OKKEN: (Laughs)
KENNEDY: Your next item is about being a good Senior Engineer.
OKKEN: The new year, it’s 2018 now. There was somebody that posted on Twitter and said, ‘Hey, it’s a new year. You should go read this again.’ It’s a 2012 article called, “On Being a Senior Engineer.” It’s from a website called Kitchen Soap, which is funny. I think there’s just a lot of really good advice. I just went through and pulled out a bunch of the headlines, but it’s some things that I’ve been thinking about lately as I’m hiring people and thinking about always with evaluations and stuff like that. What does it mean? What does an Engineer versus a Senior Engineer mean? These traits, I think, fit well.
KENNEDY: I think these are all really good. Maybe we don’t have to cover them all but “Don’t practice CYAE.”
OKKEN: Yeah, “Cover Your Ass Engineering.”
KENNEDY: Exactly. I think that’s a really good point. A lot of people who, when they’re starting out are trying to make sure they’re never perceived as not knowing everything. By the time you’re a Senior Engineer, you’ve been beaten with the fact that you don’t know stuff and new stuff is coming along that you also don’t know continuously, right?
OKKEN: One of the top ones is, “Seek out constructive criticism of your designs.” And yeah, you're just trying to find out another perspective to make sure you haven’t missed something.
KENNEDY: One I really like is, “Life the skills and expertise of those around you.”
OKKEN: Yeah, well, you and I are definitely trying to do that, so that’s good.
KENNEDY: I think a lot of people try to keep the recognition for themself when they’re new, right?
OKKEN: Yeah.
KENNEDY: But I think one of the biggest skills someone can be providing on a team is actually any time someone gets stuck they kind of float over to that part of the group and help that person keep moving. They can almost write no code, but be sure to float around and make sure nobody’s stuck. That can be a massive boost to the team.
OKKEN: Bringing up a couple more items, estimating how long something’s going to take or how much work it is, it’s always hard. As you grow in your career you realize you can’t avoid it, so you just need to embrace it and be okay with giving ballpark estimates to people and then trying to get better at it. Keep track of what you did and try to improve.
The other one that’s difficult is trade offs. You know that you can’t get all the information before you start working, so making good trade offs between information and risks and benefits and making judgements. Those are things you just have to practice.
KENNEDY: Yeah.
OKKEN: Another thing I wanted to bring up is there’s a list of cognitive biases, so just knowing when you’re making a decision, there are biases in yourself that you will need to be aware of and try to make sure those are there and compensate somehow.
KENNEDY: These are all really good. I like, “Understand that not all projects are filled with rock-star-on-the-stage work.” You’ve for to become a finisher and a lot of times there’s little details that nobody likes that are part of it.
OKKEN: Probably the first half of my career, most of my job duty was, I would be taking on the things that everybody else didn’t want to work on and forgot about, and wrapping them up and finishing. But then I was often getting credit for finishing projects that most of the work was done by other people, they just didn't finish it.
KENNEDY: Yeah, become a finisher. It’s good stuff.
And then there’s finally, “The Ten Commandments of Egoless Programming.” Want to take us quickly through the them?
OKKEN: “Understand and accept that you will make mistakes.”
“You are not your code.” Each of these could be episodes themselves.
“Know matter how much karate you know, someone else always knows more.”
“Don’t rewrite code without consultation.” Oh, I’m guilty of that, definitely.
“Treat people who know less than you with respect, deference and patience.”
“The only constant in the world is change.”
“The only true authority stems from knowledge, not from position.”
“Fight for what you believe, but gracefully accept defeat.”
“Don’t be the coder in the corner.”
“Critique code instead of people – be kind to the coder, not to the code.”
These are good.
KENNEDY: Yeah, these are all great. I really connect with a lot of these, so I’m glad you brought this up.
OKKEN: And no where in here does it say, don’t make fun of PHP.
KENNEDY: No, you can totally make fun of PHP all day long. (Laughs) But you can also make fun of Python, unfortunately, a little bit, for its lack of UI framework. We talked about that last week, how that’s one of its last remaining places where it really quite a bit could be better.
One of the things that we didn’t read above was ‘No empty complaints’ and one of my rules is I don’t like criticizing stuff without offering a better alternative, or at least some kind of constructive thing. So, here’s my attempt to backfill my criticism of the lack of UI frameworks. Here’s where we are and here’s some things that seem like they’re working and a little bit of constructive-ness.
So, I went through and I said, ‘Alright. What are the options for Python UI frameworks, right?’ I’m not loving what’s available right now in a lot of different angles, but what can we do? We talked TKInter, not super amazing. I have a link to an example. Brian, pull it up and tell me how you feel about that application. Does that look like a classy, new app from 2018?
OKKEN: No, it looks like it’s running on Windows 95.
KENNEDY: Yeah, it’s like battleship grey. It looks like whoever built the original Minesweeper on 3.1.1, they built this. That’s kind of what the current UI looks like in Python, which is a problem, right?
So, what are the options? We have that but we have PySide and Qt. Actually, Qt is pretty nice in terms of how it looks; it looks like it belongs on the platforms. There’s a designer for it, a draggy/droppy designer-type thing, which is pretty good. But the licensing is a little weird. PyQt is GPL. PySide is like an LGPL way to try to go around it, but PySide is slightly out of version with Qt. There’s just a real messiness around it, but it’s still a pretty nice thing. There’s Kivy and there’s PyGame. There’s also PyOpenGL. But to me, if you go to Kivy and you look at the showcase or the examples of people and what they built, they all look like AR-type things or games or other types of simulation stuff. I know you said people have created a few things that are not quite like that, but it’s not really the focus of the platform, right?
One that actually looks pretty good is wxPython. Click on the example for that.
OKKEN: That’s one that I’ve used before.
KENNEDY: Yeah, this looks pretty good. This could certainly be at least circa 2005 on Windows. It looks pretty different. And it has a couple of GUI designers, it has these widgets; that’s pretty cool and then there’s all the Electron.JS stuff. So, Electron.JS is basically Node.JS plus hosted headless Chrome plus JavaScript and HTML for the front end. There’s actually a couple of attempts to create what I really think should be called Proton.py instead of Electron.JS, a Python equivalent where the running backend is Python you could use Sculpt or something to actually make the JavaScript side also Python, like the Animal guys are doing which is pretty cool.
So, there’s this thing called Eel, which is a library for making Electron-like, offline HTML JavaScript GUI apps. Like I said, you could put Python in the front end of that Sculpt bit. That looks pretty interesting. So, you get basically a local app packaged up as a .app or .exe, but it’s more or less like a web front end that can do local machine Python capabilities. So, that’s pretty cool.
And then there’s a bigger version called CEFPython. That name is not amazing, but it’s “Chrome Embedded Framework” Python and it’s the same type of thing. It’s a little more advanced but it’s also a little less obvious how to get started with it. But both of
these look like interesting Electron.JS-like things.
OKKEN: These are people trying to solve the problems we have, so that’s good.
KENNEDY: Yeah, it’s good to see them doing it. And last week we talked about possibly having an open session at PyCon in Cleveland in May about this, so it’d be really fun for people to get together and join us there. I think Paul Hildebrand is kicking that off but we can all go and be part of it.
OKKEN: Definitely.
KENNEDY: Awesome. Here’s my research bit I did on Python UI frameworks. None of them are like, ‘Yes, this is the answer.’ But maybe it will spark some thinking and get us going in the right direction.
That’s all I’ve got this week, Brian. Anything else from you?
OKKEN: No, that was a fast six items.
KENNEDY: It was because they were so fun. I really like the one that you got about the Senior Developer stuff. It’s not totally from 2018 but it’s that evergreen material that just lasts, right?
OKKEN: We talked about quite a bit of those but every single item that we talked about has a paragraph or more of discussion on the articles. Please go read that, everybody. It will make you a better person.
KENNEDY: Absolutely. Very cool. Well, Brian, thanks for sharing this with everyone.
OKKEN: Thank you. Bye.
KENNEDY: Bye.
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues. <|endoftext|>
Michael KENNEDY: Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds. This is Episode #64, recorded February 7th, 2018. I’m Michael Kennedy.
Brian OKKEN: And I’m Brian Okken.
KENNEDY: We’re excited to be here with you today. We have a ton of good stuff we’ve uncovered to share. Very exciting. Before we get to that, I just want to say thank you to DigitalOcean. Check them out at do.co/Python. There’s some really awesome news from them and I’ll share that with you in a little bit.
But right now, I’m kind of in love with this project that you picked right now, Brian. Tell me about it.
OKKEN: Well, it's wxPython. We’ve heard of this before when we’ve been talking about GUI development and desktop development lately. The wxPython folks contacted us and said, ‘Hey, we are Python 3, version 4. Code name Phoenix is alive and usable.’
KENNEDY: That is really cool because wxPython, there had been a really old version. And I think we can see what Phoenix means in terms of a project, right? It’s reborn in this new Python 3 UI. Very exciting.
OKKEN: The underlying wx toolkit had also underwent a change and the wxWidgets project has been updated. And the wxPython, on top of all that, has been updated. It’s something that I’ve developed with years ago and discounted because it has an old look, but now it looks nice. People should check it out.
KENNEDY: That was one of my two major complaints – or maybe one of three – about the Python GUI stuff. Obviously, we’re still on this kick and I think it’s a good one actually. But the fact that a lot of these UI tool kits look like they’ve jumped in Marty McFly’s car and transported from the early ‘90s to your computer; they’ve got this old-fashioned look and it’s out of place. So, the wxPython stuff looks really modern and it looks like it belongs on a lot of the platforms, at least Mac, Windows and Linux that I’ve been playing with lately. I’m really happy to see this coming along.
The other one I would love, of course, that Visual Designer sort of tooling in there. But I’m happy this thing is coming along. It’s been re-released; that's awesome.
OKKEN: On their startup page, after you do all the downloads for it, there’s a five line application that you can use to try it out. That’s pretty slick and fast to get something up and running. I tried it out yesterday. It’s good.
KENNEDY: Very cool. So, I have a little question, a little tech interview-type question for you, Brian. Did you know that you can define a Python function and just put triple dots after it and kind of say, ‘Actually, I don’t want to define it’?
OKKEN: I did not know that.
KENNEDY: I did not know that either. However, part of my experience of going to PyCascades was to meet Lucas, who gave this amazing talk. He’s from Facebook and Instagram about how they’re doing gradual typing in Python and how they’re adding types to the millions of lines of code at Facebook slowly and this whole process they went through. It’s super interesting. I’m having him – already recorded but I’m going to have him in sort of real time the way people experience it – on Talk Python talking about it.
One of the projects that came out of there that I thought was really interesting is this thing called Typeshed. Have you heard of Typeshed?
OKKEN: I have, yeah.
KENNEDY: So, Typeshed is this place that contains external type annotations. Basically, these signatures for everything in the Python standard library. So, you go in there and you’ll find functions or classes with methods and whatnot. And you’ll see stuff like def visit (self, node: AST) this is from the AST module. So, it will tell you the type of thing that says -> Any: (arrow goes to any) for example and then just … (Dot, dot, dot) and that’s it. And this is a way in which you can define these external types and these .pyi stubs. So, it’s like a normal Python file that Python can interpret, except for all the methods that are empty. There are a couple of PEPs that talk about the annotations, ‘How is this working?’ And so on, then there are just annotations that people know. But ‘s is pretty interesting is that this is actually what mypy uses. This Git repository of what Python looks like in terms of types, this is what mypy uses. The static type checker as well, what PyCharm uses to get all of its magic. So, PyCharm is much better than many editors about going... Oh, you know if you call some method on this other thing and it returns this other type and you hit ‘got’ you can see all the autocomplete from it. Where did that come from? It came from Typeshed actually.
OKKEN: Okay.
KENNEDY: I don’t know, I thought this was pretty interesting. And the other thing that is really cool about this is it doesn't look like people are using it this way very much. I’m putting this out there as a call to everyone who cares about Python 3 who wants their library to be very rich with inside these various editors and type checkers, to take a moment and document packages signatures here. There’s a place to put third party packages like Request or Flask or you name it. If you run an Open Source project that has a package that people use, you can come over here and put yours in and then that will be picked up by all the other things. It’s pretty cool.
OKKEN: Okay, that’s interesting. I’m not sure how they avoid name collision on that.
KENNEDY: They basically have structure. There’s a third party folder and I think it’s just the next subfolder is the name of your package, which is unique on PyPI. So, it’s probably okay. I hadn’t heard of Typeshed. I knew that you could annotate your signatures and stuff, but I didn’t know that there’s this one place that’s kind of being used as common source, so that’s pretty cool.
OKKEN: Yeah, and I’m curious… These Python stub files, is that the only thing they’re used for, is type?
KENNEDY: I don’t know, I’ve never heard of them before but apparently…
OKKEN: Interesting.
KENNEDY: (Laughs) It’s this new signature. It remind me a little bit of what happened a few years ago with Typescript, where – I think it’s called DefinitelyTyped, I can’t remember – there’s now this massive git repository of all these external JavaScript libraries that want to interact with the typed version of JavaScript, so they all have basically, there’s this similar concept of just the signature descriptions without the implementation in this one giant git repository. So, this is kind of cool to see it happening in the Python space.
OKKEN: Yeah, definitely. One of the things that I want to do, I think that Ned Batchelder’s Coverage tool is super cool. The same caveats as normal is don’t be too enticed with trying to search for 100% code coverage in your tests, but it’s a useful tool on its own otherwise. But Coverage 4.5 just came out and he added just one new feature and this new feature is pretty darn cool. It’s the configuration plug-ins feature, which allows you – you kind of have to read it a bit and get your head around it – but the idea is, there’s a lot of people that have different configurations or different run configurations of their code. Some of the code is intentionally not supposed to run at certain times, so it throws off honoring different requests from people to put new features in. It has this configurator plug-in so that you can do your own pragmas ahead of time, a little bit of code before you run the rest of your code and you can comment out things.
An example, for instance, in the pytest book I had a application that used both TinyDB and MongoDB as two different options. So, I would want to run my tests on the whole thing using Tiny and then also the whole thing using Mongo. But I don’t want to… There’s some of the code that’s only for Tiny and some of the code that’s one for Mongo. It doesn’t make sense to run coverage on those parts in those configurations. So, that’d be a great use for that.
KENNEDY: Yeah, that’s really cool. Because it’s really easy to say, ‘We’re at 80% coverage, we’ve got to keep going. How do we get this higher, right?’ But there’s some stuff that should just kind of be left alone and this is the nice way to say, ‘Right now, you should not consider this bit of code’ because who know, maybe it’s some sort of utility script that you’re just throwing in and you don’t actually want it to be run as part of your package. Who knows? It’s pretty cool.
Yeah, so you know what else is pretty cool is the recent changes that the folks over at DigitalOcean made. They’ve always been the incredible, affordable hosting and basica virtual server space. They’ve made places like AWS react in extreme ways to try to keep up with them. So, that’s pretty cool, but they just recently, more or less, just doubled everything that you get for the price. So, for $5 you get server with a gig of RAM and 25 gigs of SSD. It’s pretty sweet. It even includes a terabyte of transfer, which by the way at AWS rates, that’s $93 of bandwidth. For $10, two gigs. If you pay $20, you get four gigs, 80 gigs of SSD, a couple CPUs. It’s just crazy some of the prices that they have now over here. So, if you’re looking to do some virtual server stuff, or things like that, definitely check them out at do.co/Python. They’ve got some really cool options now.
OKKEN: That’s great.
KENNEDY: Yeah, and thank you DigitalOcean for supporting the show. It helps us keep going.
So, we’ve already talked about, Brian, the fact that neither of us are really into gaming, right? I’ve been playing a little bit of Formula One, you know with the steering wheel thing. That’s kind of a fun simulation. Generally gaming, not so much for either of us.
But I have some gaming news that is pretty interesting. It doesn’t have to do with playing games, it has to do with the creation of games in three worlds. I’m sure that you know personally, but people may know that Python is actually used quite a bit to automate and manage and build the pipeline between all these different tools and all these different people at these massive game and movie companies, right?
OKKEN: Yeah, that’s pretty cool.
KENNEDY: Yeah, you’ve got to go from Maya to some other tool, all these hundreds of gigs of files and they need to be transformed and processed and what not. That’s a challenge, and a lot of people built custom versions of that.
So, the big news here is that Unreal, the Unreal Engine, is one of the most significant 3D game engines there is, they are now integrating Python deeply into its processing pipeline, not it execution necessarily. But its plan to integrate Python in the Unreal Engine for Data, basically, for this data pipeline.
OKKEN: That’s great.
KENNEDY: Yeah, it’s cool right. So, this is from Autodesk and they said, ‘Hey, we’re going to give you a glimpse of what we’re doing.’ So, maybe somebody’s built a model in 3D Max and it’s this super intense, ultra-fine quality, every to single thing is modeled. The example I have in the article we’re linking to is like, there’s a motorcycle and the tired on the motorcycle have those dots, like those sticky pieces of rubber that come out on new tires, where they come out of the mold and they’re still sticking out. So, they’re like, ‘We don’t need that in the game. This is going to kill the performance if we actually put every little bit of these knobby things and stuff into the model that ends up in the 3D in the Unreal Engine, right?’ So, they’re basically building this pipeline where you can say, ‘In Python, why don’t we just delete all the objects that are probably too small for people to notice anyway, and just do that automatically.’ Do you level a details model, you can merge objects together, you can create a bunch of different motorcycles by automatically taking the source one and replacing the material that is, say, the fenders and the gas can and stuff. To change it from, say, a light blue to a purple shiny motorcycle. So, all of this is automatic. So, once it’s automatic, you can change it at the beginning of the process and replicate this entire workflow, which is pretty cool. It’s awesome to see that Python is the choice for it.
OKKEN: Yeah, very cool.
KENNEDY: So, one more example of people using Python in ways that I had no idea existed.
OKKEN: Yeah, neat.
KENNEDY: (Laughs) Pretty cool.
OKKEN: Good job, Unreal.
KENNEDY: Yeah, good job, Unreal and Autodesk. They’re going to have a brand new version of Python to work with pretty soon, aren’t they?
OKKEN: I think we mentioned Python 3.7 last week, but the Python 3.70 Beta 1 is out and because it’s now Beta instead of Alpha, that means the feature set is frozen and we’re just tweaking it and making sure it’s all tight and tested. But Beta means that there are beta testers and I was just thinking that if it’s not people like you and me in our community that listen to this, who is it? So, I’m putting a call to action out there to go and pick a few of the features that are coming up and test things out. Make sure it works for you and report bugs otherwise.
KENNEDY: Yeah, and there’s definitely some cool features in there, like we talked about data classes last week, that being in there. But there’s actually a bunch of changes and it’s one of these things. Speak now or forever hold your peace. It’s going to come out in June so here’s your chance to test it.
OKKEN: I was going to take a look at the breakpoint feature and the data classes and maybe a couple of the others and give it a whirl.
KENNEDY: Nice. So, do you know if there is easy ways with things like tox and stuff, to go ahead and run your tests on Python 3.7?
OKKEN: Yeah, of course. Tox you can set up 3.7 as one of the Pythons to test everything. That’s one of the ways I’m going to test this. I’ve got to make sure there’s new versions of pytest as well and I want to make sure that all combinations of Python, all recent versions of Python and pytest, work with the demo code I have in my book and doing that manually is just too much work, so I’ll use tox for that.
KENNEDY: (Laughs) Yeah, that’s a complete nightmare. Tell people really quick, I know some people know about tox but not everyone. Tell people where does tox fit in, because I thought you were a pytest guy. What’s up with this testing with tox thing?
OKKEN: (Laughs) Well, tox is sort of like a top-level scripter thing, and I’m totally going to get it wrong, but the way I use it really, is to pick multiple configurations. You can have multiple combinations to different libraries together or configurations of your system and test them separately.
KENNEDY: Nice. So, you could say, ‘Test on PyPy and on CPython and multiple versions of either of those in a single test run,’ right? But the system will configure the interpreter or the runtime for that, right?
OKKEN: You can turn off or on all these features, by default it takes your say, a package that is a Python package and it runs its setup function to create an installable Python wheel, I think. And then it creates a virtual environment, installs your package and all of its dependencies and then runs the tests on it, and then reports on that. And then it does it again for however many different configurations you’ve got set up.
KENNEDY: So, for our final item, the one that I want to cover is similar. You were talking about a new release of Python coming out in Beta. I want to hit a whole bunch of things that were released that were pretty interesting on a couple levels.
So, first of all, I think some people use this web framework. It’s called Django. What do you think, Brian?
OKKEN: (Laughs) Yeah, quite a few.
KENNEDY: (Laughs) So, they just announced that they had a security release to fix some issues around authentication and basically, the log-in infrastructure in Django. So, if you’re using 2 or 1.11, you may want to check that out. So, there’s been like, ‘Here’s a testing thing.’ There’s been a regression. There was a problem, it was fixed, and now it’s unfixed. It’s fun when problems unfit themselves
OKKEN: So, the release is with the unfixed one?
KENNEDY: This puts the fix back.
OKKEN: Oh, okay.
KENNEDY: Two more around Python 3, One is Python 3.4, there’s a security release there. And one if Python 3.5; there’s also a security release there. So, respectively, the versions are 3.4.8 and 3.5.5. And there’s apparently some problem with this internal bit called libexpat. As far as I can tell it’s an XML parsing library and there’s some kind of issue with that. That sounds not good. People could send you bad XML and bad things happen. So, be aware and just to remind everyone, if anything like this happens in Python 2 shortly, there will be no fixes, you’re just going to have to live with it after it goes End Of Life. It’s good that they’re fixing these. I don’t know when 3.4 is going End Of Life; 3.3, I think, I now out.
Anyway, the final one – I said I have a lot of releases – is Channels. So, these are Django Channels. They’re pretty interesting in that they have an asynchronous way to write Django, websockets and these types of things. Actually, I had the guy behind this on Talk Python, I’ll like to the interview there. But this is sort of a complete rewrite. This is Channels 2.0; it’s a major rewrite. Most notably, Python 2.7, even Python 3.4 are no longer supported there. Fully Legacy Python is out, it’s 3.5 and above, that’s all it works on.
OKKEN: Okay.
KENNEDY: I suspect some of that might have to do with Django, too but it also being this async thing, maybe they used the async and await keywords and it doesn’t work in 3.4 or below. But yeah, it’s all pretty cool. A bunch of new releases so if you’re using these and want to check them out, then do.
That’s it for our news this week. Brian, what items do you have to share?
OKKEN: Well, I’ve got a couple exciting things. I had submitted five talks to PyCon and one of them was accepted.
KENNEDY: Congratulations, that’s awesome.
OKKEN: Yay. It’s a talk but I’m going to do it together with Paul Everett from the PyCharm team, so it will be PyCharm and pytest. And that will be fun.
KENNEDY: That’s going to be really fun.
OKKEN: The two of us are also going to do a webinar coming up on the 22nd of February, and similar topic but a little bit more advanced. So, we’re going to dive into how to productively and effectively use pytest in PyCharm.
KENNEDY: Oh, that is really cool. You know what I’m doing right now? I’m going to register. I’m excited. That will be really fun. And then all these, of course, get recorded afterwards. It’s typically and hour Q and A, lots of fun. But if you can’t make it live, you should still register because then you’ll get a notice that the recording is out. I suspect we’ll let people know when your recording is out. Like maybe this week I might let people know that my recording is out.
OKKEN: I registered for yours, and I didn’t watch it, but I got an email saying, ‘Hey, it’s up.’ I started watching it this morning.
KENNEDY: That’s cool. So, recently I did a webcast with a PyCharm guy as well, Paul was there as the MC of the whole experience. And what I did in mine was I said, ‘Let’s learn how to play in MongoDB from Python.’ So, let’s take PyPI and recreate the data access layer of what PyPI might look like in a document database using Mongo and Mongo Engine and stuff like that. It was lots of fun. You can go and check out that recording and we’ll link to it in the show notes. And I suspect around February 28th, you might have a similar one.
OKKEN: Just a small, toy project. Recreate PyPI.
KENNEDY: And I’m a little disappointed because I used Faker. We talked about Faker before, right? Where you can create fake data. The thing is glorious. It needs a few other features which I’m thinking of doing some PRs for to add them, but I created 100,000 fake PyPI packages and they have some kind of data. So, now what I’m working on is a system that will let me entirely download every piece of data from PyPI, the model and the database. So, for other projects I’ll have this corpus of all of PyPI.
OKKEN: Okay, so for the next few weeks if PyPI is slow, it’s your fault.
KENNEDY: Yeah, you can blame me. I’m sorry about that. (Laughs) Exactly. Or I go over my bandwidth limit or something like that.
OKKEN: It was really interesting so far, that I’ve gotten into it.
KENNEDY: Yeah, cool, thanks. Alright, well, that’s it for this week. Thank you everyone for listening. Brian, thank you for sharing this with us.
OKKEN: Alight, thank you. Talk to you next week.
KENNEDY: Bye.
Thank you for listening to Python Bytes. Follow the show on Twitter via @pythonbytes and get the full show notes at pythonbytes.fm. If you have a news item you want featured, just visit pythonbytes.fm and send it our way. We’re always on the lookout for sharing something cool. On behalf of myself and Brian Okken, this is Michael Kennedy. Thank you for listening and sharing this podcast with your friends and colleagues. <|endoftext|>
